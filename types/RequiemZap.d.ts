/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RequiemZapInterface extends ethers.utils.Interface {
  functions: {
    "RequiemPairs(address,address,uint256)": FunctionFragment;
    "WETH()": FunctionFragment;
    "addTokensResidual(address)": FunctionFragment;
    "getAmountBToZapIn(address,uint256,address)": FunctionFragment;
    "getAmountToZapOut(address,uint256,address)": FunctionFragment;
    "governance()": FunctionFragment;
    "maxResidual()": FunctionFragment;
    "requiemFactory()": FunctionFragment;
    "requiemFormula()": FunctionFragment;
    "requiemRouter()": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setMaxResidual(uint256)": FunctionFragment;
    "setRequiemPairs(address,address,address[])": FunctionFragment;
    "setTokensResidual(address[])": FunctionFragment;
    "tokensResidual(uint256)": FunctionFragment;
    "uniRouter()": FunctionFragment;
    "withdraw(address)": FunctionFragment;
    "withdrawToken(address[],address)": FunctionFragment;
    "withdrawTokenAmount(address,address,uint256)": FunctionFragment;
    "zapIn(address,uint256,uint256,bool)": FunctionFragment;
    "zapInToken(address,uint256[],address,bool)": FunctionFragment;
    "zapOut(address,uint256,address,uint256)": FunctionFragment;
    "zapOutWithPermit(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "RequiemPairs",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addTokensResidual",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountBToZapIn",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountToZapOut",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxResidual",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiemFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiemFormula",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiemRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxResidual",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequiemPairs",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokensResidual",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensResidual",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "uniRouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokenAmount",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "zapIn",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "zapInToken",
    values: [string, BigNumberish[], string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "zapOut",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "zapOutWithPermit",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "RequiemPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTokensResidual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountBToZapIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountToZapOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxResidual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiemFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiemFormula",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiemRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxResidual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequiemPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokensResidual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensResidual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uniRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zapIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapInToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zapOutWithPermit",
    data: BytesLike
  ): Result;

  events: {
    "LogGovernance(address)": EventFragment;
    "Withdraw(address,uint256,address)": EventFragment;
    "ZapIn(address,address,uint256,address,uint256)": EventFragment;
    "ZapOut(address,address,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogGovernance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZapIn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ZapOut"): EventFragment;
}

export type LogGovernanceEvent = TypedEvent<[string] & { governance: string }>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, string] & { token: string; amount: BigNumber; to: string }
>;

export type ZapInEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber] & {
    sender: string;
    from: string;
    amtFrom: BigNumber;
    pool: string;
    amtLp: BigNumber;
  }
>;

export type ZapOutEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber] & {
    sender: string;
    pool: string;
    amtLp: BigNumber;
    to: string;
    amtTo: BigNumber;
  }
>;

export class RequiemZap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RequiemZapInterface;

  functions: {
    RequiemPairs(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    addTokensResidual(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAmountBToZapIn(
      _from: string,
      _fromAmount: BigNumberish,
      lp: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountBConverted: BigNumber;
        amountASell: BigNumber;
      }
    >;

    getAmountToZapOut(
      _from: string,
      amount: BigNumberish,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountOtherSell: BigNumber;
        amountToConverted: BigNumber;
        amountToOrigin: BigNumber;
      }
    >;

    governance(overrides?: CallOverrides): Promise<[string]>;

    maxResidual(overrides?: CallOverrides): Promise<[BigNumber]>;

    requiemFactory(overrides?: CallOverrides): Promise<[string]>;

    requiemFormula(overrides?: CallOverrides): Promise<[string]>;

    requiemRouter(overrides?: CallOverrides): Promise<[string]>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxResidual(
      _maxResidual: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRequiemPairs(
      _input: string,
      _output: string,
      _pair: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokensResidual(
      _tokensResidual: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokensResidual(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    uniRouter(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      tokens: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTokenAmount(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zapIn(
      _to: string,
      _minTokenB: BigNumberish,
      _minLp: BigNumberish,
      transferResidual: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zapInToken(
      _from: string,
      amounts: BigNumberish[],
      _to: string,
      transferResidual: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zapOut(
      _from: string,
      amount: BigNumberish,
      _toToken: string,
      _minTokensRec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zapOutWithPermit(
      _from: string,
      amount: BigNumberish,
      _toToken: string,
      _minTokensRec: BigNumberish,
      _approvalAmount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  RequiemPairs(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  addTokensResidual(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAmountBToZapIn(
    _from: string,
    _fromAmount: BigNumberish,
    lp: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      amountBConverted: BigNumber;
      amountASell: BigNumber;
    }
  >;

  getAmountToZapOut(
    _from: string,
    amount: BigNumberish,
    _toToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountOtherSell: BigNumber;
      amountToConverted: BigNumber;
      amountToOrigin: BigNumber;
    }
  >;

  governance(overrides?: CallOverrides): Promise<string>;

  maxResidual(overrides?: CallOverrides): Promise<BigNumber>;

  requiemFactory(overrides?: CallOverrides): Promise<string>;

  requiemFormula(overrides?: CallOverrides): Promise<string>;

  requiemRouter(overrides?: CallOverrides): Promise<string>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxResidual(
    _maxResidual: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRequiemPairs(
    _input: string,
    _output: string,
    _pair: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokensResidual(
    _tokensResidual: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokensResidual(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  uniRouter(overrides?: CallOverrides): Promise<string>;

  withdraw(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    tokens: string[],
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTokenAmount(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zapIn(
    _to: string,
    _minTokenB: BigNumberish,
    _minLp: BigNumberish,
    transferResidual: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zapInToken(
    _from: string,
    amounts: BigNumberish[],
    _to: string,
    transferResidual: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zapOut(
    _from: string,
    amount: BigNumberish,
    _toToken: string,
    _minTokensRec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zapOutWithPermit(
    _from: string,
    amount: BigNumberish,
    _toToken: string,
    _minTokensRec: BigNumberish,
    _approvalAmount: BigNumberish,
    _deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    RequiemPairs(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    addTokensResidual(_token: string, overrides?: CallOverrides): Promise<void>;

    getAmountBToZapIn(
      _from: string,
      _fromAmount: BigNumberish,
      lp: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountBConverted: BigNumber;
        amountASell: BigNumber;
      }
    >;

    getAmountToZapOut(
      _from: string,
      amount: BigNumberish,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountOtherSell: BigNumber;
        amountToConverted: BigNumber;
        amountToOrigin: BigNumber;
      }
    >;

    governance(overrides?: CallOverrides): Promise<string>;

    maxResidual(overrides?: CallOverrides): Promise<BigNumber>;

    requiemFactory(overrides?: CallOverrides): Promise<string>;

    requiemFormula(overrides?: CallOverrides): Promise<string>;

    requiemRouter(overrides?: CallOverrides): Promise<string>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxResidual(
      _maxResidual: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequiemPairs(
      _input: string,
      _output: string,
      _pair: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTokensResidual(
      _tokensResidual: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    tokensResidual(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    uniRouter(overrides?: CallOverrides): Promise<string>;

    withdraw(to: string, overrides?: CallOverrides): Promise<void>;

    withdrawToken(
      tokens: string[],
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokenAmount(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    zapIn(
      _to: string,
      _minTokenB: BigNumberish,
      _minLp: BigNumberish,
      transferResidual: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zapInToken(
      _from: string,
      amounts: BigNumberish[],
      _to: string,
      transferResidual: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zapOut(
      _from: string,
      amount: BigNumberish,
      _toToken: string,
      _minTokensRec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zapOutWithPermit(
      _from: string,
      amount: BigNumberish,
      _toToken: string,
      _minTokensRec: BigNumberish,
      _approvalAmount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "LogGovernance(address)"(
      governance?: null
    ): TypedEventFilter<[string], { governance: string }>;

    LogGovernance(
      governance?: null
    ): TypedEventFilter<[string], { governance: string }>;

    "Withdraw(address,uint256,address)"(
      token?: string | null,
      amount?: null,
      to?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { token: string; amount: BigNumber; to: string }
    >;

    Withdraw(
      token?: string | null,
      amount?: null,
      to?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { token: string; amount: BigNumber; to: string }
    >;

    "ZapIn(address,address,uint256,address,uint256)"(
      sender?: string | null,
      from?: null,
      amtFrom?: null,
      pool?: null,
      amtLp?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        sender: string;
        from: string;
        amtFrom: BigNumber;
        pool: string;
        amtLp: BigNumber;
      }
    >;

    ZapIn(
      sender?: string | null,
      from?: null,
      amtFrom?: null,
      pool?: null,
      amtLp?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        sender: string;
        from: string;
        amtFrom: BigNumber;
        pool: string;
        amtLp: BigNumber;
      }
    >;

    "ZapOut(address,address,uint256,address,uint256)"(
      sender?: string | null,
      pool?: null,
      amtLp?: null,
      to?: null,
      amtTo?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        sender: string;
        pool: string;
        amtLp: BigNumber;
        to: string;
        amtTo: BigNumber;
      }
    >;

    ZapOut(
      sender?: string | null,
      pool?: null,
      amtLp?: null,
      to?: null,
      amtTo?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        sender: string;
        pool: string;
        amtLp: BigNumber;
        to: string;
        amtTo: BigNumber;
      }
    >;
  };

  estimateGas: {
    RequiemPairs(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    addTokensResidual(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAmountBToZapIn(
      _from: string,
      _fromAmount: BigNumberish,
      lp: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountToZapOut(
      _from: string,
      amount: BigNumberish,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    maxResidual(overrides?: CallOverrides): Promise<BigNumber>;

    requiemFactory(overrides?: CallOverrides): Promise<BigNumber>;

    requiemFormula(overrides?: CallOverrides): Promise<BigNumber>;

    requiemRouter(overrides?: CallOverrides): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxResidual(
      _maxResidual: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRequiemPairs(
      _input: string,
      _output: string,
      _pair: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokensResidual(
      _tokensResidual: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokensResidual(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniRouter(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      tokens: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTokenAmount(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zapIn(
      _to: string,
      _minTokenB: BigNumberish,
      _minLp: BigNumberish,
      transferResidual: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zapInToken(
      _from: string,
      amounts: BigNumberish[],
      _to: string,
      transferResidual: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zapOut(
      _from: string,
      amount: BigNumberish,
      _toToken: string,
      _minTokensRec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zapOutWithPermit(
      _from: string,
      amount: BigNumberish,
      _toToken: string,
      _minTokensRec: BigNumberish,
      _approvalAmount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RequiemPairs(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTokensResidual(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAmountBToZapIn(
      _from: string,
      _fromAmount: BigNumberish,
      lp: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountToZapOut(
      _from: string,
      amount: BigNumberish,
      _toToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxResidual(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requiemFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requiemFormula(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requiemRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxResidual(
      _maxResidual: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRequiemPairs(
      _input: string,
      _output: string,
      _pair: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokensResidual(
      _tokensResidual: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokensResidual(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      tokens: string[],
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokenAmount(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zapIn(
      _to: string,
      _minTokenB: BigNumberish,
      _minLp: BigNumberish,
      transferResidual: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zapInToken(
      _from: string,
      amounts: BigNumberish[],
      _to: string,
      transferResidual: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zapOut(
      _from: string,
      amount: BigNumberish,
      _toToken: string,
      _minTokensRec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zapOutWithPermit(
      _from: string,
      amount: BigNumberish,
      _toToken: string,
      _minTokensRec: BigNumberish,
      _approvalAmount: BigNumberish,
      _deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
