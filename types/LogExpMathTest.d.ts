/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LogExpMathTestInterface extends ethers.utils.Interface {
  functions: {
    "_ln(int256)": FunctionFragment;
    "_ln_36(int256)": FunctionFragment;
    "exp(int256)": FunctionFragment;
    "ln(int256)": FunctionFragment;
    "log(int256,int256)": FunctionFragment;
    "pow(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_ln", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "_ln_36",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exp", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "ln", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "log",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pow",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_ln", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_ln_36", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ln", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "log", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pow", data: BytesLike): Result;

  events: {};
}

export class LogExpMathTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LogExpMathTestInterface;

  functions: {
    _ln(a: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    _ln_36(x: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    exp(x: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    ln(a: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    log(
      arg: BigNumberish,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pow(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  _ln(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  _ln_36(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  exp(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  ln(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  log(
    arg: BigNumberish,
    base: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pow(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    _ln(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    _ln_36(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    exp(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ln(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    log(
      arg: BigNumberish,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pow(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    _ln(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    _ln_36(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    exp(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ln(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    log(
      arg: BigNumberish,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pow(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _ln(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _ln_36(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exp(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ln(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    log(
      arg: BigNumberish,
      base: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pow(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
