/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface WeightedPoolInterface extends ethers.utils.Interface {
  functions: {
    "POOL_TOKEN_COMMON_DECIMALS()": FunctionFragment;
    "addLiquidityExactIn(uint256[],uint256,uint256)": FunctionFragment;
    "calculateRemoveLiquidityExactIn(uint256)": FunctionFragment;
    "calculateRemoveLiquidityOneToken(uint256,uint256)": FunctionFragment;
    "calculateSwapGivenIn(address,address,uint256)": FunctionFragment;
    "calculateSwapGivenOut(address,address,uint256)": FunctionFragment;
    "calculateTokenAmount(uint256[],bool)": FunctionFragment;
    "feeController()": FunctionFragment;
    "feeDistributor()": FunctionFragment;
    "flashLoan(address,uint256[],bytes)": FunctionFragment;
    "getCollectedFees()": FunctionFragment;
    "getPooledTokens()": FunctionFragment;
    "getStaticDataTokens()": FunctionFragment;
    "getTokenBalances()": FunctionFragment;
    "getTokenMultipliers()": FunctionFragment;
    "getTokenWeights()": FunctionFragment;
    "initialize(address[],uint8[],uint256[],uint256[],string,string,uint256,uint256,uint256,address)": FunctionFragment;
    "onSwapGivenIn(address,address,uint256,address)": FunctionFragment;
    "onSwapGivenOut(address,address,uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeLiquidityExactIn(uint256,uint256[],uint256)": FunctionFragment;
    "removeLiquidityExactOut(uint256[],uint256,uint256)": FunctionFragment;
    "removeLiquidityOneToken(uint256,uint8,uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFee(uint256,uint256,uint256)": FunctionFragment;
    "setFeeControllerAndDistributor(address,address)": FunctionFragment;
    "swapStorage()": FunctionFragment;
    "tokenIndexes(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdrawAdminFee()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "POOL_TOKEN_COMMON_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityExactIn",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRemoveLiquidityExactIn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRemoveLiquidityOneToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSwapGivenIn",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSwapGivenOut",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTokenAmount",
    values: [BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "feeController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [string, BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectedFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPooledTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStaticDataTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMultipliers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenWeights",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onSwapGivenIn",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "onSwapGivenOut",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityExactIn",
    values: [BigNumberish, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityExactOut",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityOneToken",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeControllerAndDistributor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIndexes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawAdminFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "POOL_TOKEN_COMMON_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRemoveLiquidityExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRemoveLiquidityOneToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSwapGivenIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSwapGivenOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCollectedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPooledTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStaticDataTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onSwapGivenIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onSwapGivenOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityOneToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeControllerAndDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAdminFee",
    data: BytesLike
  ): Result;

  events: {
    "AddLiquidity(address,uint256[],uint256,uint256)": EventFragment;
    "FeeControllerChanged(address)": EventFragment;
    "FeeDistributorChanged(address)": EventFragment;
    "FlashLoan(address,uint256[],uint256[])": EventFragment;
    "NewFee(uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RemoveLiquidity(address,uint256[],uint256)": EventFragment;
    "RemoveLiquidityImbalance(address,uint256[],uint256,uint256)": EventFragment;
    "RemoveLiquidityOne(address,uint256,uint256,uint256)": EventFragment;
    "TokenExchange(address,address,uint256,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeControllerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeDistributorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidityImbalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidityOne"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenExchange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type AddLiquidityEvent = TypedEvent<
  [string, BigNumber[], BigNumber, BigNumber] & {
    provider: string;
    tokenAmounts: BigNumber[];
    invariant: BigNumber;
    tokenSupply: BigNumber;
  }
>;

export type FeeControllerChangedEvent = TypedEvent<
  [string] & { newController: string }
>;

export type FeeDistributorChangedEvent = TypedEvent<
  [string] & { newController: string }
>;

export type FlashLoanEvent = TypedEvent<
  [string, BigNumber[], BigNumber[]] & {
    recipient: string;
    amounts: BigNumber[];
    feeAmounts: BigNumber[];
  }
>;

export type NewFeeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    fee: BigNumber;
    adminFee: BigNumber;
    withdrawFee: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RemoveLiquidityEvent = TypedEvent<
  [string, BigNumber[], BigNumber] & {
    provider: string;
    tokenAmounts: BigNumber[];
    tokenSupply: BigNumber;
  }
>;

export type RemoveLiquidityImbalanceEvent = TypedEvent<
  [string, BigNumber[], BigNumber, BigNumber] & {
    provider: string;
    tokenAmounts: BigNumber[];
    invariant: BigNumber;
    tokenSupply: BigNumber;
  }
>;

export type RemoveLiquidityOneEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    provider: string;
    tokenIndex: BigNumber;
    tokenAmount: BigNumber;
    coinAmount: BigNumber;
  }
>;

export type TokenExchangeEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber] & {
    buyer: string;
    soldId: string;
    tokensSold: BigNumber;
    boughtId: string;
    tokensBought: BigNumber;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class WeightedPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WeightedPoolInterface;

  functions: {
    POOL_TOKEN_COMMON_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addLiquidityExactIn(
      amounts: BigNumberish[],
      minMintAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateRemoveLiquidityExactIn(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    calculateRemoveLiquidityOneToken(
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; fee: BigNumber }
    >;

    calculateSwapGivenIn(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSwapGivenOut(
      tokenIn: string,
      tokenOut: string,
      amountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateTokenAmount(
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { burnAmount: BigNumber }>;

    feeController(overrides?: CallOverrides): Promise<[string]>;

    feeDistributor(overrides?: CallOverrides): Promise<[string]>;

    flashLoan(
      recipient: string,
      amounts: BigNumberish[],
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCollectedFees(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getPooledTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getStaticDataTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getTokenBalances(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getTokenMultipliers(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getTokenWeights(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    initialize(
      _coins: string[],
      _decimals: BigNumberish[],
      _normalizedWeights: BigNumberish[],
      _amounts: BigNumberish[],
      lpTokenName: string,
      lpTokenSymbol: string,
      _fee: BigNumberish,
      _flashFee: BigNumberish,
      _adminFee: BigNumberish,
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onSwapGivenIn(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onSwapGivenOut(
      tokenIn: string,
      tokenOut: string,
      amountOut: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeLiquidityExactIn(
      lpAmount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityExactOut(
      amounts: BigNumberish[],
      maxLpBurn: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityOneToken(
      lpAmount: BigNumberish,
      index: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      newSwapFee: BigNumberish,
      newAdminFee: BigNumberish,
      newFlashFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeControllerAndDistributor(
      _feeController: string,
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapStorage(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        nTokens: BigNumber;
        lastInvariant: BigNumber;
        fee: BigNumber;
        flashFee: BigNumber;
        adminFee: BigNumber;
      }
    >;

    tokenIndexes(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAdminFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  POOL_TOKEN_COMMON_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  addLiquidityExactIn(
    amounts: BigNumberish[],
    minMintAmount: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateRemoveLiquidityExactIn(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  calculateRemoveLiquidityOneToken(
    amount: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { amountOut: BigNumber; fee: BigNumber }>;

  calculateSwapGivenIn(
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSwapGivenOut(
    tokenIn: string,
    tokenOut: string,
    amountOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTokenAmount(
    amounts: BigNumberish[],
    deposit: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feeController(overrides?: CallOverrides): Promise<string>;

  feeDistributor(overrides?: CallOverrides): Promise<string>;

  flashLoan(
    recipient: string,
    amounts: BigNumberish[],
    userData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCollectedFees(overrides?: CallOverrides): Promise<BigNumber[]>;

  getPooledTokens(overrides?: CallOverrides): Promise<string[]>;

  getStaticDataTokens(overrides?: CallOverrides): Promise<string[]>;

  getTokenBalances(overrides?: CallOverrides): Promise<BigNumber[]>;

  getTokenMultipliers(overrides?: CallOverrides): Promise<BigNumber[]>;

  getTokenWeights(overrides?: CallOverrides): Promise<BigNumber[]>;

  initialize(
    _coins: string[],
    _decimals: BigNumberish[],
    _normalizedWeights: BigNumberish[],
    _amounts: BigNumberish[],
    lpTokenName: string,
    lpTokenSymbol: string,
    _fee: BigNumberish,
    _flashFee: BigNumberish,
    _adminFee: BigNumberish,
    _feeDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onSwapGivenIn(
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onSwapGivenOut(
    tokenIn: string,
    tokenOut: string,
    amountOut: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeLiquidityExactIn(
    lpAmount: BigNumberish,
    minAmounts: BigNumberish[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityExactOut(
    amounts: BigNumberish[],
    maxLpBurn: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityOneToken(
    lpAmount: BigNumberish,
    index: BigNumberish,
    minAmount: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    newSwapFee: BigNumberish,
    newAdminFee: BigNumberish,
    newFlashFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeControllerAndDistributor(
    _feeController: string,
    _feeDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapStorage(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      lpToken: string;
      nTokens: BigNumber;
      lastInvariant: BigNumber;
      fee: BigNumber;
      flashFee: BigNumber;
      adminFee: BigNumber;
    }
  >;

  tokenIndexes(arg0: string, overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAdminFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    POOL_TOKEN_COMMON_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidityExactIn(
      amounts: BigNumberish[],
      minMintAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRemoveLiquidityExactIn(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    calculateRemoveLiquidityOneToken(
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; fee: BigNumber }
    >;

    calculateSwapGivenIn(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwapGivenOut(
      tokenIn: string,
      tokenOut: string,
      amountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokenAmount(
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeController(overrides?: CallOverrides): Promise<string>;

    feeDistributor(overrides?: CallOverrides): Promise<string>;

    flashLoan(
      recipient: string,
      amounts: BigNumberish[],
      userData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getCollectedFees(overrides?: CallOverrides): Promise<BigNumber[]>;

    getPooledTokens(overrides?: CallOverrides): Promise<string[]>;

    getStaticDataTokens(overrides?: CallOverrides): Promise<string[]>;

    getTokenBalances(overrides?: CallOverrides): Promise<BigNumber[]>;

    getTokenMultipliers(overrides?: CallOverrides): Promise<BigNumber[]>;

    getTokenWeights(overrides?: CallOverrides): Promise<BigNumber[]>;

    initialize(
      _coins: string[],
      _decimals: BigNumberish[],
      _normalizedWeights: BigNumberish[],
      _amounts: BigNumberish[],
      lpTokenName: string,
      lpTokenSymbol: string,
      _fee: BigNumberish,
      _flashFee: BigNumberish,
      _adminFee: BigNumberish,
      _feeDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    onSwapGivenIn(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onSwapGivenOut(
      tokenIn: string,
      tokenOut: string,
      amountOut: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeLiquidityExactIn(
      lpAmount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    removeLiquidityExactOut(
      amounts: BigNumberish[],
      maxLpBurn: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityOneToken(
      lpAmount: BigNumberish,
      index: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFee(
      newSwapFee: BigNumberish,
      newAdminFee: BigNumberish,
      newFlashFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeControllerAndDistributor(
      _feeController: string,
      _feeDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapStorage(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        nTokens: BigNumber;
        lastInvariant: BigNumber;
        fee: BigNumber;
        flashFee: BigNumber;
        adminFee: BigNumber;
      }
    >;

    tokenIndexes(arg0: string, overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdrawAdminFee(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddLiquidity(address,uint256[],uint256,uint256)"(
      provider?: string | null,
      tokenAmounts?: null,
      invariant?: null,
      tokenSupply?: null
    ): TypedEventFilter<
      [string, BigNumber[], BigNumber, BigNumber],
      {
        provider: string;
        tokenAmounts: BigNumber[];
        invariant: BigNumber;
        tokenSupply: BigNumber;
      }
    >;

    AddLiquidity(
      provider?: string | null,
      tokenAmounts?: null,
      invariant?: null,
      tokenSupply?: null
    ): TypedEventFilter<
      [string, BigNumber[], BigNumber, BigNumber],
      {
        provider: string;
        tokenAmounts: BigNumber[];
        invariant: BigNumber;
        tokenSupply: BigNumber;
      }
    >;

    "FeeControllerChanged(address)"(
      newController?: null
    ): TypedEventFilter<[string], { newController: string }>;

    FeeControllerChanged(
      newController?: null
    ): TypedEventFilter<[string], { newController: string }>;

    "FeeDistributorChanged(address)"(
      newController?: null
    ): TypedEventFilter<[string], { newController: string }>;

    FeeDistributorChanged(
      newController?: null
    ): TypedEventFilter<[string], { newController: string }>;

    "FlashLoan(address,uint256[],uint256[])"(
      recipient?: null,
      amounts?: null,
      feeAmounts?: null
    ): TypedEventFilter<
      [string, BigNumber[], BigNumber[]],
      { recipient: string; amounts: BigNumber[]; feeAmounts: BigNumber[] }
    >;

    FlashLoan(
      recipient?: null,
      amounts?: null,
      feeAmounts?: null
    ): TypedEventFilter<
      [string, BigNumber[], BigNumber[]],
      { recipient: string; amounts: BigNumber[]; feeAmounts: BigNumber[] }
    >;

    "NewFee(uint256,uint256,uint256)"(
      fee?: null,
      adminFee?: null,
      withdrawFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { fee: BigNumber; adminFee: BigNumber; withdrawFee: BigNumber }
    >;

    NewFee(
      fee?: null,
      adminFee?: null,
      withdrawFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { fee: BigNumber; adminFee: BigNumber; withdrawFee: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "RemoveLiquidity(address,uint256[],uint256)"(
      provider?: string | null,
      tokenAmounts?: null,
      tokenSupply?: null
    ): TypedEventFilter<
      [string, BigNumber[], BigNumber],
      { provider: string; tokenAmounts: BigNumber[]; tokenSupply: BigNumber }
    >;

    RemoveLiquidity(
      provider?: string | null,
      tokenAmounts?: null,
      tokenSupply?: null
    ): TypedEventFilter<
      [string, BigNumber[], BigNumber],
      { provider: string; tokenAmounts: BigNumber[]; tokenSupply: BigNumber }
    >;

    "RemoveLiquidityImbalance(address,uint256[],uint256,uint256)"(
      provider?: string | null,
      tokenAmounts?: null,
      invariant?: null,
      tokenSupply?: null
    ): TypedEventFilter<
      [string, BigNumber[], BigNumber, BigNumber],
      {
        provider: string;
        tokenAmounts: BigNumber[];
        invariant: BigNumber;
        tokenSupply: BigNumber;
      }
    >;

    RemoveLiquidityImbalance(
      provider?: string | null,
      tokenAmounts?: null,
      invariant?: null,
      tokenSupply?: null
    ): TypedEventFilter<
      [string, BigNumber[], BigNumber, BigNumber],
      {
        provider: string;
        tokenAmounts: BigNumber[];
        invariant: BigNumber;
        tokenSupply: BigNumber;
      }
    >;

    "RemoveLiquidityOne(address,uint256,uint256,uint256)"(
      provider?: string | null,
      tokenIndex?: null,
      tokenAmount?: null,
      coinAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        provider: string;
        tokenIndex: BigNumber;
        tokenAmount: BigNumber;
        coinAmount: BigNumber;
      }
    >;

    RemoveLiquidityOne(
      provider?: string | null,
      tokenIndex?: null,
      tokenAmount?: null,
      coinAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        provider: string;
        tokenIndex: BigNumber;
        tokenAmount: BigNumber;
        coinAmount: BigNumber;
      }
    >;

    "TokenExchange(address,address,uint256,address,uint256)"(
      buyer?: string | null,
      soldId?: null,
      tokensSold?: null,
      boughtId?: null,
      tokensBought?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        buyer: string;
        soldId: string;
        tokensSold: BigNumber;
        boughtId: string;
        tokensBought: BigNumber;
      }
    >;

    TokenExchange(
      buyer?: string | null,
      soldId?: null,
      tokensSold?: null,
      boughtId?: null,
      tokensBought?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber],
      {
        buyer: string;
        soldId: string;
        tokensSold: BigNumber;
        boughtId: string;
        tokensBought: BigNumber;
      }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    POOL_TOKEN_COMMON_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidityExactIn(
      amounts: BigNumberish[],
      minMintAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateRemoveLiquidityExactIn(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRemoveLiquidityOneToken(
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwapGivenIn(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwapGivenOut(
      tokenIn: string,
      tokenOut: string,
      amountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokenAmount(
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeController(overrides?: CallOverrides): Promise<BigNumber>;

    feeDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    flashLoan(
      recipient: string,
      amounts: BigNumberish[],
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCollectedFees(overrides?: CallOverrides): Promise<BigNumber>;

    getPooledTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getStaticDataTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenBalances(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenMultipliers(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenWeights(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _coins: string[],
      _decimals: BigNumberish[],
      _normalizedWeights: BigNumberish[],
      _amounts: BigNumberish[],
      lpTokenName: string,
      lpTokenSymbol: string,
      _fee: BigNumberish,
      _flashFee: BigNumberish,
      _adminFee: BigNumberish,
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onSwapGivenIn(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onSwapGivenOut(
      tokenIn: string,
      tokenOut: string,
      amountOut: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidityExactIn(
      lpAmount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityExactOut(
      amounts: BigNumberish[],
      maxLpBurn: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityOneToken(
      lpAmount: BigNumberish,
      index: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      newSwapFee: BigNumberish,
      newAdminFee: BigNumberish,
      newFlashFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeControllerAndDistributor(
      _feeController: string,
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapStorage(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIndexes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAdminFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    POOL_TOKEN_COMMON_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidityExactIn(
      amounts: BigNumberish[],
      minMintAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateRemoveLiquidityExactIn(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRemoveLiquidityOneToken(
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSwapGivenIn(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSwapGivenOut(
      tokenIn: string,
      tokenOut: string,
      amountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTokenAmount(
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashLoan(
      recipient: string,
      amounts: BigNumberish[],
      userData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCollectedFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPooledTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStaticDataTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenMultipliers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenWeights(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _coins: string[],
      _decimals: BigNumberish[],
      _normalizedWeights: BigNumberish[],
      _amounts: BigNumberish[],
      lpTokenName: string,
      lpTokenSymbol: string,
      _fee: BigNumberish,
      _flashFee: BigNumberish,
      _adminFee: BigNumberish,
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onSwapGivenIn(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onSwapGivenOut(
      tokenIn: string,
      tokenOut: string,
      amountOut: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidityExactIn(
      lpAmount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityExactOut(
      amounts: BigNumberish[],
      maxLpBurn: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityOneToken(
      lpAmount: BigNumberish,
      index: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      newSwapFee: BigNumberish,
      newAdminFee: BigNumberish,
      newFlashFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeControllerAndDistributor(
      _feeController: string,
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIndexes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAdminFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
