/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StakePoolControllerInterface extends ethers.utils.Interface {
  functions: {
    "_stakePoolVerifiers(address)": FunctionFragment;
    "addStakePoolCreator(address)": FunctionFragment;
    "allStakePools(uint256)": FunctionFragment;
    "allStakePoolsLength()": FunctionFragment;
    "allowEmergencyWithdrawStakePools(address)": FunctionFragment;
    "create(uint256,address,address,uint256,uint256,bytes)": FunctionFragment;
    "enableWhitelistRewardMultiplier()": FunctionFragment;
    "enableWhitelistRewardRebaser()": FunctionFragment;
    "extraFeeRate()": FunctionFragment;
    "feeAmount()": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "feeToken()": FunctionFragment;
    "getCreationFee(address)": FunctionFragment;
    "governance()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isAllowEmergencyWithdrawStakePool(address)": FunctionFragment;
    "isStakePool(address)": FunctionFragment;
    "isStakePoolVerifier(address)": FunctionFragment;
    "isWhitelistRewardMultiplier(address)": FunctionFragment;
    "isWhitelistRewardRebaser(address)": FunctionFragment;
    "isWhitelistStakePool(address)": FunctionFragment;
    "isWhitelistStakingFor(address)": FunctionFragment;
    "setAllowEmergencyWithdrawStakePool(address,bool)": FunctionFragment;
    "setEnableWhitelistRewardMultiplier(bool)": FunctionFragment;
    "setEnableWhitelistRewardRebaser(bool)": FunctionFragment;
    "setExtraFeeRate(uint256)": FunctionFragment;
    "setFeeAmount(uint256)": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "setFeeToken(address)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setStakePoolVerifier(address,bool)": FunctionFragment;
    "setWhitelistRewardMultiplier(address,bool)": FunctionFragment;
    "setWhitelistRewardRebaser(address,bool)": FunctionFragment;
    "setWhitelistStakePool(address,int8)": FunctionFragment;
    "setWhitelistStakingFor(address,bool)": FunctionFragment;
    "stakePoolCreators(uint256)": FunctionFragment;
    "swapFactory()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_stakePoolVerifiers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addStakePoolCreator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allStakePools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allStakePoolsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowEmergencyWithdrawStakePools",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "enableWhitelistRewardMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableWhitelistRewardRebaser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeAmount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCreationFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAllowEmergencyWithdrawStakePool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isStakePool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isStakePoolVerifier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistRewardMultiplier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistRewardRebaser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistStakePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistStakingFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowEmergencyWithdrawStakePool",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnableWhitelistRewardMultiplier",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnableWhitelistRewardRebaser",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setExtraFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setFeeToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakePoolVerifier",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistRewardMultiplier",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistRewardRebaser",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistStakePool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistStakingFor",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stakePoolCreators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_stakePoolVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStakePoolCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allStakePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allStakePoolsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowEmergencyWithdrawStakePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enableWhitelistRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableWhitelistRewardRebaser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowEmergencyWithdrawStakePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStakePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStakePoolVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistRewardRebaser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistStakePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistStakingFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowEmergencyWithdrawStakePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnableWhitelistRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnableWhitelistRewardRebaser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExtraFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakePoolVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistRewardMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistRewardRebaser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistStakePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistStakingFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakePoolCreators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFactory",
    data: BytesLike
  ): Result;

  events: {
    "ChangeGovernance(address)": EventFragment;
    "MasterCreated(address,address,uint256,address,address,uint256)": EventFragment;
    "SetExtraFeeRate(uint256)": EventFragment;
    "SetFeeAmount(uint256)": EventFragment;
    "SetFeeCollector(address)": EventFragment;
    "SetFeeToken(address)": EventFragment;
    "SetStakePoolCreator(address,uint256)": EventFragment;
    "SetStakePoolVerifier(address,bool)": EventFragment;
    "SetWhitelistRewardMultiplier(address,bool)": EventFragment;
    "SetWhitelistRewardRebaser(address,bool)": EventFragment;
    "SetWhitelistStakePool(address,int8)": EventFragment;
    "SetWhitelistStakingFor(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeGovernance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MasterCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetExtraFeeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeCollector"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStakePoolCreator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStakePoolVerifier"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetWhitelistRewardMultiplier"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWhitelistRewardRebaser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWhitelistStakePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWhitelistStakingFor"): EventFragment;
}

export type ChangeGovernanceEvent = TypedEvent<
  [string] & { governance: string }
>;

export type MasterCreatedEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber] & {
    farm: string;
    stakeToken: string;
    version: BigNumber;
    timelock: string;
    stakePoolRewardFund: string;
    totalStakePool: BigNumber;
  }
>;

export type SetExtraFeeRateEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export type SetFeeAmountEvent = TypedEvent<[BigNumber] & { amount: BigNumber }>;

export type SetFeeCollectorEvent = TypedEvent<
  [string] & { feeCollector: string }
>;

export type SetFeeTokenEvent = TypedEvent<[string] & { token: string }>;

export type SetStakePoolCreatorEvent = TypedEvent<
  [string, BigNumber] & { contractAddress: string; verion: BigNumber }
>;

export type SetStakePoolVerifierEvent = TypedEvent<
  [string, boolean] & { contractAddress: string; value: boolean }
>;

export type SetWhitelistRewardMultiplierEvent = TypedEvent<
  [string, boolean] & { contractAddress: string; value: boolean }
>;

export type SetWhitelistRewardRebaserEvent = TypedEvent<
  [string, boolean] & { contractAddress: string; value: boolean }
>;

export type SetWhitelistStakePoolEvent = TypedEvent<
  [string, number] & { contractAddress: string; value: number }
>;

export type SetWhitelistStakingForEvent = TypedEvent<
  [string, boolean] & { contractAddress: string; value: boolean }
>;

export class StakePoolController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakePoolControllerInterface;

  functions: {
    _stakePoolVerifiers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addStakePoolCreator(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allStakePools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allStakePoolsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowEmergencyWithdrawStakePools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    create(
      version: BigNumberish,
      stakeToken: string,
      rewardToken: string,
      rewardFundAmount: BigNumberish,
      delayTimeLock: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableWhitelistRewardMultiplier(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    enableWhitelistRewardRebaser(overrides?: CallOverrides): Promise<[boolean]>;

    extraFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    feeToken(overrides?: CallOverrides): Promise<[string]>;

    getCreationFee(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _swapFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAllowEmergencyWithdrawStakePool(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isStakePool(b: string, overrides?: CallOverrides): Promise<[boolean]>;

    isStakePoolVerifier(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistRewardMultiplier(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistRewardRebaser(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistStakePool(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    isWhitelistStakingFor(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setAllowEmergencyWithdrawStakePool(
      _address: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnableWhitelistRewardMultiplier(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnableWhitelistRewardRebaser(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExtraFeeRate(
      _extraFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeAmount(
      _feeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeCollector(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakePoolVerifier(
      _address: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistRewardMultiplier(
      _address: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistRewardRebaser(
      _address: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistStakePool(
      _address: string,
      state: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistStakingFor(
      _address: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakePoolCreators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    swapFactory(overrides?: CallOverrides): Promise<[string]>;
  };

  _stakePoolVerifiers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addStakePoolCreator(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allStakePools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  allStakePoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

  allowEmergencyWithdrawStakePools(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  create(
    version: BigNumberish,
    stakeToken: string,
    rewardToken: string,
    rewardFundAmount: BigNumberish,
    delayTimeLock: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableWhitelistRewardMultiplier(overrides?: CallOverrides): Promise<boolean>;

  enableWhitelistRewardRebaser(overrides?: CallOverrides): Promise<boolean>;

  extraFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  feeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  feeToken(overrides?: CallOverrides): Promise<string>;

  getCreationFee(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  initialize(
    _swapFactory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAllowEmergencyWithdrawStakePool(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isStakePool(b: string, overrides?: CallOverrides): Promise<boolean>;

  isStakePoolVerifier(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistRewardMultiplier(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistRewardRebaser(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistStakePool(
    _address: string,
    overrides?: CallOverrides
  ): Promise<number>;

  isWhitelistStakingFor(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setAllowEmergencyWithdrawStakePool(
    _address: string,
    state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnableWhitelistRewardMultiplier(
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnableWhitelistRewardRebaser(
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExtraFeeRate(
    _extraFeeRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeAmount(
    _feeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeCollector(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakePoolVerifier(
    _address: string,
    state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistRewardMultiplier(
    _address: string,
    state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistRewardRebaser(
    _address: string,
    state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistStakePool(
    _address: string,
    state: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistStakingFor(
    _address: string,
    state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakePoolCreators(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  swapFactory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _stakePoolVerifiers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addStakePoolCreator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allStakePools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allStakePoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    allowEmergencyWithdrawStakePools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    create(
      version: BigNumberish,
      stakeToken: string,
      rewardToken: string,
      rewardFundAmount: BigNumberish,
      delayTimeLock: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    enableWhitelistRewardMultiplier(
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableWhitelistRewardRebaser(overrides?: CallOverrides): Promise<boolean>;

    extraFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    feeToken(overrides?: CallOverrides): Promise<string>;

    getCreationFee(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    initialize(_swapFactory: string, overrides?: CallOverrides): Promise<void>;

    isAllowEmergencyWithdrawStakePool(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isStakePool(b: string, overrides?: CallOverrides): Promise<boolean>;

    isStakePoolVerifier(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistRewardMultiplier(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistRewardRebaser(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistStakePool(
      _address: string,
      overrides?: CallOverrides
    ): Promise<number>;

    isWhitelistStakingFor(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAllowEmergencyWithdrawStakePool(
      _address: string,
      state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnableWhitelistRewardMultiplier(
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnableWhitelistRewardRebaser(
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setExtraFeeRate(
      _extraFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeAmount(
      _feeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeCollector(_address: string, overrides?: CallOverrides): Promise<void>;

    setFeeToken(_token: string, overrides?: CallOverrides): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakePoolVerifier(
      _address: string,
      state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistRewardMultiplier(
      _address: string,
      state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistRewardRebaser(
      _address: string,
      state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistStakePool(
      _address: string,
      state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistStakingFor(
      _address: string,
      state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stakePoolCreators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    swapFactory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ChangeGovernance(address)"(
      governance?: string | null
    ): TypedEventFilter<[string], { governance: string }>;

    ChangeGovernance(
      governance?: string | null
    ): TypedEventFilter<[string], { governance: string }>;

    "MasterCreated(address,address,uint256,address,address,uint256)"(
      farm?: string | null,
      stakeToken?: string | null,
      version?: null,
      timelock?: null,
      stakePoolRewardFund?: null,
      totalStakePool?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, BigNumber],
      {
        farm: string;
        stakeToken: string;
        version: BigNumber;
        timelock: string;
        stakePoolRewardFund: string;
        totalStakePool: BigNumber;
      }
    >;

    MasterCreated(
      farm?: string | null,
      stakeToken?: string | null,
      version?: null,
      timelock?: null,
      stakePoolRewardFund?: null,
      totalStakePool?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, BigNumber],
      {
        farm: string;
        stakeToken: string;
        version: BigNumber;
        timelock: string;
        stakePoolRewardFund: string;
        totalStakePool: BigNumber;
      }
    >;

    "SetExtraFeeRate(uint256)"(
      amount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    SetExtraFeeRate(
      amount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "SetFeeAmount(uint256)"(
      amount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    SetFeeAmount(
      amount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "SetFeeCollector(address)"(
      feeCollector?: string | null
    ): TypedEventFilter<[string], { feeCollector: string }>;

    SetFeeCollector(
      feeCollector?: string | null
    ): TypedEventFilter<[string], { feeCollector: string }>;

    "SetFeeToken(address)"(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    SetFeeToken(
      token?: string | null
    ): TypedEventFilter<[string], { token: string }>;

    "SetStakePoolCreator(address,uint256)"(
      contractAddress?: string | null,
      verion?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { contractAddress: string; verion: BigNumber }
    >;

    SetStakePoolCreator(
      contractAddress?: string | null,
      verion?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { contractAddress: string; verion: BigNumber }
    >;

    "SetStakePoolVerifier(address,bool)"(
      contractAddress?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, boolean],
      { contractAddress: string; value: boolean }
    >;

    SetStakePoolVerifier(
      contractAddress?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, boolean],
      { contractAddress: string; value: boolean }
    >;

    "SetWhitelistRewardMultiplier(address,bool)"(
      contractAddress?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, boolean],
      { contractAddress: string; value: boolean }
    >;

    SetWhitelistRewardMultiplier(
      contractAddress?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, boolean],
      { contractAddress: string; value: boolean }
    >;

    "SetWhitelistRewardRebaser(address,bool)"(
      contractAddress?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, boolean],
      { contractAddress: string; value: boolean }
    >;

    SetWhitelistRewardRebaser(
      contractAddress?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, boolean],
      { contractAddress: string; value: boolean }
    >;

    "SetWhitelistStakePool(address,int8)"(
      contractAddress?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, number],
      { contractAddress: string; value: number }
    >;

    SetWhitelistStakePool(
      contractAddress?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, number],
      { contractAddress: string; value: number }
    >;

    "SetWhitelistStakingFor(address,bool)"(
      contractAddress?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, boolean],
      { contractAddress: string; value: boolean }
    >;

    SetWhitelistStakingFor(
      contractAddress?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, boolean],
      { contractAddress: string; value: boolean }
    >;
  };

  estimateGas: {
    _stakePoolVerifiers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addStakePoolCreator(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allStakePools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allStakePoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    allowEmergencyWithdrawStakePools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      version: BigNumberish,
      stakeToken: string,
      rewardToken: string,
      rewardFundAmount: BigNumberish,
      delayTimeLock: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableWhitelistRewardMultiplier(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enableWhitelistRewardRebaser(overrides?: CallOverrides): Promise<BigNumber>;

    extraFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<BigNumber>;

    getCreationFee(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _swapFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAllowEmergencyWithdrawStakePool(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStakePool(b: string, overrides?: CallOverrides): Promise<BigNumber>;

    isStakePoolVerifier(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistRewardMultiplier(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistRewardRebaser(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistStakePool(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistStakingFor(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAllowEmergencyWithdrawStakePool(
      _address: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnableWhitelistRewardMultiplier(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnableWhitelistRewardRebaser(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExtraFeeRate(
      _extraFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeAmount(
      _feeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeCollector(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakePoolVerifier(
      _address: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistRewardMultiplier(
      _address: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistRewardRebaser(
      _address: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistStakePool(
      _address: string,
      state: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistStakingFor(
      _address: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakePoolCreators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapFactory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _stakePoolVerifiers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addStakePoolCreator(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allStakePools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allStakePoolsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowEmergencyWithdrawStakePools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      version: BigNumberish,
      stakeToken: string,
      rewardToken: string,
      rewardFundAmount: BigNumberish,
      delayTimeLock: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableWhitelistRewardMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableWhitelistRewardRebaser(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extraFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCreationFee(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _swapFactory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAllowEmergencyWithdrawStakePool(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStakePool(
      b: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStakePoolVerifier(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistRewardMultiplier(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistRewardRebaser(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistStakePool(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistStakingFor(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAllowEmergencyWithdrawStakePool(
      _address: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnableWhitelistRewardMultiplier(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnableWhitelistRewardRebaser(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExtraFeeRate(
      _extraFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeAmount(
      _feeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakePoolVerifier(
      _address: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistRewardMultiplier(
      _address: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistRewardRebaser(
      _address: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistStakePool(
      _address: string,
      state: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistStakingFor(
      _address: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakePoolCreators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
