/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface WeightedFormulaV2Interface extends ethers.utils.Interface {
  functions: {
    "ensureConstantValue(uint256,uint256,uint256,uint256,uint32)": FunctionFragment;
    "getAmountIn(uint256,(uint256,uint256,uint256,uint256,uint32,uint32,uint32))": FunctionFragment;
    "getAmountOut(uint256,(uint256,uint256,uint256,uint256,uint32,uint32,uint32))": FunctionFragment;
    "getFactoryWeightsAndSwapFee(address,address)": FunctionFragment;
    "getOtherToken(address,address)": FunctionFragment;
    "getWeightsAndSwapFee(address)": FunctionFragment;
    "mintLiquidityFee(uint256,uint256,uint256,uint32,uint112,uint112)": FunctionFragment;
    "quote(uint256,uint256,uint256)": FunctionFragment;
    "sortTokens(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ensureConstantValue",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [
      BigNumberish,
      {
        reserveIn: BigNumberish;
        reserveOut: BigNumberish;
        vReserveIn: BigNumberish;
        vReserveOut: BigNumberish;
        tokenWeightIn: BigNumberish;
        tokenWeightOut: BigNumberish;
        swapFee: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [
      BigNumberish,
      {
        reserveIn: BigNumberish;
        reserveOut: BigNumberish;
        vReserveIn: BigNumberish;
        vReserveOut: BigNumberish;
        tokenWeightIn: BigNumberish;
        tokenWeightOut: BigNumberish;
        swapFee: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryWeightsAndSwapFee",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOtherToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWeightsAndSwapFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintLiquidityFee",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sortTokens",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "ensureConstantValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryWeightsAndSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOtherToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWeightsAndSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sortTokens", data: BytesLike): Result;

  events: {};
}

export class WeightedFormulaV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WeightedFormulaV2Interface;

  functions: {
    ensureConstantValue(
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      balance0Adjusted: BigNumberish,
      balance1Adjusted: BigNumberish,
      tokenWeight0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAmountIn(
      amountOut: BigNumberish,
      pricingData: {
        reserveIn: BigNumberish;
        reserveOut: BigNumberish;
        vReserveIn: BigNumberish;
        vReserveOut: BigNumberish;
        tokenWeightIn: BigNumberish;
        tokenWeightOut: BigNumberish;
        swapFee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountIn: BigNumber }>;

    getAmountOut(
      amountIn: BigNumberish,
      pricingData: {
        reserveIn: BigNumberish;
        reserveOut: BigNumberish;
        vReserveIn: BigNumberish;
        vReserveOut: BigNumberish;
        tokenWeightIn: BigNumberish;
        tokenWeightOut: BigNumberish;
        swapFee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    getFactoryWeightsAndSwapFee(
      factory: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        tokenWeight0: number;
        tokenWeight1: number;
        swapFee: number;
      }
    >;

    getOtherToken(
      pair: string,
      tokenA: string,
      overrides?: CallOverrides
    ): Promise<[string] & { tokenB: string }>;

    getWeightsAndSwapFee(
      pair: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        tokenWeight0: number;
        tokenWeight1: number;
        swapFee: number;
      }
    >;

    mintLiquidityFee(
      totalLiquidity: BigNumberish,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      tokenWeight0: BigNumberish,
      collectedFee0: BigNumberish,
      collectedFee1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountB: BigNumber }>;

    sortTokens(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;
  };

  ensureConstantValue(
    reserve0: BigNumberish,
    reserve1: BigNumberish,
    balance0Adjusted: BigNumberish,
    balance1Adjusted: BigNumberish,
    tokenWeight0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAmountIn(
    amountOut: BigNumberish,
    pricingData: {
      reserveIn: BigNumberish;
      reserveOut: BigNumberish;
      vReserveIn: BigNumberish;
      vReserveOut: BigNumberish;
      tokenWeightIn: BigNumberish;
      tokenWeightOut: BigNumberish;
      swapFee: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountOut(
    amountIn: BigNumberish,
    pricingData: {
      reserveIn: BigNumberish;
      reserveOut: BigNumberish;
      vReserveIn: BigNumberish;
      vReserveOut: BigNumberish;
      tokenWeightIn: BigNumberish;
      tokenWeightOut: BigNumberish;
      swapFee: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFactoryWeightsAndSwapFee(
    factory: string,
    pair: string,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      tokenWeight0: number;
      tokenWeight1: number;
      swapFee: number;
    }
  >;

  getOtherToken(
    pair: string,
    tokenA: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getWeightsAndSwapFee(
    pair: string,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      tokenWeight0: number;
      tokenWeight1: number;
      swapFee: number;
    }
  >;

  mintLiquidityFee(
    totalLiquidity: BigNumberish,
    reserve0: BigNumberish,
    reserve1: BigNumberish,
    tokenWeight0: BigNumberish,
    collectedFee0: BigNumberish,
    collectedFee1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quote(
    amountA: BigNumberish,
    reserveA: BigNumberish,
    reserveB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sortTokens(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { token0: string; token1: string }>;

  callStatic: {
    ensureConstantValue(
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      balance0Adjusted: BigNumberish,
      balance1Adjusted: BigNumberish,
      tokenWeight0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAmountIn(
      amountOut: BigNumberish,
      pricingData: {
        reserveIn: BigNumberish;
        reserveOut: BigNumberish;
        vReserveIn: BigNumberish;
        vReserveOut: BigNumberish;
        tokenWeightIn: BigNumberish;
        tokenWeightOut: BigNumberish;
        swapFee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      pricingData: {
        reserveIn: BigNumberish;
        reserveOut: BigNumberish;
        vReserveIn: BigNumberish;
        vReserveOut: BigNumberish;
        tokenWeightIn: BigNumberish;
        tokenWeightOut: BigNumberish;
        swapFee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFactoryWeightsAndSwapFee(
      factory: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        tokenWeight0: number;
        tokenWeight1: number;
        swapFee: number;
      }
    >;

    getOtherToken(
      pair: string,
      tokenA: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getWeightsAndSwapFee(
      pair: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        tokenWeight0: number;
        tokenWeight1: number;
        swapFee: number;
      }
    >;

    mintLiquidityFee(
      totalLiquidity: BigNumberish,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      tokenWeight0: BigNumberish,
      collectedFee0: BigNumberish,
      collectedFee1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sortTokens(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;
  };

  filters: {};

  estimateGas: {
    ensureConstantValue(
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      balance0Adjusted: BigNumberish,
      balance1Adjusted: BigNumberish,
      tokenWeight0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountIn(
      amountOut: BigNumberish,
      pricingData: {
        reserveIn: BigNumberish;
        reserveOut: BigNumberish;
        vReserveIn: BigNumberish;
        vReserveOut: BigNumberish;
        tokenWeightIn: BigNumberish;
        tokenWeightOut: BigNumberish;
        swapFee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      pricingData: {
        reserveIn: BigNumberish;
        reserveOut: BigNumberish;
        vReserveIn: BigNumberish;
        vReserveOut: BigNumberish;
        tokenWeightIn: BigNumberish;
        tokenWeightOut: BigNumberish;
        swapFee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFactoryWeightsAndSwapFee(
      factory: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOtherToken(
      pair: string,
      tokenA: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeightsAndSwapFee(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintLiquidityFee(
      totalLiquidity: BigNumberish,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      tokenWeight0: BigNumberish,
      collectedFee0: BigNumberish,
      collectedFee1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sortTokens(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ensureConstantValue(
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      balance0Adjusted: BigNumberish,
      balance1Adjusted: BigNumberish,
      tokenWeight0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountIn(
      amountOut: BigNumberish,
      pricingData: {
        reserveIn: BigNumberish;
        reserveOut: BigNumberish;
        vReserveIn: BigNumberish;
        vReserveOut: BigNumberish;
        tokenWeightIn: BigNumberish;
        tokenWeightOut: BigNumberish;
        swapFee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      amountIn: BigNumberish,
      pricingData: {
        reserveIn: BigNumberish;
        reserveOut: BigNumberish;
        vReserveIn: BigNumberish;
        vReserveOut: BigNumberish;
        tokenWeightIn: BigNumberish;
        tokenWeightOut: BigNumberish;
        swapFee: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFactoryWeightsAndSwapFee(
      factory: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOtherToken(
      pair: string,
      tokenA: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWeightsAndSwapFee(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintLiquidityFee(
      totalLiquidity: BigNumberish,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      tokenWeight0: BigNumberish,
      collectedFee0: BigNumberish,
      collectedFee1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sortTokens(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
