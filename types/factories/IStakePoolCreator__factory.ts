/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IStakePoolCreator,
  IStakePoolCreatorInterface,
} from "../IStakePoolCreator";

const _abi = [
  {
    inputs: [],
    name: "create",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "poolAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
      {
        internalType: "address",
        name: "rewardToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "timelock",
        type: "address",
      },
      {
        internalType: "address",
        name: "stakePoolRewardFund",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IStakePoolCreator__factory {
  static readonly abi = _abi;
  static createInterface(): IStakePoolCreatorInterface {
    return new utils.Interface(_abi) as IStakePoolCreatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IStakePoolCreator {
    return new Contract(address, _abi, signerOrProvider) as IStakePoolCreator;
  }
}
