/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  VaultAuthorizer,
  VaultAuthorizerInterface,
} from "../VaultAuthorizer";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IAuthorizer",
        name: "authorizer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "pauseWindowDuration",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bufferPeriodDuration",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "paused",
        type: "bool",
      },
    ],
    name: "PausedStateChangedVault",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "_authenticateFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "getActionId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAuthorizer",
    outputs: [
      {
        internalType: "contract IAuthorizer",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDomainSeparator",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getNextNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPausedStateVault",
    outputs: [
      {
        internalType: "bool",
        name: "paused",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "pauseWindowEndTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bufferPeriodEndTime",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "relayer",
        type: "address",
      },
    ],
    name: "hasApprovedRelayer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IAuthorizer",
        name: "newAuthorizer",
        type: "address",
      },
    ],
    name: "setAuthorizer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "relayer",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setRelayerApproval",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x61014060405234801561001157600080fd5b50604051610d70380380610d70833981016040819052610030916101a7565b604080518082018252601081526f14995c5d5a595b48158c8815985d5b1d60821b602080830191825283518085019094526001808552603160f81b9185019182526000553060601b6080529151902060a0529051902060c0527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60e05281816276a7008211156101075760405162461bcd60e51b815260206004820152601960248201527f4d41585f50415553455f57494e444f575f4455524154494f4e0000000000000060448201526064015b60405180910390fd5b62278d0081111561015a5760405162461bcd60e51b815260206004820152601a60248201527f4d41585f4255464645525f504552494f445f4455524154494f4e00000000000060448201526064016100fe565b600061016683426101ea565b610100819052905061017882826101ea565b61012052505060028054610100600160a81b0319166101006001600160a01b0387160217905550505050610210565b6000806000606084860312156101bc57600080fd5b83516001600160a01b03811681146101d357600080fd5b602085015160409095015190969495509392505050565b6000821982111561020b57634e487b7160e01b600052601160045260246000fd5b500190565b60805160a05160c05160e0516101005161012051610b0a610266600039600081816103140152610493015260006102f1015260006104c90152600061050b015260006104ea0152600061027e0152610b0a6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806390193b7c1161006657806390193b7c1461010b578063aaabadc514610134578063ed24911d1461015d578063fa6e671d14610165578063fec90d721461017857600080fd5b8063058a628f14610098578063718beccc146100ad578063851c1bb3146100c05780638de2ec8e146100e6575b600080fd5b6100ab6100a63660046109ae565b61019b565b005b6100ab6100bb3660046109ae565b610228565b6100d36100ce3660046109d2565b61027a565b6040519081526020015b60405180910390f35b6100ee6102df565b6040805193151584526020840192909252908201526060016100dd565b6100d36101193660046109ae565b6001600160a01b031660009081526001602052604090205490565b60025461010090046001600160a01b03166040516001600160a01b0390911681526020016100dd565b6100d361033b565b6100ab610173366004610a0a565b61034a565b61018b610186366004610a55565b6103e9565b60405190151581526020016100dd565b600260005414156101f35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260005561020061041e565b60028054610100600160a81b0319166101006001600160a01b03841602179055506001600055565b336001600160a01b038216146102775761024061041e565b6001600160a01b038116600090815260036020908152604080832033845290915290205460ff1661027757610277816101f761044c565b50565b60007f0000000000000000000000000000000000000000000000000000000000000000826040516020016102c29291909182526001600160e01b031916602082015260240190565b604051602081830303815290604052805190602001209050919050565b60008060006102ec61048f565b1592507f000000000000000000000000000000000000000000000000000000000000000091507f00000000000000000000000000000000000000000000000000000000000000005b9050909192565b60006103456104c5565b905090565b6002600054141561039d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101ea565b60026000556103aa61056b565b6001600160a01b03928316600090815260036020908152604080832094909516825292909252918120805460ff19169215159290921790915560019055565b6001600160a01b03808316600090815260036020908152604080832093851683529290529081205460ff165b90505b92915050565b60006104356000356001600160e01b03191661027a565b905061027761044482336105aa565b61019161063a565b6001600160a01b03821660009081526001602052604081208054908261047183610a8e565b91905055905061048a610484848361064c565b8361063a565b505050565b60007f000000000000000000000000000000000000000000000000000000000000000042118061034557505060025460ff161590565b60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000046604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b61057361048f565b6105a85760405162461bcd60e51b815260206004820152600660248201526514105554d15160d21b60448201526064016101ea565b565b6002546040516326f8aa2160e21b8152600481018490526001600160a01b03838116602483015230604483015260009261010090041690639be2a8849060640160206040518083038186803b15801561060257600080fd5b505afa158015610616573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104159190610ab7565b81610648576106488161079b565b5050565b600036607f19013542811015610666576000915050610418565b60006106706107ee565b90508061068257600092505050610418565b60008161068d6108fe565b80516020918201206040805192830193909352918101919091523360608201526080810186905260a0810184905260c00160405160208183030381529060405280519060200120905060006106e18261094e565b905060008060006106f061097d565b925092509250600060018585858560405160008152602001604052604051610734949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610756573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061078c57508a6001600160a01b0316816001600160a01b0316145b9b9a5050505050505050505050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6000803560e01c8063b95cac28811461083657638bdb3913811461085e576352bbbe2981146108865763945bcec981146108ae5763fa6e671d81146108d65760009250505090565b7f3f7b71252bd19113ff48c19c6e004a9bcfcca320a0d74d58e85877cbd7dcae589250505090565b7f8bbc57f66ea936902f50a71ce12b92c43f3c5340bb40c27c4e90ab84eeae33539250505090565b7fe192dcbc143b1e244ad73b813fd3c097b832ad260a157340b4e5e5beda067abe9250505090565b7f9bfc43a4d98313c6766986ffd7c916c7481566d9f224c6819af0a53388aced3a9250505090565b7fa3f865aa351e51cfeb40f5178d1564bb629fe9030b83caf6361d1baaf5b90b5a9250505090565b60606000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050825192935050506080101561094b576080360381525b90565b60006109586104c5565b60405161190160f01b60208201526022810191909152604281018390526062016102c2565b36605f1981013590603f1981013590600090601f190135610334565b6001600160a01b038116811461027757600080fd5b6000602082840312156109c057600080fd5b81356109cb81610999565b9392505050565b6000602082840312156109e457600080fd5b81356001600160e01b0319811681146109cb57600080fd5b801515811461027757600080fd5b600080600060608486031215610a1f57600080fd5b8335610a2a81610999565b92506020840135610a3a81610999565b91506040840135610a4a816109fc565b809150509250925092565b60008060408385031215610a6857600080fd5b8235610a7381610999565b91506020830135610a8381610999565b809150509250929050565b6000600019821415610ab057634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215610ac957600080fd5b81516109cb816109fc56fea264697066735822122076c6996b76595ba6b2f2bf7303fbac388894791699ad2affebee12685f69642464736f6c63430008090033";

export class VaultAuthorizer__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    authorizer: string,
    pauseWindowDuration: BigNumberish,
    bufferPeriodDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VaultAuthorizer> {
    return super.deploy(
      authorizer,
      pauseWindowDuration,
      bufferPeriodDuration,
      overrides || {}
    ) as Promise<VaultAuthorizer>;
  }
  getDeployTransaction(
    authorizer: string,
    pauseWindowDuration: BigNumberish,
    bufferPeriodDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      authorizer,
      pauseWindowDuration,
      bufferPeriodDuration,
      overrides || {}
    );
  }
  attach(address: string): VaultAuthorizer {
    return super.attach(address) as VaultAuthorizer;
  }
  connect(signer: Signer): VaultAuthorizer__factory {
    return super.connect(signer) as VaultAuthorizer__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultAuthorizerInterface {
    return new utils.Interface(_abi) as VaultAuthorizerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VaultAuthorizer {
    return new Contract(address, _abi, signerOrProvider) as VaultAuthorizer;
  }
}
