/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IMinimalSwapInfo,
  IMinimalSwapInfoInterface,
} from "../IMinimalSwapInfo";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum IMinimalSwapInfo.SwapKind",
            name: "kind",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
        ],
        internalType: "struct IMinimalSwapInfo.SwapRequest",
        name: "swapRequest",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "currentBalanceTokenIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentBalanceTokenOut",
        type: "uint256",
      },
    ],
    name: "onSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IMinimalSwapInfo__factory {
  static readonly abi = _abi;
  static createInterface(): IMinimalSwapInfoInterface {
    return new utils.Interface(_abi) as IMinimalSwapInfoInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IMinimalSwapInfo {
    return new Contract(address, _abi, signerOrProvider) as IMinimalSwapInfo;
  }
}
