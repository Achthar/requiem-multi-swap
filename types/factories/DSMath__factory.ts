/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DSMath, DSMathInterface } from "../DSMath";

const _abi = [
  {
    inputs: [],
    name: "RAY",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WAD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60aa610039600b82828239805160001a60731461002c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610603d5760003560e01c8063552033c41460425780636a146024146066575b600080fd5b60546b033b2e3c9fd0803ce800000081565b60405190815260200160405180910390f35b6054670de0b6b3a76400008156fea2646970667358221220ea50917b82b7a8fe5666d1255cc50ea3818d869092bf1ed15b8e2729e19b89f864736f6c634300080d0033";

export class DSMath__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DSMath> {
    return super.deploy(overrides || {}) as Promise<DSMath>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DSMath {
    return super.attach(address) as DSMath;
  }
  connect(signer: Signer): DSMath__factory {
    return super.connect(signer) as DSMath__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DSMathInterface {
    return new utils.Interface(_abi) as DSMathInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): DSMath {
    return new Contract(address, _abi, signerOrProvider) as DSMath;
  }
}
