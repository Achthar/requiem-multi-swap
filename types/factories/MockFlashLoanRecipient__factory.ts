/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockFlashLoanRecipient,
  MockFlashLoanRecipientInterface,
} from "../MockFlashLoanRecipient";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "feeAmounts",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "userData",
        type: "bytes",
      },
    ],
    name: "receiveFlashLoan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "reenter",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "repayInExcess",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "repayLoan",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_reenter",
        type: "bool",
      },
    ],
    name: "setReenter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_repayInExcess",
        type: "bool",
      },
    ],
    name: "setRepayInExcess",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_repayLoan",
        type: "bool",
      },
    ],
    name: "setRepayLoan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vault",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610c86380380610c8683398101604081905261002f9161004f565b6001600160a01b03166080526000805462ffffff1916600117905561007f565b60006020828403121561006157600080fd5b81516001600160a01b038116811461007857600080fd5b9392505050565b608051610be56100a16000396000818161016101526104310152610be56000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b77f3a231161005b578063b77f3a2314610114578063f04f27071461013c578063f966ade71461014f578063fbfa77cf1461015c57600080fd5b80633207ce3c1461008d57806362a82399146100b4578063a0fe97e3146100d7578063a6af1703146100ea575b600080fd5b60005461009f90610100900460ff1681565b60405190151581526020015b60405180910390f35b6100d56100c2366004610761565b6000805460ff1916911515919091179055565b005b60005461009f9062010000900460ff1681565b6100d56100f8366004610761565b60008054911515620100000262ff000019909216919091179055565b6100d5610122366004610761565b600080549115156101000261ff0019909216919091179055565b6100d561014a3660046108c4565b61019b565b60005461009f9060ff1681565b6101837f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100ab565b60005b845181101561046b5760008582815181106101bb576101bb6109dc565b6020026020010151905060008583815181106101d9576101d96109dc565b6020026020010151905060008584815181106101f7576101f76109dc565b60209081029190910101516040516370a0823160e01b815230600482015290915082906001600160a01b038516906370a082319060240160206040518083038186803b15801561024657600080fd5b505afa15801561025a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027e91906109f2565b146102d05760405162461bcd60e51b815260206004820152601960248201527f494e56414c49445f464c4153484c4f414e5f42414c414e43450000000000000060448201526064015b60405180910390fd5b60005462010000900460ff161561033d57604051632e1c224f60e11b81523390635c38449e9061030a9030908c908c908b90600401610a67565b600060405180830381600087803b15801561032457600080fd5b505af1158015610338573d6000803e3d6000fd5b505050505b826001600160a01b03166340c10f1930600060019054906101000a900460ff166103675783610372565b610372846001610472565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156103b857600080fd5b505af11580156103cc573d6000803e3d6000fd5b5050505060006103e5828461047290919063ffffffff16565b60005490915060ff16610404576103fd8160016104c7565b9050610422565b600054610100900460ff16156104225761041f816001610472565b90505b6104566001600160a01b0385167f00000000000000000000000000000000000000000000000000000000000000008361051c565b505050508061046490610b19565b905061019e565b5050505050565b60008061047f8385610b34565b9050838110156104c05760405162461bcd60e51b815260206004820152600c60248201526b4144445f4f564552464c4f5760a01b60448201526064016102c7565b9392505050565b6000828211156105085760405162461bcd60e51b815260206004820152600c60248201526b5355425f4f564552464c4f5760a01b60448201526064016102c7565b60006105148385610b4c565b949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261056e908490610573565b505050565b60006105c8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166106459092919063ffffffff16565b80519091501561056e57808060200190518101906105e69190610b63565b61056e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102c7565b6060610514848460008585843b61069e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102c7565b600080866001600160a01b031685876040516106ba9190610b80565b60006040518083038185875af1925050503d80600081146106f7576040519150601f19603f3d011682016040523d82523d6000602084013e6106fc565b606091505b509150915061070c828286610717565b979650505050505050565b606083156107265750816104c0565b8251156107365782518084602001fd5b8160405162461bcd60e51b81526004016102c79190610b9c565b801515811461075e57600080fd5b50565b60006020828403121561077357600080fd5b81356104c081610750565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156107bd576107bd61077e565b604052919050565b600067ffffffffffffffff8211156107df576107df61077e565b5060051b60200190565b600082601f8301126107fa57600080fd5b8135602061080f61080a836107c5565b610794565b82815260059290921b8401810191818101908684111561082e57600080fd5b8286015b848110156108495780358352918301918301610832565b509695505050505050565b600082601f83011261086557600080fd5b813567ffffffffffffffff81111561087f5761087f61077e565b610892601f8201601f1916602001610794565b8181528460208386010111156108a757600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156108da57600080fd5b843567ffffffffffffffff808211156108f257600080fd5b818701915087601f83011261090657600080fd5b8135602061091661080a836107c5565b82815260059290921b8401810191818101908b84111561093557600080fd5b948201945b838610156109695785356001600160a01b038116811461095a5760008081fd5b8252948201949082019061093a565b9850508801359250508082111561097f57600080fd5b61098b888389016107e9565b945060408701359150808211156109a157600080fd5b6109ad888389016107e9565b935060608701359150808211156109c357600080fd5b506109d087828801610854565b91505092959194509250565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610a0457600080fd5b5051919050565b60005b83811015610a26578181015183820152602001610a0e565b83811115610a35576000848401525b50505050565b60008151808452610a53816020860160208601610a0b565b601f01601f19169290920160200192915050565b6001600160a01b0385811682526080602080840182905286519184018290526000928782019290919060a0860190855b81811015610ab5578551851683529483019491830191600101610a97565b5050858103604087015287518082529082019350915080870160005b83811015610aed57815185529382019390820190600101610ad1565b50505050828103606084015261070c8185610a3b565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610b2d57610b2d610b03565b5060010190565b60008219821115610b4757610b47610b03565b500190565b600082821015610b5e57610b5e610b03565b500390565b600060208284031215610b7557600080fd5b81516104c081610750565b60008251610b92818460208701610a0b565b9190910192915050565b6020815260006104c06020830184610a3b56fea26469706673582212208e6d0b2039558c2b31e11f0051be7efcf230d6f6537ffc66d38579afd450a06864736f6c63430008090033";

export class MockFlashLoanRecipient__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockFlashLoanRecipient> {
    return super.deploy(
      _vault,
      overrides || {}
    ) as Promise<MockFlashLoanRecipient>;
  }
  getDeployTransaction(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_vault, overrides || {});
  }
  attach(address: string): MockFlashLoanRecipient {
    return super.attach(address) as MockFlashLoanRecipient;
  }
  connect(signer: Signer): MockFlashLoanRecipient__factory {
    return super.connect(signer) as MockFlashLoanRecipient__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockFlashLoanRecipientInterface {
    return new utils.Interface(_abi) as MockFlashLoanRecipientInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockFlashLoanRecipient {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockFlashLoanRecipient;
  }
}
