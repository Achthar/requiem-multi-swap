/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RouterEventEmitter,
  RouterEventEmitterInterface,
} from "../RouterEventEmitter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "Amounts",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapETHForExactTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapExactETHForTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapExactTokensForETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapExactTokensForTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountInMax",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapTokensForExactETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountInMax",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapTokensForExactTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506109c5806100206000396000f3fe6080604052600436106100595760003560e01c806345b4f0321461006557806349158c43146100875780637551fcec1461009a578063ae25e886146100ad578063cb9c9a3a146100cd578063fd31aab4146100ed57600080fd5b3661006057005b600080fd5b34801561007157600080fd5b50610085610080366004610553565b61010d565b005b6100856100953660046105f6565b610228565b6100856100a83660046105f6565b61033d565b3480156100b957600080fd5b506100856100c836600461067f565b61036d565b3480156100d957600080fd5b506100856100e8366004610553565b610485565b3480156100f957600080fd5b5061008561010836600461067f565b6104b9565b6000808a6001600160a01b031663bff51d7160e01b8b8b8b8b8b8b8b8b604051602401610141989796959493929190610758565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161017f91906107a5565b600060405180830381855af49150503d80600081146101ba576040519150601f19603f3d011682016040523d82523d6000602084013e6101bf565b606091505b5091509150816101d1576101d16107e0565b7f4cc17991e3610e3400e74a8306aa421daaee1e3446fa22b490604610999e10b381806020019051810190610206919061080c565b60405161021391906108ca565b60405180910390a15050505050505050505050565b600080886001600160a01b031663b05f579e60e01b8989898989896040516024016102589695949392919061090e565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161029691906107a5565b600060405180830381855af49150503d80600081146102d1576040519150601f19603f3d011682016040523d82523d6000602084013e6102d6565b606091505b5091509150816102e8576102e86107e0565b7f4cc17991e3610e3400e74a8306aa421daaee1e3446fa22b490604610999e10b38180602001905181019061031d919061080c565b60405161032a91906108ca565b60405180910390a1505050505050505050565b600080886001600160a01b031663fde1adda60e01b8989898989896040516024016102589695949392919061090e565b600080896001600160a01b0316639c91fcb560e01b8a8a8a8a8a8a8a60405160240161039f979695949392919061094b565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516103dd91906107a5565b600060405180830381855af49150503d8060008114610418576040519150601f19603f3d011682016040523d82523d6000602084013e61041d565b606091505b50915091508161042f5761042f6107e0565b7f4cc17991e3610e3400e74a8306aa421daaee1e3446fa22b490604610999e10b381806020019051810190610464919061080c565b60405161047191906108ca565b60405180910390a150505050505050505050565b6000808a6001600160a01b031663d59e44ee60e01b8b8b8b8b8b8b8b8b604051602401610141989796959493929190610758565b600080896001600160a01b031663fa3219d560e01b8a8a8a8a8a8a8a60405160240161039f979695949392919061094b565b80356001600160a01b038116811461050257600080fd5b919050565b60008083601f84011261051957600080fd5b50813567ffffffffffffffff81111561053157600080fd5b6020830191508360208260051b850101111561054c57600080fd5b9250929050565b60008060008060008060008060006101008a8c03121561057257600080fd5b61057b8a6104eb565b985061058960208b016104eb565b975061059760408b016104eb565b965060608a0135955060808a0135945060a08a013567ffffffffffffffff8111156105c157600080fd5b6105cd8c828d01610507565b90955093506105e0905060c08b016104eb565b915060e08a013590509295985092959850929598565b600080600080600080600060c0888a03121561061157600080fd5b61061a886104eb565b9650610628602089016104eb565b955060408801359450606088013567ffffffffffffffff81111561064b57600080fd5b6106578a828b01610507565b909550935061066a9050608089016104eb565b915060a0880135905092959891949750929550565b60008060008060008060008060e0898b03121561069b57600080fd5b6106a4896104eb565b97506106b260208a016104eb565b96506040890135955060608901359450608089013567ffffffffffffffff8111156106dc57600080fd5b6106e88b828c01610507565b90955093506106fb905060a08a016104eb565b915060c089013590509295985092959890939650565b8183526000602080850194508260005b8581101561074d576001600160a01b0361073a836104eb565b1687529582019590820190600101610721565b509495945050505050565b600060018060a01b03808b168352808a16602084015288604084015287606084015260e0608084015261078f60e084018789610711565b941660a08301525060c001529695505050505050565b6000825160005b818110156107c657602081860181015185830152016107ac565b818111156107d5576000828501525b509190910192915050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561081f57600080fd5b825167ffffffffffffffff8082111561083757600080fd5b818501915085601f83011261084b57600080fd5b81518181111561085d5761085d6107f6565b8060051b604051601f19603f83011681018181108582111715610882576108826107f6565b6040529182528482019250838101850191888311156108a057600080fd5b938501935b828510156108be578451845293850193928501926108a5565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610902578351835292840192918401916001016108e6565b50909695505050505050565b600060018060a01b03808916835287602084015260a0604084015261093760a084018789610711565b941660608301525060800152949350505050565b600060018060a01b03808a16835288602084015287604084015260c0606084015261097a60c084018789610711565b941660808301525060a001529594505050505056fea2646970667358221220bbd1f0d27d9afa22d09e15fe906e09cb8dafbb0329c13cc9d7825847e708bc3464736f6c634300080b0033";

export class RouterEventEmitter__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RouterEventEmitter> {
    return super.deploy(overrides || {}) as Promise<RouterEventEmitter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RouterEventEmitter {
    return super.attach(address) as RouterEventEmitter;
  }
  connect(signer: Signer): RouterEventEmitter__factory {
    return super.connect(signer) as RouterEventEmitter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RouterEventEmitterInterface {
    return new utils.Interface(_abi) as RouterEventEmitterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RouterEventEmitter {
    return new Contract(address, _abi, signerOrProvider) as RouterEventEmitter;
  }
}
