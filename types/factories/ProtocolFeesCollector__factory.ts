/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ProtocolFeesCollector,
  ProtocolFeesCollectorInterface,
} from "../ProtocolFeesCollector";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IVault",
        name: "_vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newFlashLoanFeePercentage",
        type: "uint256",
      },
    ],
    name: "FlashLoanFeePercentageChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newSwapFeePercentage",
        type: "uint256",
      },
    ],
    name: "SwapFeePercentageChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "getActionId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAuthorizer",
    outputs: [
      {
        internalType: "contract IAuthorizer",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "getCollectedFeeAmounts",
    outputs: [
      {
        internalType: "uint256[]",
        name: "feeAmounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFlashLoanFeePercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSwapFeePercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newFlashLoanFeePercentage",
        type: "uint256",
      },
    ],
    name: "setFlashLoanFeePercentage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newSwapFeePercentage",
        type: "uint256",
      },
    ],
    name: "setSwapFeePercentage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vault",
    outputs: [
      {
        internalType: "contract IVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "withdrawCollectedFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051610db5380380610db583398101604081905261002f9161004c565b3060601b60805260016000556001600160a01b031660a05261007c565b60006020828403121561005e57600080fd5b81516001600160a01b038116811461007557600080fd5b9392505050565b60805160a051610d0d6100a86000396000818161014a0152610588015260006103170152610d0d6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063851c1bb311610066578063851c1bb3146100ea578063aaabadc5146100fd578063d877845c1461011d578063e42abf3514610125578063fbfa77cf1461014557600080fd5b806338e9922e1461009857806355c67628146100ad5780636b6b9f69146100c45780636daefab6146100d7575b600080fd5b6100ab6100a636600461094d565b61016c565b005b6001545b6040519081526020015b60405180910390f35b6100ab6100d236600461094d565b6101c7565b6100ab6100e53660046109c7565b61021a565b6100b16100f8366004610a4b565b610313565b610105610378565b6040516001600160a01b0390911681526020016100bb565b6002546100b1565b610138610133366004610a9b565b610387565b6040516100bb9190610b60565b6101057f000000000000000000000000000000000000000000000000000000000000000081565b6101746104a3565b61018b6706f05b59d3b200008211156102586104d4565b60018190556040518181527fa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc906020015b60405180910390a150565b6101cf6104a3565b6101e5662386f26fc100008211156102596104d4565b60028190556040518181527f5a0b7386237e7f07fa741efc64e59c9387d2cccafec760efed4d53387f20e19a906020016101bc565b600260005414156102725760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260005561027f6104a3565b61028984836104e6565b60005b848110156103065760008686838181106102a8576102a8610ba4565b90506020020160208101906102bd9190610bba565b905060008585848181106102d3576102d3610ba4565b602002919091013591506102f390506001600160a01b038316858361052d565b5050806102ff90610bd7565b905061028c565b5050600160005550505050565b60007f00000000000000000000000000000000000000000000000000000000000000008260405160200161035b9291909182526001600160e01b031916602082015260240190565b604051602081830303815290604052805190602001209050919050565b6000610382610584565b905090565b6060815167ffffffffffffffff8111156103a3576103a3610a75565b6040519080825280602002602001820160405280156103cc578160200160208202803683370190505b50905060005b825181101561049d578281815181106103ed576103ed610ba4565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561043857600080fd5b505afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104709190610c00565b82828151811061048257610482610ba4565b602090810291909101015261049681610bd7565b90506103d2565b50919050565b60006104ba6000356001600160e01b031916610313565b90506104d16104c98233610617565b6101916104d4565b50565b816104e2576104e2816106b0565b5050565b8082146104e25760405162461bcd60e51b81526020600482015260156024820152740929ca0aaa8be988a9c8ea890be9a92a69a82a8869605b1b6044820152606401610269565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261057f908490610703565b505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aaabadc56040518163ffffffff1660e01b815260040160206040518083038186803b1580156105df57600080fd5b505afa1580156105f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103829190610c19565b6000610621610584565b6040516326f8aa2160e21b8152600481018590526001600160a01b0384811660248301523060448301529190911690639be2a8849060640160206040518083038186803b15801561067157600080fd5b505afa158015610685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a99190610c36565b9392505050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6000610758826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107d59092919063ffffffff16565b80519091501561057f57808060200190518101906107769190610c36565b61057f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610269565b60606107e484846000856107ec565b949350505050565b60608247101561084d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610269565b843b61089b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610269565b600080866001600160a01b031685876040516108b79190610c88565b60006040518083038185875af1925050503d80600081146108f4576040519150601f19603f3d011682016040523d82523d6000602084013e6108f9565b606091505b5091509150610909828286610914565b979650505050505050565b606083156109235750816106a9565b8251156109335782518084602001fd5b8160405162461bcd60e51b81526004016102699190610ca4565b60006020828403121561095f57600080fd5b5035919050565b60008083601f84011261097857600080fd5b50813567ffffffffffffffff81111561099057600080fd5b6020830191508360208260051b85010111156109ab57600080fd5b9250929050565b6001600160a01b03811681146104d157600080fd5b6000806000806000606086880312156109df57600080fd5b853567ffffffffffffffff808211156109f757600080fd5b610a0389838a01610966565b90975095506020880135915080821115610a1c57600080fd5b50610a2988828901610966565b9094509250506040860135610a3d816109b2565b809150509295509295909350565b600060208284031215610a5d57600080fd5b81356001600160e01b0319811681146106a957600080fd5b634e487b7160e01b600052604160045260246000fd5b8035610a96816109b2565b919050565b60006020808385031215610aae57600080fd5b823567ffffffffffffffff80821115610ac657600080fd5b818501915085601f830112610ada57600080fd5b813581811115610aec57610aec610a75565b8060051b604051601f19603f83011681018181108582111715610b1157610b11610a75565b604052918252848201925083810185019188831115610b2f57600080fd5b938501935b82851015610b5457610b4585610a8b565b84529385019392850192610b34565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610b9857835183529284019291840191600101610b7c565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610bcc57600080fd5b81356106a9816109b2565b6000600019821415610bf957634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215610c1257600080fd5b5051919050565b600060208284031215610c2b57600080fd5b81516106a9816109b2565b600060208284031215610c4857600080fd5b815180151581146106a957600080fd5b60005b83811015610c73578181015183820152602001610c5b565b83811115610c82576000848401525b50505050565b60008251610c9a818460208701610c58565b9190910192915050565b6020815260008251806020840152610cc3816040850160208701610c58565b601f01601f1916919091016040019291505056fea26469706673582212204baf49d4c021853fa4008df54a967b5dbb0a99d3ac8336cc4689db65263bf46164736f6c63430008090033";

export class ProtocolFeesCollector__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ProtocolFeesCollector> {
    return super.deploy(
      _vault,
      overrides || {}
    ) as Promise<ProtocolFeesCollector>;
  }
  getDeployTransaction(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_vault, overrides || {});
  }
  attach(address: string): ProtocolFeesCollector {
    return super.attach(address) as ProtocolFeesCollector;
  }
  connect(signer: Signer): ProtocolFeesCollector__factory {
    return super.connect(signer) as ProtocolFeesCollector__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProtocolFeesCollectorInterface {
    return new utils.Interface(_abi) as ProtocolFeesCollectorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProtocolFeesCollector {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ProtocolFeesCollector;
  }
}
