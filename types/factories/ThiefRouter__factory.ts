/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ThiefRouter, ThiefRouterInterface } from "../ThiefRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_WETH",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "formula",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "pools",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "onSwapExactTokensForTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amountLast",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "pools",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountInMax",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "onSwapTokensForExactTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60e060405234801561001057600080fd5b506040516200105838038062001058833981016040819052610031916100d3565b6001600160a01b038216608081905260408051634b75f54f60e01b81529051634b75f54f916004808201926020929091908290030181865afa15801561007b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009f9190610106565b6001600160a01b0390811660a0521660c05250610128565b80516001600160a01b03811681146100ce57600080fd5b919050565b600080604083850312156100e657600080fd5b6100ef836100b7565b91506100fd602084016100b7565b90509250929050565b60006020828403121561011857600080fd5b610121826100b7565b9392505050565b60805160a05160c051610efb6200015d60003960008181607b015261014c0152600060c1015260006101ae0152610efb6000f3fe60806040526004361061005e5760003560e01c8063ad5c464811610043578063ad5c46481461013a578063b4e819fd1461016e578063c45a01551461019c57600080fd5b80634b75f54f146100af57806351bf18301461010d57600080fd5b366100aa573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146100a8576100a8610b33565b005b600080fd5b3480156100bb57600080fd5b506100e37f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561011957600080fd5b5061012d610128366004610c7a565b6101d0565b6040516101049190610d0a565b34801561014657600080fd5b506100e37f000000000000000000000000000000000000000000000000000000000000000081565b34801561017a57600080fd5b5061018e610189366004610c7a565b6106de565b604051908152602001610104565b3480156101a857600080fd5b506100e37f000000000000000000000000000000000000000000000000000000000000000081565b60608142811015610242576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064015b60405180910390fd5b865167ffffffffffffffff81111561025c5761025c610b62565b604051908082528060200260200182016040528015610285578160200160208202803683370190505b509150858289518151811061029c5761029c610d4e565b6020026020010181815250506000600183516102b89190610dac565b90505b801561043157886102cd600183610dac565b815181106102dd576102dd610d4e565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663cc56fd438960018461030e9190610dac565b8151811061031e5761031e610d4e565b60200260200101518a848151811061033857610338610d4e565b602002602001015186858151811061035257610352610d4e565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401602060405180830381865afa1580156103d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f89190610dc3565b83610404600184610dac565b8151811061041457610414610d4e565b60209081029190910101528061042981610ddc565b9150506102bb565b50848260008151811061044657610446610d4e565b602002602001015111156104b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4558434553534956455f494e50555400000000000000000000000000000000006044820152606401610239565b61051c876000815181106104cc576104cc610d4e565b6020026020010151338a6000815181106104e8576104e8610d4e565b602002602001015160018660008151811061050557610505610d4e565b60200260200101516105179190610dac565b610995565b60005b88518110156106d257600060018a516105389190610dac565b8214610567578961054a836001610e11565b8151811061055a5761055a610d4e565b6020026020010151610569565b855b905089828151811061057d5761057d610d4e565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166332fd54938a84815181106105b2576105b2610d4e565b60200260200101518b8560016105c89190610e11565b815181106105d8576105d8610d4e565b60200260200101518786815181106105f2576105f2610d4e565b6020026020010151888760016106089190610e11565b8151811061061857610618610d4e565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff9485166004820152928416602484015260448301919091526064820152908416608482015260a401600060405180830381600087803b1580156106a657600080fd5b505af11580156106ba573d6000803e3d6000fd5b505050505080806106ca90610e29565b91505061051f565b50509695505050505050565b6000814281101561074b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a204558504952454400000000000000000000000000000000006044820152606401610239565b8591506107958760008151811061076457610764610d4e565b6020026020010151338a60008151811061078057610780610d4e565b6020026020010151600a8a6105179190610dac565b60005b885181101561091f57600060018a516107b19190610dac565b82146107e057896107c3836001610e11565b815181106107d3576107d3610d4e565b60200260200101516107e2565b855b90508982815181106107f6576107f6610d4e565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16634ac00e038a848151811061082b5761082b610d4e565b60200260200101518b8560016108419190610e11565b8151811061085157610851610d4e565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff928316600482015290821660248201526044810188905260006064820152908416608482015260a4016020604051808303816000875af11580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109099190610dc3565b935050808061091790610e29565b915050610798565b508185111561098a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f4f5554505554000000000000000000000000006044820152606401610239565b509695505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790529151600092839290881691610a349190610e61565b6000604051808303816000865af19150503d8060008114610a71576040519150601f19603f3d011682016040523d82523d6000602084013e610a76565b606091505b5091509150818015610aa0575080511580610aa0575080806020019051810190610aa09190610e9c565b610b2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f464160448201527f494c4544000000000000000000000000000000000000000000000000000000006064820152608401610239565b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b803573ffffffffffffffffffffffffffffffffffffffff81168114610bb557600080fd5b919050565b600082601f830112610bcb57600080fd5b8135602067ffffffffffffffff80831115610be857610be8610b62565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108482111715610c2b57610c2b610b62565b604052938452858101830193838101925087851115610c4957600080fd5b83870191505b84821015610c6f57610c6082610b91565b83529183019190830190610c4f565b979650505050505050565b60008060008060008060c08789031215610c9357600080fd5b863567ffffffffffffffff80821115610cab57600080fd5b610cb78a838b01610bba565b97506020890135915080821115610ccd57600080fd5b50610cda89828a01610bba565b9550506040870135935060608701359250610cf760808801610b91565b915060a087013590509295509295509295565b6020808252825182820181905260009190848201906040850190845b81811015610d4257835183529284019291840191600101610d26565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610dbe57610dbe610d7d565b500390565b600060208284031215610dd557600080fd5b5051919050565b600081610deb57610deb610d7d565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60008219821115610e2457610e24610d7d565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e5a57610e5a610d7d565b5060010190565b6000825160005b81811015610e825760208186018101518583015201610e68565b81811115610e91576000828501525b509190910192915050565b600060208284031215610eae57600080fd5b81518015158114610ebe57600080fd5b939250505056fea26469706673582212201aa4dde40cfd127d0c7e9da2c58dd55a5f7da3320e172cd2c7ac1efa3077a58964736f6c634300080d0033";

export class ThiefRouter__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _factory: string,
    _WETH: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ThiefRouter> {
    return super.deploy(
      _factory,
      _WETH,
      overrides || {}
    ) as Promise<ThiefRouter>;
  }
  getDeployTransaction(
    _factory: string,
    _WETH: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_factory, _WETH, overrides || {});
  }
  attach(address: string): ThiefRouter {
    return super.attach(address) as ThiefRouter;
  }
  connect(signer: Signer): ThiefRouter__factory {
    return super.connect(signer) as ThiefRouter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ThiefRouterInterface {
    return new utils.Interface(_abi) as ThiefRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ThiefRouter {
    return new Contract(address, _abi, signerOrProvider) as ThiefRouter;
  }
}
