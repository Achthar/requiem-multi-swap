{
  "address": "0x9d303a83F8a918a60dbA506A4401f688B37142cb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "output",
          "type": "address"
        }
      ],
      "name": "Exchange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRequiemQRouter.Swap[][]",
          "name": "swapSequences",
          "type": "tuple[][]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "multihopBatchSwapExactIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRequiemQRouter.Swap[][]",
          "name": "swapSequences",
          "type": "tuple[][]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "multihopBatchSwapExactOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountLast",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountLast",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountLast",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETHSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xae3dd72173df04a63063bd4737a2883f9e8b61ced8d73d0951f4f906cfce8e7a",
  "receipt": {
    "to": null,
    "from": "0x10E38dFfFCfdBaaf590D5A9958B01C9cfcF6A63B",
    "contractAddress": "0x9d303a83F8a918a60dbA506A4401f688B37142cb",
    "transactionIndex": 0,
    "gasUsed": "4127702",
    "logsBloom": "0x
    "blockHash": "0x1235c1c4a8c16ed3b1b4d3bead4695b02ba8f92e31d02b2a542519b743a74ee2",
    "transactionHash": "0xae3dd72173df04a63063bd4737a2883f9e8b61ced8d73d0951f4f906cfce8e7a",
    "logs": [],
    "blockNumber": 130048,
    "cumulativeGasUsed": "4127702",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x274B1F7F8e66B044B2DC773E017750957f70490c",
    "0xfb40cd35C0cF322fA3cfB8D67b533Bd9ad7df056"
  ],
  "solcInputHash": "e0eb249e18fde66ee987adcef851d11b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"output\",\"type\":\"address\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IRequiemQRouter.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IRequiemQRouter.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLast\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLast\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLast\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemQRouter.sol\":\"RequiemQRouter\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/RequiemQRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.10;\\n\\nimport \\\"./interfaces/IRequiemWeightedPairFactory.sol\\\";\\nimport \\\"./interfaces/IRequiemFormula.sol\\\";\\nimport \\\"./interfaces/IRequiemWeightedPair.sol\\\";\\nimport \\\"./interfaces/IRequiemSwap.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IRequiemQRouter.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\ncontract RequiemQRouter is IRequiemQRouter {\\n    address public immutable override factory;\\n    address public immutable override formula;\\n    address public immutable override WETH;\\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"Router: EXPIRED\\\");\\n        _;\\n    }\\n\\n    constructor(address _factory, address _WETH) {\\n        factory = _factory;\\n        formula = IRequiemWeightedPairFactory(_factory).formula();\\n        WETH = _WETH;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH);\\n        // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        address tokenIn,\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        address input = tokenIn;\\n        for (uint256 i = 0; i < path.length; i++) {\\n            IRequiemWeightedPair pairV2 = IRequiemWeightedPair(path[i]);\\n            address token0 = pairV2.token0();\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out, address output) = input == token0 ? (uint256(0), amountOut, pairV2.token1()) : (amountOut, uint256(0), token0);\\n            address to = i < path.length - 1 ? path[i + 1] : _to;\\n            pairV2.swap(amount0Out, amount1Out, to, new bytes(0));\\n            emit Exchange(address(pairV2), amountOut, output);\\n            input = output;\\n        }\\n    }\\n\\n    function swapExactTokensForTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) public virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _validateAmountOut(tokenIn, tokenOut, amountIn, amountOutMin, path);\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\\n        _swap(tokenIn, amounts, path, to);\\n    }\\n\\n    // the onSwap functions are designed to include the stable swap\\n    // it currenty only allows exactIn structures\\n    function onSwapExactTokensForTokens(\\n        address[] memory pools,\\n        address[] memory tokens,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to,\\n        uint256 deadline\\n    ) public virtual ensure(deadline) returns (uint256 amountLast) {\\n        amountLast = amountIn;\\n        TransferHelper.safeTransferFrom(tokens[0], msg.sender, pools[0], amountIn);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address _to = i == pools.length - 1 ? to : pools[i + 1];\\n            amountLast = IRequiemSwap(pools[i]).onSwapGivenIn(tokens[i], tokens[i + 1], amountLast, 0, _to);\\n        }\\n        require(amountOutMin <= amountLast, \\\"INSUFFICIENT_OUTPUT\\\");\\n    }\\n\\n    function onSwapExactETHForTokens(\\n        address[] memory pools,\\n        address[] memory tokens,\\n        uint256 amountOutMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual ensure(deadline) returns (uint256 amountLast) {\\n        amountLast = msg.value;\\n        transferETHTo(msg.value, pools[0]);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address _to = i == pools.length - 1 ? to : pools[i + 1];\\n            amountLast = IRequiemSwap(pools[i]).onSwapGivenIn(tokens[i], tokens[i + 1], amountLast, 0, _to);\\n        }\\n        require(amountOutMin <= amountLast, \\\"INSUFFICIENT_OUTPUT\\\");\\n    }\\n\\n    function onSwapExactTokensForETH(\\n        address[] memory pools,\\n        address[] memory tokens,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to,\\n        uint256 deadline\\n    ) external virtual ensure(deadline) returns (uint256 amountLast) {\\n        amountLast = amountIn;\\n        TransferHelper.safeTransferFrom(tokens[0], msg.sender, pools[0], amountIn);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address _to = i == pools.length - 1 ? address(this) : pools[i + 1];\\n            amountLast = IRequiemSwap(pools[i]).onSwapGivenIn(tokens[i], tokens[i + 1], amountLast, 0, _to);\\n        }\\n        require(amountOutMin <= amountLast, \\\"INSUFFICIENT_OUTPUT\\\");\\n        transferAll(ETH_ADDRESS, to, amountLast);\\n    }\\n\\n    // direct swap function for given exact output\\n    function onSwapTokensForExactTokens(\\n        address[] memory pools,\\n        address[] memory tokens,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to,\\n        uint256 deadline\\n    ) external virtual ensure(deadline) returns (uint256[] memory amounts) {\\n        // set amount array\\n        amounts = new uint256[](tokens.length);\\n        amounts[pools.length] = amountOut;\\n\\n        // calculate all amounts to be sent and recieved\\n        for (uint256 i = amounts.length - 1; i > 0; i--) {\\n            amounts[i - 1] = IRequiemSwap(pools[i - 1]).calculateSwapGivenOut(tokens[i - 1], tokens[i], amounts[i]);\\n        }\\n\\n        // check input condition\\n        require(amounts[0] <= amountInMax, \\\"EXCESSIVE_INPUT\\\");\\n\\n        // tranfer amounts\\n        TransferHelper.safeTransferFrom(tokens[0], msg.sender, pools[0], amounts[0]);\\n\\n        // use general swap functions that do not execute the full calculation to save gas\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address _to = i == pools.length - 1 ? to : pools[i + 1];\\n            IRequiemSwap(pools[i]).onSwap(tokens[i], tokens[i + 1], amounts[i], amounts[i + 1], _to);\\n        }\\n    }\\n\\n    function onSwapETHForExactTokens(\\n        address[] memory pools,\\n        address[] memory tokens,\\n        uint256 amountOut,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = new uint256[](tokens.length);\\n        amounts[pools.length] = amountOut;\\n        for (uint256 i = amounts.length - 1; i > 0; i--) {\\n            amounts[i - 1] = IRequiemSwap(pools[i - 1]).calculateSwapGivenOut(tokens[i - 1], tokens[i], amounts[i]);\\n        }\\n\\n        require(amounts[0] <= msg.value, \\\"EXCESSIVE_INPUT\\\");\\n\\n        transferETHTo(amounts[0], pools[0]);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address _to = i == pools.length - 1 ? to : pools[i + 1];\\n            IRequiemSwap(pools[i]).onSwap(tokens[i], tokens[i + 1], amounts[i], amounts[i + 1], _to);\\n        }\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\n    }\\n\\n    function onSwapTokensForExactETH(\\n        address[] memory pools,\\n        address[] memory tokens,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to,\\n        uint256 deadline\\n    ) external virtual ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = new uint256[](tokens.length);\\n        amounts[pools.length] = amountOut;\\n        for (uint256 i = amounts.length - 1; i > 0; i--) {\\n            amounts[i - 1] = IRequiemSwap(pools[i - 1]).calculateSwapGivenOut(tokens[i - 1], tokens[i], amounts[i]);\\n        }\\n\\n        require(amounts[0] <= amountInMax, \\\"EXCESSIVE_INPUT\\\");\\n        TransferHelper.safeTransferFrom(tokens[0], msg.sender, pools[0], amounts[0]);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address _to = i == pools.length - 1 ? address(this) : pools[i + 1];\\n            IRequiemSwap(pools[i]).onSwap(tokens[i], tokens[i + 1], amounts[i], amounts[i + 1], _to);\\n        }\\n\\n        transferAll(ETH_ADDRESS, to, amountOut);\\n    }\\n\\n    function swapTokensForExactTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _validateAmountIn(tokenIn, tokenOut, amountOut, amountInMax, path);\\n\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\\n        _swap(tokenIn, amounts, path, to);\\n    }\\n\\n    function swapExactETHForTokens(\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _validateAmountOut(WETH, tokenOut, msg.value, amountOutMin, path);\\n\\n        transferETHTo(amounts[0], path[0]);\\n        _swap(WETH, amounts, path, to);\\n    }\\n\\n    function swapTokensForExactETH(\\n        address tokenIn,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _validateAmountIn(tokenIn, WETH, amountOut, amountInMax, path);\\n\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\\n        _swap(tokenIn, amounts, path, address(this));\\n        transferAll(ETH_ADDRESS, to, amounts[amounts.length - 1]);\\n    }\\n\\n    function swapExactTokensForETH(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _validateAmountOut(tokenIn, WETH, amountIn, amountOutMin, path);\\n\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\\n        _swap(tokenIn, amounts, path, address(this));\\n        transferAll(ETH_ADDRESS, to, amounts[amounts.length - 1]);\\n    }\\n\\n    function swapETHForExactTokens(\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _validateAmountIn(WETH, tokenOut, amountOut, msg.value, path);\\n\\n        transferETHTo(amounts[0], path[0]);\\n        _swap(WETH, amounts, path, to);\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\n    }\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swapSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        address input = tokenIn;\\n        for (uint256 i; i < path.length; i++) {\\n            IRequiemWeightedPair pair = IRequiemWeightedPair(path[i]);\\n            uint256 amountInput;\\n            uint256 amountOutput;\\n            address currentOutput;\\n            {\\n                (address output, uint256 reserveInput, uint256 reserveOutput, uint32 tokenWeightInput, uint32 tokenWeightOutput, uint32 swapFee) = IRequiemFormula(formula).getFactoryReserveAndWeights(\\n                    factory,\\n                    address(pair),\\n                    input\\n                );\\n                amountInput = IERC20(input).balanceOf(address(pair)) - reserveInput;\\n                amountOutput = IRequiemFormula(formula).getAmountOut(amountInput, reserveInput, reserveOutput, tokenWeightInput, tokenWeightOutput, swapFee);\\n                currentOutput = output;\\n            }\\n            (uint256 amount0Out, uint256 amount1Out) = input == pair.token0() ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\\n            address to = i < path.length - 1 ? path[i + 1] : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n            emit Exchange(address(pair), amountOutput, currentOutput);\\n            input = currentOutput;\\n        }\\n    }\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override ensure(deadline) {\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amountIn);\\n        uint256 balanceBefore = IERC20(tokenOut).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(tokenIn, path, to);\\n        require(IERC20(tokenOut).balanceOf(to) - balanceBefore >= amountOutMin, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    }\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual override ensure(deadline) {\\n        //            require(path[0] == WETH, \\\"Router: INVALID_PATH\\\");\\n        uint256 amountIn = msg.value;\\n        transferETHTo(amountIn, path[0]);\\n        uint256 balanceBefore = IERC20(tokenOut).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(WETH, path, to);\\n        require(IERC20(tokenOut).balanceOf(to) - balanceBefore >= amountOutMin, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    }\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override ensure(deadline) {\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amountIn);\\n        _swapSupportingFeeOnTransferTokens(tokenIn, path, address(this));\\n        uint256 amountOut = IERC20(WETH).balanceOf(address(this));\\n        require(amountOut >= amountOutMin, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        transferAll(ETH_ADDRESS, to, amountOut);\\n    }\\n\\n    function multihopBatchSwapExactIn(\\n        Swap[][] memory swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 totalAmountIn,\\n        uint256 minTotalAmountOut,\\n        uint256 deadline\\n    ) public payable virtual override ensure(deadline) returns (uint256 totalAmountOut) {\\n        transferFromAll(tokenIn, totalAmountIn);\\n        uint256 balanceBefore;\\n        if (!isETH(tokenOut)) {\\n            balanceBefore = IERC20(tokenOut).balanceOf(msg.sender);\\n        }\\n\\n        for (uint256 i = 0; i < swapSequences.length; i++) {\\n            uint256 tokenAmountOut;\\n            for (uint256 k = 0; k < swapSequences[i].length; k++) {\\n                Swap memory swap = swapSequences[i][k];\\n                if (k > 0) {\\n                    // Makes sure that on the second swap the output of the first was used\\n                    // so there is not intermediate token leftover\\n                    swap.swapAmount = tokenAmountOut;\\n                }\\n                tokenAmountOut = _swapSingleSupportFeeOnTransferTokens(swap.tokenIn, swap.tokenOut, swap.pool, swap.swapAmount, swap.limitReturnAmount);\\n            }\\n\\n            // This takes the amountOut of the last swap\\n            tokenAmountOut += totalAmountOut;\\n        }\\n\\n        transferAll(tokenOut, msg.sender, totalAmountOut);\\n        transferAll(tokenIn, msg.sender, getBalance(tokenIn));\\n\\n        if (isETH(tokenOut)) {\\n            require(totalAmountOut >= minTotalAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n        } else {\\n            require(IERC20(tokenOut).balanceOf(msg.sender) - balanceBefore >= minTotalAmountOut, \\\"<minTotalAmountOut\\\");\\n        }\\n    }\\n\\n    function multihopBatchSwapExactOut(\\n        Swap[][] memory swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 maxTotalAmountIn,\\n        uint256 deadline\\n    ) public payable virtual override ensure(deadline) returns (uint256 totalAmountIn) {\\n        transferFromAll(tokenIn, maxTotalAmountIn);\\n\\n        for (uint256 i = 0; i < swapSequences.length; i++) {\\n            uint256 tokenAmountInFirstSwap;\\n            // Specific code for a simple swap and a multihop (2 swaps in sequence)\\n            if (swapSequences[i].length == 1) {\\n                Swap memory swap = swapSequences[i][0];\\n                tokenAmountInFirstSwap = _swapSingleMixOut(swap.tokenIn, swap.tokenOut, swap.pool, swap.swapAmount, swap.limitReturnAmount);\\n            } else {\\n                // Consider we are swapping A -> B and B -> C. The goal is to buy a given amount\\n                // of token C. But first we need to buy B with A so we can then buy C with B\\n                // To get the exact amount of C we then first need to calculate how much B we\\\"ll need:\\n                uint256 intermediateTokenAmount;\\n                // This would be token B as described above\\n                Swap memory secondSwap = swapSequences[i][1];\\n                {\\n                    address[] memory paths = new address[](1);\\n                    paths[0] = secondSwap.pool;\\n                    uint256[] memory amounts = IRequiemFormula(formula).getFactoryAmountsIn(factory, secondSwap.tokenIn, secondSwap.tokenOut, secondSwap.swapAmount, paths);\\n                    intermediateTokenAmount = amounts[0];\\n                    require(intermediateTokenAmount <= secondSwap.limitReturnAmount, \\\"Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n                }\\n\\n                //// Buy intermediateTokenAmount of token B with A in the first pool\\n                Swap memory firstSwap = swapSequences[i][0];\\n                tokenAmountInFirstSwap = _swapSingleMixOut(firstSwap.tokenIn, firstSwap.tokenOut, firstSwap.pool, intermediateTokenAmount, firstSwap.limitReturnAmount);\\n\\n                //// Buy the final amount of token C desired\\n                _swapSingle(secondSwap.tokenIn, secondSwap.pool, intermediateTokenAmount, secondSwap.swapAmount);\\n            }\\n\\n            totalAmountIn += tokenAmountInFirstSwap;\\n        }\\n\\n        require(totalAmountIn <= maxTotalAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        transferAll(tokenOut, msg.sender, getBalance(tokenOut));\\n        transferAll(tokenIn, msg.sender, getBalance(tokenIn));\\n    }\\n\\n    function transferFromAll(address token, uint256 amount) internal returns (bool) {\\n        if (isETH(token)) {\\n            IWETH(WETH).deposit{value: msg.value}();\\n        } else {\\n            TransferHelper.safeTransferFrom(token, msg.sender, address(this), amount);\\n        }\\n        return true;\\n    }\\n\\n    function getBalance(address token) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return IWETH(WETH).balanceOf(address(this));\\n        } else {\\n            return IERC20(token).balanceOf(address(this));\\n        }\\n    }\\n\\n    function _swapSingleMixOut(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool,\\n        uint256 swapAmount,\\n        uint256 limitReturnAmount\\n    ) internal returns (uint256 tokenAmountIn) {\\n        address[] memory paths = new address[](1);\\n        paths[0] = pool;\\n        uint256[] memory amounts = IRequiemFormula(formula).getFactoryAmountsIn(factory, tokenIn, tokenOut, swapAmount, paths);\\n        tokenAmountIn = amounts[0];\\n        require(tokenAmountIn <= limitReturnAmount, \\\"Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n        _swapSingle(tokenIn, pool, tokenAmountIn, amounts[1]);\\n    }\\n\\n    function _swapSingle(\\n        address tokenIn,\\n        address pair,\\n        uint256 targetSwapAmount,\\n        uint256 targetOutAmount\\n    ) internal {\\n        TransferHelper.safeTransfer(tokenIn, pair, targetSwapAmount);\\n        IRequiemWeightedPair pairV2 = IRequiemWeightedPair(pair);\\n        address token0 = pairV2.token0();\\n\\n        (uint256 amount0Out, uint256 amount1Out, address output) = tokenIn == token0 ? (uint256(0), targetOutAmount, pairV2.token1()) : (targetOutAmount, uint256(0), token0);\\n        pairV2.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n\\n        emit Exchange(pair, targetOutAmount, output);\\n    }\\n\\n    function _swapSingleSupportFeeOnTransferTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool,\\n        uint256 swapAmount,\\n        uint256 limitReturnAmount\\n    ) internal returns (uint256 tokenAmountOut) {\\n        TransferHelper.safeTransfer(tokenIn, pool, swapAmount);\\n\\n        uint256 amountOutput;\\n        {\\n            (, uint256 reserveInput, uint256 reserveOutput, uint32 tokenWeightInput, uint32 tokenWeightOutput, uint32 swapFee) = IRequiemFormula(formula).getFactoryReserveAndWeights(\\n                factory,\\n                pool,\\n                tokenIn\\n            );\\n            uint256 amountInput = IERC20(tokenIn).balanceOf(pool) - reserveInput;\\n            amountOutput = IRequiemFormula(formula).getAmountOut(amountInput, reserveInput, reserveOutput, tokenWeightInput, tokenWeightOutput, swapFee);\\n        }\\n        uint256 balanceBefore = IERC20(tokenOut).balanceOf(address(this));\\n        (uint256 amount0Out, uint256 amount1Out) = tokenIn == IRequiemWeightedPair(pool).token0() ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\\n        IRequiemWeightedPair(pool).swap(amount0Out, amount1Out, address(this), new bytes(0));\\n        emit Exchange(pool, amountOutput, tokenOut);\\n\\n        tokenAmountOut = IERC20(tokenOut).balanceOf(address(this)) - balanceBefore;\\n        require(tokenAmountOut >= limitReturnAmount, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    }\\n\\n    function _validateAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        amounts = IRequiemFormula(formula).getFactoryAmountsOut(factory, tokenIn, tokenOut, amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    }\\n\\n    function _calculateAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        amounts = IRequiemFormula(formula).getFactoryAmountsOut(factory, tokenIn, tokenOut, amountIn, path);\\n    }\\n\\n    function _validateAmountIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        amounts = IRequiemFormula(formula).getFactoryAmountsIn(factory, tokenIn, tokenOut, amountOut, path);\\n        require(amounts[0] <= amountInMax, \\\"Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n    }\\n\\n    // the same as _validateAmountIn, just with no requirement checking\\n    function _calculateAmountIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        amounts = IRequiemFormula(formula).getFactoryAmountsIn(factory, tokenIn, tokenOut, amountOut, path);\\n    }\\n\\n    function transferETHTo(uint256 amount, address to) internal {\\n        IWETH(WETH).deposit{value: amount}();\\n        assert(IWETH(WETH).transfer(to, amount));\\n    }\\n\\n    function transferAll(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n\\n        if (isETH(token)) {\\n            IWETH(WETH).withdraw(amount);\\n            TransferHelper.safeTransferETH(to, amount);\\n        } else {\\n            TransferHelper.safeTransfer(token, to, amount);\\n        }\\n        return true;\\n    }\\n\\n    function isETH(address token) internal pure returns (bool) {\\n        return (token == ETH_ADDRESS);\\n    }\\n}\\n\",\"keccak256\":\"0xe64a3346816d77b84e8560e06d9a9a9329eaed99ca6e2f6c6fadfed6894083df\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb7230835a4efbbbebcb5371d121977e859388b33f3ee5d9a7a44fc4de8d6b970\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.10;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IRequiemFormula {\\n\\n    function getReserveAndWeights(address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getPairAmountIn(address pair, address tokenIn, uint amountOut) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getPairAmountOut(address pair, address tokenIn, uint amountIn) external view returns (uint amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x801bfafc508f453eba70058a66da15de703047424df29d54001d80901f0c8f0a\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IRequiemPairERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemPairERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x54909aaa58357205c588740c70e25af35f1e47716fced8011af45258a832edc7\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemQRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemQRouter {\\n    event Exchange(address pair, uint256 amountOut, address output);\\n    struct Swap {\\n        address pool;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 swapAmount; // tokenInAmount / tokenOutAmount\\n        uint256 limitReturnAmount; // minAmountOut / maxAmountIn\\n        uint256 maxPrice;\\n    }\\n\\n    function factory() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function swapExactTokensForTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        address tokenIn,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function multihopBatchSwapExactIn(\\n        Swap[][] memory swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 totalAmountIn,\\n        uint256 minTotalAmountOut,\\n        uint256 deadline\\n    ) external payable returns (uint256 totalAmountOut);\\n\\n    function multihopBatchSwapExactOut(\\n        Swap[][] memory swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 maxTotalAmountIn,\\n        uint256 deadline\\n    ) external payable returns (uint256 totalAmountIn);\\n}\\n\",\"keccak256\":\"0xc5b704b44bfb52080506383551d1fc4bd1ecb42452830a777fa029008bca55bc\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemSwap {\\n    // this funtion requires the correctly calculated amounts as input\\n    // the others are supposed to implement that calculation\\n    // no return value required since the amounts are already known\\n    function onSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address to\\n    ) external;\\n\\n    //\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external returns (uint256);\\n\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to\\n    ) external returns (uint256);\\n\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (uint256);\\n\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x905db01e6f2b1be6fa834315054c375eac7f2c719dc3ca333dfb5d5597bfde56\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IRequiemPairERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemWeightedPair is IRequiemPairERC20 {\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n    function getSwapFee() external view returns (uint32);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address,\\n        address,\\n        uint32,\\n        uint32\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdc14681f3c19282e4ef1e79de84867b359df1d1554f3660dafce3d93fdd0af0c\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPairFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.10;\\n\\ninterface IRequiemWeightedPairFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function protocolFee() external view returns (uint256);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function isPair(address) external view returns (bool);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external returns (address pair);\\n\\n    function getWeightsAndSwapFee(address pair)\\n        external\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        );\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setProtocolFee(uint256) external;\\n}\\n\",\"keccak256\":\"0xf7e09bea1624240eaa03b3e6a22b6c1309b1c5a76345fd2609218883ed421e61\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for WETH9.\\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x13735d45257a1ea45c2a7dc3bb8a68c89ae9b7159f57180c395793f57c05afcc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.10;\\n\\n// solhint-disable avoid-low-level-calls, reason-string\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xcb1337f49b7a886980209ccd42806883db2bfa17b8dac448587f31ddd1147a1b\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620048ba380380620048ba8339810160408190526200003491620000db565b6001600160a01b038216608081905260408051634b75f54f60e01b81529051634b75f54f916004808201926020929091908290030181865afa1580156200007f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a5919062000113565b6001600160a01b0390811660a0521660c0525062000138565b80516001600160a01b0381168114620000d657600080fd5b919050565b60008060408385031215620000ef57600080fd5b620000fa83620000be565b91506200010a60208401620000be565b90509250929050565b6000602082840312156200012657600080fd5b6200013182620000be565b9392505050565b60805160a05160c05161468e6200022c600039600081816101030152818161029a01528181610dcd01528181610f580152818161140101528181611a6c01528181611aff0152818161230701528181612389015281816124010152818161245e015281816124e401528181612b4001528181612bdb0152612fa1015260008181610193015281816111d0015281816127a6015281816128f301528181612cc801528181613068015281816133bb015281816134d30152613621015260008181610321015281816111ff015281816127d501528181612cf501528181613095015281816133e80152613502015261468e6000f3fe6080604052600436106100f35760003560e01c806308c820da146101375780630d1424a3146101605780634b75f54f1461018157806351bf1830146101c25780635cae0310146101e2578063674ee80b14610202578063840c34d0146102155780639c91fcb514610228578063a67d0e3c14610248578063abbfddc514610268578063ad5c464814610288578063b05f579e146102bc578063b4e819fd146102cf578063bff51d71146102ef578063c45a01551461030f578063ce81963214610343578063d59e44ee14610356578063f35aaf6314610376578063fa3219d514610396578063fde1adda146103b657600080fd5b3661013257336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461013057610130613a00565b005b600080fd5b61014a610145366004613b28565b6103c9565b6040516101579190613baf565b60405180910390f35b61017361016e366004613b28565b6107ca565b604051908152602001610157565b34801561018d57600080fd5b506101b57f000000000000000000000000000000000000000000000000000000000000000081565b6040516101579190613bf3565b3480156101ce57600080fd5b5061014a6101dd366004613c07565b61095c565b3480156101ee57600080fd5b506101306101fd366004613ce5565b610d20565b610130610210366004613d6b565b610e90565b610173610223366004613f20565b611054565b34801561023457600080fd5b5061014a610243366004613ce5565b6113d8565b34801561025457600080fd5b50610130610263366004613f93565b61152f565b34801561027457600080fd5b5061014a610283366004613c07565b6116b0565b34801561029457600080fd5b506101b57f000000000000000000000000000000000000000000000000000000000000000081565b61014a6102ca366004613d6b565b611a44565b3480156102db57600080fd5b506101736102ea366004613c07565b611b9e565b3480156102fb57600080fd5b5061014a61030a36600461402b565b611d59565b34801561031b57600080fd5b506101b57f000000000000000000000000000000000000000000000000000000000000000081565b6101736103513660046140be565b611dbb565b34801561036257600080fd5b5061014a610371366004613f93565b612064565b34801561038257600080fd5b50610173610391366004613c07565b61212e565b3480156103a257600080fd5b5061014a6103b1366004613ce5565b6122de565b61014a6103c4366004613d6b565b612361565b606081428110156103f55760405162461bcd60e51b81526004016103ec9061413b565b60405180910390fd5b85516001600160401b0381111561040e5761040e613a16565b604051908082528060200260200182016040528015610437578160200160208202803683370190505b509150848288518151811061044e5761044e614164565b60200260200101818152505060006001835161046a9190614190565b90505b8015610597578761047f600183614190565b8151811061048f5761048f614164565b60200260200101516001600160a01b031663cc56fd43886001846104b39190614190565b815181106104c3576104c3614164565b60200260200101518984815181106104dd576104dd614164565b60200260200101518685815181106104f7576104f7614164565b60200260200101516040518463ffffffff1660e01b815260040161051d939291906141a7565b602060405180830381865afa15801561053a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055e91906141cb565b8361056a600184614190565b8151811061057a5761057a614164565b60209081029190910101528061058f816141e4565b91505061046d565b5034826000815181106105ac576105ac614164565b602002602001015111156105d25760405162461bcd60e51b81526004016103ec906141fb565b610610826000815181106105e8576105e8614164565b60200260200101518860008151811061060357610603614164565b602002602001015161245c565b60005b875181101561076e5760006001895161062c9190614190565b821461065b578861063e836001614224565b8151811061064e5761064e614164565b602002602001015161065d565b855b905088828151811061067157610671614164565b60200260200101516001600160a01b03166332fd549389848151811061069957610699614164565b60200260200101518a8560016106af9190614224565b815181106106bf576106bf614164565b60200260200101518786815181106106d9576106d9614164565b6020026020010151888760016106ef9190614224565b815181106106ff576106ff614164565b6020026020010151866040518663ffffffff1660e01b815260040161072895949392919061423c565b600060405180830381600087803b15801561074257600080fd5b505af1158015610756573d6000803e3d6000fd5b505050505080806107669061426c565b915050610613565b508160008151811061078257610782614164565b60200260200101513411156107c0576107c033836000815181106107a8576107a8614164565b6020026020010151346107bb9190614190565b612571565b5095945050505050565b600081428110156107ed5760405162461bcd60e51b81526004016103ec9061413b565b349150610807348860008151811061060357610603614164565b60005b875181101561093b576000600189516108239190614190565b82146108525788610835836001614224565b8151811061084557610845614164565b6020026020010151610854565b855b905088828151811061086857610868614164565b60200260200101516001600160a01b0316634ac00e0389848151811061089057610890614164565b60200260200101518a8560016108a69190614224565b815181106108b6576108b6614164565b6020026020010151876000866040518663ffffffff1660e01b81526004016108e295949392919061423c565b6020604051808303816000875af1158015610901573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092591906141cb565b93505080806109339061426c565b91505061080a565b50818511156107c05760405162461bcd60e51b81526004016103ec90614287565b6060814281101561097f5760405162461bcd60e51b81526004016103ec9061413b565b86516001600160401b0381111561099857610998613a16565b6040519080825280602002602001820160405280156109c1578160200160208202803683370190505b50915085828951815181106109d8576109d8614164565b6020026020010181815250506000600183516109f49190614190565b90505b8015610b215788610a09600183614190565b81518110610a1957610a19614164565b60200260200101516001600160a01b031663cc56fd4389600184610a3d9190614190565b81518110610a4d57610a4d614164565b60200260200101518a8481518110610a6757610a67614164565b6020026020010151868581518110610a8157610a81614164565b60200260200101516040518463ffffffff1660e01b8152600401610aa7939291906141a7565b602060405180830381865afa158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae891906141cb565b83610af4600184614190565b81518110610b0457610b04614164565b602090810291909101015280610b19816141e4565b9150506109f7565b508482600081518110610b3657610b36614164565b60200260200101511115610b5c5760405162461bcd60e51b81526004016103ec906141fb565b610bb687600081518110610b7257610b72614164565b6020026020010151338a600081518110610b8e57610b8e614164565b602002602001015185600081518110610ba957610ba9614164565b602002602001015161263f565b60005b8851811015610d1457600060018a51610bd29190614190565b8214610c015789610be4836001614224565b81518110610bf457610bf4614164565b6020026020010151610c03565b855b9050898281518110610c1757610c17614164565b60200260200101516001600160a01b03166332fd54938a8481518110610c3f57610c3f614164565b60200260200101518b856001610c559190614224565b81518110610c6557610c65614164565b6020026020010151878681518110610c7f57610c7f614164565b602002602001015188876001610c959190614224565b81518110610ca557610ca5614164565b6020026020010151866040518663ffffffff1660e01b8152600401610cce95949392919061423c565b600060405180830381600087803b158015610ce857600080fd5b505af1158015610cfc573d6000803e3d6000fd5b50505050508080610d0c9061426c565b915050610bb9565b50509695505050505050565b8042811015610d415760405162461bcd60e51b81526004016103ec9061413b565b610d74883387876000818110610d5957610d59614164565b9050602002016020810190610d6e91906142b4565b8a61263f565b610db38886868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525030925061276b915050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610e02903090600401613bf3565b602060405180830381865afa158015610e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4391906141cb565b905086811015610e655760405162461bcd60e51b81526004016103ec906142d1565b610e8473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8583612b0d565b50505050505050505050565b8042811015610eb15760405162461bcd60e51b81526004016103ec9061413b565b34610ee1818787600081610ec757610ec7614164565b9050602002016020810190610edc91906142b4565b61245c565b6040516370a0823160e01b81526000906001600160a01b038a16906370a0823190610f10908890600401613bf3565b602060405180830381865afa158015610f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5191906141cb565b9050610fb27f00000000000000000000000000000000000000000000000000000000000000008888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a925061276b915050565b87818a6001600160a01b03166370a08231886040518263ffffffff1660e01b8152600401610fe09190613bf3565b602060405180830381865afa158015610ffd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102191906141cb565b61102b9190614190565b10156110495760405162461bcd60e51b81526004016103ec906142d1565b505050505050505050565b600081428110156110775760405162461bcd60e51b81526004016103ec9061413b565b6110818685612bc9565b5060005b875181101561136b5760008882815181106110a2576110a2614164565b602002602001015151600114156111145760008983815181106110c7576110c7614164565b60200260200101516000815181106110e1576110e1614164565b6020026020010151905061110c81602001518260400151836000015184606001518560800151612c67565b91505061134b565b6000808a848151811061112957611129614164565b602002602001015160018151811061114357611143614164565b60200260200101519050600060016001600160401b0381111561116857611168613a16565b604051908082528060200260200182016040528015611191578160200160208202803683370190505b5090508160000151816000815181106111ac576111ac614164565b60200260200101906001600160a01b031690816001600160a01b03168152505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166367f84adc7f0000000000000000000000000000000000000000000000000000000000000000856020015186604001518760600151876040518663ffffffff1660e01b815260040161124e959493929190614313565b600060405180830381865afa15801561126b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112939190810190614386565b9050806000815181106112a8576112a8614164565b6020026020010151935082608001518411156112d65760405162461bcd60e51b81526004016103ec90614416565b505060008b85815181106112ec576112ec614164565b602002602001015160008151811061130657611306614164565b6020026020010151905061132d816020015182604001518360000151868560800151612c67565b935061134782602001518360000151858560600151612dcb565b5050505b6113558185614224565b93505080806113639061426c565b915050611085565b50838211156113ab5760405162461bcd60e51b815260206004820152600c60248201526b22a9292fa624a6a4aa2fa4a760a11b60448201526064016103ec565b6113be85336113b988612f7a565b612b0d565b506113cd86336113b989612f7a565b505095945050505050565b606081428110156113fb5760405162461bcd60e51b81526004016103ec9061413b565b61145b897f00000000000000000000000000000000000000000000000000000000000000008a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061304e92505050565b915061149d89338888600081811061147557611475614164565b905060200201602081019061148a91906142b4565b85600081518110610ba957610ba9614164565b6114dd898388888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525030925061315b915050565b61152273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8584600186516115059190614190565b8151811061151557611515614164565b6020026020010151612b0d565b5050979650505050505050565b80428110156115505760405162461bcd60e51b81526004016103ec9061413b565b611568893387876000818110610d5957610d59614164565b6040516370a0823160e01b81526000906001600160a01b038a16906370a0823190611597908790600401613bf3565b602060405180830381865afa1580156115b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d891906141cb565b90506116198a87878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525089925061276b915050565b86818a6001600160a01b03166370a08231876040518263ffffffff1660e01b81526004016116479190613bf3565b602060405180830381865afa158015611664573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168891906141cb565b6116929190614190565b1015610e845760405162461bcd60e51b81526004016103ec906142d1565b606081428110156116d35760405162461bcd60e51b81526004016103ec9061413b565b86516001600160401b038111156116ec576116ec613a16565b604051908082528060200260200182016040528015611715578160200160208202803683370190505b509150858289518151811061172c5761172c614164565b6020026020010181815250506000600183516117489190614190565b90505b8015611875578861175d600183614190565b8151811061176d5761176d614164565b60200260200101516001600160a01b031663cc56fd43896001846117919190614190565b815181106117a1576117a1614164565b60200260200101518a84815181106117bb576117bb614164565b60200260200101518685815181106117d5576117d5614164565b60200260200101516040518463ffffffff1660e01b81526004016117fb939291906141a7565b602060405180830381865afa158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c91906141cb565b83611848600184614190565b8151811061185857611858614164565b60209081029190910101528061186d816141e4565b91505061174b565b50848260008151811061188a5761188a614164565b602002602001015111156118b05760405162461bcd60e51b81526004016103ec906141fb565b6118c687600081518110610b7257610b72614164565b60005b8851811015611a2457600060018a516118e29190614190565b821461191157896118f4836001614224565b8151811061190457611904614164565b6020026020010151611913565b305b905089828151811061192757611927614164565b60200260200101516001600160a01b03166332fd54938a848151811061194f5761194f614164565b60200260200101518b8560016119659190614224565b8151811061197557611975614164565b602002602001015187868151811061198f5761198f614164565b6020026020010151888760016119a59190614224565b815181106119b5576119b5614164565b6020026020010151866040518663ffffffff1660e01b81526004016119de95949392919061423c565b600060405180830381600087803b1580156119f857600080fd5b505af1158015611a0c573d6000803e3d6000fd5b50505050508080611a1c9061426c565b9150506118c9565b50610d1473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8588612b0d565b60608142811015611a675760405162461bcd60e51b81526004016103ec9061413b565b611ac77f00000000000000000000000000000000000000000000000000000000000000008989348a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506133a192505050565b9150611afa82600081518110611adf57611adf614164565b602002602001015187876000818110610ec757610ec7614164565b611b5a7f0000000000000000000000000000000000000000000000000000000000000000838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a925061315b915050565b81600081518110611b6d57611b6d614164565b6020026020010151341115611b9357611b9333836000815181106107a8576107a8614164565b509695505050505050565b60008142811015611bc15760405162461bcd60e51b81526004016103ec9061413b565b859150611c0487600081518110611bda57611bda614164565b6020026020010151338a600081518110611bf657611bf6614164565b60200260200101518961263f565b60005b8851811015611d3857600060018a51611c209190614190565b8214611c4f5789611c32836001614224565b81518110611c4257611c42614164565b6020026020010151611c51565b855b9050898281518110611c6557611c65614164565b60200260200101516001600160a01b0316634ac00e038a8481518110611c8d57611c8d614164565b60200260200101518b856001611ca39190614224565b81518110611cb357611cb3614164565b6020026020010151876000866040518663ffffffff1660e01b8152600401611cdf95949392919061423c565b6020604051808303816000875af1158015611cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2291906141cb565b9350508080611d309061426c565b915050611c07565b5081851115611b935760405162461bcd60e51b81526004016103ec90614287565b60608142811015611d7c5760405162461bcd60e51b81526004016103ec9061413b565b611d89898989898961304e565b9150611da3893387600081518110610b8e57610b8e614164565b611daf8983878761315b565b50979650505050505050565b60008142811015611dde5760405162461bcd60e51b81526004016103ec9061413b565b611de88786612bc9565b506000611df487613499565b611e68576040516370a0823160e01b81526001600160a01b038816906370a0823190611e24903390600401613bf3565b602060405180830381865afa158015611e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6591906141cb565b90505b60005b8951811015611f39576000805b8b8381518110611e8a57611e8a614164565b602002602001015151811015611f195760008c8481518110611eae57611eae614164565b60200260200101518281518110611ec757611ec7614164565b602002602001015190506000821115611ee257606081018390525b611f03816020015182604001518360000151846060015185608001516134bb565b9250508080611f119061426c565b915050611e78565b50611f248582614224565b50819050611f318161426c565b915050611e6b565b50611f45873385612b0d565b50611f5488336113b98b612f7a565b50611f5e87613499565b15611fa85784831015611fa35760405162461bcd60e51b815260206004820152600d60248201526c11549497d31253525517d3d555609a1b60448201526064016103ec565b610d14565b8481886001600160a01b03166370a08231336040518263ffffffff1660e01b8152600401611fd69190613bf3565b602060405180830381865afa158015611ff3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201791906141cb565b6120219190614190565b1015610d145760405162461bcd60e51b81526020600482015260126024820152710f1b5a5b951bdd185b105b5bdd5b9d13dd5d60721b60448201526064016103ec565b606081428110156120875760405162461bcd60e51b81526004016103ec9061413b565b6120c78a8a8a8a8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506133a192505050565b91506120e18a338888600081811061147557611475614164565b6121218a838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a925061315b915050565b5098975050505050505050565b600081428110156121515760405162461bcd60e51b81526004016103ec9061413b565b85915061216a87600081518110611bda57611bda614164565b60005b885181101561229e57600060018a516121869190614190565b82146121b55789612198836001614224565b815181106121a8576121a8614164565b60200260200101516121b7565b305b90508982815181106121cb576121cb614164565b60200260200101516001600160a01b0316634ac00e038a84815181106121f3576121f3614164565b60200260200101518b8560016122099190614224565b8151811061221957612219614164565b6020026020010151876000866040518663ffffffff1660e01b815260040161224595949392919061423c565b6020604051808303816000875af1158015612264573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228891906141cb565b93505080806122969061426c565b91505061216d565b50818511156122bf5760405162461bcd60e51b81526004016103ec90614287565b610d1473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8584612b0d565b606081428110156123015760405162461bcd60e51b81526004016103ec9061413b565b61145b897f00000000000000000000000000000000000000000000000000000000000000008a8a8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506133a192505050565b606081428110156123845760405162461bcd60e51b81526004016103ec9061413b565b6123e47f000000000000000000000000000000000000000000000000000000000000000089348a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061304e92505050565b91506123fc82600081518110611adf57611adf614164565b611b937f0000000000000000000000000000000000000000000000000000000000000000838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a925061315b915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156124b757600080fd5b505af11580156124cb573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925061251e91508490869060040161444d565b6020604051808303816000875af115801561253d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125619190614466565b61256d5761256d613a00565b5050565b604080516000808252602082019092526001600160a01b03841690839060405161259b91906144b8565b60006040518083038185875af1925050503d80600081146125d8576040519150601f19603f3d011682016040523d82523d6000602084013e6125dd565b606091505b505090508061263a5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016103ec565b505050565b600080856001600160a01b03166323b872dd868686604051602401612666939291906141a7565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161269f91906144b8565b6000604051808303816000865af19150503d80600081146126dc576040519150601f19603f3d011682016040523d82523d6000602084013e6126e1565b606091505b509150915081801561270b57508051158061270b57508080602001905181019061270b9190614466565b6127635760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b60648201526084016103ec565b505050505050565b8260005b8351811015612b0657600084828151811061278c5761278c614164565b6020026020010151905060008060008060008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b33d96b07f00000000000000000000000000000000000000000000000000000000000000008c8f6040518463ffffffff1660e01b8152600401612814939291906144d4565b60c060405180830381865afa158015612831573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612855919061450b565b955095509550955095509550848c6001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040161288e9190613bf3565b602060405180830381865afa1580156128ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cf91906141cb565b6128d99190614190565b60405163671a11b560e01b81529099506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063671a11b590612932908c9089908990899089908990600401614574565b602060405180830381865afa15801561294f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297391906141cb565b9750859650505050505050600080856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e391906145a8565b6001600160a01b0316886001600160a01b031614612a0357836000612a07565b6000845b91509150600060018b51612a1b9190614190565b8810612a275789612a4c565b8a612a33896001614224565b81518110612a4357612a43614164565b60200260200101515b6040805160008152602081019182905263022c0d9f60e01b9091529091506001600160a01b0388169063022c0d9f90612a8e90869086908690602481016145c5565b600060405180830381600087803b158015612aa857600080fd5b505af1158015612abc573d6000803e3d6000fd5b50505050600080516020614639833981519152878686604051612ae193929190614615565b60405180910390a1839850505050505050508080612afe9061426c565b91505061276f565b5050505050565b600081612b1c57506001612bc2565b612b2584613499565b15612bb357604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015612b8c57600080fd5b505af1158015612ba0573d6000803e3d6000fd5b50505050612bae8383612571565b612bbe565b612bbe8484846138ea565b5060015b9392505050565b6000612bd483613499565b15612c52577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015612c3457600080fd5b505af1158015612c48573d6000803e3d6000fd5b5050505050612c5e565b612c5e8333308561263f565b50600192915050565b604080516001808252818301909252600091829190602080830190803683370190505090508481600081518110612ca057612ca0614164565b6001600160a01b0392831660209182029290920101526040516319fe12b760e21b81526000917f000000000000000000000000000000000000000000000000000000000000000016906367f84adc90612d25907f0000000000000000000000000000000000000000000000000000000000000000908c908c908b908990600401614313565b600060405180830381865afa158015612d42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612d6a9190810190614386565b905080600081518110612d7f57612d7f614164565b6020026020010151925083831115612da95760405162461bcd60e51b81526004016103ec90614416565b6113cd88878584600181518110612dc257612dc2614164565b60200260200101515b612dd68484846138ea565b60008390506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3f91906145a8565b90506000806000836001600160a01b0316896001600160a01b031614612e685785600085612ecd565b600086866001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecd91906145a8565b6040805160008152602081019182905263022c0d9f60e01b90915292955090935091506001600160a01b0386169063022c0d9f90612f1490869086903090602481016145c5565b600060405180830381600087803b158015612f2e57600080fd5b505af1158015612f42573d6000803e3d6000fd5b50505050600080516020614639833981519152888783604051612f6793929190614615565b60405180910390a1505050505050505050565b6000612f8582613499565b1561301d576040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612fd6903090600401613bf3565b602060405180830381865afa158015612ff3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301791906141cb565b92915050565b6040516370a0823160e01b81526001600160a01b038316906370a0823190612fd6903090600401613bf3565b919050565b60405163119220a560e01b81526060906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063119220a5906130c5907f0000000000000000000000000000000000000000000000000000000000000000908a908a908a908990600401614313565b600060405180830381865afa1580156130e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261310a9190810190614386565b905082816001835161311c9190614190565b8151811061312c5761312c614164565b602002602001015110156131525760405162461bcd60e51b81526004016103ec906142d1565b95945050505050565b8360005b835181101561276357600084828151811061317c5761317c614164565b602002602001015190506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ea91906145a8565b90506000876131fa856001614224565b8151811061320a5761320a614164565b602002602001015190506000806000846001600160a01b0316886001600160a01b03161461323b57836000866132a0565b600084876001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561327c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132a091906145a8565b925092509250600060018b516132b69190614190565b88106132c257896132e7565b8a6132ce896001614224565b815181106132de576132de614164565b60200260200101515b6040805160008152602081019182905263022c0d9f60e01b9091529091506001600160a01b0388169063022c0d9f9061332990879087908690602481016145c5565b600060405180830381600087803b15801561334357600080fd5b505af1158015613357573d6000803e3d6000fd5b5050505060008051602061463983398151915287868460405161337c93929190614615565b60405180910390a18198505050505050505080806133999061426c565b91505061315f565b6040516319fe12b760e21b81526060906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906367f84adc90613418907f0000000000000000000000000000000000000000000000000000000000000000908a908a908a908990600401614313565b600060405180830381865afa158015613435573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261345d9190810190614386565b9050828160008151811061347357613473614164565b602002602001015111156131525760405162461bcd60e51b81526004016103ec90614416565b6001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1490565b60006134c88685856138ea565b6000806000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b33d96b07f00000000000000000000000000000000000000000000000000000000000000008c8f6040518463ffffffff1660e01b8152600401613541939291906144d4565b60c060405180830381865afa15801561355e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613582919061450b565b95509550955095509550506000858d6001600160a01b03166370a082318d6040518263ffffffff1660e01b81526004016135bc9190613bf3565b602060405180830381865afa1580156135d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135fd91906141cb565b6136079190614190565b60405163671a11b560e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063671a11b5906136609084908a908a908a908a908a90600401614574565b602060405180830381865afa15801561367d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136a191906141cb565b96505050505050506000866001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016136d79190613bf3565b602060405180830381865afa1580156136f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061371891906141cb565b9050600080876001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561375b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377f91906145a8565b6001600160a01b03168a6001600160a01b03161461379f578360006137a3565b6000845b6040805160008152602081019182905263022c0d9f60e01b90915291935091506001600160a01b0389169063022c0d9f906137e790859085903090602481016145c5565b600060405180830381600087803b15801561380157600080fd5b505af1158015613815573d6000803e3d6000fd5b5050505060008051602061463983398151915288858b60405161383a93929190614615565b60405180910390a16040516370a0823160e01b815283906001600160a01b038b16906370a0823190613870903090600401613bf3565b602060405180830381865afa15801561388d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138b191906141cb565b6138bb9190614190565b9450858510156138dd5760405162461bcd60e51b81526004016103ec906142d1565b5050505095945050505050565b600080846001600160a01b031663a9059cbb858560405160240161390f92919061444d565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161394891906144b8565b6000604051808303816000865af19150503d8060008114613985576040519150601f19603f3d011682016040523d82523d6000602084013e61398a565b606091505b50915091508180156139b45750805115806139b45750808060200190518101906139b49190614466565b612b065760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016103ec565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715613a4e57613a4e613a16565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613a7c57613a7c613a16565b604052919050565b60006001600160401b03821115613a9d57613a9d613a16565b5060051b60200190565b6001600160a01b0381168114613abc57600080fd5b50565b600082601f830112613ad057600080fd5b81356020613ae5613ae083613a84565b613a54565b82815260059290921b84018101918181019086841115613b0457600080fd5b8286015b84811015611b93578035613b1b81613aa7565b8352918301918301613b08565b600080600080600060a08688031215613b4057600080fd5b85356001600160401b0380821115613b5757600080fd5b613b6389838a01613abf565b96506020880135915080821115613b7957600080fd5b50613b8688828901613abf565b945050604086013592506060860135613b9e81613aa7565b949793965091946080013592915050565b6020808252825182820181905260009190848201906040850190845b81811015613be757835183529284019291840191600101613bcb565b50909695505050505050565b6001600160a01b0391909116815260200190565b60008060008060008060c08789031215613c2057600080fd5b86356001600160401b0380821115613c3757600080fd5b613c438a838b01613abf565b97506020890135915080821115613c5957600080fd5b50613c6689828a01613abf565b95505060408701359350606087013592506080870135613c8581613aa7565b8092505060a087013590509295509295509295565b60008083601f840112613cac57600080fd5b5081356001600160401b03811115613cc357600080fd5b6020830191508360208260051b8501011115613cde57600080fd5b9250929050565b600080600080600080600060c0888a031215613d0057600080fd5b8735613d0b81613aa7565b9650602088013595506040880135945060608801356001600160401b03811115613d3457600080fd5b613d408a828b01613c9a565b9095509350506080880135613d5481613aa7565b8092505060a0880135905092959891949750929550565b60008060008060008060a08789031215613d8457600080fd5b8635613d8f81613aa7565b95506020870135945060408701356001600160401b03811115613db157600080fd5b613dbd89828a01613c9a565b9095509350506060870135613dd181613aa7565b80925050608087013590509295509295509295565b600082601f830112613df757600080fd5b81356020613e07613ae083613a84565b82815260059290921b84018101918181019086841115613e2657600080fd5b8286015b84811015611b935780356001600160401b03811115613e495760008081fd5b8701603f81018913613e5b5760008081fd5b848101356040613e6d613ae083613a84565b82815260c0928302840182019288820191908d851115613e8d5760008081fd5b948301945b84861015613f0e5780868f031215613eaa5760008081fd5b613eb2613a2c565b8635613ebd81613aa7565b8152868b0135613ecc81613aa7565b818c015286850135613edd81613aa7565b81860152606087810135908201526080808801359082015260a0808801359082015283529485019491890191613e92565b50875250505092840192508301613e2a565b600080600080600060a08688031215613f3857600080fd5b85356001600160401b03811115613f4e57600080fd5b613f5a88828901613de6565b9550506020860135613f6b81613aa7565b93506040860135613f7b81613aa7565b94979396509394606081013594506080013592915050565b60008060008060008060008060e0898b031215613faf57600080fd5b8835613fba81613aa7565b97506020890135613fca81613aa7565b9650604089013595506060890135945060808901356001600160401b03811115613ff357600080fd5b613fff8b828c01613c9a565b90955093505060a089013561401381613aa7565b8092505060c089013590509295985092959890939650565b600080600080600080600060e0888a03121561404657600080fd5b873561405181613aa7565b9650602088013561406181613aa7565b9550604088013594506060880135935060808801356001600160401b0381111561408a57600080fd5b6140968a828b01613abf565b93505060a08801356140a781613aa7565b8092505060c0880135905092959891949750929550565b60008060008060008060c087890312156140d757600080fd5b86356001600160401b038111156140ed57600080fd5b6140f989828a01613de6565b965050602087013561410a81613aa7565b9450604087013561411a81613aa7565b959894975094956060810135955060808101359460a0909101359350915050565b6020808252600f908201526e149bdd5d195c8e8811561412549151608a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156141a2576141a261417a565b500390565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156141dd57600080fd5b5051919050565b6000816141f3576141f361417a565b506000190190565b6020808252600f908201526e115610d154d4d2559157d253941555608a1b604082015260600190565b600082198211156142375761423761417a565b500190565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b60006000198214156142805761428061417a565b5060010190565b602080825260139082015272125394d551919250d251539517d3d555141555606a1b604082015260600190565b6000602082840312156142c657600080fd5b8135612bc281613aa7565b60208082526022908201527f526f757465723a20494e53554646494349454e545f4f55545055545f414d4f55604082015261139560f21b606082015260800190565b600060a0820160018060a01b038089168452602081891681860152818816604086015286606086015260a0608086015282865180855260c087019150828801945060005b81811015614375578551851683529483019491830191600101614357565b50909b9a5050505050505050505050565b6000602080838503121561439957600080fd5b82516001600160401b038111156143af57600080fd5b8301601f810185136143c057600080fd5b80516143ce613ae082613a84565b81815260059190911b820183019083810190878311156143ed57600080fd5b928401925b8284101561440b578351825292840192908401906143f2565b979650505050505050565b6020808252601e908201527f526f757465723a204558434553534956455f494e5055545f414d4f554e540000604082015260600190565b6001600160a01b03929092168252602082015260400190565b60006020828403121561447857600080fd5b81518015158114612bc257600080fd5b60005b838110156144a357818101518382015260200161448b565b838111156144b2576000848401525b50505050565b600082516144ca818460208701614488565b9190910192915050565b6001600160a01b0393841681529183166020830152909116604082015260600190565b805163ffffffff8116811461304957600080fd5b60008060008060008060c0878903121561452457600080fd5b865161452f81613aa7565b602088015160408901519197509550935061454c606088016144f7565b925061455a608088016144f7565b915061456860a088016144f7565b90509295509295509295565b9586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b6000602082840312156145ba57600080fd5b8151612bc281613aa7565b84815283602082015260018060a01b038316604082015260806060820152600082518060808401526145fe8160a0850160208701614488565b601f01601f19169190910160a00195945050505050565b6001600160a01b039384168152602081019290925290911660408201526060019056feddac40937f35385a34f721af292e5a83fc5b840f722bff57c2fc71adba708c48a2646970667358221220c109bb63865d1a8d34598f931093e02eacb31a0e11e7701a40166e8f4be1e55464736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c806308c820da146101375780630d1424a3146101605780634b75f54f1461018157806351bf1830146101c25780635cae0310146101e2578063674ee80b14610202578063840c34d0146102155780639c91fcb514610228578063a67d0e3c14610248578063abbfddc514610268578063ad5c464814610288578063b05f579e146102bc578063b4e819fd146102cf578063bff51d71146102ef578063c45a01551461030f578063ce81963214610343578063d59e44ee14610356578063f35aaf6314610376578063fa3219d514610396578063fde1adda146103b657600080fd5b3661013257336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461013057610130613a00565b005b600080fd5b61014a610145366004613b28565b6103c9565b6040516101579190613baf565b60405180910390f35b61017361016e366004613b28565b6107ca565b604051908152602001610157565b34801561018d57600080fd5b506101b57f000000000000000000000000000000000000000000000000000000000000000081565b6040516101579190613bf3565b3480156101ce57600080fd5b5061014a6101dd366004613c07565b61095c565b3480156101ee57600080fd5b506101306101fd366004613ce5565b610d20565b610130610210366004613d6b565b610e90565b610173610223366004613f20565b611054565b34801561023457600080fd5b5061014a610243366004613ce5565b6113d8565b34801561025457600080fd5b50610130610263366004613f93565b61152f565b34801561027457600080fd5b5061014a610283366004613c07565b6116b0565b34801561029457600080fd5b506101b57f000000000000000000000000000000000000000000000000000000000000000081565b61014a6102ca366004613d6b565b611a44565b3480156102db57600080fd5b506101736102ea366004613c07565b611b9e565b3480156102fb57600080fd5b5061014a61030a36600461402b565b611d59565b34801561031b57600080fd5b506101b57f000000000000000000000000000000000000000000000000000000000000000081565b6101736103513660046140be565b611dbb565b34801561036257600080fd5b5061014a610371366004613f93565b612064565b34801561038257600080fd5b50610173610391366004613c07565b61212e565b3480156103a257600080fd5b5061014a6103b1366004613ce5565b6122de565b61014a6103c4366004613d6b565b612361565b606081428110156103f55760405162461bcd60e51b81526004016103ec9061413b565b60405180910390fd5b85516001600160401b0381111561040e5761040e613a16565b604051908082528060200260200182016040528015610437578160200160208202803683370190505b509150848288518151811061044e5761044e614164565b60200260200101818152505060006001835161046a9190614190565b90505b8015610597578761047f600183614190565b8151811061048f5761048f614164565b60200260200101516001600160a01b031663cc56fd43886001846104b39190614190565b815181106104c3576104c3614164565b60200260200101518984815181106104dd576104dd614164565b60200260200101518685815181106104f7576104f7614164565b60200260200101516040518463ffffffff1660e01b815260040161051d939291906141a7565b602060405180830381865afa15801561053a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055e91906141cb565b8361056a600184614190565b8151811061057a5761057a614164565b60209081029190910101528061058f816141e4565b91505061046d565b5034826000815181106105ac576105ac614164565b602002602001015111156105d25760405162461bcd60e51b81526004016103ec906141fb565b610610826000815181106105e8576105e8614164565b60200260200101518860008151811061060357610603614164565b602002602001015161245c565b60005b875181101561076e5760006001895161062c9190614190565b821461065b578861063e836001614224565b8151811061064e5761064e614164565b602002602001015161065d565b855b905088828151811061067157610671614164565b60200260200101516001600160a01b03166332fd549389848151811061069957610699614164565b60200260200101518a8560016106af9190614224565b815181106106bf576106bf614164565b60200260200101518786815181106106d9576106d9614164565b6020026020010151888760016106ef9190614224565b815181106106ff576106ff614164565b6020026020010151866040518663ffffffff1660e01b815260040161072895949392919061423c565b600060405180830381600087803b15801561074257600080fd5b505af1158015610756573d6000803e3d6000fd5b505050505080806107669061426c565b915050610613565b508160008151811061078257610782614164565b60200260200101513411156107c0576107c033836000815181106107a8576107a8614164565b6020026020010151346107bb9190614190565b612571565b5095945050505050565b600081428110156107ed5760405162461bcd60e51b81526004016103ec9061413b565b349150610807348860008151811061060357610603614164565b60005b875181101561093b576000600189516108239190614190565b82146108525788610835836001614224565b8151811061084557610845614164565b6020026020010151610854565b855b905088828151811061086857610868614164565b60200260200101516001600160a01b0316634ac00e0389848151811061089057610890614164565b60200260200101518a8560016108a69190614224565b815181106108b6576108b6614164565b6020026020010151876000866040518663ffffffff1660e01b81526004016108e295949392919061423c565b6020604051808303816000875af1158015610901573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092591906141cb565b93505080806109339061426c565b91505061080a565b50818511156107c05760405162461bcd60e51b81526004016103ec90614287565b6060814281101561097f5760405162461bcd60e51b81526004016103ec9061413b565b86516001600160401b0381111561099857610998613a16565b6040519080825280602002602001820160405280156109c1578160200160208202803683370190505b50915085828951815181106109d8576109d8614164565b6020026020010181815250506000600183516109f49190614190565b90505b8015610b215788610a09600183614190565b81518110610a1957610a19614164565b60200260200101516001600160a01b031663cc56fd4389600184610a3d9190614190565b81518110610a4d57610a4d614164565b60200260200101518a8481518110610a6757610a67614164565b6020026020010151868581518110610a8157610a81614164565b60200260200101516040518463ffffffff1660e01b8152600401610aa7939291906141a7565b602060405180830381865afa158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae891906141cb565b83610af4600184614190565b81518110610b0457610b04614164565b602090810291909101015280610b19816141e4565b9150506109f7565b508482600081518110610b3657610b36614164565b60200260200101511115610b5c5760405162461bcd60e51b81526004016103ec906141fb565b610bb687600081518110610b7257610b72614164565b6020026020010151338a600081518110610b8e57610b8e614164565b602002602001015185600081518110610ba957610ba9614164565b602002602001015161263f565b60005b8851811015610d1457600060018a51610bd29190614190565b8214610c015789610be4836001614224565b81518110610bf457610bf4614164565b6020026020010151610c03565b855b9050898281518110610c1757610c17614164565b60200260200101516001600160a01b03166332fd54938a8481518110610c3f57610c3f614164565b60200260200101518b856001610c559190614224565b81518110610c6557610c65614164565b6020026020010151878681518110610c7f57610c7f614164565b602002602001015188876001610c959190614224565b81518110610ca557610ca5614164565b6020026020010151866040518663ffffffff1660e01b8152600401610cce95949392919061423c565b600060405180830381600087803b158015610ce857600080fd5b505af1158015610cfc573d6000803e3d6000fd5b50505050508080610d0c9061426c565b915050610bb9565b50509695505050505050565b8042811015610d415760405162461bcd60e51b81526004016103ec9061413b565b610d74883387876000818110610d5957610d59614164565b9050602002016020810190610d6e91906142b4565b8a61263f565b610db38886868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525030925061276b915050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610e02903090600401613bf3565b602060405180830381865afa158015610e1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4391906141cb565b905086811015610e655760405162461bcd60e51b81526004016103ec906142d1565b610e8473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8583612b0d565b50505050505050505050565b8042811015610eb15760405162461bcd60e51b81526004016103ec9061413b565b34610ee1818787600081610ec757610ec7614164565b9050602002016020810190610edc91906142b4565b61245c565b6040516370a0823160e01b81526000906001600160a01b038a16906370a0823190610f10908890600401613bf3565b602060405180830381865afa158015610f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5191906141cb565b9050610fb27f00000000000000000000000000000000000000000000000000000000000000008888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a925061276b915050565b87818a6001600160a01b03166370a08231886040518263ffffffff1660e01b8152600401610fe09190613bf3565b602060405180830381865afa158015610ffd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102191906141cb565b61102b9190614190565b10156110495760405162461bcd60e51b81526004016103ec906142d1565b505050505050505050565b600081428110156110775760405162461bcd60e51b81526004016103ec9061413b565b6110818685612bc9565b5060005b875181101561136b5760008882815181106110a2576110a2614164565b602002602001015151600114156111145760008983815181106110c7576110c7614164565b60200260200101516000815181106110e1576110e1614164565b6020026020010151905061110c81602001518260400151836000015184606001518560800151612c67565b91505061134b565b6000808a848151811061112957611129614164565b602002602001015160018151811061114357611143614164565b60200260200101519050600060016001600160401b0381111561116857611168613a16565b604051908082528060200260200182016040528015611191578160200160208202803683370190505b5090508160000151816000815181106111ac576111ac614164565b60200260200101906001600160a01b031690816001600160a01b03168152505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166367f84adc7f0000000000000000000000000000000000000000000000000000000000000000856020015186604001518760600151876040518663ffffffff1660e01b815260040161124e959493929190614313565b600060405180830381865afa15801561126b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112939190810190614386565b9050806000815181106112a8576112a8614164565b6020026020010151935082608001518411156112d65760405162461bcd60e51b81526004016103ec90614416565b505060008b85815181106112ec576112ec614164565b602002602001015160008151811061130657611306614164565b6020026020010151905061132d816020015182604001518360000151868560800151612c67565b935061134782602001518360000151858560600151612dcb565b5050505b6113558185614224565b93505080806113639061426c565b915050611085565b50838211156113ab5760405162461bcd60e51b815260206004820152600c60248201526b22a9292fa624a6a4aa2fa4a760a11b60448201526064016103ec565b6113be85336113b988612f7a565b612b0d565b506113cd86336113b989612f7a565b505095945050505050565b606081428110156113fb5760405162461bcd60e51b81526004016103ec9061413b565b61145b897f00000000000000000000000000000000000000000000000000000000000000008a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061304e92505050565b915061149d89338888600081811061147557611475614164565b905060200201602081019061148a91906142b4565b85600081518110610ba957610ba9614164565b6114dd898388888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525030925061315b915050565b61152273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8584600186516115059190614190565b8151811061151557611515614164565b6020026020010151612b0d565b5050979650505050505050565b80428110156115505760405162461bcd60e51b81526004016103ec9061413b565b611568893387876000818110610d5957610d59614164565b6040516370a0823160e01b81526000906001600160a01b038a16906370a0823190611597908790600401613bf3565b602060405180830381865afa1580156115b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d891906141cb565b90506116198a87878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525089925061276b915050565b86818a6001600160a01b03166370a08231876040518263ffffffff1660e01b81526004016116479190613bf3565b602060405180830381865afa158015611664573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168891906141cb565b6116929190614190565b1015610e845760405162461bcd60e51b81526004016103ec906142d1565b606081428110156116d35760405162461bcd60e51b81526004016103ec9061413b565b86516001600160401b038111156116ec576116ec613a16565b604051908082528060200260200182016040528015611715578160200160208202803683370190505b509150858289518151811061172c5761172c614164565b6020026020010181815250506000600183516117489190614190565b90505b8015611875578861175d600183614190565b8151811061176d5761176d614164565b60200260200101516001600160a01b031663cc56fd43896001846117919190614190565b815181106117a1576117a1614164565b60200260200101518a84815181106117bb576117bb614164565b60200260200101518685815181106117d5576117d5614164565b60200260200101516040518463ffffffff1660e01b81526004016117fb939291906141a7565b602060405180830381865afa158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c91906141cb565b83611848600184614190565b8151811061185857611858614164565b60209081029190910101528061186d816141e4565b91505061174b565b50848260008151811061188a5761188a614164565b602002602001015111156118b05760405162461bcd60e51b81526004016103ec906141fb565b6118c687600081518110610b7257610b72614164565b60005b8851811015611a2457600060018a516118e29190614190565b821461191157896118f4836001614224565b8151811061190457611904614164565b6020026020010151611913565b305b905089828151811061192757611927614164565b60200260200101516001600160a01b03166332fd54938a848151811061194f5761194f614164565b60200260200101518b8560016119659190614224565b8151811061197557611975614164565b602002602001015187868151811061198f5761198f614164565b6020026020010151888760016119a59190614224565b815181106119b5576119b5614164565b6020026020010151866040518663ffffffff1660e01b81526004016119de95949392919061423c565b600060405180830381600087803b1580156119f857600080fd5b505af1158015611a0c573d6000803e3d6000fd5b50505050508080611a1c9061426c565b9150506118c9565b50610d1473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8588612b0d565b60608142811015611a675760405162461bcd60e51b81526004016103ec9061413b565b611ac77f00000000000000000000000000000000000000000000000000000000000000008989348a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506133a192505050565b9150611afa82600081518110611adf57611adf614164565b602002602001015187876000818110610ec757610ec7614164565b611b5a7f0000000000000000000000000000000000000000000000000000000000000000838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a925061315b915050565b81600081518110611b6d57611b6d614164565b6020026020010151341115611b9357611b9333836000815181106107a8576107a8614164565b509695505050505050565b60008142811015611bc15760405162461bcd60e51b81526004016103ec9061413b565b859150611c0487600081518110611bda57611bda614164565b6020026020010151338a600081518110611bf657611bf6614164565b60200260200101518961263f565b60005b8851811015611d3857600060018a51611c209190614190565b8214611c4f5789611c32836001614224565b81518110611c4257611c42614164565b6020026020010151611c51565b855b9050898281518110611c6557611c65614164565b60200260200101516001600160a01b0316634ac00e038a8481518110611c8d57611c8d614164565b60200260200101518b856001611ca39190614224565b81518110611cb357611cb3614164565b6020026020010151876000866040518663ffffffff1660e01b8152600401611cdf95949392919061423c565b6020604051808303816000875af1158015611cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2291906141cb565b9350508080611d309061426c565b915050611c07565b5081851115611b935760405162461bcd60e51b81526004016103ec90614287565b60608142811015611d7c5760405162461bcd60e51b81526004016103ec9061413b565b611d89898989898961304e565b9150611da3893387600081518110610b8e57610b8e614164565b611daf8983878761315b565b50979650505050505050565b60008142811015611dde5760405162461bcd60e51b81526004016103ec9061413b565b611de88786612bc9565b506000611df487613499565b611e68576040516370a0823160e01b81526001600160a01b038816906370a0823190611e24903390600401613bf3565b602060405180830381865afa158015611e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6591906141cb565b90505b60005b8951811015611f39576000805b8b8381518110611e8a57611e8a614164565b602002602001015151811015611f195760008c8481518110611eae57611eae614164565b60200260200101518281518110611ec757611ec7614164565b602002602001015190506000821115611ee257606081018390525b611f03816020015182604001518360000151846060015185608001516134bb565b9250508080611f119061426c565b915050611e78565b50611f248582614224565b50819050611f318161426c565b915050611e6b565b50611f45873385612b0d565b50611f5488336113b98b612f7a565b50611f5e87613499565b15611fa85784831015611fa35760405162461bcd60e51b815260206004820152600d60248201526c11549497d31253525517d3d555609a1b60448201526064016103ec565b610d14565b8481886001600160a01b03166370a08231336040518263ffffffff1660e01b8152600401611fd69190613bf3565b602060405180830381865afa158015611ff3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201791906141cb565b6120219190614190565b1015610d145760405162461bcd60e51b81526020600482015260126024820152710f1b5a5b951bdd185b105b5bdd5b9d13dd5d60721b60448201526064016103ec565b606081428110156120875760405162461bcd60e51b81526004016103ec9061413b565b6120c78a8a8a8a8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506133a192505050565b91506120e18a338888600081811061147557611475614164565b6121218a838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a925061315b915050565b5098975050505050505050565b600081428110156121515760405162461bcd60e51b81526004016103ec9061413b565b85915061216a87600081518110611bda57611bda614164565b60005b885181101561229e57600060018a516121869190614190565b82146121b55789612198836001614224565b815181106121a8576121a8614164565b60200260200101516121b7565b305b90508982815181106121cb576121cb614164565b60200260200101516001600160a01b0316634ac00e038a84815181106121f3576121f3614164565b60200260200101518b8560016122099190614224565b8151811061221957612219614164565b6020026020010151876000866040518663ffffffff1660e01b815260040161224595949392919061423c565b6020604051808303816000875af1158015612264573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228891906141cb565b93505080806122969061426c565b91505061216d565b50818511156122bf5760405162461bcd60e51b81526004016103ec90614287565b610d1473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8584612b0d565b606081428110156123015760405162461bcd60e51b81526004016103ec9061413b565b61145b897f00000000000000000000000000000000000000000000000000000000000000008a8a8a8a808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506133a192505050565b606081428110156123845760405162461bcd60e51b81526004016103ec9061413b565b6123e47f000000000000000000000000000000000000000000000000000000000000000089348a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061304e92505050565b91506123fc82600081518110611adf57611adf614164565b611b937f0000000000000000000000000000000000000000000000000000000000000000838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a925061315b915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156124b757600080fd5b505af11580156124cb573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925061251e91508490869060040161444d565b6020604051808303816000875af115801561253d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125619190614466565b61256d5761256d613a00565b5050565b604080516000808252602082019092526001600160a01b03841690839060405161259b91906144b8565b60006040518083038185875af1925050503d80600081146125d8576040519150601f19603f3d011682016040523d82523d6000602084013e6125dd565b606091505b505090508061263a5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016103ec565b505050565b600080856001600160a01b03166323b872dd868686604051602401612666939291906141a7565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161269f91906144b8565b6000604051808303816000865af19150503d80600081146126dc576040519150601f19603f3d011682016040523d82523d6000602084013e6126e1565b606091505b509150915081801561270b57508051158061270b57508080602001905181019061270b9190614466565b6127635760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b60648201526084016103ec565b505050505050565b8260005b8351811015612b0657600084828151811061278c5761278c614164565b6020026020010151905060008060008060008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b33d96b07f00000000000000000000000000000000000000000000000000000000000000008c8f6040518463ffffffff1660e01b8152600401612814939291906144d4565b60c060405180830381865afa158015612831573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612855919061450b565b955095509550955095509550848c6001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040161288e9190613bf3565b602060405180830381865afa1580156128ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cf91906141cb565b6128d99190614190565b60405163671a11b560e01b81529099506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063671a11b590612932908c9089908990899089908990600401614574565b602060405180830381865afa15801561294f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297391906141cb565b9750859650505050505050600080856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e391906145a8565b6001600160a01b0316886001600160a01b031614612a0357836000612a07565b6000845b91509150600060018b51612a1b9190614190565b8810612a275789612a4c565b8a612a33896001614224565b81518110612a4357612a43614164565b60200260200101515b6040805160008152602081019182905263022c0d9f60e01b9091529091506001600160a01b0388169063022c0d9f90612a8e90869086908690602481016145c5565b600060405180830381600087803b158015612aa857600080fd5b505af1158015612abc573d6000803e3d6000fd5b50505050600080516020614639833981519152878686604051612ae193929190614615565b60405180910390a1839850505050505050508080612afe9061426c565b91505061276f565b5050505050565b600081612b1c57506001612bc2565b612b2584613499565b15612bb357604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b158015612b8c57600080fd5b505af1158015612ba0573d6000803e3d6000fd5b50505050612bae8383612571565b612bbe565b612bbe8484846138ea565b5060015b9392505050565b6000612bd483613499565b15612c52577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015612c3457600080fd5b505af1158015612c48573d6000803e3d6000fd5b5050505050612c5e565b612c5e8333308561263f565b50600192915050565b604080516001808252818301909252600091829190602080830190803683370190505090508481600081518110612ca057612ca0614164565b6001600160a01b0392831660209182029290920101526040516319fe12b760e21b81526000917f000000000000000000000000000000000000000000000000000000000000000016906367f84adc90612d25907f0000000000000000000000000000000000000000000000000000000000000000908c908c908b908990600401614313565b600060405180830381865afa158015612d42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612d6a9190810190614386565b905080600081518110612d7f57612d7f614164565b6020026020010151925083831115612da95760405162461bcd60e51b81526004016103ec90614416565b6113cd88878584600181518110612dc257612dc2614164565b60200260200101515b612dd68484846138ea565b60008390506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3f91906145a8565b90506000806000836001600160a01b0316896001600160a01b031614612e685785600085612ecd565b600086866001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ecd91906145a8565b6040805160008152602081019182905263022c0d9f60e01b90915292955090935091506001600160a01b0386169063022c0d9f90612f1490869086903090602481016145c5565b600060405180830381600087803b158015612f2e57600080fd5b505af1158015612f42573d6000803e3d6000fd5b50505050600080516020614639833981519152888783604051612f6793929190614615565b60405180910390a1505050505050505050565b6000612f8582613499565b1561301d576040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612fd6903090600401613bf3565b602060405180830381865afa158015612ff3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301791906141cb565b92915050565b6040516370a0823160e01b81526001600160a01b038316906370a0823190612fd6903090600401613bf3565b919050565b60405163119220a560e01b81526060906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063119220a5906130c5907f0000000000000000000000000000000000000000000000000000000000000000908a908a908a908990600401614313565b600060405180830381865afa1580156130e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261310a9190810190614386565b905082816001835161311c9190614190565b8151811061312c5761312c614164565b602002602001015110156131525760405162461bcd60e51b81526004016103ec906142d1565b95945050505050565b8360005b835181101561276357600084828151811061317c5761317c614164565b602002602001015190506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ea91906145a8565b90506000876131fa856001614224565b8151811061320a5761320a614164565b602002602001015190506000806000846001600160a01b0316886001600160a01b03161461323b57836000866132a0565b600084876001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561327c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132a091906145a8565b925092509250600060018b516132b69190614190565b88106132c257896132e7565b8a6132ce896001614224565b815181106132de576132de614164565b60200260200101515b6040805160008152602081019182905263022c0d9f60e01b9091529091506001600160a01b0388169063022c0d9f9061332990879087908690602481016145c5565b600060405180830381600087803b15801561334357600080fd5b505af1158015613357573d6000803e3d6000fd5b5050505060008051602061463983398151915287868460405161337c93929190614615565b60405180910390a18198505050505050505080806133999061426c565b91505061315f565b6040516319fe12b760e21b81526060906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906367f84adc90613418907f0000000000000000000000000000000000000000000000000000000000000000908a908a908a908990600401614313565b600060405180830381865afa158015613435573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261345d9190810190614386565b9050828160008151811061347357613473614164565b602002602001015111156131525760405162461bcd60e51b81526004016103ec90614416565b6001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1490565b60006134c88685856138ea565b6000806000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b33d96b07f00000000000000000000000000000000000000000000000000000000000000008c8f6040518463ffffffff1660e01b8152600401613541939291906144d4565b60c060405180830381865afa15801561355e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613582919061450b565b95509550955095509550506000858d6001600160a01b03166370a082318d6040518263ffffffff1660e01b81526004016135bc9190613bf3565b602060405180830381865afa1580156135d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135fd91906141cb565b6136079190614190565b60405163671a11b560e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063671a11b5906136609084908a908a908a908a908a90600401614574565b602060405180830381865afa15801561367d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136a191906141cb565b96505050505050506000866001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016136d79190613bf3565b602060405180830381865afa1580156136f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061371891906141cb565b9050600080876001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561375b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377f91906145a8565b6001600160a01b03168a6001600160a01b03161461379f578360006137a3565b6000845b6040805160008152602081019182905263022c0d9f60e01b90915291935091506001600160a01b0389169063022c0d9f906137e790859085903090602481016145c5565b600060405180830381600087803b15801561380157600080fd5b505af1158015613815573d6000803e3d6000fd5b5050505060008051602061463983398151915288858b60405161383a93929190614615565b60405180910390a16040516370a0823160e01b815283906001600160a01b038b16906370a0823190613870903090600401613bf3565b602060405180830381865afa15801561388d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138b191906141cb565b6138bb9190614190565b9450858510156138dd5760405162461bcd60e51b81526004016103ec906142d1565b5050505095945050505050565b600080846001600160a01b031663a9059cbb858560405160240161390f92919061444d565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161394891906144b8565b6000604051808303816000865af19150503d8060008114613985576040519150601f19603f3d011682016040523d82523d6000602084013e61398a565b606091505b50915091508180156139b45750805115806139b45750808060200190518101906139b49190614466565b612b065760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016103ec565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715613a4e57613a4e613a16565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613a7c57613a7c613a16565b604052919050565b60006001600160401b03821115613a9d57613a9d613a16565b5060051b60200190565b6001600160a01b0381168114613abc57600080fd5b50565b600082601f830112613ad057600080fd5b81356020613ae5613ae083613a84565b613a54565b82815260059290921b84018101918181019086841115613b0457600080fd5b8286015b84811015611b93578035613b1b81613aa7565b8352918301918301613b08565b600080600080600060a08688031215613b4057600080fd5b85356001600160401b0380821115613b5757600080fd5b613b6389838a01613abf565b96506020880135915080821115613b7957600080fd5b50613b8688828901613abf565b945050604086013592506060860135613b9e81613aa7565b949793965091946080013592915050565b6020808252825182820181905260009190848201906040850190845b81811015613be757835183529284019291840191600101613bcb565b50909695505050505050565b6001600160a01b0391909116815260200190565b60008060008060008060c08789031215613c2057600080fd5b86356001600160401b0380821115613c3757600080fd5b613c438a838b01613abf565b97506020890135915080821115613c5957600080fd5b50613c6689828a01613abf565b95505060408701359350606087013592506080870135613c8581613aa7565b8092505060a087013590509295509295509295565b60008083601f840112613cac57600080fd5b5081356001600160401b03811115613cc357600080fd5b6020830191508360208260051b8501011115613cde57600080fd5b9250929050565b600080600080600080600060c0888a031215613d0057600080fd5b8735613d0b81613aa7565b9650602088013595506040880135945060608801356001600160401b03811115613d3457600080fd5b613d408a828b01613c9a565b9095509350506080880135613d5481613aa7565b8092505060a0880135905092959891949750929550565b60008060008060008060a08789031215613d8457600080fd5b8635613d8f81613aa7565b95506020870135945060408701356001600160401b03811115613db157600080fd5b613dbd89828a01613c9a565b9095509350506060870135613dd181613aa7565b80925050608087013590509295509295509295565b600082601f830112613df757600080fd5b81356020613e07613ae083613a84565b82815260059290921b84018101918181019086841115613e2657600080fd5b8286015b84811015611b935780356001600160401b03811115613e495760008081fd5b8701603f81018913613e5b5760008081fd5b848101356040613e6d613ae083613a84565b82815260c0928302840182019288820191908d851115613e8d5760008081fd5b948301945b84861015613f0e5780868f031215613eaa5760008081fd5b613eb2613a2c565b8635613ebd81613aa7565b8152868b0135613ecc81613aa7565b818c015286850135613edd81613aa7565b81860152606087810135908201526080808801359082015260a0808801359082015283529485019491890191613e92565b50875250505092840192508301613e2a565b600080600080600060a08688031215613f3857600080fd5b85356001600160401b03811115613f4e57600080fd5b613f5a88828901613de6565b9550506020860135613f6b81613aa7565b93506040860135613f7b81613aa7565b94979396509394606081013594506080013592915050565b60008060008060008060008060e0898b031215613faf57600080fd5b8835613fba81613aa7565b97506020890135613fca81613aa7565b9650604089013595506060890135945060808901356001600160401b03811115613ff357600080fd5b613fff8b828c01613c9a565b90955093505060a089013561401381613aa7565b8092505060c089013590509295985092959890939650565b600080600080600080600060e0888a03121561404657600080fd5b873561405181613aa7565b9650602088013561406181613aa7565b9550604088013594506060880135935060808801356001600160401b0381111561408a57600080fd5b6140968a828b01613abf565b93505060a08801356140a781613aa7565b8092505060c0880135905092959891949750929550565b60008060008060008060c087890312156140d757600080fd5b86356001600160401b038111156140ed57600080fd5b6140f989828a01613de6565b965050602087013561410a81613aa7565b9450604087013561411a81613aa7565b959894975094956060810135955060808101359460a0909101359350915050565b6020808252600f908201526e149bdd5d195c8e8811561412549151608a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156141a2576141a261417a565b500390565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156141dd57600080fd5b5051919050565b6000816141f3576141f361417a565b506000190190565b6020808252600f908201526e115610d154d4d2559157d253941555608a1b604082015260600190565b600082198211156142375761423761417a565b500190565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b60006000198214156142805761428061417a565b5060010190565b602080825260139082015272125394d551919250d251539517d3d555141555606a1b604082015260600190565b6000602082840312156142c657600080fd5b8135612bc281613aa7565b60208082526022908201527f526f757465723a20494e53554646494349454e545f4f55545055545f414d4f55604082015261139560f21b606082015260800190565b600060a0820160018060a01b038089168452602081891681860152818816604086015286606086015260a0608086015282865180855260c087019150828801945060005b81811015614375578551851683529483019491830191600101614357565b50909b9a5050505050505050505050565b6000602080838503121561439957600080fd5b82516001600160401b038111156143af57600080fd5b8301601f810185136143c057600080fd5b80516143ce613ae082613a84565b81815260059190911b820183019083810190878311156143ed57600080fd5b928401925b8284101561440b578351825292840192908401906143f2565b979650505050505050565b6020808252601e908201527f526f757465723a204558434553534956455f494e5055545f414d4f554e540000604082015260600190565b6001600160a01b03929092168252602082015260400190565b60006020828403121561447857600080fd5b81518015158114612bc257600080fd5b60005b838110156144a357818101518382015260200161448b565b838111156144b2576000848401525b50505050565b600082516144ca818460208701614488565b9190910192915050565b6001600160a01b0393841681529183166020830152909116604082015260600190565b805163ffffffff8116811461304957600080fd5b60008060008060008060c0878903121561452457600080fd5b865161452f81613aa7565b602088015160408901519197509550935061454c606088016144f7565b925061455a608088016144f7565b915061456860a088016144f7565b90509295509295509295565b9586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b6000602082840312156145ba57600080fd5b8151612bc281613aa7565b84815283602082015260018060a01b038316604082015260806060820152600082518060808401526145fe8160a0850160208701614488565b601f01601f19169190910160a00195945050505050565b6001600160a01b039384168152602081019290925290911660408201526060019056feddac40937f35385a34f721af292e5a83fc5b840f722bff57c2fc71adba708c48a2646970667358221220c109bb63865d1a8d34598f931093e02eacb31a0e11e7701a40166e8f4be1e55464736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}