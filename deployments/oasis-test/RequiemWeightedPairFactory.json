{
  "address": "0x274B1F7F8e66B044B2DC773E017750957f70490c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_formula",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INIT_CODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "getPairs",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_tokenPairs",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x387469c99298f3c95817fd58f749c9230626de924f2f6ab055a94dc3e2ab4237",
  "receipt": {
    "to": null,
    "from": "0x10E38dFfFCfdBaaf590D5A9958B01C9cfcF6A63B",
    "contractAddress": "0x274B1F7F8e66B044B2DC773E017750957f70490c",
    "transactionIndex": 0,
    "gasUsed": "3622936",
    "logsBloom": "0x
    "blockHash": "0x9ac11e376af32932eb1047723a9bab92c810a3abc16bb7715cb2eac86f4457c2",
    "transactionHash": "0x387469c99298f3c95817fd58f749c9230626de924f2f6ab055a94dc3e2ab4237",
    "logs": [],
    "blockNumber": 130042,
    "cumulativeGasUsed": "3622936",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x10E38dFfFCfdBaaf590D5A9958B01C9cfcF6A63B",
    "0xb3a65e1bF6884eC96fdA1e8F09e477d203357BF0"
  ],
  "solcInputHash": "e0eb249e18fde66ee987adcef851d11b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_formula\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getPairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenPairs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemWeightedPairFactory.sol\":\"RequiemWeightedPairFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/RequiemPairERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./interfaces/IRequiemPairERC20.sol\\\";\\n\\n// solhint-disable not-rely-on-time, no-inline-assembly, var-name-mixedcase, max-line-length\\n\\ncontract RequiemPairERC20 is IRequiemPairERC20 {\\n\\n    string public constant name = \\\"Requiem Pair Liquidity Provider\\\";\\n    string public constant symbol = \\\"RPLP\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    bytes32 public override DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    constructor() {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"), keccak256(bytes(name)), keccak256(bytes(\\\"1\\\")), chainId, address(this))\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply += value;\\n        balanceOf[to] += value;\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] -= value;\\n        totalSupply -= value;\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] -= value;\\n        balanceOf[to] += value;\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= value;\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"RLP: EXPIRED\\\");\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"RLP: IS\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x70660e5dc9c7a804e1e235689aa7994141c6f7915f875e0839becdec5fe1763c\",\"license\":\"MIT\"},\"contracts/RequiemWeightedPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./interfaces/IRequiemWeightedPair.sol\\\";\\nimport \\\"./interfaces/IRequiemSwap.sol\\\";\\nimport \\\"./interfaces/IRequiemFormula.sol\\\";\\nimport \\\"./RequiemPairERC20.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IRequiemWeightedPairFactory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Callee.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string, avoid-low-level-calls\\n\\ncontract RequiemWeightedPair is IRequiemSwap, IRequiemWeightedPair, RequiemPairERC20 {\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 private unlocked = 1;\\n    address public formula;\\n\\n    uint112 private collectedFee0; // uses single storage slot, accessible via getReserves\\n    uint112 private collectedFee1; // uses single storage slot, accessible via getReserves\\n\\n    uint32 private tokenWeight0;\\n    uint32 private tokenWeight1;\\n    uint32 private swapFee;\\n\\n    modifier lock() {\\n        require(unlocked == 1, \\\"REQLP: L\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function getCollectedFees() public view returns (uint112 _collectedFee0, uint112 _collectedFee1) {\\n        _collectedFee0 = collectedFee0;\\n        _collectedFee1 = collectedFee1;\\n    }\\n\\n    function getTokenWeights() public view returns (uint32 _tokenWeight0, uint32 _tokenWeight1) {\\n        _tokenWeight0 = tokenWeight0;\\n        _tokenWeight1 = tokenWeight1;\\n    }\\n\\n    function getSwapFee() public view returns (uint32 _swapFee) {\\n        _swapFee = swapFee;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"REQLP: TF\\\");\\n    }\\n\\n    constructor() {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(\\n        address _token0,\\n        address _token1,\\n        uint32 _tokenWeight0,\\n        uint32 _swapFee\\n    ) external {\\n        require(msg.sender == factory, \\\"REQLP: F\\\");\\n        // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n        tokenWeight0 = _tokenWeight0;\\n        tokenWeight1 = 100 - tokenWeight0;\\n        swapFee = _swapFee;\\n        formula = IRequiemWeightedPairFactory(factory).formula();\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        uint32 _tokenWeight0 = tokenWeight0;\\n        require(balance0 * (100 - _tokenWeight0) <= type(uint112).max && balance1 * _tokenWeight0 <= type(uint112).max, \\\"REQLP: O\\\");\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n        // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            uint112 mReserve0 = _reserve0 * (100 - _tokenWeight0);\\n            uint112 mReserve1 = _reserve1 * _tokenWeight0;\\n            price0CumulativeLast += uint256(UQ112x112.encode(mReserve1).uqdiv(mReserve0)) * timeElapsed;\\n            price1CumulativeLast += uint256(UQ112x112.encode(mReserve0).uqdiv(mReserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IRequiemWeightedPairFactory(factory).feeTo();\\n        uint112 protocolFee = uint112(IRequiemWeightedPairFactory(factory).protocolFee());\\n        feeOn = feeTo != address(0);\\n        (uint112 _collectedFee0, uint112 _collectedFee1) = getCollectedFees();\\n        if (protocolFee > 0 && feeOn && (_collectedFee0 > 0 || _collectedFee1 > 0)) {\\n            uint32 _tokenWeight0 = tokenWeight0;\\n            uint256 liquidity = IRequiemFormula(formula).mintLiquidityFee(\\n                totalSupply,\\n                _reserve0,\\n                _reserve1,\\n                _tokenWeight0,\\n                100 - _tokenWeight0,\\n                _collectedFee0 / protocolFee,\\n                _collectedFee1 / protocolFee\\n            );\\n            if (liquidity > 0) _mint(feeTo, liquidity);\\n        }\\n        if (_collectedFee0 > 0) collectedFee0 = 0;\\n        if (_collectedFee1 > 0) collectedFee1 = 0;\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0 - _reserve0;\\n        uint256 amount1 = balance1 - _reserve1;\\n        _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply;\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min((amount0 * _totalSupply) / _reserve0, (amount1 * _totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, \\\"REQLP: ILM\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n        _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = (liquidity * balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = (liquidity * balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, \\\"REQLP: ILB\\\");\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata\\n    ) external lock {\\n        _swap(amount0Out, amount1Out, to);\\n    }\\n\\n    //\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address,\\n        uint256 amountIn\\n    ) external view returns (uint256) {\\n        (uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = tokenIn == token0\\n            ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n            : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        return IRequiemFormula(formula).getAmountOut(amountIn, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address,\\n        uint256 amountOut\\n    ) external view returns (uint256) {\\n        (uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = tokenIn == token0\\n            ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n            : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        return IRequiemFormula(formula).getAmountIn(amountOut, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)) - reserve0);\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)) - reserve1);\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n\\n    // calculates output amount for given input and executes the respective trade\\n    // viable for use in multi swaps as it returns the output value\\n    // requires the amount in to be sent to this address beforehand\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address,\\n        uint256 amountIn,\\n        uint256,\\n        address to\\n    ) external override lock returns (uint256) {\\n        bool inToken0 = tokenIn == token0;\\n        (uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = inToken0\\n            ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n            : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        uint256 amountOut = IRequiemFormula(formula).getAmountOut(amountIn, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n        (uint256 amount0Out, uint256 amount1Out) = inToken0 ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n        return _swap(amount0Out, amount1Out, to);\\n    }\\n\\n    // calculates input amount for given output and executes the respective trade\\n    // calling this one only makes sense if a single trade is supposd to be executed in the tx\\n    // requires the amount in to be sent to this address beforehand\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address,\\n        uint256 amountOut,\\n        uint256,\\n        address to\\n    ) external override lock returns (uint256) {\\n        bool inToken0 = tokenIn == token0;\\n        (uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = tokenIn == token0\\n            ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n            : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        uint256 amountIn = IRequiemFormula(formula).getAmountIn(amountOut, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n        (uint256 amount0Out, uint256 amount1Out) = inToken0 ? (uint256(0), amountIn) : (amountIn, uint256(0));\\n        return _swap(amount0Out, amount1Out, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function _swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to\\n    ) internal returns (uint256) {\\n        require(amount0Out > 0 || amount1Out > 0, \\\"REQLP: IOA\\\");\\n        uint112 _reserve0 = reserve0; // gas savings\\n        uint112 _reserve1 = reserve1; // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"REQLP: IL\\\");\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"REQLP: IT\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n\\n        require(amount0In > 0 || amount1In > 0, \\\"REQLP: IIA\\\");\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0 * 10000;\\n            uint256 balance1Adjusted = balance1 * 10000;\\n            {\\n                // avoids stack too deep errors\\n                if (amount0In > 0) {\\n                    uint256 amount0InFee = amount0In * swapFee;\\n                    balance0Adjusted -= amount0InFee;\\n                    collectedFee0 = uint112(uint256(collectedFee0) + amount0InFee);\\n                }\\n                if (amount1In > 0) {\\n                    uint256 amount1InFee = amount1In * swapFee;\\n                    balance1Adjusted -= amount1InFee;\\n                    collectedFee1 = uint112(uint256(collectedFee1) + amount1InFee);\\n                }\\n                uint32 _tokenWeight0 = tokenWeight0; // gas savings\\n                if (_tokenWeight0 == 50) {\\n                    // gas savings for pair 50/50\\n                    require(balance0Adjusted * balance1Adjusted >= uint256(_reserve0) * _reserve1 * (10000**2), \\\"REQLP: K\\\");\\n                } else {\\n                    require(IRequiemFormula(formula).ensureConstantValue(uint256(_reserve0) * 10000, uint256(_reserve1) * 10000, balance0Adjusted, balance1Adjusted, _tokenWeight0), \\\"REQLP: K\\\");\\n                }\\n            }\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n        return amount0Out > 0 ? amount0Out : amount1Out;\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function onSwap(\\n        address tokenIn,\\n        address,\\n        uint256,\\n        uint256 amountOut,\\n        address to\\n    ) external override lock {\\n        (uint256 amount0Out, uint256 amount1Out) = token0 == tokenIn ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n        require(amount0Out > 0 || amount1Out > 0, \\\"REQLP: IOA\\\");\\n        uint112 _reserve0 = reserve0; // gas savings\\n        uint112 _reserve1 = reserve1; // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"REQLP: IL\\\");\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"REQLP: IT\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n\\n        require(amount0In > 0 || amount1In > 0, \\\"REQLP: IIA\\\");\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0 * 10000;\\n            uint256 balance1Adjusted = balance1 * 10000;\\n            {\\n                // avoids stack too deep errors\\n                if (amount0In > 0) {\\n                    uint256 amount0InFee = amount0In * swapFee;\\n                    balance0Adjusted -= amount0InFee;\\n                    collectedFee0 = uint112(uint256(collectedFee0) + amount0InFee);\\n                }\\n                if (amount1In > 0) {\\n                    uint256 amount1InFee = amount1In * swapFee;\\n                    balance1Adjusted -= amount1InFee;\\n                    collectedFee1 = uint112(uint256(collectedFee1) + amount1InFee);\\n                }\\n                uint32 _tokenWeight0 = tokenWeight0; // gas savings\\n                if (_tokenWeight0 == 50) {\\n                    // gas savings for pair 50/50\\n                    require(balance0Adjusted * balance1Adjusted >= uint256(_reserve0) * _reserve1 * (10000**2), \\\"REQLP: K\\\");\\n                } else {\\n                    require(IRequiemFormula(formula).ensureConstantValue(uint256(_reserve0) * 10000, uint256(_reserve1) * 10000, balance0Adjusted, balance1Adjusted, _tokenWeight0), \\\"REQLP: K\\\");\\n                }\\n            }\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n}\\n\",\"keccak256\":\"0x5f5bf73e43400e03e03f04e1941985fdea923bbb294ba4e3af6801d712b6f3c6\",\"license\":\"MIT\"},\"contracts/RequiemWeightedPairFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./interfaces/IRequiemWeightedPairFactory.sol\\\";\\nimport \\\"./libraries/EnumerableSet.sol\\\";\\nimport \\\"./RequiemWeightedPair.sol\\\";\\n\\n// solhint-disable no-inline-assembly\\n\\ncontract RequiemWeightedPairFactory is IRequiemWeightedPairFactory {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address public feeTo;\\n    address public formula;\\n    uint256 public protocolFee;\\n    address public feeToSetter;\\n    bytes32 public constant INIT_CODE_HASH = keccak256(abi.encodePacked(type(RequiemWeightedPair).creationCode));\\n\\n    mapping(bytes32 => address) private _pairSalts;\\n    address[] public allPairs;\\n    mapping(address => uint64) private _pairs;\\n\\n    mapping(IERC20 => mapping(IERC20 => EnumerableSet.AddressSet)) internal tokenPairs;\\n\\n    constructor(address _feeToSetter, address _formula) {\\n        feeToSetter = _feeToSetter;\\n        formula = _formula;\\n    }\\n\\n    function isPair(address b) external view returns (bool) {\\n        return _pairs[b] > 0;\\n    }\\n\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external view returns (address pair) {\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0, swapFee));\\n        pair = _pairSalts[salt];\\n    }\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external returns (address pair) {\\n        require(tokenA != tokenB, \\\"RLP: IA\\\");\\n        require(tokenWeightA >= 2 && tokenWeightA <= 98 && (tokenWeightA % 2) == 0, \\\"RLP: IW\\\");\\n        // swap fee from [0.01% - 20%]\\n        require(swapFee >= 1 && swapFee <= 2000, \\\"RLP: ISF\\\");\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        require(token0 != address(0), \\\"RLP: ZA\\\");\\n        // single check is sufficient\\n        bytes memory bytecode = type(RequiemWeightedPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0, swapFee));\\n        require(_pairSalts[salt] == address(0), \\\"RLP: PE\\\");\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IRequiemWeightedPair(pair).initialize(token0, token1, tokenWeight0, swapFee);\\n\\n        tokenPairs[IERC20(token0)][IERC20(token1)].add(pair);\\n        tokenPairs[IERC20(token1)][IERC20(token0)].add(pair);\\n\\n        _pairSalts[salt] = address(pair);\\n        allPairs.push(pair);\\n        uint64 weightAndFee = uint64(swapFee);\\n        weightAndFee |= uint64(tokenWeight0) << 32;\\n        _pairs[address(pair)] = weightAndFee;\\n        emit PairCreated(token0, token1, pair, tokenWeight0, swapFee, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: F\\\");\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: F\\\");\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function setProtocolFee(uint256 _protocolFee) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: F\\\");\\n        require(_protocolFee == 0 || (_protocolFee >= 10000 && _protocolFee <= 100000), \\\"RLP: IPF\\\");\\n        protocolFee = _protocolFee;\\n    }\\n\\n    function getWeightsAndSwapFee(address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        )\\n    {\\n        uint64 weightAndFee = _pairs[pair];\\n        if (weightAndFee > 0) {\\n            swapFee = uint32(weightAndFee);\\n            tokenWeight0 = uint32(weightAndFee >> 32);\\n            tokenWeight1 = 100 - tokenWeight0;\\n        } else {\\n            // Default is 0.3%\\n            return (50, 50, 30);\\n        }\\n    }\\n\\n    function getPairs(IERC20 token0, IERC20 token1) external view returns (address[] memory _tokenPairs) {\\n        uint256 length = tokenPairs[token0][token1].length();\\n        _tokenPairs = new address[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            _tokenPairs[i] = tokenPairs[token0][token1].at(i);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9e1acf1901192c86ef2422037db8312093fbbfd5c737b9200a8cd32d8de4f70c\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb7230835a4efbbbebcb5371d121977e859388b33f3ee5d9a7a44fc4de8d6b970\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.11;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IRequiemFormula {\\n\\n    function getReserveAndWeights(address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getPairAmountIn(address pair, address tokenIn, uint amountOut) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getPairAmountOut(address pair, address tokenIn, uint amountIn) external view returns (uint amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x801bfafc508f453eba70058a66da15de703047424df29d54001d80901f0c8f0a\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IRequiemPairERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemPairERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x54909aaa58357205c588740c70e25af35f1e47716fced8011af45258a832edc7\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IRequiemSwap {\\n    // this funtion requires the correctly calculated amounts as input\\n    // the others are supposed to implement that calculation\\n    // no return value required since the amounts are already known\\n    function onSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address to\\n    ) external;\\n\\n    //\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external returns (uint256);\\n\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to\\n    ) external returns (uint256);\\n\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (uint256);\\n\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x905db01e6f2b1be6fa834315054c375eac7f2c719dc3ca333dfb5d5597bfde56\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./IRequiemPairERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemWeightedPair is IRequiemPairERC20 {\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n    function getSwapFee() external view returns (uint32);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address,\\n        address,\\n        uint32,\\n        uint32\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdc14681f3c19282e4ef1e79de84867b359df1d1554f3660dafce3d93fdd0af0c\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPairFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.11;\\n\\ninterface IRequiemWeightedPairFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function protocolFee() external view returns (uint256);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function isPair(address) external view returns (bool);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external returns (address pair);\\n\\n    function getWeightsAndSwapFee(address pair)\\n        external\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        );\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setProtocolFee(uint256) external;\\n}\\n\",\"keccak256\":\"0xf7e09bea1624240eaa03b3e6a22b6c1309b1c5a76345fd2609218883ed421e61\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x03a0e446df01556c28b09cd214d00cc4341c696d55c99b4a41164fe89911b750\",\"license\":\"MIT\"},\"contracts/libraries/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the EnumerableSet library from OpenZeppelin Contracts, altered to remove the base private functions that\\n// work on bytes32, replacing them with a native implementation for address and bytes32 values, to reduce bytecode \\n// size and runtime costs.\\n// The `unchecked_at` function was also added, which allows for more gas efficient data reads in some scenarios.\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // The original OpenZeppelin implementation uses a generic Set type with bytes32 values: this was replaced with\\n    // AddressSet, which uses address keys natively, resulting in more dense bytecode.\\n\\n    struct AddressSet {\\n        // Storage of set values\\n        address[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(address => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // The swap is only necessary if we're not removing the last element\\n            if (toDeleteIndex != lastIndex) {\\n                address lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        RequiemErrors._require(set._values.length > index, Errors.OUT_OF_BOUNDS);\\n        return unchecked_at(set, index);\\n    }\\n\\n    /**\\n     * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\\n     * than {length}). O(1).\\n     *\\n     * This function performs one less storage read than {at}, but should only be used when `index` is known to be\\n     * within bounds.\\n     */\\n    function unchecked_at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return set._values[index];\\n    }\\n\\n    function rawIndexOf(AddressSet storage set, address value) internal view returns (uint256) {\\n        return set._indexes[value] - 1;\\n    }\\n\\n    struct Bytes32Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0 \\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not \\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // The swap is only necessary if we're not removing the last element\\n            if (toDeleteIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        RequiemErrors._require(set._values.length > index, Errors.OUT_OF_BOUNDS);\\n        return unchecked_at(set, index);\\n    }\\n\\n    /**\\n     * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\\n     * than {length}). O(1).\\n     *\\n     * This function performs one less storage read than {at}, but should only be used when `index` is known to be\\n     * within bounds.\\n     */\\n    function unchecked_at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    function rawIndexOf(Bytes32Set storage set, bytes32 value) internal view returns (uint256) {\\n        return set._indexes[value] - 1;\\n    }\\n}\\n\",\"keccak256\":\"0x83faf7e7c2b2109e683b506ca26aa6db815c86c991c3307ea0df60d032fb1479\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.11;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd3daf0e3416f5b273d855a27cf9460eb6b779508cd3f07fb3da89f202ee1d256\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.11;\\n\\n// solhint-disable avoid-low-level-calls, reason-string\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xcb1337f49b7a886980209ccd42806883db2bfa17b8dac448587f31ddd1147a1b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.11;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 private constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x2fcc622b784e07041c0000b5ae6d96bbe05a82dfd09dd2f5ceb0d3be223a80d9\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.11;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x37ebaca1c58a9daf307229c45122f12d603a95d1d92c1a8e7648b1910755bfa0\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161401e38038061401e83398101604081905261002f9161007c565b600380546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b613f60806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100c55760003560e01c8063017e7e58146100ca578063094b7415146100fa57806314572adb1461010d57806316093fad146101205780631e3dd18b14610140578063257671f5146101535780634b75f54f14610169578063574f2ba31461017c578063787dce3d14610184578063a2e74af614610199578063b0e21e8a146101ac578063bfd63f4d146101b5578063ca222979146101c8578063e5e31b1314610202578063f46901ed14610246575b600080fd5b6000546100dd906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6003546100dd906001600160a01b031681565b6100dd61011b366004610b4f565b610259565b61013361012e366004610ba7565b610671565b6040516100f19190610be0565b6100dd61014e366004610c2d565b61075c565b61015b610786565b6040519081526020016100f1565b6001546100dd906001600160a01b031681565b60055461015b565b610197610192366004610c2d565b6107d0565b005b6101976101a7366004610c46565b610853565b61015b60025481565b6100dd6101c3366004610b4f565b61089f565b6101db6101d6366004610c46565b61092e565b6040805163ffffffff948516815292841660208401529216918101919091526060016100f1565b610236610210366004610c46565b6001600160a01b03166000908152600660205260409020546001600160401b0316151590565b60405190151581526020016100f1565b610197610254366004610c46565b610996565b6000836001600160a01b0316856001600160a01b031614156102ac5760405162461bcd60e51b8152602060048201526007602482015266524c503a20494160c81b60448201526064015b60405180910390fd5b60028363ffffffff16101580156102ca575060628363ffffffff1611155b80156102e457506102dc600284610c63565b63ffffffff16155b61031a5760405162461bcd60e51b8152602060048201526007602482015266524c503a20495760c81b60448201526064016102a3565b60018263ffffffff161015801561033957506107d08263ffffffff1611155b6103705760405162461bcd60e51b81526020600482015260086024820152672926281d1024a9a360c11b60448201526064016102a3565b6000806000866001600160a01b0316886001600160a01b0316106103a057868861039b886064610caa565b6103a4565b8787875b919450925090506001600160a01b0383166103eb5760405162461bcd60e51b8152602060048201526007602482015266524c503a205a4160c81b60448201526064016102a3565b6000604051806020016103fd90610b11565b6020820181038252601f19601f82011660405250905060008484848960405160200161042c9493929190610ccf565b60408051601f198184030181529181528151602092830120600081815260049093529120549091506001600160a01b0316156104945760405162461bcd60e51b8152602060048201526007602482015266524c503a20504560c81b60448201526064016102a3565b808251602084016000f560405163d0f6957960e01b81526001600160a01b038781166004830152868116602483015263ffffffff80871660448401528a1660648301529197509087169063d0f6957990608401600060405180830381600087803b15801561050157600080fd5b505af1158015610515573d6000803e3d6000fd5b5050506001600160a01b0380871660009081526007602090815260408083209389168352929052206105489150876109e2565b506001600160a01b03808516600090815260076020908152604080832093891683529290522061057890876109e2565b50600081815260046020908152604080832080546001600160a01b03199081166001600160a01b038c8116918217909355600580546001810182557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805490931682179092558086526006855294839020805463ffffffff8e81168b881b63ffffffff60201b1681176001600160401b0319909316831790935592548551978852928a16958701959095528584015260608501529051919287821692918916917f41f8736f924f57e464ededb08bf71f868f9d142885bbc73a1516db2be21fc4289181900360800190a3505050505050949350505050565b6001600160a01b03828116600090815260076020908152604080832093851683529290522054606090806001600160401b038111156106b2576106b2610d11565b6040519080825280602002602001820160405280156106db578160200160208202803683370190505b50915060005b81811015610754576001600160a01b0380861660009081526007602090815260408083209388168352929052206107189082610a56565b83828151811061072a5761072a610d27565b6001600160a01b03909216602092830291909101909101528061074c81610d3d565b9150506106e1565b505092915050565b6005818154811061076c57600080fd5b6000918252602090912001546001600160a01b0316905081565b60405161079560208201610b11565b601f1982820381018352601f9091011660408190526107b79190602001610d58565b6040516020818303038152906040528051906020012081565b6003546001600160a01b031633146107fa5760405162461bcd60e51b81526004016102a390610d93565b801580610817575061271081101580156108175750620186a08111155b61084e5760405162461bcd60e51b81526020600482015260086024820152672926281d1024a82360c11b60448201526064016102a3565b600255565b6003546001600160a01b0316331461087d5760405162461bcd60e51b81526004016102a390610d93565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600080600080866001600160a01b0316886001600160a01b0316106108d05786886108cb886064610caa565b6108d4565b8787875b9250925092506000838383886040516020016108f39493929190610ccf565b60408051601f198184030181529181528151602092830120600090815260049092529020546001600160a01b03169998505050505050505050565b6001600160a01b038116600090815260066020526040812054819081906001600160401b0316801561097c5763ffffffff602082901c169350905080610975846064610caa565b925061098d565b603280601e9350935093505061098f565b505b9193909250565b6003546001600160a01b031633146109c05760405162461bcd60e51b81526004016102a390610d93565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600183016020526040812054610a4c57508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03861690811790915585549082528286019093526040902091909155610a50565b5060005b92915050565b8154600090610a689083106064610a79565b610a728383610a8b565b9392505050565b81610a8757610a8781610abe565b5050565b6000826000018281548110610aa257610aa2610d27565b6000918252602090912001546001600160a01b03169392505050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b61317780610db483390190565b6001600160a01b0381168114610b3357600080fd5b50565b803563ffffffff81168114610b4a57600080fd5b919050565b60008060008060808587031215610b6557600080fd5b8435610b7081610b1e565b93506020850135610b8081610b1e565b9250610b8e60408601610b36565b9150610b9c60608601610b36565b905092959194509250565b60008060408385031215610bba57600080fd5b8235610bc581610b1e565b91506020830135610bd581610b1e565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015610c215783516001600160a01b031683529284019291840191600101610bfc565b50909695505050505050565b600060208284031215610c3f57600080fd5b5035919050565b600060208284031215610c5857600080fd5b8135610a7281610b1e565b600063ffffffff80841680610c8857634e487b7160e01b600052601260045260246000fd5b92169190910692915050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff83811690831681811015610cc757610cc7610c94565b039392505050565b6001600160601b0319606095861b811682529390941b90921660148401526001600160e01b031960e091821b8116602885015291901b16602c82015260300190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600019821415610d5157610d51610c94565b5060010190565b6000825160005b81811015610d795760208186018101518583015201610d5f565b81811115610d88576000828501525b509190910192915050565b6020808252600690820152652926281d102360d11b60408201526060019056fe60806040526001600b5534801561001557600080fd5b50604080518082018252601f81527f5265717569656d2050616972204c69717569646974792050726f7669646572006020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f4d949f5c4c4f80d7bdbde28a36135fecf440532cf0f2bb46c4801ec3299b1062818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b0319163317905561305c8061011b6000396000f3fe608060405234801561001057600080fd5b50600436106101a15760003560e01c8063022c0d9f146101a657806306fdde03146101bb5780630902f1ac1461020d578063095ea7b3146102415780630dfe1681146102645780630e6d8bce1461028457806318160ddd146102a557806323b872dd146102ae57806330adf81f146102c1578063313ce567146102d657806332bfe469146102f057806332fd54931461031a5780633644e5151461032d5780634ac00e03146103365780634b75f54f146103495780635909c0d51461035c5780635a3d5493146103655780636a6278421461036e57806370a08231146103815780637ecebe00146103a157806389afcb44146103c157806395d89b41146103e9578063a9059cbb1461040c578063ba9a7a561461041f578063bc25cf7714610428578063c45a01551461043b578063cc56fd431461044e578063d0f6957914610461578063d21220a714610474578063d4cadf6814610487578063d505accf146104ac578063d54a8d18146104bf578063dd62ed3e146104d5578063e9255bae14610500578063fff6cae914610513575b600080fd5b6101b96101b4366004612966565b61051b565b005b6101f76040518060400160405280601f81526020017f5265717569656d2050616972204c69717569646974792050726f76696465720081525081565b6040516102049190612a2b565b60405180910390f35b610215610563565b604080516001600160701b03948516815293909216602084015263ffffffff1690820152606001610204565b61025461024f366004612a5e565b61058d565b6040519015158152602001610204565b600654610277906001600160a01b031681565b6040516102049190612a8a565b610297610292366004612a9e565b6105a3565b604051908152602001610204565b61029760005481565b6102546102bc366004612afd565b61072c565b610297600080516020612fe783398151915281565b6102de601281565b60405160ff9091168152602001610204565b600d54600e5460408051600160e01b90930463ffffffff9081168452909116602083015201610204565b6101b9610328366004612a9e565b6107a6565b61029760035481565b610297610344366004612a9e565b610d01565b600c54610277906001600160a01b031681565b61029760095481565b610297600a5481565b61029761037c366004612b3e565b610e0d565b61029761038f366004612b3e565b60016020526000908152604090205481565b6102976103af366004612b3e565b60046020526000908152604090205481565b6103d46103cf366004612b3e565b611090565b60408051928352602083019190915201610204565b6101f760405180604001604052806004815260200163052504c560e41b81525081565b61025461041a366004612a5e565b6113b7565b6102976103e881565b6101b9610436366004612b3e565b6113c4565b600554610277906001600160a01b031681565b61029761045c366004612afd565b6114db565b6101b961046f366004612b6f565b61160b565b600754610277906001600160a01b031681565b600e54600160201b900463ffffffff1660405163ffffffff9091168152602001610204565b6101b96104ba366004612bc7565b611771565b6104c7611957565b604051610204929190612c3e565b6102976104e3366004612c58565b600260209081526000928352604080842090915290825290205481565b61029761050e366004612afd565b611972565b6101b9611a55565b600b546001146105465760405162461bcd60e51b815260040161053d90612c91565b60405180910390fd5b6000600b55610556858585611b83565b50506001600b5550505050565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b600061059a338484612099565b50600192915050565b6000600b546001146105c75760405162461bcd60e51b815260040161053d90612c91565b6000600b8190556006546001600160a01b03888116911614908080808461061b57600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b90041661064b565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e54604051630b19210b60e41b81526001600160701b039687169a5094909516975091955093506000926001600160a01b039091169163b19210b0916106af918e918a918a918a918a91600160201b900463ffffffff1690600401612cb3565b602060405180830381865afa1580156106cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f09190612ce7565b90506000808761070257826000610706565b6000835b9150915061071582828c611b83565b6001600b559e9d5050505050505050505050505050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610791576001600160a01b03841660009081526002602090815260408083203384529091528120805484929061078b908490612d16565b90915550505b61079c8484846120fb565b5060019392505050565b600b546001146107c85760405162461bcd60e51b815260040161053d90612c91565b6000600b81905560065481906001600160a01b038881169116146107ee578360006107f2565b6000845b9150915060008211806108055750600081115b6108215760405162461bcd60e51b815260040161053d90612d2d565b6008546001600160701b0380821691600160701b900416818410801561084f5750806001600160701b031683105b61086b5760405162461bcd60e51b815260040161053d90612d51565b60065460075460009182916001600160a01b039182169190811690891682148015906108a95750806001600160a01b0316896001600160a01b031614155b6108c55760405162461bcd60e51b815260040161053d90612d74565b87156108d6576108d6828a8a61218a565b86156108e7576108e7818a8961218a565b6040516370a0823160e01b81526001600160a01b038316906370a0823190610913903090600401612a8a565b602060405180830381865afa158015610930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109549190612ce7565b6040516370a0823160e01b81529094506001600160a01b038216906370a0823190610983903090600401612a8a565b602060405180830381865afa1580156109a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c49190612ce7565b92505050600086856001600160701b03166109df9190612d16565b83116109ec576000610a09565b6109ff876001600160701b038716612d16565b610a099084612d16565b90506000610a20876001600160701b038716612d16565b8311610a2d576000610a4a565b610a40876001600160701b038716612d16565b610a4a9084612d16565b90506000821180610a5b5750600081115b610a775760405162461bcd60e51b815260040161053d90612d97565b6000610a8585612710612dbb565b90506000610a9585612710612dbb565b90508315610b0257600e54600090610aba90600160201b900463ffffffff1686612dbb565b9050610ac68184612d16565b600d54909350610ae09082906001600160701b0316612dda565b600d80546001600160701b0319166001600160701b0392909216919091179055505b8215610b7a57600e54600090610b2590600160201b900463ffffffff1685612dbb565b9050610b318183612d16565b600d54909250610b52908290600160701b90046001600160701b0316612dda565b600d600e6101000a8154816001600160701b0302191690836001600160701b03160217905550505b600d54600160e01b900463ffffffff166032811415610be457610ba96001600160701b03808a16908b16612dbb565b610bb7906305f5e100612dbb565b610bc18385612dbb565b1015610bdf5760405162461bcd60e51b815260040161053d90612df2565b610c9f565b600c546001600160a01b03166379c91b37610c0a6001600160701b038c16612710612dbb565b610c1f6001600160701b038c16612710612dbb565b8686866040518663ffffffff1660e01b8152600401610c42959493929190612e14565b602060405180830381865afa158015610c5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c839190612e3d565b610c9f5760405162461bcd60e51b815260040161053d90612df2565b505050610cae848488886122bd565b886001600160a01b0316336001600160a01b031660008051602061300783398151915284848c8c604051610ce59493929190612e5f565b60405180910390a350506001600b555050505050505050505050565b6000600b54600114610d255760405162461bcd60e51b815260040161053d90612c91565b6000600b8190556006546001600160a01b038881169116149080808084610d7957600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b900416610da9565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e5460405163671a11b560e01b81526001600160701b039687169a5094909516975091955093506000926001600160a01b039091169163671a11b5916106af918e918a918a918a918a91600160201b900463ffffffff1690600401612cb3565b6000600b54600114610e315760405162461bcd60e51b815260040161053d90612c91565b6000600b81905580610e41610563565b506006546040516370a0823160e01b81529294509092506000916001600160a01b03909116906370a0823190610e7b903090600401612a8a565b602060405180830381865afa158015610e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebc9190612ce7565b6007546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610ef2903090600401612a8a565b602060405180830381865afa158015610f0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f339190612ce7565b90506000610f4a6001600160701b03861684612d16565b90506000610f616001600160701b03861684612d16565b9050610f6d868661250b565b5060005480610fa9576103e8610f8b610f868486612dbb565b6127aa565b610f959190612d16565b9750610fa460006103e861281a565b610ff0565b610fed6001600160701b038816610fc08386612dbb565b610fca9190612e90565b6001600160701b038816610fde8486612dbb565b610fe89190612e90565b612891565b97505b6000881161102d5760405162461bcd60e51b815260206004820152600a6024820152695245514c503a20494c4d60b01b604482015260640161053d565b611037898961281a565b611043858589896122bd565b604080518481526020810184905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600b55509395945050505050565b600080600b546001146110b55760405162461bcd60e51b815260040161053d90612c91565b6000600b819055806110c5610563565b506006546007546040516370a0823160e01b81529395509193506001600160a01b039081169291169060009083906370a0823190611107903090600401612a8a565b602060405180830381865afa158015611124573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111489190612ce7565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016111789190612a8a565b602060405180830381865afa158015611195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b99190612ce7565b306000908152600160205260409020549091506111d6878761250b565b50600054806111e58584612dbb565b6111ef9190612e90565b9950806111fc8484612dbb565b6112069190612e90565b985060008a1180156112185750600089115b6112515760405162461bcd60e51b815260206004820152600a6024820152692922a8a6281d1024a62160b11b604482015260640161053d565b61125b30836128a9565b611266868c8c61218a565b611271858c8b61218a565b6040516370a0823160e01b81526001600160a01b038716906370a082319061129d903090600401612a8a565b602060405180830381865afa1580156112ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112de9190612ce7565b6040516370a0823160e01b81529094506001600160a01b038616906370a082319061130d903090600401612a8a565b602060405180830381865afa15801561132a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134e9190612ce7565b925061135c84848a8a6122bd565b604080518b8152602081018b90526001600160a01b038d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a350505050505050506001600b81905550915091565b600061059a3384846120fb565b600b546001146113e65760405162461bcd60e51b815260040161053d90612c91565b6000600b556006546007546008546040516370a0823160e01b81526001600160a01b03938416939092169161148991849186916001600160701b03169083906370a0823190611439903090600401612a8a565b602060405180830381865afa158015611456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147a9190612ce7565b6114849190612d16565b61218a565b6008546040516370a0823160e01b81526114d19183918691600160701b90046001600160701b0316906001600160a01b038416906370a0823190611439903090600401612a8a565b50506001600b5550565b60065460009081908190819081906001600160a01b0389811691161461152e57600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b90041661155e565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e54604051630b19210b60e41b81526001600160701b039687169a5094909516975091955093506001600160a01b03169163b19210b0916115be918a918991899189918991600160201b90910463ffffffff1690600401612cb3565b602060405180830381865afa1580156115db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ff9190612ce7565b98975050505050505050565b6005546001600160a01b031633146116505760405162461bcd60e51b81526020600482015260086024820152672922a8a6281d102360c11b604482015260640161053d565b600680546001600160a01b03199081166001600160a01b038781169190911790925560078054909116918516919091179055600d80546001600160e01b0316600160e01b63ffffffff858116820292909217928390556116b39204166064612ea4565b600e805463ffffffff848116600160201b026001600160401b031990921693169290921791909117905560055460408051634b75f54f60e01b815290516001600160a01b0390921691634b75f54f916004818101926020929091908290030181865afa158015611727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174b9190612ec9565b600c80546001600160a01b0319166001600160a01b039290921691909117905550505050565b428410156117b05760405162461bcd60e51b815260206004820152600c60248201526b1493140e881156141254915160a21b604482015260640161053d565b6003546001600160a01b03881660009081526004602052604081208054919291600080516020612fe7833981519152918b918b918b9190876117f183612ee6565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161186a92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156118d5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061190b5750886001600160a01b0316816001600160a01b0316145b6119415760405162461bcd60e51b8152602060048201526007602482015266524c503a20495360c81b604482015260640161053d565b61194c898989612099565b505050505050505050565b600d546001600160701b0380821692600160701b9092041690565b60065460009081908190819081906001600160a01b038981169116146119c557600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b9004166119f5565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e5460405163671a11b560e01b81526001600160701b039687169a5094909516975091955093506001600160a01b03169163671a11b5916115be918a918991899189918991600160201b90910463ffffffff1690600401612cb3565b600b54600114611a775760405162461bcd60e51b815260040161053d90612c91565b6000600b556006546040516370a0823160e01b8152611b7c916001600160a01b0316906370a0823190611aae903090600401612a8a565b602060405180830381865afa158015611acb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aef9190612ce7565b6007546040516370a0823160e01b81526001600160a01b03909116906370a0823190611b1f903090600401612a8a565b602060405180830381865afa158015611b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b609190612ce7565b6008546001600160701b0380821691600160701b9004166122bd565b6001600b55565b600080841180611b935750600083115b611baf5760405162461bcd60e51b815260040161053d90612d2d565b6008546001600160701b0380821691600160701b9004168186108015611bdd5750806001600160701b031685105b611bf95760405162461bcd60e51b815260040161053d90612d51565b60065460075460009182916001600160a01b03918216919081169088168214801590611c375750806001600160a01b0316886001600160a01b031614155b611c535760405162461bcd60e51b815260040161053d90612d74565b8915611c6457611c6482898c61218a565b8815611c7557611c7581898b61218a565b6040516370a0823160e01b81526001600160a01b038316906370a0823190611ca1903090600401612a8a565b602060405180830381865afa158015611cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce29190612ce7565b6040516370a0823160e01b81529094506001600160a01b038216906370a0823190611d11903090600401612a8a565b602060405180830381865afa158015611d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d529190612ce7565b92505050600088856001600160701b0316611d6d9190612d16565b8311611d7a576000611d97565b611d8d896001600160701b038716612d16565b611d979084612d16565b90506000611dae896001600160701b038716612d16565b8311611dbb576000611dd8565b611dce896001600160701b038716612d16565b611dd89084612d16565b90506000821180611de95750600081115b611e055760405162461bcd60e51b815260040161053d90612d97565b6000611e1385612710612dbb565b90506000611e2385612710612dbb565b90508315611e9057600e54600090611e4890600160201b900463ffffffff1686612dbb565b9050611e548184612d16565b600d54909350611e6e9082906001600160701b0316612dda565b600d80546001600160701b0319166001600160701b0392909216919091179055505b8215611f0857600e54600090611eb390600160201b900463ffffffff1685612dbb565b9050611ebf8183612d16565b600d54909250611ee0908290600160701b90046001600160701b0316612dda565b600d600e6101000a8154816001600160701b0302191690836001600160701b03160217905550505b600d54600160e01b900463ffffffff166032811415611f7257611f376001600160701b03808a16908b16612dbb565b611f45906305f5e100612dbb565b611f4f8385612dbb565b1015611f6d5760405162461bcd60e51b815260040161053d90612df2565b61202d565b600c546001600160a01b03166379c91b37611f986001600160701b038c16612710612dbb565b611fad6001600160701b038c16612710612dbb565b8686866040518663ffffffff1660e01b8152600401611fd0959493929190612e14565b602060405180830381865afa158015611fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120119190612e3d565b61202d5760405162461bcd60e51b815260040161053d90612df2565b50505061203c848488886122bd565b876001600160a01b0316336001600160a01b031660008051602061300783398151915284848e8e6040516120739493929190612e5f565b60405180910390a360008a11612089578861208b565b895b9a9950505050505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831660009081526001602052604081208054839290612123908490612d16565b90915550506001600160a01b03821660009081526001602052604081208054839290612150908490612dda565b92505081905550816001600160a01b0316836001600160a01b0316600080516020612fc7833981519152836040516120ee91815260200190565b60408051808201825260198152787472616e7366657228616464726573732c75696e743235362960381b60209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916122129190612f01565b6000604051808303816000865af19150503d806000811461224f576040519150601f19603f3d011682016040523d82523d6000602084013e612254565b606091505b509150915081801561227e57508051158061227e57508080602001905181019061227e9190612e3d565b6122b65760405162461bcd60e51b81526020600482015260096024820152682922a8a6281d102a2360b91b604482015260640161053d565b5050505050565b600d54600160e01b900463ffffffff166001600160701b036122e0826064612ea4565b6122f09063ffffffff1687612dbb565b1115801561231457506001600160701b0361231163ffffffff831686612dbb565b11155b61234b5760405162461bcd60e51b81526020600482015260086024820152675245514c503a204f60c01b604482015260640161053d565b600061235b600160201b42612f1d565b60085490915060009061237b90600160e01b900463ffffffff1683612ea4565b905060008163ffffffff1611801561239b57506001600160701b03851615155b80156123af57506001600160701b03841615155b156124735760006123c1846064612ea4565b6123d19063ffffffff1687612f31565b905060006123e563ffffffff861687612f31565b90508263ffffffff1661240a836123fb8461291a565b6001600160e01b031690612939565b6001600160e01b031661241d9190612dbb565b6009600082825461242e9190612dda565b909155505063ffffffff8316612447826123fb8561291a565b6001600160e01b031661245a9190612dbb565b600a600082825461246b9190612dda565b909155505050505b6008805463ffffffff8416600160e01b026001600160e01b036001600160701b038a8116600160701b9081026001600160e01b0319909516828e1617949094179182168317948590556040517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1956124fa9594831693831693909317939092041690612c3e565b60405180910390a150505050505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015612561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125859190612ec9565b90506000600560009054906101000a90046001600160a01b03166001600160a01b031663b0e21e8a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126009190612ce7565b6001600160a01b03831615159350905060008061261b611957565b915091506000836001600160701b03161180156126355750845b801561265d57506000826001600160701b0316118061265d57506000816001600160701b0316115b1561275d57600d54600c5460008054600160e01b90930463ffffffff169290916001600160a01b0316906392aec23c908b8b8661269b816064612ea4565b6126a58c8c612f60565b6126af8d8c612f60565b6040516001600160e01b031960e08a901b16815260048101979097526001600160701b039586166024880152938516604487015263ffffffff928316606487015291166084850152821660a48401521660c482015260e401602060405180830381865afa158015612724573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127489190612ce7565b9050801561275a5761275a868261281a565b50505b6001600160701b0382161561277d57600d80546001600160701b03191690555b6001600160701b038116156127a057600d8054600160701b600160e01b03191690555b5050505092915050565b6000600382111561280b57508060006127c4600283612e90565b6127cf906001612dda565b90505b81811015612805579050806002816127ea8186612e90565b6127f49190612dda565b6127fe9190612e90565b90506127d2565b50919050565b8115612815575060015b919050565b8060008082825461282b9190612dda565b90915550506001600160a01b03821660009081526001602052604081208054839290612858908490612dda565b90915550506040518181526001600160a01b03831690600090600080516020612fc7833981519152906020015b60405180910390a35050565b60008183106128a057816128a2565b825b9392505050565b6001600160a01b038216600090815260016020526040812080548392906128d1908490612d16565b92505081905550806000808282546128e99190612d16565b90915550506040518181526000906001600160a01b03841690600080516020612fc783398151915290602001612885565b6000612933600160701b6001600160701b038416612f86565b92915050565b60006128a26001600160701b03831684612fac565b6001600160a01b038116811461296357600080fd5b50565b60008060008060006080868803121561297e57600080fd5b853594506020860135935060408601356129978161294e565b925060608601356001600160401b03808211156129b357600080fd5b818801915088601f8301126129c757600080fd5b8135818111156129d657600080fd5b8960208285010111156129e857600080fd5b9699959850939650602001949392505050565b60005b83811015612a165781810151838201526020016129fe565b83811115612a25576000848401525b50505050565b6020815260008251806020840152612a4a8160408501602087016129fb565b601f01601f19169190910160400192915050565b60008060408385031215612a7157600080fd5b8235612a7c8161294e565b946020939093013593505050565b6001600160a01b0391909116815260200190565b600080600080600060a08688031215612ab657600080fd5b8535612ac18161294e565b94506020860135612ad18161294e565b935060408601359250606086013591506080860135612aef8161294e565b809150509295509295909350565b600080600060608486031215612b1257600080fd5b8335612b1d8161294e565b92506020840135612b2d8161294e565b929592945050506040919091013590565b600060208284031215612b5057600080fd5b81356128a28161294e565b803563ffffffff8116811461281557600080fd5b60008060008060808587031215612b8557600080fd5b8435612b908161294e565b93506020850135612ba08161294e565b9250612bae60408601612b5b565b9150612bbc60608601612b5b565b905092959194509250565b600080600080600080600060e0888a031215612be257600080fd5b8735612bed8161294e565b96506020880135612bfd8161294e565b95506040880135945060608801359350608088013560ff81168114612c2157600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6001600160701b0392831681529116602082015260400190565b60008060408385031215612c6b57600080fd5b8235612c768161294e565b91506020830135612c868161294e565b809150509250929050565b60208082526008908201526714915453140e881360c21b604082015260600190565b9586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b600060208284031215612cf957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015612d2857612d28612d00565b500390565b6020808252600a90820152695245514c503a20494f4160b01b604082015260600190565b60208082526009908201526814915453140e88125360ba1b604082015260600190565b60208082526009908201526814915453140e88125560ba1b604082015260600190565b6020808252600a90820152695245514c503a2049494160b01b604082015260600190565b6000816000190483118215151615612dd557612dd5612d00565b500290565b60008219821115612ded57612ded612d00565b500190565b6020808252600890820152675245514c503a204b60c01b604082015260600190565b94855260208501939093526040840191909152606083015263ffffffff16608082015260a00190565b600060208284031215612e4f57600080fd5b815180151581146128a257600080fd5b93845260208401929092526040830152606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082612e9f57612e9f612e7a565b500490565b600063ffffffff83811690831681811015612ec157612ec1612d00565b039392505050565b600060208284031215612edb57600080fd5b81516128a28161294e565b6000600019821415612efa57612efa612d00565b5060010190565b60008251612f138184602087016129fb565b9190910192915050565b600082612f2c57612f2c612e7a565b500690565b60006001600160701b0382811684821681151582840482111615612f5757612f57612d00565b02949350505050565b60006001600160701b0383811680612f7a57612f7a612e7a565b92169190910492915050565b60006001600160e01b0382811684821681151582840482111615612f5757612f57612d00565b60006001600160e01b0383811680612f7a57612f7a612e7a56feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9d78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822a2646970667358221220c781003ee866af1150de62e00d2557140cb22a9b29366cdf7d70eadda0ecfd3364736f6c634300080a0033a26469706673582212208fefb1d3523035c42a48a9ddcc4721cac94c6edcdd1c989bbfdd3eabde45583864736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c55760003560e01c8063017e7e58146100ca578063094b7415146100fa57806314572adb1461010d57806316093fad146101205780631e3dd18b14610140578063257671f5146101535780634b75f54f14610169578063574f2ba31461017c578063787dce3d14610184578063a2e74af614610199578063b0e21e8a146101ac578063bfd63f4d146101b5578063ca222979146101c8578063e5e31b1314610202578063f46901ed14610246575b600080fd5b6000546100dd906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6003546100dd906001600160a01b031681565b6100dd61011b366004610b4f565b610259565b61013361012e366004610ba7565b610671565b6040516100f19190610be0565b6100dd61014e366004610c2d565b61075c565b61015b610786565b6040519081526020016100f1565b6001546100dd906001600160a01b031681565b60055461015b565b610197610192366004610c2d565b6107d0565b005b6101976101a7366004610c46565b610853565b61015b60025481565b6100dd6101c3366004610b4f565b61089f565b6101db6101d6366004610c46565b61092e565b6040805163ffffffff948516815292841660208401529216918101919091526060016100f1565b610236610210366004610c46565b6001600160a01b03166000908152600660205260409020546001600160401b0316151590565b60405190151581526020016100f1565b610197610254366004610c46565b610996565b6000836001600160a01b0316856001600160a01b031614156102ac5760405162461bcd60e51b8152602060048201526007602482015266524c503a20494160c81b60448201526064015b60405180910390fd5b60028363ffffffff16101580156102ca575060628363ffffffff1611155b80156102e457506102dc600284610c63565b63ffffffff16155b61031a5760405162461bcd60e51b8152602060048201526007602482015266524c503a20495760c81b60448201526064016102a3565b60018263ffffffff161015801561033957506107d08263ffffffff1611155b6103705760405162461bcd60e51b81526020600482015260086024820152672926281d1024a9a360c11b60448201526064016102a3565b6000806000866001600160a01b0316886001600160a01b0316106103a057868861039b886064610caa565b6103a4565b8787875b919450925090506001600160a01b0383166103eb5760405162461bcd60e51b8152602060048201526007602482015266524c503a205a4160c81b60448201526064016102a3565b6000604051806020016103fd90610b11565b6020820181038252601f19601f82011660405250905060008484848960405160200161042c9493929190610ccf565b60408051601f198184030181529181528151602092830120600081815260049093529120549091506001600160a01b0316156104945760405162461bcd60e51b8152602060048201526007602482015266524c503a20504560c81b60448201526064016102a3565b808251602084016000f560405163d0f6957960e01b81526001600160a01b038781166004830152868116602483015263ffffffff80871660448401528a1660648301529197509087169063d0f6957990608401600060405180830381600087803b15801561050157600080fd5b505af1158015610515573d6000803e3d6000fd5b5050506001600160a01b0380871660009081526007602090815260408083209389168352929052206105489150876109e2565b506001600160a01b03808516600090815260076020908152604080832093891683529290522061057890876109e2565b50600081815260046020908152604080832080546001600160a01b03199081166001600160a01b038c8116918217909355600580546001810182557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805490931682179092558086526006855294839020805463ffffffff8e81168b881b63ffffffff60201b1681176001600160401b0319909316831790935592548551978852928a16958701959095528584015260608501529051919287821692918916917f41f8736f924f57e464ededb08bf71f868f9d142885bbc73a1516db2be21fc4289181900360800190a3505050505050949350505050565b6001600160a01b03828116600090815260076020908152604080832093851683529290522054606090806001600160401b038111156106b2576106b2610d11565b6040519080825280602002602001820160405280156106db578160200160208202803683370190505b50915060005b81811015610754576001600160a01b0380861660009081526007602090815260408083209388168352929052206107189082610a56565b83828151811061072a5761072a610d27565b6001600160a01b03909216602092830291909101909101528061074c81610d3d565b9150506106e1565b505092915050565b6005818154811061076c57600080fd5b6000918252602090912001546001600160a01b0316905081565b60405161079560208201610b11565b601f1982820381018352601f9091011660408190526107b79190602001610d58565b6040516020818303038152906040528051906020012081565b6003546001600160a01b031633146107fa5760405162461bcd60e51b81526004016102a390610d93565b801580610817575061271081101580156108175750620186a08111155b61084e5760405162461bcd60e51b81526020600482015260086024820152672926281d1024a82360c11b60448201526064016102a3565b600255565b6003546001600160a01b0316331461087d5760405162461bcd60e51b81526004016102a390610d93565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600080600080866001600160a01b0316886001600160a01b0316106108d05786886108cb886064610caa565b6108d4565b8787875b9250925092506000838383886040516020016108f39493929190610ccf565b60408051601f198184030181529181528151602092830120600090815260049092529020546001600160a01b03169998505050505050505050565b6001600160a01b038116600090815260066020526040812054819081906001600160401b0316801561097c5763ffffffff602082901c169350905080610975846064610caa565b925061098d565b603280601e9350935093505061098f565b505b9193909250565b6003546001600160a01b031633146109c05760405162461bcd60e51b81526004016102a390610d93565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600183016020526040812054610a4c57508154600180820184556000848152602080822090930180546001600160a01b0319166001600160a01b03861690811790915585549082528286019093526040902091909155610a50565b5060005b92915050565b8154600090610a689083106064610a79565b610a728383610a8b565b9392505050565b81610a8757610a8781610abe565b5050565b6000826000018281548110610aa257610aa2610d27565b6000918252602090912001546001600160a01b03169392505050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b61317780610db483390190565b6001600160a01b0381168114610b3357600080fd5b50565b803563ffffffff81168114610b4a57600080fd5b919050565b60008060008060808587031215610b6557600080fd5b8435610b7081610b1e565b93506020850135610b8081610b1e565b9250610b8e60408601610b36565b9150610b9c60608601610b36565b905092959194509250565b60008060408385031215610bba57600080fd5b8235610bc581610b1e565b91506020830135610bd581610b1e565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015610c215783516001600160a01b031683529284019291840191600101610bfc565b50909695505050505050565b600060208284031215610c3f57600080fd5b5035919050565b600060208284031215610c5857600080fd5b8135610a7281610b1e565b600063ffffffff80841680610c8857634e487b7160e01b600052601260045260246000fd5b92169190910692915050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff83811690831681811015610cc757610cc7610c94565b039392505050565b6001600160601b0319606095861b811682529390941b90921660148401526001600160e01b031960e091821b8116602885015291901b16602c82015260300190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600019821415610d5157610d51610c94565b5060010190565b6000825160005b81811015610d795760208186018101518583015201610d5f565b81811115610d88576000828501525b509190910192915050565b6020808252600690820152652926281d102360d11b60408201526060019056fe60806040526001600b5534801561001557600080fd5b50604080518082018252601f81527f5265717569656d2050616972204c69717569646974792050726f7669646572006020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f4d949f5c4c4f80d7bdbde28a36135fecf440532cf0f2bb46c4801ec3299b1062818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b0319163317905561305c8061011b6000396000f3fe608060405234801561001057600080fd5b50600436106101a15760003560e01c8063022c0d9f146101a657806306fdde03146101bb5780630902f1ac1461020d578063095ea7b3146102415780630dfe1681146102645780630e6d8bce1461028457806318160ddd146102a557806323b872dd146102ae57806330adf81f146102c1578063313ce567146102d657806332bfe469146102f057806332fd54931461031a5780633644e5151461032d5780634ac00e03146103365780634b75f54f146103495780635909c0d51461035c5780635a3d5493146103655780636a6278421461036e57806370a08231146103815780637ecebe00146103a157806389afcb44146103c157806395d89b41146103e9578063a9059cbb1461040c578063ba9a7a561461041f578063bc25cf7714610428578063c45a01551461043b578063cc56fd431461044e578063d0f6957914610461578063d21220a714610474578063d4cadf6814610487578063d505accf146104ac578063d54a8d18146104bf578063dd62ed3e146104d5578063e9255bae14610500578063fff6cae914610513575b600080fd5b6101b96101b4366004612966565b61051b565b005b6101f76040518060400160405280601f81526020017f5265717569656d2050616972204c69717569646974792050726f76696465720081525081565b6040516102049190612a2b565b60405180910390f35b610215610563565b604080516001600160701b03948516815293909216602084015263ffffffff1690820152606001610204565b61025461024f366004612a5e565b61058d565b6040519015158152602001610204565b600654610277906001600160a01b031681565b6040516102049190612a8a565b610297610292366004612a9e565b6105a3565b604051908152602001610204565b61029760005481565b6102546102bc366004612afd565b61072c565b610297600080516020612fe783398151915281565b6102de601281565b60405160ff9091168152602001610204565b600d54600e5460408051600160e01b90930463ffffffff9081168452909116602083015201610204565b6101b9610328366004612a9e565b6107a6565b61029760035481565b610297610344366004612a9e565b610d01565b600c54610277906001600160a01b031681565b61029760095481565b610297600a5481565b61029761037c366004612b3e565b610e0d565b61029761038f366004612b3e565b60016020526000908152604090205481565b6102976103af366004612b3e565b60046020526000908152604090205481565b6103d46103cf366004612b3e565b611090565b60408051928352602083019190915201610204565b6101f760405180604001604052806004815260200163052504c560e41b81525081565b61025461041a366004612a5e565b6113b7565b6102976103e881565b6101b9610436366004612b3e565b6113c4565b600554610277906001600160a01b031681565b61029761045c366004612afd565b6114db565b6101b961046f366004612b6f565b61160b565b600754610277906001600160a01b031681565b600e54600160201b900463ffffffff1660405163ffffffff9091168152602001610204565b6101b96104ba366004612bc7565b611771565b6104c7611957565b604051610204929190612c3e565b6102976104e3366004612c58565b600260209081526000928352604080842090915290825290205481565b61029761050e366004612afd565b611972565b6101b9611a55565b600b546001146105465760405162461bcd60e51b815260040161053d90612c91565b60405180910390fd5b6000600b55610556858585611b83565b50506001600b5550505050565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b600061059a338484612099565b50600192915050565b6000600b546001146105c75760405162461bcd60e51b815260040161053d90612c91565b6000600b8190556006546001600160a01b03888116911614908080808461061b57600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b90041661064b565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e54604051630b19210b60e41b81526001600160701b039687169a5094909516975091955093506000926001600160a01b039091169163b19210b0916106af918e918a918a918a918a91600160201b900463ffffffff1690600401612cb3565b602060405180830381865afa1580156106cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f09190612ce7565b90506000808761070257826000610706565b6000835b9150915061071582828c611b83565b6001600b559e9d5050505050505050505050505050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610791576001600160a01b03841660009081526002602090815260408083203384529091528120805484929061078b908490612d16565b90915550505b61079c8484846120fb565b5060019392505050565b600b546001146107c85760405162461bcd60e51b815260040161053d90612c91565b6000600b81905560065481906001600160a01b038881169116146107ee578360006107f2565b6000845b9150915060008211806108055750600081115b6108215760405162461bcd60e51b815260040161053d90612d2d565b6008546001600160701b0380821691600160701b900416818410801561084f5750806001600160701b031683105b61086b5760405162461bcd60e51b815260040161053d90612d51565b60065460075460009182916001600160a01b039182169190811690891682148015906108a95750806001600160a01b0316896001600160a01b031614155b6108c55760405162461bcd60e51b815260040161053d90612d74565b87156108d6576108d6828a8a61218a565b86156108e7576108e7818a8961218a565b6040516370a0823160e01b81526001600160a01b038316906370a0823190610913903090600401612a8a565b602060405180830381865afa158015610930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109549190612ce7565b6040516370a0823160e01b81529094506001600160a01b038216906370a0823190610983903090600401612a8a565b602060405180830381865afa1580156109a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c49190612ce7565b92505050600086856001600160701b03166109df9190612d16565b83116109ec576000610a09565b6109ff876001600160701b038716612d16565b610a099084612d16565b90506000610a20876001600160701b038716612d16565b8311610a2d576000610a4a565b610a40876001600160701b038716612d16565b610a4a9084612d16565b90506000821180610a5b5750600081115b610a775760405162461bcd60e51b815260040161053d90612d97565b6000610a8585612710612dbb565b90506000610a9585612710612dbb565b90508315610b0257600e54600090610aba90600160201b900463ffffffff1686612dbb565b9050610ac68184612d16565b600d54909350610ae09082906001600160701b0316612dda565b600d80546001600160701b0319166001600160701b0392909216919091179055505b8215610b7a57600e54600090610b2590600160201b900463ffffffff1685612dbb565b9050610b318183612d16565b600d54909250610b52908290600160701b90046001600160701b0316612dda565b600d600e6101000a8154816001600160701b0302191690836001600160701b03160217905550505b600d54600160e01b900463ffffffff166032811415610be457610ba96001600160701b03808a16908b16612dbb565b610bb7906305f5e100612dbb565b610bc18385612dbb565b1015610bdf5760405162461bcd60e51b815260040161053d90612df2565b610c9f565b600c546001600160a01b03166379c91b37610c0a6001600160701b038c16612710612dbb565b610c1f6001600160701b038c16612710612dbb565b8686866040518663ffffffff1660e01b8152600401610c42959493929190612e14565b602060405180830381865afa158015610c5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c839190612e3d565b610c9f5760405162461bcd60e51b815260040161053d90612df2565b505050610cae848488886122bd565b886001600160a01b0316336001600160a01b031660008051602061300783398151915284848c8c604051610ce59493929190612e5f565b60405180910390a350506001600b555050505050505050505050565b6000600b54600114610d255760405162461bcd60e51b815260040161053d90612c91565b6000600b8190556006546001600160a01b038881169116149080808084610d7957600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b900416610da9565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e5460405163671a11b560e01b81526001600160701b039687169a5094909516975091955093506000926001600160a01b039091169163671a11b5916106af918e918a918a918a918a91600160201b900463ffffffff1690600401612cb3565b6000600b54600114610e315760405162461bcd60e51b815260040161053d90612c91565b6000600b81905580610e41610563565b506006546040516370a0823160e01b81529294509092506000916001600160a01b03909116906370a0823190610e7b903090600401612a8a565b602060405180830381865afa158015610e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebc9190612ce7565b6007546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610ef2903090600401612a8a565b602060405180830381865afa158015610f0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f339190612ce7565b90506000610f4a6001600160701b03861684612d16565b90506000610f616001600160701b03861684612d16565b9050610f6d868661250b565b5060005480610fa9576103e8610f8b610f868486612dbb565b6127aa565b610f959190612d16565b9750610fa460006103e861281a565b610ff0565b610fed6001600160701b038816610fc08386612dbb565b610fca9190612e90565b6001600160701b038816610fde8486612dbb565b610fe89190612e90565b612891565b97505b6000881161102d5760405162461bcd60e51b815260206004820152600a6024820152695245514c503a20494c4d60b01b604482015260640161053d565b611037898961281a565b611043858589896122bd565b604080518481526020810184905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600b55509395945050505050565b600080600b546001146110b55760405162461bcd60e51b815260040161053d90612c91565b6000600b819055806110c5610563565b506006546007546040516370a0823160e01b81529395509193506001600160a01b039081169291169060009083906370a0823190611107903090600401612a8a565b602060405180830381865afa158015611124573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111489190612ce7565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016111789190612a8a565b602060405180830381865afa158015611195573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b99190612ce7565b306000908152600160205260409020549091506111d6878761250b565b50600054806111e58584612dbb565b6111ef9190612e90565b9950806111fc8484612dbb565b6112069190612e90565b985060008a1180156112185750600089115b6112515760405162461bcd60e51b815260206004820152600a6024820152692922a8a6281d1024a62160b11b604482015260640161053d565b61125b30836128a9565b611266868c8c61218a565b611271858c8b61218a565b6040516370a0823160e01b81526001600160a01b038716906370a082319061129d903090600401612a8a565b602060405180830381865afa1580156112ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112de9190612ce7565b6040516370a0823160e01b81529094506001600160a01b038616906370a082319061130d903090600401612a8a565b602060405180830381865afa15801561132a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134e9190612ce7565b925061135c84848a8a6122bd565b604080518b8152602081018b90526001600160a01b038d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a350505050505050506001600b81905550915091565b600061059a3384846120fb565b600b546001146113e65760405162461bcd60e51b815260040161053d90612c91565b6000600b556006546007546008546040516370a0823160e01b81526001600160a01b03938416939092169161148991849186916001600160701b03169083906370a0823190611439903090600401612a8a565b602060405180830381865afa158015611456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147a9190612ce7565b6114849190612d16565b61218a565b6008546040516370a0823160e01b81526114d19183918691600160701b90046001600160701b0316906001600160a01b038416906370a0823190611439903090600401612a8a565b50506001600b5550565b60065460009081908190819081906001600160a01b0389811691161461152e57600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b90041661155e565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e54604051630b19210b60e41b81526001600160701b039687169a5094909516975091955093506001600160a01b03169163b19210b0916115be918a918991899189918991600160201b90910463ffffffff1690600401612cb3565b602060405180830381865afa1580156115db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ff9190612ce7565b98975050505050505050565b6005546001600160a01b031633146116505760405162461bcd60e51b81526020600482015260086024820152672922a8a6281d102360c11b604482015260640161053d565b600680546001600160a01b03199081166001600160a01b038781169190911790925560078054909116918516919091179055600d80546001600160e01b0316600160e01b63ffffffff858116820292909217928390556116b39204166064612ea4565b600e805463ffffffff848116600160201b026001600160401b031990921693169290921791909117905560055460408051634b75f54f60e01b815290516001600160a01b0390921691634b75f54f916004818101926020929091908290030181865afa158015611727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174b9190612ec9565b600c80546001600160a01b0319166001600160a01b039290921691909117905550505050565b428410156117b05760405162461bcd60e51b815260206004820152600c60248201526b1493140e881156141254915160a21b604482015260640161053d565b6003546001600160a01b03881660009081526004602052604081208054919291600080516020612fe7833981519152918b918b918b9190876117f183612ee6565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161186a92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156118d5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061190b5750886001600160a01b0316816001600160a01b0316145b6119415760405162461bcd60e51b8152602060048201526007602482015266524c503a20495360c81b604482015260640161053d565b61194c898989612099565b505050505050505050565b600d546001600160701b0380821692600160701b9092041690565b60065460009081908190819081906001600160a01b038981169116146119c557600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b9004166119f5565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e5460405163671a11b560e01b81526001600160701b039687169a5094909516975091955093506001600160a01b03169163671a11b5916115be918a918991899189918991600160201b90910463ffffffff1690600401612cb3565b600b54600114611a775760405162461bcd60e51b815260040161053d90612c91565b6000600b556006546040516370a0823160e01b8152611b7c916001600160a01b0316906370a0823190611aae903090600401612a8a565b602060405180830381865afa158015611acb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aef9190612ce7565b6007546040516370a0823160e01b81526001600160a01b03909116906370a0823190611b1f903090600401612a8a565b602060405180830381865afa158015611b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b609190612ce7565b6008546001600160701b0380821691600160701b9004166122bd565b6001600b55565b600080841180611b935750600083115b611baf5760405162461bcd60e51b815260040161053d90612d2d565b6008546001600160701b0380821691600160701b9004168186108015611bdd5750806001600160701b031685105b611bf95760405162461bcd60e51b815260040161053d90612d51565b60065460075460009182916001600160a01b03918216919081169088168214801590611c375750806001600160a01b0316886001600160a01b031614155b611c535760405162461bcd60e51b815260040161053d90612d74565b8915611c6457611c6482898c61218a565b8815611c7557611c7581898b61218a565b6040516370a0823160e01b81526001600160a01b038316906370a0823190611ca1903090600401612a8a565b602060405180830381865afa158015611cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce29190612ce7565b6040516370a0823160e01b81529094506001600160a01b038216906370a0823190611d11903090600401612a8a565b602060405180830381865afa158015611d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d529190612ce7565b92505050600088856001600160701b0316611d6d9190612d16565b8311611d7a576000611d97565b611d8d896001600160701b038716612d16565b611d979084612d16565b90506000611dae896001600160701b038716612d16565b8311611dbb576000611dd8565b611dce896001600160701b038716612d16565b611dd89084612d16565b90506000821180611de95750600081115b611e055760405162461bcd60e51b815260040161053d90612d97565b6000611e1385612710612dbb565b90506000611e2385612710612dbb565b90508315611e9057600e54600090611e4890600160201b900463ffffffff1686612dbb565b9050611e548184612d16565b600d54909350611e6e9082906001600160701b0316612dda565b600d80546001600160701b0319166001600160701b0392909216919091179055505b8215611f0857600e54600090611eb390600160201b900463ffffffff1685612dbb565b9050611ebf8183612d16565b600d54909250611ee0908290600160701b90046001600160701b0316612dda565b600d600e6101000a8154816001600160701b0302191690836001600160701b03160217905550505b600d54600160e01b900463ffffffff166032811415611f7257611f376001600160701b03808a16908b16612dbb565b611f45906305f5e100612dbb565b611f4f8385612dbb565b1015611f6d5760405162461bcd60e51b815260040161053d90612df2565b61202d565b600c546001600160a01b03166379c91b37611f986001600160701b038c16612710612dbb565b611fad6001600160701b038c16612710612dbb565b8686866040518663ffffffff1660e01b8152600401611fd0959493929190612e14565b602060405180830381865afa158015611fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120119190612e3d565b61202d5760405162461bcd60e51b815260040161053d90612df2565b50505061203c848488886122bd565b876001600160a01b0316336001600160a01b031660008051602061300783398151915284848e8e6040516120739493929190612e5f565b60405180910390a360008a11612089578861208b565b895b9a9950505050505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831660009081526001602052604081208054839290612123908490612d16565b90915550506001600160a01b03821660009081526001602052604081208054839290612150908490612dda565b92505081905550816001600160a01b0316836001600160a01b0316600080516020612fc7833981519152836040516120ee91815260200190565b60408051808201825260198152787472616e7366657228616464726573732c75696e743235362960381b60209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b179052915160009283928716916122129190612f01565b6000604051808303816000865af19150503d806000811461224f576040519150601f19603f3d011682016040523d82523d6000602084013e612254565b606091505b509150915081801561227e57508051158061227e57508080602001905181019061227e9190612e3d565b6122b65760405162461bcd60e51b81526020600482015260096024820152682922a8a6281d102a2360b91b604482015260640161053d565b5050505050565b600d54600160e01b900463ffffffff166001600160701b036122e0826064612ea4565b6122f09063ffffffff1687612dbb565b1115801561231457506001600160701b0361231163ffffffff831686612dbb565b11155b61234b5760405162461bcd60e51b81526020600482015260086024820152675245514c503a204f60c01b604482015260640161053d565b600061235b600160201b42612f1d565b60085490915060009061237b90600160e01b900463ffffffff1683612ea4565b905060008163ffffffff1611801561239b57506001600160701b03851615155b80156123af57506001600160701b03841615155b156124735760006123c1846064612ea4565b6123d19063ffffffff1687612f31565b905060006123e563ffffffff861687612f31565b90508263ffffffff1661240a836123fb8461291a565b6001600160e01b031690612939565b6001600160e01b031661241d9190612dbb565b6009600082825461242e9190612dda565b909155505063ffffffff8316612447826123fb8561291a565b6001600160e01b031661245a9190612dbb565b600a600082825461246b9190612dda565b909155505050505b6008805463ffffffff8416600160e01b026001600160e01b036001600160701b038a8116600160701b9081026001600160e01b0319909516828e1617949094179182168317948590556040517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1956124fa9594831693831693909317939092041690612c3e565b60405180910390a150505050505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015612561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125859190612ec9565b90506000600560009054906101000a90046001600160a01b03166001600160a01b031663b0e21e8a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126009190612ce7565b6001600160a01b03831615159350905060008061261b611957565b915091506000836001600160701b03161180156126355750845b801561265d57506000826001600160701b0316118061265d57506000816001600160701b0316115b1561275d57600d54600c5460008054600160e01b90930463ffffffff169290916001600160a01b0316906392aec23c908b8b8661269b816064612ea4565b6126a58c8c612f60565b6126af8d8c612f60565b6040516001600160e01b031960e08a901b16815260048101979097526001600160701b039586166024880152938516604487015263ffffffff928316606487015291166084850152821660a48401521660c482015260e401602060405180830381865afa158015612724573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127489190612ce7565b9050801561275a5761275a868261281a565b50505b6001600160701b0382161561277d57600d80546001600160701b03191690555b6001600160701b038116156127a057600d8054600160701b600160e01b03191690555b5050505092915050565b6000600382111561280b57508060006127c4600283612e90565b6127cf906001612dda565b90505b81811015612805579050806002816127ea8186612e90565b6127f49190612dda565b6127fe9190612e90565b90506127d2565b50919050565b8115612815575060015b919050565b8060008082825461282b9190612dda565b90915550506001600160a01b03821660009081526001602052604081208054839290612858908490612dda565b90915550506040518181526001600160a01b03831690600090600080516020612fc7833981519152906020015b60405180910390a35050565b60008183106128a057816128a2565b825b9392505050565b6001600160a01b038216600090815260016020526040812080548392906128d1908490612d16565b92505081905550806000808282546128e99190612d16565b90915550506040518181526000906001600160a01b03841690600080516020612fc783398151915290602001612885565b6000612933600160701b6001600160701b038416612f86565b92915050565b60006128a26001600160701b03831684612fac565b6001600160a01b038116811461296357600080fd5b50565b60008060008060006080868803121561297e57600080fd5b853594506020860135935060408601356129978161294e565b925060608601356001600160401b03808211156129b357600080fd5b818801915088601f8301126129c757600080fd5b8135818111156129d657600080fd5b8960208285010111156129e857600080fd5b9699959850939650602001949392505050565b60005b83811015612a165781810151838201526020016129fe565b83811115612a25576000848401525b50505050565b6020815260008251806020840152612a4a8160408501602087016129fb565b601f01601f19169190910160400192915050565b60008060408385031215612a7157600080fd5b8235612a7c8161294e565b946020939093013593505050565b6001600160a01b0391909116815260200190565b600080600080600060a08688031215612ab657600080fd5b8535612ac18161294e565b94506020860135612ad18161294e565b935060408601359250606086013591506080860135612aef8161294e565b809150509295509295909350565b600080600060608486031215612b1257600080fd5b8335612b1d8161294e565b92506020840135612b2d8161294e565b929592945050506040919091013590565b600060208284031215612b5057600080fd5b81356128a28161294e565b803563ffffffff8116811461281557600080fd5b60008060008060808587031215612b8557600080fd5b8435612b908161294e565b93506020850135612ba08161294e565b9250612bae60408601612b5b565b9150612bbc60608601612b5b565b905092959194509250565b600080600080600080600060e0888a031215612be257600080fd5b8735612bed8161294e565b96506020880135612bfd8161294e565b95506040880135945060608801359350608088013560ff81168114612c2157600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6001600160701b0392831681529116602082015260400190565b60008060408385031215612c6b57600080fd5b8235612c768161294e565b91506020830135612c868161294e565b809150509250929050565b60208082526008908201526714915453140e881360c21b604082015260600190565b9586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b600060208284031215612cf957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015612d2857612d28612d00565b500390565b6020808252600a90820152695245514c503a20494f4160b01b604082015260600190565b60208082526009908201526814915453140e88125360ba1b604082015260600190565b60208082526009908201526814915453140e88125560ba1b604082015260600190565b6020808252600a90820152695245514c503a2049494160b01b604082015260600190565b6000816000190483118215151615612dd557612dd5612d00565b500290565b60008219821115612ded57612ded612d00565b500190565b6020808252600890820152675245514c503a204b60c01b604082015260600190565b94855260208501939093526040840191909152606083015263ffffffff16608082015260a00190565b600060208284031215612e4f57600080fd5b815180151581146128a257600080fd5b93845260208401929092526040830152606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082612e9f57612e9f612e7a565b500490565b600063ffffffff83811690831681811015612ec157612ec1612d00565b039392505050565b600060208284031215612edb57600080fd5b81516128a28161294e565b6000600019821415612efa57612efa612d00565b5060010190565b60008251612f138184602087016129fb565b9190910192915050565b600082612f2c57612f2c612e7a565b500690565b60006001600160701b0382811684821681151582840482111615612f5757612f57612d00565b02949350505050565b60006001600160701b0383811680612f7a57612f7a612e7a565b92169190910492915050565b60006001600160e01b0382811684821681151582840482111615612f5757612f57612d00565b60006001600160e01b0383811680612f7a57612f7a612e7a56feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9d78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822a2646970667358221220c781003ee866af1150de62e00d2557140cb22a9b29366cdf7d70eadda0ecfd3364736f6c634300080a0033a26469706673582212208fefb1d3523035c42a48a9ddcc4721cac94c6edcdd1c989bbfdd3eabde45583864736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23151,
        "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23153,
        "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
        "label": "formula",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 23155,
        "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
        "label": "protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 23157,
        "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 23172,
        "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
        "label": "_pairSalts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 23175,
        "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 23179,
        "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
        "label": "_pairs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint64)"
      },
      {
        "astId": 23188,
        "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
        "label": "tokenPairs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_contract(IERC20)30555,t_mapping(t_contract(IERC20)30555,t_struct(AddressSet)37118_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)30555": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_contract(IERC20)30555,t_mapping(t_contract(IERC20)30555,t_struct(AddressSet)37118_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)30555",
        "label": "mapping(contract IERC20 => mapping(contract IERC20 => struct EnumerableSet.AddressSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)30555,t_struct(AddressSet)37118_storage)"
      },
      "t_mapping(t_contract(IERC20)30555,t_struct(AddressSet)37118_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)30555",
        "label": "mapping(contract IERC20 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)37118_storage"
      },
      "t_struct(AddressSet)37118_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 37113,
            "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 37117,
            "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}