{
  "address": "0xb9B260D0031a0E10C106FF85ad4691C694A4E778",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserve0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserve1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance0Adjusted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance1Adjusted",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        }
      ],
      "name": "ensureConstantValue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightIn",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightOut",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightIn",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightOut",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getFactoryAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getFactoryAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getFactoryReserveAndWeights",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightB",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getFactoryWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getOtherToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "getPairAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getPairAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getReserveAndWeights",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightB",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint112",
          "name": "reserve0",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "reserve1",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint112",
          "name": "collectedFee0",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "collectedFee1",
          "type": "uint112"
        }
      ],
      "name": "mintLiquidityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "sortTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x543fbc2506098fa6d1271e9caa564d60c4d0264f6ec883f6255aa77e2da0b6b6",
  "receipt": {
    "to": null,
    "from": "0x10E38dFfFCfdBaaf590D5A9958B01C9cfcF6A63B",
    "contractAddress": "0xb9B260D0031a0E10C106FF85ad4691C694A4E778",
    "transactionIndex": 0,
    "gasUsed": "5479665",
    "logsBloom": "0x
    "blockHash": "0x196fd4fc6c21fba09f79f0c8172be8fcd1432212bec255b0380226e0b4c40198",
    "transactionHash": "0x543fbc2506098fa6d1271e9caa564d60c4d0264f6ec883f6255aa77e2da0b6b6",
    "logs": [],
    "blockNumber": 2421752,
    "cumulativeGasUsed": "5479665",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2af3591c91b85899e2a95c10a4d6adb3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance0Adjusted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance1Adjusted\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"}],\"name\":\"ensureConstantValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightIn\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightOut\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightIn\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightOut\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getFactoryAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getFactoryAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getFactoryReserveAndWeights\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getFactoryWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getOtherToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getPairAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getPairAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getReserveAndWeights\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"collectedFee0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"collectedFee1\",\"type\":\"uint112\"}],\"name\":\"mintLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAmountIn(uint256,uint256,uint256,uint32,uint32,uint32)\":{\"details\":\"given an output amount of an asset and pair reserves, returns a required input amount of the other asset Formula: return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\",\"params\":{\"amountOut\":\"target reserve amount\",\"reserveIn\":\"source reserve balance\",\"reserveOut\":\"target reserve balance\",\"swapFee\":\"swap fee of the conversion\",\"tokenWeightIn\":\"source reserve weight, represented in ppm (2-98)\",\"tokenWeightOut\":\"target reserve weight, represented in ppm (2-98)\"},\"returns\":{\"amountIn\":\"amountIn\"}},\"getAmountOut(uint256,uint256,uint256,uint32,uint32,uint32)\":{\"details\":\"given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset, Formula: return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\",\"params\":{\"amountIn\":\"source reserve amount\",\"reserveIn\":\"source reserve balance\",\"reserveOut\":\"target reserve balance\",\"swapFee\":\"swap fee of the conversion\",\"tokenWeightIn\":\"source reserve weight, represented in ppm (2-98)\",\"tokenWeightOut\":\"target reserve weight, represented in ppm (2-98)\"},\"returns\":{\"amountOut\":\"amountOut\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemFormula.sol\":\"RequiemFormula\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RequiemFormula.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6;\\n\\nimport \\\"./interfaces/IRequiemFormula.sol\\\";\\nimport \\\"./interfaces/IRequiemPair.sol\\\";\\nimport \\\"./interfaces/IRequiemFactory.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\n\\ncontract RequiemFormula is IRequiemFormula {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant ONE = 1;\\n    uint8 private constant MIN_PRECISION = 32;\\n    uint8 private constant MAX_PRECISION = 127;\\n\\n    uint256 private constant FIXED_1 = 0x080000000000000000000000000000000;\\n    uint256 private constant FIXED_2 = 0x100000000000000000000000000000000;\\n    uint256 private constant MAX_NUM = 0x200000000000000000000000000000000;\\n\\n    uint256 private constant LN2_NUMERATOR = 0x3f80fe03f80fe03f80fe03f80fe03f8;\\n    uint256 private constant LN2_DENOMINATOR = 0x5b9de1d10bf4103d647b0955897ba80;\\n\\n    uint256 private constant OPT_LOG_MAX_VAL = 0x15bf0a8b1457695355fb8ac404e7a79e3;\\n    uint256 private constant OPT_EXP_MAX_VAL = 0x800000000000000000000000000000000;\\n\\n    uint256 private constant LAMBERT_CONV_RADIUS = 0x002f16ac6c59de6f8d5d6f63c1482a7c86;\\n    uint256 private constant LAMBERT_POS2_SAMPLE = 0x0003060c183060c183060c183060c18306;\\n    uint256 private constant LAMBERT_POS2_MAXVAL = 0x01af16ac6c59de6f8d5d6f63c1482a7c80;\\n    uint256 private constant LAMBERT_POS3_MAXVAL = 0x6b22d43e72c326539cceeef8bb48f255ff;\\n\\n    uint256 private constant MAX_UNF_WEIGHT = 0x10c6f7a0b5ed8d36b4c7f34938583621fafc8b0079a2834d26fa3fcc9ea9;\\n\\n    uint256[128] private maxExpArray;\\n\\n    function initMaxExpArray() internal {\\n        maxExpArray[32] = 0x1c35fedd14ffffffffffffffffffffffff;\\n        maxExpArray[33] = 0x1b0ce43b323fffffffffffffffffffffff;\\n        maxExpArray[34] = 0x19f0028ec1ffffffffffffffffffffffff;\\n        maxExpArray[35] = 0x18ded91f0e7fffffffffffffffffffffff;\\n        maxExpArray[36] = 0x17d8ec7f0417ffffffffffffffffffffff;\\n        maxExpArray[37] = 0x16ddc6556cdbffffffffffffffffffffff;\\n        maxExpArray[38] = 0x15ecf52776a1ffffffffffffffffffffff;\\n        maxExpArray[39] = 0x15060c256cb2ffffffffffffffffffffff;\\n        maxExpArray[40] = 0x1428a2f98d72ffffffffffffffffffffff;\\n        maxExpArray[41] = 0x13545598e5c23fffffffffffffffffffff;\\n        maxExpArray[42] = 0x1288c4161ce1dfffffffffffffffffffff;\\n        maxExpArray[43] = 0x11c592761c666fffffffffffffffffffff;\\n        maxExpArray[44] = 0x110a688680a757ffffffffffffffffffff;\\n        maxExpArray[45] = 0x1056f1b5bedf77ffffffffffffffffffff;\\n        maxExpArray[46] = 0x0faadceceeff8bffffffffffffffffffff;\\n        maxExpArray[47] = 0x0f05dc6b27edadffffffffffffffffffff;\\n        maxExpArray[48] = 0x0e67a5a25da4107fffffffffffffffffff;\\n        maxExpArray[49] = 0x0dcff115b14eedffffffffffffffffffff;\\n        maxExpArray[50] = 0x0d3e7a392431239fffffffffffffffffff;\\n        maxExpArray[51] = 0x0cb2ff529eb71e4fffffffffffffffffff;\\n        maxExpArray[52] = 0x0c2d415c3db974afffffffffffffffffff;\\n        maxExpArray[53] = 0x0bad03e7d883f69bffffffffffffffffff;\\n        maxExpArray[54] = 0x0b320d03b2c343d5ffffffffffffffffff;\\n        maxExpArray[55] = 0x0abc25204e02828dffffffffffffffffff;\\n        maxExpArray[56] = 0x0a4b16f74ee4bb207fffffffffffffffff;\\n        maxExpArray[57] = 0x09deaf736ac1f569ffffffffffffffffff;\\n        maxExpArray[58] = 0x0976bd9952c7aa957fffffffffffffffff;\\n        maxExpArray[59] = 0x09131271922eaa606fffffffffffffffff;\\n        maxExpArray[60] = 0x08b380f3558668c46fffffffffffffffff;\\n        maxExpArray[61] = 0x0857ddf0117efa215bffffffffffffffff;\\n        maxExpArray[62] = 0x07ffffffffffffffffffffffffffffffff;\\n        maxExpArray[63] = 0x07abbf6f6abb9d087fffffffffffffffff;\\n        maxExpArray[64] = 0x075af62cbac95f7dfa7fffffffffffffff;\\n        maxExpArray[65] = 0x070d7fb7452e187ac13fffffffffffffff;\\n        maxExpArray[66] = 0x06c3390ecc8af379295fffffffffffffff;\\n        maxExpArray[67] = 0x067c00a3b07ffc01fd6fffffffffffffff;\\n        maxExpArray[68] = 0x0637b647c39cbb9d3d27ffffffffffffff;\\n        maxExpArray[69] = 0x05f63b1fc104dbd39587ffffffffffffff;\\n        maxExpArray[70] = 0x05b771955b36e12f7235ffffffffffffff;\\n        maxExpArray[71] = 0x057b3d49dda84556d6f6ffffffffffffff;\\n        maxExpArray[72] = 0x054183095b2c8ececf30ffffffffffffff;\\n        maxExpArray[73] = 0x050a28be635ca2b888f77fffffffffffff;\\n        maxExpArray[74] = 0x04d5156639708c9db33c3fffffffffffff;\\n        maxExpArray[75] = 0x04a23105873875bd52dfdfffffffffffff;\\n        maxExpArray[76] = 0x0471649d87199aa990756fffffffffffff;\\n        maxExpArray[77] = 0x04429a21a029d4c1457cfbffffffffffff;\\n        maxExpArray[78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff;\\n        maxExpArray[79] = 0x03eab73b3bbfe282243ce1ffffffffffff;\\n        maxExpArray[80] = 0x03c1771ac9fb6b4c18e229ffffffffffff;\\n        maxExpArray[81] = 0x0399e96897690418f785257fffffffffff;\\n        maxExpArray[82] = 0x0373fc456c53bb779bf0ea9fffffffffff;\\n        maxExpArray[83] = 0x034f9e8e490c48e67e6ab8bfffffffffff;\\n        maxExpArray[84] = 0x032cbfd4a7adc790560b3337ffffffffff;\\n        maxExpArray[85] = 0x030b50570f6e5d2acca94613ffffffffff;\\n        maxExpArray[86] = 0x02eb40f9f620fda6b56c2861ffffffffff;\\n        maxExpArray[87] = 0x02cc8340ecb0d0f520a6af58ffffffffff;\\n        maxExpArray[88] = 0x02af09481380a0a35cf1ba02ffffffffff;\\n        maxExpArray[89] = 0x0292c5bdd3b92ec810287b1b3fffffffff;\\n        maxExpArray[90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff;\\n        maxExpArray[91] = 0x025daf6654b1eaa55fd64df5efffffffff;\\n        maxExpArray[92] = 0x0244c49c648baa98192dce88b7ffffffff;\\n        maxExpArray[93] = 0x022ce03cd5619a311b2471268bffffffff;\\n        maxExpArray[94] = 0x0215f77c045fbe885654a44a0fffffffff;\\n        maxExpArray[95] = 0x01ffffffffffffffffffffffffffffffff;\\n        maxExpArray[96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff;\\n        maxExpArray[97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff;\\n        maxExpArray[98] = 0x01c35fedd14b861eb0443f7f133fffffff;\\n        maxExpArray[99] = 0x01b0ce43b322bcde4a56e8ada5afffffff;\\n        maxExpArray[100] = 0x019f0028ec1fff007f5a195a39dfffffff;\\n        maxExpArray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff;\\n        maxExpArray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff;\\n        maxExpArray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff;\\n        maxExpArray[104] = 0x015ecf52776a1155b5bd8395814f7fffff;\\n        maxExpArray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff;\\n        maxExpArray[106] = 0x01428a2f98d728ae223ddab715be3fffff;\\n        maxExpArray[107] = 0x013545598e5c23276ccf0ede68034fffff;\\n        maxExpArray[108] = 0x01288c4161ce1d6f54b7f61081194fffff;\\n        maxExpArray[109] = 0x011c592761c666aa641d5a01a40f17ffff;\\n        maxExpArray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff;\\n        maxExpArray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff;\\n        maxExpArray[112] = 0x00faadceceeff8a0890f3875f008277fff;\\n        maxExpArray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff;\\n        maxExpArray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff;\\n        maxExpArray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff;\\n        maxExpArray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff;\\n        maxExpArray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff;\\n        maxExpArray[118] = 0x00c2d415c3db974ab32a51840c0b67edff;\\n        maxExpArray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff;\\n        maxExpArray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff;\\n        maxExpArray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf;\\n        maxExpArray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df;\\n        maxExpArray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f;\\n        maxExpArray[124] = 0x00976bd9952c7aa957f5937d790ef65037;\\n        maxExpArray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf;\\n        maxExpArray[126] = 0x008b380f3558668c46c91c49a2f8e967b9;\\n        maxExpArray[127] = 0x00857ddf0117efa215952912839f6473e6;\\n    }\\n\\n    constructor() public {\\n        initMaxExpArray();\\n    }\\n\\n    /**\\n     * @dev General Description:\\n     *     Determine a value of precision.\\n     *     Calculate an integer approximation of (_baseN / _baseD) ^ (_expN / _expD) * 2 ^ precision.\\n     *     Return the result along with the precision used.\\n     *\\n     * Detailed Description:\\n     *     Instead of calculating \\\"base ^ exp\\\", we calculate \\\"e ^ (log(base) * exp)\\\".\\n     *     The value of \\\"log(base)\\\" is represented with an integer slightly smaller than \\\"log(base) * 2 ^ precision\\\".\\n     *     The larger \\\"precision\\\" is, the more accurately this value represents the real value.\\n     *     However, the larger \\\"precision\\\" is, the more bits are required in order to store this value.\\n     *     And the exponentiation function, which takes \\\"x\\\" and calculates \\\"e ^ x\\\", is limited to a maximum exponent (maximum value of \\\"x\\\").\\n     *     This maximum exponent depends on the \\\"precision\\\" used, and it is given by \\\"maxExpArray[precision] >> (MAX_PRECISION - precision)\\\".\\n     *     Hence we need to determine the highest precision which can be used for the given input, before calling the exponentiation function.\\n     *     This allows us to compute \\\"base ^ exp\\\" with maximum accuracy and without exceeding 256 bits in any of the intermediate computations.\\n     *     This functions assumes that \\\"_expN < 2 ^ 256 / log(MAX_NUM - 1)\\\", otherwise the multiplication should be replaced with a \\\"safeMul\\\".\\n     *     Since we rely on unsigned-integer arithmetic and \\\"base < 1\\\" ==> \\\"log(base) < 0\\\", this function does not support \\\"_baseN < _baseD\\\".\\n     */\\n    function power(\\n        uint256 _baseN,\\n        uint256 _baseD,\\n        uint32 _expN,\\n        uint32 _expD\\n    ) internal view returns (uint256, uint8) {\\n        require(_baseN >= _baseD, \\\"not support _baseN < _baseD\\\");\\n        require(_baseN < MAX_NUM);\\n\\n        uint256 baseLog;\\n        uint256 base = (_baseN * FIXED_1) / _baseD;\\n        if (base < OPT_LOG_MAX_VAL) {\\n            baseLog = optimalLog(base);\\n        } else {\\n            baseLog = generalLog(base);\\n        }\\n\\n        uint256 baseLogTimesExp = (baseLog * _expN) / _expD;\\n        if (baseLogTimesExp < OPT_EXP_MAX_VAL) {\\n            return (optimalExp(baseLogTimesExp), MAX_PRECISION);\\n        } else {\\n            uint8 precision = findPositionInMaxExpArray(baseLogTimesExp);\\n            return (generalExp(baseLogTimesExp >> (MAX_PRECISION - precision), precision), precision);\\n        }\\n    }\\n\\n    /**\\n     * @dev computes log(x / FIXED_1) * FIXED_1.\\n     * This functions assumes that \\\"x >= FIXED_1\\\", because the output would be negative otherwise.\\n     */\\n    function generalLog(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\\n        if (x >= FIXED_2) {\\n            uint8 count = floorLog2(x / FIXED_1);\\n            x >>= count;\\n            // now x < 2\\n            res = count * FIXED_1;\\n        }\\n\\n        // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\\n        if (x > FIXED_1) {\\n            for (uint8 i = MAX_PRECISION; i > 0; --i) {\\n                x = (x * x) / FIXED_1;\\n                // now 1 < x < 4\\n                if (x >= FIXED_2) {\\n                    x >>= 1;\\n                    // now 1 < x < 2\\n                    res += ONE << (i - 1);\\n                }\\n            }\\n        }\\n\\n        return (res * LN2_NUMERATOR) / LN2_DENOMINATOR;\\n    }\\n\\n    /**\\n     * @dev computes the largest integer smaller than or equal to the binary logarithm of the input.\\n     */\\n    function floorLog2(uint256 _n) internal pure returns (uint8) {\\n        uint8 res = 0;\\n\\n        if (_n < 256) {\\n            // At most 8 iterations\\n            while (_n > 1) {\\n                _n >>= 1;\\n                res += 1;\\n            }\\n        } else {\\n            // Exactly 8 iterations\\n            for (uint8 s = 128; s > 0; s >>= 1) {\\n                if (_n >= (ONE << s)) {\\n                    _n >>= s;\\n                    res |= s;\\n                }\\n            }\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * @dev the global \\\"maxExpArray\\\" is sorted in descending order, and therefore the following statements are equivalent:\\n     * - This function finds the position of [the smallest value in \\\"maxExpArray\\\" larger than or equal to \\\"x\\\"]\\n     * - This function finds the highest position of [a value in \\\"maxExpArray\\\" larger than or equal to \\\"x\\\"]\\n     */\\n    function findPositionInMaxExpArray(uint256 _x) internal view returns (uint8) {\\n        uint8 lo = MIN_PRECISION;\\n        uint8 hi = MAX_PRECISION;\\n\\n        while (lo + 1 < hi) {\\n            uint8 mid = (lo + hi) / 2;\\n            if (maxExpArray[mid] >= _x) lo = mid;\\n            else hi = mid;\\n        }\\n\\n        if (maxExpArray[hi] >= _x) return hi;\\n        if (maxExpArray[lo] >= _x) return lo;\\n\\n        require(false);\\n    }\\n\\n    /**\\n     * @dev this function can be auto-generated by the script \\\"PrintFunctionGeneralExp.py\\\".\\n     * it approximates \\\"e ^ x\\\" via maclaurin summation: \\\"(x^0)/0! + (x^1)/1! + ... + (x^n)/n!\\\".\\n     * it returns \\\"e ^ (x / 2 ^ precision) * 2 ^ precision\\\", that is, the result is upshifted for accuracy.\\n     * the global \\\"maxExpArray\\\" maps each \\\"precision\\\" to \\\"((maximumExponent + 1) << (MAX_PRECISION - precision)) - 1\\\".\\n     * the maximum permitted value for \\\"x\\\" is therefore given by \\\"maxExpArray[precision] >> (MAX_PRECISION - precision)\\\".\\n     */\\n    function generalExp(uint256 _x, uint8 _precision) internal pure returns (uint256) {\\n        uint256 xi = _x;\\n        uint256 res = 0;\\n\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x3442c4e6074a82f1797f72ac0000000;\\n        // add x^02 * (33! / 02!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x116b96f757c380fb287fd0e40000000;\\n        // add x^03 * (33! / 03!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x045ae5bdd5f0e03eca1ff4390000000;\\n        // add x^04 * (33! / 04!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00defabf91302cd95b9ffda50000000;\\n        // add x^05 * (33! / 05!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x002529ca9832b22439efff9b8000000;\\n        // add x^06 * (33! / 06!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00054f1cf12bd04e516b6da88000000;\\n        // add x^07 * (33! / 07!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000a9e39e257a09ca2d6db51000000;\\n        // add x^08 * (33! / 08!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000012e066e7b839fa050c309000000;\\n        // add x^09 * (33! / 09!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000001e33d7d926c329a1ad1a800000;\\n        // add x^10 * (33! / 10!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000002bee513bdb4a6b19b5f800000;\\n        // add x^11 * (33! / 11!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000003a9316fa79b88eccf2a00000;\\n        // add x^12 * (33! / 12!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000048177ebe1fa812375200000;\\n        // add x^13 * (33! / 13!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000005263fe90242dcbacf00000;\\n        // add x^14 * (33! / 14!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000057e22099c030d94100000;\\n        // add x^15 * (33! / 15!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000057e22099c030d9410000;\\n        // add x^16 * (33! / 16!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000052b6b54569976310000;\\n        // add x^17 * (33! / 17!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000004985f67696bf748000;\\n        // add x^18 * (33! / 18!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000003dea12ea99e498000;\\n        // add x^19 * (33! / 19!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000031880f2214b6e000;\\n        // add x^20 * (33! / 20!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000025bcff56eb36000;\\n        // add x^21 * (33! / 21!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000001b722e10ab1000;\\n        // add x^22 * (33! / 22!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000001317c70077000;\\n        // add x^23 * (33! / 23!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000cba84aafa00;\\n        // add x^24 * (33! / 24!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000082573a0a00;\\n        // add x^25 * (33! / 25!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000005035ad900;\\n        // add x^26 * (33! / 26!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000000000002f881b00;\\n        // add x^27 * (33! / 27!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000001b29340;\\n        // add x^28 * (33! / 28!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000000000efc40;\\n        // add x^29 * (33! / 29!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000007fe0;\\n        // add x^30 * (33! / 30!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000420;\\n        // add x^31 * (33! / 31!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000021;\\n        // add x^32 * (33! / 32!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000001;\\n        // add x^33 * (33! / 33!)\\n\\n        return res / 0x688589cc0e9505e2f2fee5580000000 + _x + (ONE << _precision);\\n        // divide by 33! and then add x^1 / 1! + x^0 / 0!\\n    }\\n\\n    /**\\n     * @dev computes log(x / FIXED_1) * FIXED_1\\n     * Input range: FIXED_1 <= x <= OPT_LOG_MAX_VAL - 1\\n     * Auto-generated via \\\"PrintFunctionOptimalLog.py\\\"\\n     * Detailed description:\\n     * - Rewrite the input as a product of natural exponents and a single residual r, such that 1 < r < 2\\n     * - The natural logarithm of each (pre-calculated) exponent is the degree of the exponent\\n     * - The natural logarithm of r is calculated via Taylor series for log(1 + x), where x = r - 1\\n     * - The natural logarithm of the input is calculated by summing up the intermediate results above\\n     * - For example: log(250) = log(e^4 * e^1 * e^0.5 * 1.021692859) = 4 + 1 + 0.5 + log(1 + 0.021692859)\\n     */\\n    function optimalLog(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        uint256 y;\\n        uint256 z;\\n        uint256 w;\\n\\n        if (x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8) {\\n            res += 0x40000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0xd3094c70f034de4b96ff7d5b6f99fcd8;\\n        }\\n        // add 1 / 2^1\\n        if (x >= 0xa45af1e1f40c333b3de1db4dd55f29a7) {\\n            res += 0x20000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0xa45af1e1f40c333b3de1db4dd55f29a7;\\n        }\\n        // add 1 / 2^2\\n        if (x >= 0x910b022db7ae67ce76b441c27035c6a1) {\\n            res += 0x10000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x910b022db7ae67ce76b441c27035c6a1;\\n        }\\n        // add 1 / 2^3\\n        if (x >= 0x88415abbe9a76bead8d00cf112e4d4a8) {\\n            res += 0x08000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x88415abbe9a76bead8d00cf112e4d4a8;\\n        }\\n        // add 1 / 2^4\\n        if (x >= 0x84102b00893f64c705e841d5d4064bd3) {\\n            res += 0x04000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x84102b00893f64c705e841d5d4064bd3;\\n        }\\n        // add 1 / 2^5\\n        if (x >= 0x8204055aaef1c8bd5c3259f4822735a2) {\\n            res += 0x02000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x8204055aaef1c8bd5c3259f4822735a2;\\n        }\\n        // add 1 / 2^6\\n        if (x >= 0x810100ab00222d861931c15e39b44e99) {\\n            res += 0x01000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x810100ab00222d861931c15e39b44e99;\\n        }\\n        // add 1 / 2^7\\n        if (x >= 0x808040155aabbbe9451521693554f733) {\\n            res += 0x00800000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x808040155aabbbe9451521693554f733;\\n        }\\n        // add 1 / 2^8\\n\\n        z = y = x - FIXED_1;\\n        w = (y * y) / FIXED_1;\\n        res += (z * (0x100000000000000000000000000000000 - y)) / 0x100000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^01 / 01 - y^02 / 02\\n        res += (z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y)) / 0x200000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^03 / 03 - y^04 / 04\\n        res += (z * (0x099999999999999999999999999999999 - y)) / 0x300000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^05 / 05 - y^06 / 06\\n        res += (z * (0x092492492492492492492492492492492 - y)) / 0x400000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^07 / 07 - y^08 / 08\\n        res += (z * (0x08e38e38e38e38e38e38e38e38e38e38e - y)) / 0x500000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^09 / 09 - y^10 / 10\\n        res += (z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y)) / 0x600000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^11 / 11 - y^12 / 12\\n        res += (z * (0x089d89d89d89d89d89d89d89d89d89d89 - y)) / 0x700000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^13 / 13 - y^14 / 14\\n        res += (z * (0x088888888888888888888888888888888 - y)) / 0x800000000000000000000000000000000;\\n        // add y^15 / 15 - y^16 / 16\\n\\n        return res;\\n    }\\n\\n    /**\\n     * @dev computes e ^ (x / FIXED_1) * FIXED_1\\n     * input range: 0 <= x <= OPT_EXP_MAX_VAL - 1\\n     * auto-generated via \\\"PrintFunctionOptimalExp.py\\\"\\n     * Detailed description:\\n     * - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\\n     * - The exponentiation of each binary exponent is given (pre-calculated)\\n     * - The exponentiation of r is calculated via Taylor series for e^x, where x = r\\n     * - The exponentiation of the input is calculated by multiplying the intermediate results above\\n     * - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\\n     */\\n    function optimalExp(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        uint256 y;\\n        uint256 z;\\n\\n        z = y = x % 0x10000000000000000000000000000000;\\n        // get the input modulo 2^(-3)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x10e1b3be415a0000;\\n        // add y^02 * (20! / 02!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x05a0913f6b1e0000;\\n        // add y^03 * (20! / 03!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0168244fdac78000;\\n        // add y^04 * (20! / 04!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x004807432bc18000;\\n        // add y^05 * (20! / 05!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000c0135dca04000;\\n        // add y^06 * (20! / 06!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0001b707b1cdc000;\\n        // add y^07 * (20! / 07!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000036e0f639b800;\\n        // add y^08 * (20! / 08!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x00000618fee9f800;\\n        // add y^09 * (20! / 09!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000009c197dcc00;\\n        // add y^10 * (20! / 10!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000e30dce400;\\n        // add y^11 * (20! / 11!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000000012ebd1300;\\n        // add y^12 * (20! / 12!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000017499f00;\\n        // add y^13 * (20! / 13!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000001a9d480;\\n        // add y^14 * (20! / 14!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x00000000001c6380;\\n        // add y^15 * (20! / 15!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000000000001c638;\\n        // add y^16 * (20! / 16!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000000001ab8;\\n        // add y^17 * (20! / 17!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000000000000017c;\\n        // add y^18 * (20! / 18!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000000000014;\\n        // add y^19 * (20! / 19!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000000000001;\\n        // add y^20 * (20! / 20!)\\n        res = res / 0x21c3677c82b40000 + y + FIXED_1;\\n        // divide by 20! and then add y^1 / 1! + y^0 / 0!\\n\\n        if ((x & 0x010000000000000000000000000000000) != 0) res = (res * 0x1c3d6a24ed82218787d624d3e5eba95f9) / 0x18ebef9eac820ae8682b9793ac6d1e776;\\n        // multiply by e^2^(-3)\\n        if ((x & 0x020000000000000000000000000000000) != 0) res = (res * 0x18ebef9eac820ae8682b9793ac6d1e778) / 0x1368b2fc6f9609fe7aceb46aa619baed4;\\n        // multiply by e^2^(-2)\\n        if ((x & 0x040000000000000000000000000000000) != 0) res = (res * 0x1368b2fc6f9609fe7aceb46aa619baed5) / 0x0bc5ab1b16779be3575bd8f0520a9f21f;\\n        // multiply by e^2^(-1)\\n        if ((x & 0x080000000000000000000000000000000) != 0) res = (res * 0x0bc5ab1b16779be3575bd8f0520a9f21e) / 0x0454aaa8efe072e7f6ddbab84b40a55c9;\\n        // multiply by e^2^(+0)\\n        if ((x & 0x100000000000000000000000000000000) != 0) res = (res * 0x0454aaa8efe072e7f6ddbab84b40a55c5) / 0x00960aadc109e7a3bf4578099615711ea;\\n        // multiply by e^2^(+1)\\n        if ((x & 0x200000000000000000000000000000000) != 0) res = (res * 0x00960aadc109e7a3bf4578099615711d7) / 0x0002bf84208204f5977f9a8cf01fdce3d;\\n        // multiply by e^2^(+2)\\n        if ((x & 0x400000000000000000000000000000000) != 0) res = (res * 0x0002bf84208204f5977f9a8cf01fdc307) / 0x0000003c6ab775dd0b95b4cbee7e65d11;\\n        // multiply by e^2^(+3)\\n\\n        return res;\\n    }\\n\\n    function getReserveAndWeights(address pair, address tokenA)\\n        public\\n        view\\n        override\\n        returns (\\n            address tokenB,\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint32 tokenWeightA,\\n            uint32 tokenWeightB,\\n            uint32 swapFee\\n        )\\n    {\\n        (uint256 reserve0, uint256 reserve1, ) = IRequiemPair(pair).getReserves();\\n        uint32 tokenWeight0;\\n        uint32 tokenWeight1;\\n        (tokenWeight0, tokenWeight1, swapFee) = getWeightsAndSwapFee(pair);\\n\\n        if (tokenA == IRequiemPair(pair).token0()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemPair(pair).token1(), reserve0, reserve1, tokenWeight0, tokenWeight1);\\n        } else if (tokenA == IRequiemPair(pair).token1()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemPair(pair).token0(), reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        } else {\\n            revert(\\\"RequiemFormula: Invalid tokenA\\\");\\n        }\\n    }\\n\\n    function getFactoryReserveAndWeights(\\n        address factory,\\n        address pair,\\n        address tokenA\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            address tokenB,\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint32 tokenWeightA,\\n            uint32 tokenWeightB,\\n            uint32 swapFee\\n        )\\n    {\\n        (uint256 reserve0, uint256 reserve1, ) = IRequiemPair(pair).getReserves();\\n        uint32 tokenWeight0;\\n        uint32 tokenWeight1;\\n        (tokenWeight0, tokenWeight1, swapFee) = getFactoryWeightsAndSwapFee(factory, pair);\\n\\n        if (tokenA == IRequiemPair(pair).token0()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemPair(pair).token1(), reserve0, reserve1, tokenWeight0, tokenWeight1);\\n        } else if (tokenA == IRequiemPair(pair).token1()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemPair(pair).token0(), reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        } else {\\n            revert(\\\"RequiemFormula: Invalid tokenA\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset,\\n     *\\n     * Formula:\\n     * return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\\n     *\\n     * @param amountIn                  source reserve amount\\n     * @param reserveIn    source reserve balance\\n     * @param reserveOut    target reserve balance\\n     * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\\n     * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\\n     * @param swapFee                  swap fee of the conversion\\n     *\\n     * @return amountOut\\n     */\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) public view override returns (uint256 amountOut) {\\n        // validate input\\n        require(amountIn > 0, \\\"RequiemFormula: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul(10000 - swapFee);\\n        // special case for equal weights\\n        if (tokenWeightIn == tokenWeightOut) {\\n            return reserveOut.mul(amountInWithFee) / (reserveIn.mul(10000).add(amountInWithFee));\\n        }\\n\\n        uint256 result;\\n        uint8 precision;\\n        uint256 baseN = reserveIn.mul(10000).add(amountInWithFee);\\n        (result, precision) = power(baseN, reserveIn.mul(10000), tokenWeightIn, tokenWeightOut);\\n\\n        uint256 temp1 = reserveOut.mul(result);\\n        uint256 temp2 = reserveOut << precision;\\n        return (temp1 - temp2) / result;\\n    }\\n\\n    /**\\n     * @dev given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n     *\\n     * Formula:\\n     * return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\\n     *\\n     * @param amountOut     target reserve amount\\n     * @param reserveIn    source reserve balance\\n     * @param reserveOut    target reserve balance\\n     * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\\n     * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\\n     * @param swapFee                  swap fee of the conversion\\n     *\\n     * @return amountIn\\n     */\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) public view override returns (uint256 amountIn) {\\n        // validate input\\n        require(amountOut > 0, \\\"RequiemFormula: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\");\\n        // special case for equal weights\\n        if (tokenWeightIn == tokenWeightOut) {\\n            uint256 numerator = reserveIn.mul(amountOut).mul(10000);\\n            uint256 denominator = reserveOut.sub(amountOut).mul(10000 - swapFee);\\n            return (numerator / denominator).add(1);\\n        }\\n\\n        uint256 result;\\n        uint8 precision;\\n        uint256 baseD = reserveOut.sub(amountOut);\\n        (result, precision) = power(reserveOut, baseD, tokenWeightOut, tokenWeightIn);\\n        uint256 baseReserveIn = reserveIn.mul(10000);\\n        uint256 temp1 = baseReserveIn.mul(result);\\n        uint256 temp2 = baseReserveIn << precision;\\n        return (((temp1 - temp2) >> precision) / (10000 - swapFee)).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[0] = amountIn;\\n        address currentTokenIn = tokenIn;\\n        for (uint256 i = 0; i < path.length; i++) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getReserveAndWeights(path[i], currentTokenIn);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenOut, \\\"RequiemFormula: INVALID_TOKEN_OUT_PATH\\\");\\n    }\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[0] = amountIn;\\n        address currentTokenIn = tokenIn;\\n        for (uint256 i = 0; i < path.length; i++) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getFactoryReserveAndWeights(\\n                factory,\\n                path[i],\\n                currentTokenIn\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenOut, \\\"RequiemFormula: INVALID_TOKEN_OUT_PATH\\\");\\n    }\\n\\n    function getPairAmountOut(\\n        address pair,\\n        address tokenIn,\\n        uint256 amountIn\\n    ) external view override returns (uint256 amountOut) {\\n        (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getReserveAndWeights(pair, tokenIn);\\n        amountOut = getAmountOut(amountIn, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[amounts.length - 1] = amountOut;\\n        address currentTokenIn = tokenOut;\\n        for (uint256 i = path.length; i > 0; i--) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getReserveAndWeights(path[i - 1], currentTokenIn);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveOut, reserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenIn, \\\"RequiemFormula: INVALID_TOKEN_IN_PATH\\\");\\n    }\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[amounts.length - 1] = amountOut;\\n        address currentTokenIn = tokenOut;\\n        for (uint256 i = path.length; i > 0; i--) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getFactoryReserveAndWeights(\\n                factory,\\n                path[i - 1],\\n                currentTokenIn\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveOut, reserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenIn, \\\"RequiemFormula: INVALID_TOKEN_IN_PATH\\\");\\n    }\\n\\n    function getPairAmountIn(\\n        address pair,\\n        address tokenIn,\\n        uint256 amountOut\\n    ) external view override returns (uint256 amountIn) {\\n        (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getReserveAndWeights(pair, tokenIn);\\n        amountIn = getAmountIn(amountOut, reserveOut, reserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n    }\\n\\n    function getWeightsAndSwapFee(address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        )\\n    {\\n        try IRequiemPair(pair).getTokenWeights() returns (uint32 _tokenWeight0, uint32 _tokenWeight1) {\\n            return (_tokenWeight0, _tokenWeight1, IRequiemPair(pair).getSwapFee());\\n        } catch Error(string memory reason) {\\n            revert(reason);\\n        } catch (\\n            bytes memory /*lowLevelData*/\\n        ) {\\n            return (50, 50, 30);\\n        }\\n    }\\n\\n    function getFactoryWeightsAndSwapFee(address factory, address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        )\\n    {\\n        return IRequiemFactory(factory).getWeightsAndSwapFee(pair);\\n    }\\n\\n    // Ensure constant value reserve0^(tokenWeight0/50) * reserve1^((100 - tokenWeight0)/50) <= balance0Adjusted^(tokenWeight0/50) * balance1Adjusted^((100 - tokenWeight0)/50)\\n    //  1 <= (balance0Adjusted / reserve0 )^(tokenWeight0/50) * (balance1Adjusted/reserve1)^((100 - tokenWeight0)/50)\\n    //  (reserve0 / balance0Adjusted) ^ (tokenWeight0/50) <=  (balance1Adjusted / reserve1) ^ ((100 - tokenWeight0)/50)\\n    function ensureConstantValue(\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 balance0Adjusted,\\n        uint256 balance1Adjusted,\\n        uint32 tokenWeight0\\n    ) external view override returns (bool) {\\n        if (tokenWeight0 == 50) {\\n            return balance0Adjusted.mul(balance1Adjusted) >= reserve0.mul(reserve1);\\n        }\\n        if (balance0Adjusted >= reserve0 && balance1Adjusted >= reserve1) {\\n            return true;\\n        }\\n        if (balance0Adjusted <= reserve0 && balance1Adjusted <= reserve1) {\\n            return false;\\n        }\\n        uint32 w0 = tokenWeight0;\\n        uint32 w1 = 100 - w0;\\n\\n        uint256 r0;\\n        uint256 p0;\\n        uint256 r1;\\n        uint256 p1;\\n        if (balance0Adjusted >= reserve0) {\\n            (r0, p0) = power(reserve1, balance1Adjusted, w1, 50);\\n            (r1, p1) = power(balance0Adjusted, reserve0, w0, 50);\\n        } else {\\n            (r0, p0) = power(reserve0, balance0Adjusted, w0, 50);\\n            (r1, p1) = power(balance1Adjusted, reserve1, w1, 50);\\n        }\\n        uint256 minP = p0 < p1 ? p0 : p1;\\n        p0 = p0 - minP;\\n        p1 = p1 - minP;\\n        return (r0 >> p0) <= (r1 >> p1);\\n    }\\n\\n    function sortTokens(address tokenA, address tokenB) public pure override returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"RequiemFormula: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"RequiemFormula: ZERO_ADDRESS\\\");\\n    }\\n\\n    function getReserves(\\n        address pair,\\n        address tokenA,\\n        address tokenB\\n    ) external view override returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IRequiemPair(pair).getReserves();\\n        require(token0 == IRequiemPair(pair).token0() && token1 == IRequiemPair(pair).token1(), \\\"RequiemFormula: Invalid token\\\");\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    function getOtherToken(address pair, address tokenA) external view override returns (address tokenB) {\\n        address token0 = IRequiemPair(pair).token0();\\n        address token1 = IRequiemPair(pair).token1();\\n        require(token0 == tokenA || token1 == tokenA, \\\"RequiemFormula: Invalid tokenA\\\");\\n        tokenB = token0 == tokenA ? token1 : token0;\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure override returns (uint256 amountB) {\\n        require(amountA > 0, \\\"RequiemFormula: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    function mintLiquidityFee(\\n        uint256 totalLiquidity,\\n        uint112 reserve0,\\n        uint112 reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112 collectedFee0,\\n        uint112 collectedFee1\\n    ) external view override returns (uint256 amount) {\\n        if (collectedFee0 > 0) {\\n            (uint256 r0, uint256 p0) = power(uint256(collectedFee0).add(reserve0), reserve0, tokenWeight0, 100);\\n            amount = amount.add(totalLiquidity.mul(r0) >> p0).sub(totalLiquidity);\\n        }\\n        if (collectedFee1 > 0) {\\n            (uint256 r1, uint256 p1) = power(uint256(collectedFee1).add(reserve1), reserve1, tokenWeight1, 100);\\n            amount = amount.add(totalLiquidity.mul(r1) >> p1).sub(totalLiquidity);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2633bb8465a1d8ee3257b8124763eb9feb847cec574f045ca8df80262d46f94b\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0xe04488fd0e667e3af01de45b2fbdd948bada51d2c1398926c208505f773d9926\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\ninterface IRequiemFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint);\\n    function feeTo() external view returns (address);\\n    function formula() external view returns (address);\\n    function protocolFee() external view returns (uint);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function isPair(address) external view returns (bool);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external returns (address pair);\\n    function getWeightsAndSwapFee(address pair) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setProtocolFee(uint) external;\\n}\\n\",\"keccak256\":\"0x500ff0062150432105415e938dcaa0d64b666c224764c4cb901137ce45204b5d\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.5.16;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IRequiemFormula {\\n\\n    function getReserveAndWeights(address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getPairAmountIn(address pair, address tokenIn, uint amountOut) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getPairAmountOut(address pair, address tokenIn, uint amountIn) external view returns (uint amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x8a32e1c404f6a93f17cf6151173ff21fedb58abe50a6635cb10f47780f044c98\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IRequiemPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IRequiemERC20.sol\\\";\\n\\ninterface IRequiemPair is IRequiemERC20 {\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n    function getSwapFee() external view returns (uint32);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address,\\n        address,\\n        uint32,\\n        uint32\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc88df44cb82ceeb98805481ebad2a38cd6dcc9950ab00728576ebd11d6638969\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n    function div(uint a, uint b) internal pure returns (uint c) {\\n        require(b > 0, \\\"ds-math-division-by-zero\\\");\\n        c = a / b;\\n    }\\n}\\n\",\"keccak256\":\"0xac02044b4e30134dcc8191e3a8c2f0dbba60dc29c99d97fdf20fc6b07df48e96\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061073f6001641c35fedd1560601b036020556001646c3390ecc9605e1b036021556001640cf801476160611b0360225560016431bdb23e1d605f1b0360235560016502fb1d8fe083605b1b0360245560016505b771955b37605a1b036025556001650af67a93bb5160591b0360265560016515060c256cb360581b036027556001651428a2f98d7360581b036028556001654d515663970960561b03602955600165944620b0e70f60551b03602a55600166011c592761c66760541b03602b5560016602214d10d014eb60531b03602c55600166020ade36b7dbef60531b03602d5560016603eab73b3bbfe360521b03602e556001660782ee3593f6d760511b03602f556001661ccf4b44bb4821604f1b0360305560016606e7f88ad8a77760511b0360315560016669f3d1c921891d604d1b03603255600166cb2ff529eb71e5604c1b03603355600166c2d415c3db974b604c1b0360345560016702eb40f9f620fda7604a1b0360355560016705990681d961a1eb60491b03603655600167055e12902701414760491b0360375560016714962dee9dc9764160471b0360385560016704ef57b9b560fab560491b0360395560016712ed7b32a58f552b60471b03603a556001679131271922eaa60760441b03603b556001678b380f3558668c4760441b03603c556001680215f77c045fbe885760421b03603d556001600160831b03603e556001670f577eded5773a1160471b03603f556001680eb5ec597592befbf5603f1b036040556001681c35fedd14b861eb05603e1b036041556001683619c87664579bc94b603d1b0360425560016867c00a3b07ffc01fd7603c1b03604355600168c6f6c8f8739773a7a5603b1b03604455600168bec763f8209b7a72b1603b1b0360455560016902dbb8caad9b7097b91b60391b03604655600169057b3d49dda84556d6f760381b03604755600169054183095b2c8ececf3160381b036048556001690a14517cc6b9457111ef60371b0360495560016913545598e5c23276ccf160361b03604a556001692511882c39c3adea96ff60351b03604b55600169471649d87199aa99075760341b03604c557004429a21a029d4c1457cfbffffffffffff604d55700415bc6d6fb7dd71af2cb3ffffffffffff604e557003eab73b3bbfe282243ce1ffffffffffff604f557003c1771ac9fb6b4c18e229ffffffffffff605055700399e96897690418f785257fffffffffff605155700373fc456c53bb779bf0ea9fffffffffff60525570034f9e8e490c48e67e6ab8bfffffffffff60535570032cbfd4a7adc790560b3337ffffffffff60545570030b50570f6e5d2acca94613ffffffffff6055557002eb40f9f620fda6b56c2861ffffffffff6056557002cc8340ecb0d0f520a6af58ffffffffff6057557002af09481380a0a35cf1ba02ffffffffff605855700292c5bdd3b92ec810287b1b3fffffffff605955700277abdcdab07d5a77ac6d6b9fffffffff605a5570025daf6654b1eaa55fd64df5efffffffff605b55700244c49c648baa98192dce88b7ffffffff605c5570022ce03cd5619a311b2471268bffffffff605d55700215f77c045fbe885654a44a0fffffffff605e556001600160811b03605f557001eaefdbdaaee7421fc4d3ede5ffffffff6060557001d6bd8b2eb257df7e8ca57b09bfffffff6061557001c35fedd14b861eb0443f7f133fffffff6062557001b0ce43b322bcde4a56e8ada5afffffff60635570019f0028ec1fff007f5a195a39dfffffff60645570018ded91f0e72ee74f49b15ba527ffffff60655570017d8ec7f04136f4e5615fd41a63ffffff60665570016ddc6556cdb84bdc8d12d22e6fffffff60675570015ecf52776a1155b5bd8395814f7fffff60685570015060c256cb23b3b3cc3754cf40ffffff6069557001428a2f98d728ae223ddab715be3fffff606a5570013545598e5c23276ccf0ede68034fffff606b557001288c4161ce1d6f54b7f61081194fffff606c5570011c592761c666aa641d5a01a40f17ffff606d55700110a688680a7530515f3e6e6cfdcdffff606e557001056f1b5bedf75c6bcb2ce8aed428ffff606f556ffaadceceeff8a0890f3875f008277fff6070556ff05dc6b27edad306388a600f6ba0bfff6071556fe67a5a25da41063de1495d5b18cdbfff6072556fdcff115b14eedde6fc3aa5353f2e4fff6073556fd3e7a3924312399f9aae2e0f868f8fff6074556fcb2ff529eb71e41582cccd5a1ee26fff6075556fc2d415c3db974ab32a51840c0b67edff6076556fbad03e7d883f69ad5b0a186184e06bff6077556fb320d03b2c343d4829abd6075f0cc5ff6078556fabc25204e02828d73c6e80bcdb1a95bf6079556fa4b16f74ee4bb2040a1ec6c15fbbf2df607a556f9deaf736ac1f569deb1b5ae3f36c130f607b556f976bd9952c7aa957f5937d790ef65037607c556f9131271922eaa6064b73a22d0bd4f2bf607d556f8b380f3558668c46c91c49a2f8e967b9607e556f857ddf0117efa215952912839f6473e6607f55565b613b398061074e6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638888a737116100a2578063b19210b011610071578063b19210b0146102e5578063b33d96b0146102f8578063b3923a991461030b578063ca2229791461031e578063d69109371461033157600080fd5b80638888a737146102995780638fabd82d146102ac57806392aec23c146102bf578063ad615dec146102d257600080fd5b80635bff1d92116100e95780635bff1d92146101d95780636350d7741461022f578063671a11b51461025057806367f84adc1461026357806379c91b371461027657600080fd5b8063119220a51461011b5780632bb66e1d14610144578063327494611461017e578063544caa56146101a6575b600080fd5b61012e61012936600461328b565b61035c565b60405161013b9190613310565b60405180910390f35b610157610152366004613354565b6104ec565b6040805163ffffffff9485168152928416602084015292169181019190915260600161013b565b61019161018c36600461338d565b61057a565b6040805192835260208301919091520161013b565b6101b96101b4366004613354565b6107aa565b604080516001600160a01b0393841681529290911660208301520161013b565b6101ec6101e7366004613354565b6108a0565b604080516001600160a01b03909716875260208701959095529385019290925263ffffffff908116606085015290811660808401521660a082015260c00161013b565b61024261023d3660046133d8565b610bc2565b60405190815260200161013b565b61024261025e36600461342b565b610bff565b61012e61027136600461328b565b610d6b565b610289610284366004613492565b610edd565b604051901515815260200161013b565b6102426102a73660046133d8565b611002565b61012e6102ba3660046134df565b611031565b6102426102cd366004613567565b6111a4565b6102426102e03660046135f4565b611277565b6102426102f336600461342b565b61131d565b6101ec61030636600461338d565b611495565b61012e6103193660046134df565b61176e565b61015761032c366004613620565b6118cd565b61034461033f366004613354565b611a46565b6040516001600160a01b03909116815260200161013b565b6060816103845760405162461bcd60e51b815260040161037b9061363d565b60405180910390fd5b61038f82600161368a565b67ffffffffffffffff8111156103a7576103a76136a2565b6040519080825280602002602001820160405280156103d0578160200160208202803683370190505b50905083816000815181106103e7576103e76136b8565b60209081029190910101528560005b838110156104af576000806000806000806104388f8c8c8a81811061041d5761041d6136b8565b90506020020160208101906104329190613620565b8a611495565b95509550955095509550955061046b898881518110610459576104596136b8565b60200260200101518686868686610bff565b8961047789600161368a565b81518110610487576104876136b8565b60200260200101818152505085975050505050505080806104a7906136ce565b9150506103f6565b50856001600160a01b0316816001600160a01b0316146104e15760405162461bcd60e51b815260040161037b906136e9565b509695505050505050565b60405163ca22297960e01b81526001600160a01b038281166004830152600091829182919086169063ca2229799060240160606040518083038186803b15801561053557600080fd5b505afa158015610549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056d919061372f565b9250925092509250925092565b60008060008061058a86866107aa565b91509150600080886001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156105ca57600080fd5b505afa1580156105de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106029190613771565b506001600160701b031691506001600160701b03169150886001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561065257600080fd5b505afa158015610666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068a91906137a2565b6001600160a01b0316846001600160a01b031614801561072b5750886001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156106de57600080fd5b505afa1580156106f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071691906137a2565b6001600160a01b0316836001600160a01b0316145b6107775760405162461bcd60e51b815260206004820152601d60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e000000604482015260640161037b565b836001600160a01b0316886001600160a01b03161461079757808261079a565b81815b909a909950975050505050505050565b600080826001600160a01b0316846001600160a01b0316141561081b5760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a204944454e544943414c5f41444452455360448201526253455360e81b606482015260840161037b565b826001600160a01b0316846001600160a01b03161061083b57828461083e565b83835b90925090506001600160a01b0382166108995760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a205a45524f5f4144445245535300000000604482015260640161037b565b9250929050565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156108e557600080fd5b505afa1580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d9190613771565b506001600160701b031691506001600160701b031691506000806109408c6118cd565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561098557600080fd5b505afa158015610999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bd91906137a2565b6001600160a01b03168b6001600160a01b03161415610a5c578b6001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0f57600080fd5b505afa158015610a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4791906137a2565b99509297509095509350915084848484610bb4565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9557600080fd5b505afa158015610aa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acd91906137a2565b6001600160a01b03168b6001600160a01b03161415610b6c578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1f57600080fd5b505afa158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5791906137a2565b99509197509195509350915083858385610bb4565b60405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e410000604482015260640161037b565b505050509295509295509295565b6000806000806000806000610bd78a8a6108a0565b955095509550955095509550610bf188858785878661131d565b9a9950505050505050505050565b6000808711610c625760405162461bcd60e51b815260206004820152602960248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f494e50604482015268155517d05353d5539560ba1b606482015260840161037b565b600086118015610c725750600085115b610c8e5760405162461bcd60e51b815260040161037b906137bf565b6000610cb4610c9f84612710613805565b63ffffffff1689611bcd90919063ffffffff16565b90508363ffffffff168563ffffffff161415610cfc57610ce081610cda89612710611bcd565b90611c3a565b610cea8783611bcd565b610cf49190613840565b915050610d61565b60008080610d1084610cda8c612710611bcd565b9050610d2981610d228c612710611bcd565b8a8a611c8f565b90935091506000610d3a8a85611bcd565b905060ff83168a901b84610d4e8284613854565b610d589190613840565b96505050505050505b9695505050505050565b606081610d8a5760405162461bcd60e51b815260040161037b9061363d565b610d9582600161368a565b67ffffffffffffffff811115610dad57610dad6136a2565b604051908082528060200260200182016040528015610dd6578160200160208202803683370190505b509050838160018351610de99190613854565b81518110610df957610df96136b8565b602090810291909101015284825b8015610eab5760008080808080610e348f8c8c610e2560018c613854565b81811061041d5761041d6136b8565b955095509550955095509550610e67898881518110610e5557610e556136b8565b6020026020010151858785878661131d565b89610e7360018a613854565b81518110610e8357610e836136b8565b6020026020010181815250508597505050505050508080610ea39061386b565b915050610e07565b50866001600160a01b0316816001600160a01b0316146104e15760405162461bcd60e51b815260040161037b90613882565b60008163ffffffff1660321415610f0b57610ef88686611bcd565b610f028585611bcd565b10159050610ff9565b858410158015610f1b5750848310155b15610f2857506001610ff9565b858411158015610f385750848311155b15610f4557506000610ff9565b816000610f53826064613805565b90506000806000808b8a10610f9157610f6f8b8a876032611c8f565b90945060ff169250610f848a8d886032611c8f565b90925060ff169050610fbc565b610f9e8c8b886032611c8f565b90945060ff169250610fb3898c876032611c8f565b90925060ff1690505b6000818410610fcb5781610fcd565b835b9050610fd98185613854565b9350610fe58183613854565b9290921c9390921c92909211159450505050505b95945050505050565b60008060008060008060006110178a8a6108a0565b955095509550955095509550610bf1888686868686610bff565b6060816110505760405162461bcd60e51b815260040161037b9061363d565b61105b82600161368a565b67ffffffffffffffff811115611073576110736136a2565b60405190808252806020026020018201604052801561109c578160200160208202803683370190505b50905083816000815181106110b3576110b36136b8565b60209081029190910101528560005b83811015611168576000806000806000806111038b8b898181106110e8576110e86136b8565b90506020020160208101906110fd9190613620565b896108a0565b955095509550955095509550611124898881518110610459576104596136b8565b8961113089600161368a565b81518110611140576111406136b8565b6020026020010181815250508597505050505050508080611160906136ce565b9150506110c2565b50856001600160a01b0316816001600160a01b03161461119a5760405162461bcd60e51b815260040161037b906136e9565b5095945050505050565b60006001600160701b03831615611210576000806111e36111d16001600160701b03878116908c16611c3a565b8a6001600160701b0316896064611c8f565b90925060ff16905061120b8a611205836111fd8387611bcd565b87911c611c3a565b90611dcc565b925050505b6001600160701b0382161561126c5760008061124d61123b6001600160701b03868116908b16611c3a565b896001600160701b0316886064611c8f565b90925060ff1690506112678a611205836111fd8387611bcd565b925050505b979650505050505050565b60008084116112d45760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f414d4f60448201526215539560ea1b606482015260840161037b565b6000831180156112e45750600082115b6113005760405162461bcd60e51b815260040161037b906137bf565b8261130b8584611bcd565b6113159190613840565b949350505050565b60008087116113815760405162461bcd60e51b815260206004820152602a60248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4f555460448201526914155517d05353d5539560b21b606482015260840161037b565b6000861180156113915750600085115b6113ad5760405162461bcd60e51b815260040161037b906137bf565b8263ffffffff168463ffffffff16141561141f5760006113d96127106113d3898b611bcd565b90611bcd565b905060006114056113ec85612710613805565b63ffffffff166113d38b8a611dcc90919063ffffffff16565b90506114166001610cda8385613840565b92505050610d61565b6000808061142d888b611dcc565b905061143b8882888a611c8f565b9093509150600061144e8a612710611bcd565b9050600061145c8286611bcd565b905060ff841682901b610d5860016114768a612710613805565b63ffffffff1660ff881661148a8587613854565b610cda92911c613840565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156114da57600080fd5b505afa1580156114ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115129190613771565b506001600160701b031691506001600160701b031691506000806115368d8d6104ec565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561157b57600080fd5b505afa15801561158f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b391906137a2565b6001600160a01b03168b6001600160a01b03161415611652578b6001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561160557600080fd5b505afa158015611619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163d91906137a2565b9950929750909550935091508484848461175e565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561168b57600080fd5b505afa15801561169f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c391906137a2565b6001600160a01b03168b6001600160a01b03161415610b6c578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561171557600080fd5b505afa158015611729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174d91906137a2565b995091975091955093509150838583855b5050505093975093979195509350565b60608161178d5760405162461bcd60e51b815260040161037b9061363d565b61179882600161368a565b67ffffffffffffffff8111156117b0576117b06136a2565b6040519080825280602002602001820160405280156117d9578160200160208202803683370190505b5090508381600183516117ec9190613854565b815181106117fc576117fc6136b8565b602090810291909101015284825b801561189b57600080808080806118368b8b61182760018b613854565b8181106110e8576110e86136b8565b955095509550955095509550611857898881518110610e5557610e556136b8565b8961186360018a613854565b81518110611873576118736136b8565b60200260200101818152505085975050505050505080806118939061386b565b91505061180a565b50866001600160a01b0316816001600160a01b03161461119a5760405162461bcd60e51b815260040161037b90613882565b6000806000836001600160a01b03166332bfe4696040518163ffffffff1660e01b8152600401604080518083038186803b15801561190a57600080fd5b505afa92505050801561193a575060408051601f3d908101601f19168201909252611937918101906138c7565b60015b6119c3576119466138f6565b806308c379a01415611980575061195b61394d565b806119665750611982565b8060405162461bcd60e51b815260040161037b91906139d7565b505b3d8080156119ac576040519150601f19603f3d011682016040523d82523d6000602084013e6119b1565b606091505b50603280601e93509350935050611a3f565b8181876001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156119fe57600080fd5b505afa158015611a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a369190613a2c565b94509450945050505b9193909250565b600080836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8257600080fd5b505afa158015611a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aba91906137a2565b90506000846001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015611af757600080fd5b505afa158015611b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2f91906137a2565b9050836001600160a01b0316826001600160a01b03161480611b625750836001600160a01b0316816001600160a01b0316145b611bae5760405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e410000604482015260640161037b565b836001600160a01b0316826001600160a01b0316146113155781610ff9565b6000811580611bf157508282611be38183613a49565b9250611bef9083613840565b145b611c345760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015260640161037b565b92915050565b600082611c47838261368a565b9150811015611c345760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015260640161037b565b60008084861015611ce25760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420737570706f7274205f626173654e203c205f62617365440000000000604482015260640161037b565b600160811b8610611cf257600080fd5b60008086611d046001607f1b8a613a49565b611d0e9190613840565b905070015bf0a8b1457695355fb8ac404e7a79e3811015611d3957611d3281611e22565b9150611d45565b611d4281612391565b91505b60008563ffffffff168763ffffffff1684611d609190613a49565b611d6a9190613840565b9050600160831b811015611d8f57611d8181612486565b607f94509450505050611dc3565b6000611d9a82612ab1565b9050611db6611daa82607f613a68565b60ff1683901c82612b64565b95509350611dc392505050565b94509492505050565b600082611dd98382613854565b9150811115611c345760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015260640161037b565b6000808080806fd3094c70f034de4b96ff7d5b6f99fcd88610611e7b57611e4d6001607e1b8561368a565b93506fd3094c70f034de4b96ff7d5b6f99fcd8611e6e6001607f1b88613a49565b611e789190613840565b95505b6fa45af1e1f40c333b3de1db4dd55f29a78610611ece57611ea06001607d1b8561368a565b93506fa45af1e1f40c333b3de1db4dd55f29a7611ec16001607f1b88613a49565b611ecb9190613840565b95505b6f910b022db7ae67ce76b441c27035c6a18610611f2157611ef36001607c1b8561368a565b93506f910b022db7ae67ce76b441c27035c6a1611f146001607f1b88613a49565b611f1e9190613840565b95505b6f88415abbe9a76bead8d00cf112e4d4a88610611f7457611f466001607b1b8561368a565b93506f88415abbe9a76bead8d00cf112e4d4a8611f676001607f1b88613a49565b611f719190613840565b95505b6f84102b00893f64c705e841d5d4064bd38610611fc757611f996001607a1b8561368a565b93506f84102b00893f64c705e841d5d4064bd3611fba6001607f1b88613a49565b611fc49190613840565b95505b6f8204055aaef1c8bd5c3259f4822735a2861061201a57611fec600160791b8561368a565b93506f8204055aaef1c8bd5c3259f4822735a261200d6001607f1b88613a49565b6120179190613840565b95505b6f810100ab00222d861931c15e39b44e99861061206d5761203f600160781b8561368a565b93506f810100ab00222d861931c15e39b44e996120606001607f1b88613a49565b61206a9190613840565b95505b6f808040155aabbbe9451521693554f73386106120c057612092600160771b8561368a565b93506f808040155aabbbe9451521693554f7336120b36001607f1b88613a49565b6120bd9190613840565b95505b6120ce6001607f1b87613854565b92508291506001607f1b6120e28380613a49565b6120ec9190613840565b9050600160801b6120fd8482613854565b6121079084613a49565b6121119190613840565b61211b908561368a565b93506001607f1b61212c8284613a49565b6121369190613840565b9150600160811b612157846faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa613854565b6121619084613a49565b61216b9190613840565b612175908561368a565b93506001607f1b6121868284613a49565b6121909190613840565b9150600360801b6121b1846f99999999999999999999999999999999613854565b6121bb9084613a49565b6121c59190613840565b6121cf908561368a565b93506001607f1b6121e08284613a49565b6121ea9190613840565b9150600160821b61220b846f92492492492492492492492492492492613854565b6122159084613a49565b61221f9190613840565b612229908561368a565b93506001607f1b61223a8284613a49565b6122449190613840565b9150600560801b612265846f8e38e38e38e38e38e38e38e38e38e38e613854565b61226f9084613a49565b6122799190613840565b612283908561368a565b93506001607f1b6122948284613a49565b61229e9190613840565b9150600360811b6122bf846f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b613854565b6122c99084613a49565b6122d39190613840565b6122dd908561368a565b93506001607f1b6122ee8284613a49565b6122f89190613840565b9150600760801b612319846f89d89d89d89d89d89d89d89d89d89d89613854565b6123239084613a49565b61232d9190613840565b612337908561368a565b93506001607f1b6123488284613a49565b6123529190613840565b9150600160831b612373846f88888888888888888888888888888888613854565b61237d9084613a49565b6123879190613840565b610d61908561368a565b600080600160801b83106123d55760006123b76123b26001607f1b86613840565b6131c2565b60ff811694851c949091506123d1906001607f1b90613a49565b9150505b6001607f1b83111561244a57607f5b60ff811615612448576001607f1b6123fc8580613a49565b6124069190613840565b9350600160801b841061243857600193841c936124239082613a68565b60ff166001901b82612435919061368a565b91505b61244181613a8b565b90506123e4565b505b6f05b9de1d10bf4103d647b0955897ba806124756f03f80fe03f80fe03f80fe03f80fe03f883613a49565b61247f9190613840565b9392505050565b60008080806124996001607c1b86613aa8565b91508190506001607f1b6124ad8280613a49565b6124b79190613840565b90506124cb816710e1b3be415a0000613a49565b6124d5908461368a565b92506001607f1b6124e68383613a49565b6124f09190613840565b9050612504816705a0913f6b1e0000613a49565b61250e908461368a565b92506001607f1b61251f8383613a49565b6125299190613840565b905061253d81670168244fdac78000613a49565b612547908461368a565b92506001607f1b6125588383613a49565b6125629190613840565b905061257581664807432bc18000613a49565b61257f908461368a565b92506001607f1b6125908383613a49565b61259a9190613840565b90506125ad81660c0135dca04000613a49565b6125b7908461368a565b92506001607f1b6125c88383613a49565b6125d29190613840565b90506125e5816601b707b1cdc000613a49565b6125ef908461368a565b92506001607f1b6126008383613a49565b61260a9190613840565b905061261c816536e0f639b800613a49565b612626908461368a565b92506001607f1b6126378383613a49565b6126419190613840565b905061265381650618fee9f800613a49565b61265d908461368a565b92506001607f1b61266e8383613a49565b6126789190613840565b905061268981649c197dcc00613a49565b612693908461368a565b92506001607f1b6126a48383613a49565b6126ae9190613840565b90506126bf81640e30dce400613a49565b6126c9908461368a565b92506001607f1b6126da8383613a49565b6126e49190613840565b90506126f58164012ebd1300613a49565b6126ff908461368a565b92506001607f1b6127108383613a49565b61271a9190613840565b905061272a816317499f00613a49565b612734908461368a565b92506001607f1b6127458383613a49565b61274f9190613840565b905061275f816301a9d480613a49565b612769908461368a565b92506001607f1b61277a8383613a49565b6127849190613840565b905061279381621c6380613a49565b61279d908461368a565b92506001607f1b6127ae8383613a49565b6127b89190613840565b90506127c7816201c638613a49565b6127d1908461368a565b92506001607f1b6127e28383613a49565b6127ec9190613840565b90506127fa81611ab8613a49565b612804908461368a565b92506001607f1b6128158383613a49565b61281f9190613840565b905061282d8161017c613a49565b612837908461368a565b92506001607f1b6128488383613a49565b6128529190613840565b905061285f816014613a49565b612869908461368a565b92506001607f1b61287a8383613a49565b6128849190613840565b9050612891816001613a49565b61289b908461368a565b92506001607f1b826128b56721c3677c82b4000086613840565b6128bf919061368a565b6128c9919061368a565b92506001607c1b8516156129115770018ebef9eac820ae8682b9793ac6d1e776612904847001c3d6a24ed82218787d624d3e5eba95f9613a49565b61290e9190613840565b92505b6001607d1b851615612957577001368b2fc6f9609fe7aceb46aa619baed461294a8470018ebef9eac820ae8682b9793ac6d1e778613a49565b6129549190613840565b92505b6001607e1b85161561299c576fbc5ab1b16779be3575bd8f0520a9f21f61298f847001368b2fc6f9609fe7aceb46aa619baed5613a49565b6129999190613840565b92505b6001607f1b8516156129e0576f454aaa8efe072e7f6ddbab84b40a55c96129d3846fbc5ab1b16779be3575bd8f0520a9f21e613a49565b6129dd9190613840565b92505b600160801b851615612a24576f0960aadc109e7a3bf4578099615711ea612a17846f454aaa8efe072e7f6ddbab84b40a55c5613a49565b612a219190613840565b92505b600160811b851615612a67576e2bf84208204f5977f9a8cf01fdce3d612a5a846f0960aadc109e7a3bf4578099615711d7613a49565b612a649190613840565b92505b600160821b851615612aa8576d03c6ab775dd0b95b4cbee7e65d11612a9b846e2bf84208204f5977f9a8cf01fdc307613a49565b612aa59190613840565b92505b50909392505050565b60006020607f5b60ff8116612ac7836001613abc565b60ff161015612b1a5760006002612ade8385613abc565b612ae89190613ae1565b90508460008260ff1660808110612b0157612b016136b8565b015410612b1057809250612b14565b8091505b50612ab8565b8360008260ff1660808110612b3157612b316136b8565b015410612b3f579392505050565b8360008360ff1660808110612b5657612b566136b8565b015410610116575092915050565b6000828160ff8416612b768380613a49565b901c9150612b94826f03442c4e6074a82f1797f72ac0000000613a49565b612b9e908261368a565b905060ff8416612bae8684613a49565b901c9150612bcc826f0116b96f757c380fb287fd0e40000000613a49565b612bd6908261368a565b905060ff8416612be68684613a49565b901c9150612c03826e45ae5bdd5f0e03eca1ff4390000000613a49565b612c0d908261368a565b905060ff8416612c1d8684613a49565b901c9150612c3a826e0defabf91302cd95b9ffda50000000613a49565b612c44908261368a565b905060ff8416612c548684613a49565b901c9150612c71826e02529ca9832b22439efff9b8000000613a49565b612c7b908261368a565b905060ff8416612c8b8684613a49565b901c9150612ca7826d54f1cf12bd04e516b6da88000000613a49565b612cb1908261368a565b905060ff8416612cc18684613a49565b901c9150612cdd826d0a9e39e257a09ca2d6db51000000613a49565b612ce7908261368a565b905060ff8416612cf78684613a49565b901c9150612d13826d012e066e7b839fa050c309000000613a49565b612d1d908261368a565b905060ff8416612d2d8684613a49565b901c9150612d48826c1e33d7d926c329a1ad1a800000613a49565b612d52908261368a565b905060ff8416612d628684613a49565b901c9150612d7d826c02bee513bdb4a6b19b5f800000613a49565b612d87908261368a565b905060ff8416612d978684613a49565b901c9150612db1826b3a9316fa79b88eccf2a00000613a49565b612dbb908261368a565b905060ff8416612dcb8684613a49565b901c9150612de5826b048177ebe1fa812375200000613a49565b612def908261368a565b905060ff8416612dff8684613a49565b901c9150612e18826a5263fe90242dcbacf00000613a49565b612e22908261368a565b905060ff8416612e328684613a49565b901c9150612e4b826a057e22099c030d94100000613a49565b612e55908261368a565b905060ff8416612e658684613a49565b901c9150612e7d826957e22099c030d9410000613a49565b612e87908261368a565b905060ff8416612e978684613a49565b901c9150612eaf8269052b6b54569976310000613a49565b612eb9908261368a565b905060ff8416612ec98684613a49565b901c9150612ee082684985f67696bf748000613a49565b612eea908261368a565b905060ff8416612efa8684613a49565b901c9150612f11826803dea12ea99e498000613a49565b612f1b908261368a565b905060ff8416612f2b8684613a49565b901c9150612f41826731880f2214b6e000613a49565b612f4b908261368a565b905060ff8416612f5b8684613a49565b901c9150612f718267025bcff56eb36000613a49565b612f7b908261368a565b905060ff8416612f8b8684613a49565b901c9150612fa082661b722e10ab1000613a49565b612faa908261368a565b905060ff8416612fba8684613a49565b901c9150612fcf826601317c70077000613a49565b612fd9908261368a565b905060ff8416612fe98684613a49565b901c9150612ffd82650cba84aafa00613a49565b613007908261368a565b905060ff84166130178684613a49565b901c915061302a826482573a0a00613a49565b613034908261368a565b905060ff84166130448684613a49565b901c9150613057826405035ad900613a49565b613061908261368a565b905060ff84166130718684613a49565b901c915061308382632f881b00613a49565b61308d908261368a565b905060ff841661309d8684613a49565b901c91506130af826301b29340613a49565b6130b9908261368a565b905060ff84166130c98684613a49565b901c91506130da82620efc40613a49565b6130e4908261368a565b905060ff84166130f48684613a49565b901c915061310482617fe0613a49565b61310e908261368a565b905060ff841661311e8684613a49565b901c915061312e82610420613a49565b613138908261368a565b905060ff84166131488684613a49565b901c9150613157826021613a49565b613161908261368a565b905060ff84166131718684613a49565b901c9150613180826001613a49565b61318a908261368a565b9050600160ff85161b856131ae6f0688589cc0e9505e2f2fee558000000084613840565b6131b8919061368a565b610ff9919061368a565b6000806101008310156131f5575b60018311156131f057600192831c926131e99082613abc565b90506131d0565b611c34565b60805b60ff81161561322757600160ff82161b841061321c5760ff81169390931c92908117905b60011c607f166131f8565b5092915050565b6001600160a01b038116811461324357600080fd5b50565b60008083601f84011261325857600080fd5b50813567ffffffffffffffff81111561327057600080fd5b6020830191508360208260051b850101111561089957600080fd5b60008060008060008060a087890312156132a457600080fd5b86356132af8161322e565b955060208701356132bf8161322e565b945060408701356132cf8161322e565b935060608701359250608087013567ffffffffffffffff8111156132f257600080fd5b6132fe89828a01613246565b979a9699509497509295939492505050565b6020808252825182820181905260009190848201906040850190845b818110156133485783518352928401929184019160010161332c565b50909695505050505050565b6000806040838503121561336757600080fd5b82356133728161322e565b915060208301356133828161322e565b809150509250929050565b6000806000606084860312156133a257600080fd5b83356133ad8161322e565b925060208401356133bd8161322e565b915060408401356133cd8161322e565b809150509250925092565b6000806000606084860312156133ed57600080fd5b83356133f88161322e565b925060208401356134088161322e565b929592945050506040919091013590565b63ffffffff8116811461324357600080fd5b60008060008060008060c0878903121561344457600080fd5b863595506020870135945060408701359350606087013561346481613419565b9250608087013561347481613419565b915060a087013561348481613419565b809150509295509295509295565b600080600080600060a086880312156134aa57600080fd5b8535945060208601359350604086013592506060860135915060808601356134d181613419565b809150509295509295909350565b6000806000806000608086880312156134f757600080fd5b85356135028161322e565b945060208601356135128161322e565b935060408601359250606086013567ffffffffffffffff81111561353557600080fd5b61354188828901613246565b969995985093965092949392505050565b6001600160701b038116811461324357600080fd5b600080600080600080600060e0888a03121561358257600080fd5b87359650602088013561359481613552565b955060408801356135a481613552565b945060608801356135b481613419565b935060808801356135c481613419565b925060a08801356135d481613552565b915060c08801356135e481613552565b8091505092959891949750929550565b60008060006060848603121561360957600080fd5b505081359360208301359350604090920135919050565b60006020828403121561363257600080fd5b813561247f8161322e565b6020808252601c908201527f5265717569656d466f726d756c613a20494e56414c49445f5041544800000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561369d5761369d613674565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006000198214156136e2576136e2613674565b5060010190565b60208082526026908201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f4f556040820152650a8bea082a8960d31b606082015260800190565b60008060006060848603121561374457600080fd5b835161374f81613419565b602085015190935061376081613419565b60408501519092506133cd81613419565b60008060006060848603121561378657600080fd5b835161379181613552565b602085015190935061376081613552565b6000602082840312156137b457600080fd5b815161247f8161322e565b60208082526026908201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160408201526555494449545960d01b606082015260800190565b600063ffffffff8381169083168181101561382257613822613674565b039392505050565b634e487b7160e01b600052601260045260246000fd5b60008261384f5761384f61382a565b500490565b60008282101561386657613866613674565b500390565b60008161387a5761387a613674565b506000190190565b60208082526025908201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f494e6040820152640bea082a8960db1b606082015260800190565b600080604083850312156138da57600080fd5b82516138e581613419565b602084015190925061338281613419565b600060033d111561390f5760046000803e5060005160e01c5b90565b601f8201601f1916810167ffffffffffffffff8111828210171561394657634e487b7160e01b600052604160045260246000fd5b6040525050565b600060443d101561395b5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561398b57505050505090565b82850191508151818111156139a35750505050505090565b843d87010160208285010111156139bd5750505050505090565b6139cc60208286010187613912565b509095945050505050565b600060208083528351808285015260005b81811015613a04578581018301518582016040015282016139e8565b81811115613a16576000604083870101525b50601f01601f1916929092016040019392505050565b600060208284031215613a3e57600080fd5b815161247f81613419565b6000816000190483118215151615613a6357613a63613674565b500290565b600060ff821660ff841680821015613a8257613a82613674565b90039392505050565b600060ff821680613a9e57613a9e613674565b6000190192915050565b600082613ab757613ab761382a565b500690565b600060ff821660ff84168060ff03821115613ad957613ad9613674565b019392505050565b600060ff831680613af457613af461382a565b8060ff8416049150509291505056fea264697066735822122049cd388e802dc4222e0b3defe1b474810b6513dab75c133bf698ad8439c4ef3564736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638888a737116100a2578063b19210b011610071578063b19210b0146102e5578063b33d96b0146102f8578063b3923a991461030b578063ca2229791461031e578063d69109371461033157600080fd5b80638888a737146102995780638fabd82d146102ac57806392aec23c146102bf578063ad615dec146102d257600080fd5b80635bff1d92116100e95780635bff1d92146101d95780636350d7741461022f578063671a11b51461025057806367f84adc1461026357806379c91b371461027657600080fd5b8063119220a51461011b5780632bb66e1d14610144578063327494611461017e578063544caa56146101a6575b600080fd5b61012e61012936600461328b565b61035c565b60405161013b9190613310565b60405180910390f35b610157610152366004613354565b6104ec565b6040805163ffffffff9485168152928416602084015292169181019190915260600161013b565b61019161018c36600461338d565b61057a565b6040805192835260208301919091520161013b565b6101b96101b4366004613354565b6107aa565b604080516001600160a01b0393841681529290911660208301520161013b565b6101ec6101e7366004613354565b6108a0565b604080516001600160a01b03909716875260208701959095529385019290925263ffffffff908116606085015290811660808401521660a082015260c00161013b565b61024261023d3660046133d8565b610bc2565b60405190815260200161013b565b61024261025e36600461342b565b610bff565b61012e61027136600461328b565b610d6b565b610289610284366004613492565b610edd565b604051901515815260200161013b565b6102426102a73660046133d8565b611002565b61012e6102ba3660046134df565b611031565b6102426102cd366004613567565b6111a4565b6102426102e03660046135f4565b611277565b6102426102f336600461342b565b61131d565b6101ec61030636600461338d565b611495565b61012e6103193660046134df565b61176e565b61015761032c366004613620565b6118cd565b61034461033f366004613354565b611a46565b6040516001600160a01b03909116815260200161013b565b6060816103845760405162461bcd60e51b815260040161037b9061363d565b60405180910390fd5b61038f82600161368a565b67ffffffffffffffff8111156103a7576103a76136a2565b6040519080825280602002602001820160405280156103d0578160200160208202803683370190505b50905083816000815181106103e7576103e76136b8565b60209081029190910101528560005b838110156104af576000806000806000806104388f8c8c8a81811061041d5761041d6136b8565b90506020020160208101906104329190613620565b8a611495565b95509550955095509550955061046b898881518110610459576104596136b8565b60200260200101518686868686610bff565b8961047789600161368a565b81518110610487576104876136b8565b60200260200101818152505085975050505050505080806104a7906136ce565b9150506103f6565b50856001600160a01b0316816001600160a01b0316146104e15760405162461bcd60e51b815260040161037b906136e9565b509695505050505050565b60405163ca22297960e01b81526001600160a01b038281166004830152600091829182919086169063ca2229799060240160606040518083038186803b15801561053557600080fd5b505afa158015610549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056d919061372f565b9250925092509250925092565b60008060008061058a86866107aa565b91509150600080886001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156105ca57600080fd5b505afa1580156105de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106029190613771565b506001600160701b031691506001600160701b03169150886001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561065257600080fd5b505afa158015610666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068a91906137a2565b6001600160a01b0316846001600160a01b031614801561072b5750886001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156106de57600080fd5b505afa1580156106f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071691906137a2565b6001600160a01b0316836001600160a01b0316145b6107775760405162461bcd60e51b815260206004820152601d60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e000000604482015260640161037b565b836001600160a01b0316886001600160a01b03161461079757808261079a565b81815b909a909950975050505050505050565b600080826001600160a01b0316846001600160a01b0316141561081b5760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a204944454e544943414c5f41444452455360448201526253455360e81b606482015260840161037b565b826001600160a01b0316846001600160a01b03161061083b57828461083e565b83835b90925090506001600160a01b0382166108995760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a205a45524f5f4144445245535300000000604482015260640161037b565b9250929050565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156108e557600080fd5b505afa1580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d9190613771565b506001600160701b031691506001600160701b031691506000806109408c6118cd565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561098557600080fd5b505afa158015610999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bd91906137a2565b6001600160a01b03168b6001600160a01b03161415610a5c578b6001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0f57600080fd5b505afa158015610a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4791906137a2565b99509297509095509350915084848484610bb4565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9557600080fd5b505afa158015610aa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acd91906137a2565b6001600160a01b03168b6001600160a01b03161415610b6c578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1f57600080fd5b505afa158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5791906137a2565b99509197509195509350915083858385610bb4565b60405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e410000604482015260640161037b565b505050509295509295509295565b6000806000806000806000610bd78a8a6108a0565b955095509550955095509550610bf188858785878661131d565b9a9950505050505050505050565b6000808711610c625760405162461bcd60e51b815260206004820152602960248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f494e50604482015268155517d05353d5539560ba1b606482015260840161037b565b600086118015610c725750600085115b610c8e5760405162461bcd60e51b815260040161037b906137bf565b6000610cb4610c9f84612710613805565b63ffffffff1689611bcd90919063ffffffff16565b90508363ffffffff168563ffffffff161415610cfc57610ce081610cda89612710611bcd565b90611c3a565b610cea8783611bcd565b610cf49190613840565b915050610d61565b60008080610d1084610cda8c612710611bcd565b9050610d2981610d228c612710611bcd565b8a8a611c8f565b90935091506000610d3a8a85611bcd565b905060ff83168a901b84610d4e8284613854565b610d589190613840565b96505050505050505b9695505050505050565b606081610d8a5760405162461bcd60e51b815260040161037b9061363d565b610d9582600161368a565b67ffffffffffffffff811115610dad57610dad6136a2565b604051908082528060200260200182016040528015610dd6578160200160208202803683370190505b509050838160018351610de99190613854565b81518110610df957610df96136b8565b602090810291909101015284825b8015610eab5760008080808080610e348f8c8c610e2560018c613854565b81811061041d5761041d6136b8565b955095509550955095509550610e67898881518110610e5557610e556136b8565b6020026020010151858785878661131d565b89610e7360018a613854565b81518110610e8357610e836136b8565b6020026020010181815250508597505050505050508080610ea39061386b565b915050610e07565b50866001600160a01b0316816001600160a01b0316146104e15760405162461bcd60e51b815260040161037b90613882565b60008163ffffffff1660321415610f0b57610ef88686611bcd565b610f028585611bcd565b10159050610ff9565b858410158015610f1b5750848310155b15610f2857506001610ff9565b858411158015610f385750848311155b15610f4557506000610ff9565b816000610f53826064613805565b90506000806000808b8a10610f9157610f6f8b8a876032611c8f565b90945060ff169250610f848a8d886032611c8f565b90925060ff169050610fbc565b610f9e8c8b886032611c8f565b90945060ff169250610fb3898c876032611c8f565b90925060ff1690505b6000818410610fcb5781610fcd565b835b9050610fd98185613854565b9350610fe58183613854565b9290921c9390921c92909211159450505050505b95945050505050565b60008060008060008060006110178a8a6108a0565b955095509550955095509550610bf1888686868686610bff565b6060816110505760405162461bcd60e51b815260040161037b9061363d565b61105b82600161368a565b67ffffffffffffffff811115611073576110736136a2565b60405190808252806020026020018201604052801561109c578160200160208202803683370190505b50905083816000815181106110b3576110b36136b8565b60209081029190910101528560005b83811015611168576000806000806000806111038b8b898181106110e8576110e86136b8565b90506020020160208101906110fd9190613620565b896108a0565b955095509550955095509550611124898881518110610459576104596136b8565b8961113089600161368a565b81518110611140576111406136b8565b6020026020010181815250508597505050505050508080611160906136ce565b9150506110c2565b50856001600160a01b0316816001600160a01b03161461119a5760405162461bcd60e51b815260040161037b906136e9565b5095945050505050565b60006001600160701b03831615611210576000806111e36111d16001600160701b03878116908c16611c3a565b8a6001600160701b0316896064611c8f565b90925060ff16905061120b8a611205836111fd8387611bcd565b87911c611c3a565b90611dcc565b925050505b6001600160701b0382161561126c5760008061124d61123b6001600160701b03868116908b16611c3a565b896001600160701b0316886064611c8f565b90925060ff1690506112678a611205836111fd8387611bcd565b925050505b979650505050505050565b60008084116112d45760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f414d4f60448201526215539560ea1b606482015260840161037b565b6000831180156112e45750600082115b6113005760405162461bcd60e51b815260040161037b906137bf565b8261130b8584611bcd565b6113159190613840565b949350505050565b60008087116113815760405162461bcd60e51b815260206004820152602a60248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4f555460448201526914155517d05353d5539560b21b606482015260840161037b565b6000861180156113915750600085115b6113ad5760405162461bcd60e51b815260040161037b906137bf565b8263ffffffff168463ffffffff16141561141f5760006113d96127106113d3898b611bcd565b90611bcd565b905060006114056113ec85612710613805565b63ffffffff166113d38b8a611dcc90919063ffffffff16565b90506114166001610cda8385613840565b92505050610d61565b6000808061142d888b611dcc565b905061143b8882888a611c8f565b9093509150600061144e8a612710611bcd565b9050600061145c8286611bcd565b905060ff841682901b610d5860016114768a612710613805565b63ffffffff1660ff881661148a8587613854565b610cda92911c613840565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156114da57600080fd5b505afa1580156114ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115129190613771565b506001600160701b031691506001600160701b031691506000806115368d8d6104ec565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561157b57600080fd5b505afa15801561158f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b391906137a2565b6001600160a01b03168b6001600160a01b03161415611652578b6001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561160557600080fd5b505afa158015611619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163d91906137a2565b9950929750909550935091508484848461175e565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561168b57600080fd5b505afa15801561169f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c391906137a2565b6001600160a01b03168b6001600160a01b03161415610b6c578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561171557600080fd5b505afa158015611729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174d91906137a2565b995091975091955093509150838583855b5050505093975093979195509350565b60608161178d5760405162461bcd60e51b815260040161037b9061363d565b61179882600161368a565b67ffffffffffffffff8111156117b0576117b06136a2565b6040519080825280602002602001820160405280156117d9578160200160208202803683370190505b5090508381600183516117ec9190613854565b815181106117fc576117fc6136b8565b602090810291909101015284825b801561189b57600080808080806118368b8b61182760018b613854565b8181106110e8576110e86136b8565b955095509550955095509550611857898881518110610e5557610e556136b8565b8961186360018a613854565b81518110611873576118736136b8565b60200260200101818152505085975050505050505080806118939061386b565b91505061180a565b50866001600160a01b0316816001600160a01b03161461119a5760405162461bcd60e51b815260040161037b90613882565b6000806000836001600160a01b03166332bfe4696040518163ffffffff1660e01b8152600401604080518083038186803b15801561190a57600080fd5b505afa92505050801561193a575060408051601f3d908101601f19168201909252611937918101906138c7565b60015b6119c3576119466138f6565b806308c379a01415611980575061195b61394d565b806119665750611982565b8060405162461bcd60e51b815260040161037b91906139d7565b505b3d8080156119ac576040519150601f19603f3d011682016040523d82523d6000602084013e6119b1565b606091505b50603280601e93509350935050611a3f565b8181876001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156119fe57600080fd5b505afa158015611a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a369190613a2c565b94509450945050505b9193909250565b600080836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8257600080fd5b505afa158015611a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aba91906137a2565b90506000846001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015611af757600080fd5b505afa158015611b0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2f91906137a2565b9050836001600160a01b0316826001600160a01b03161480611b625750836001600160a01b0316816001600160a01b0316145b611bae5760405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e410000604482015260640161037b565b836001600160a01b0316826001600160a01b0316146113155781610ff9565b6000811580611bf157508282611be38183613a49565b9250611bef9083613840565b145b611c345760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015260640161037b565b92915050565b600082611c47838261368a565b9150811015611c345760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015260640161037b565b60008084861015611ce25760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420737570706f7274205f626173654e203c205f62617365440000000000604482015260640161037b565b600160811b8610611cf257600080fd5b60008086611d046001607f1b8a613a49565b611d0e9190613840565b905070015bf0a8b1457695355fb8ac404e7a79e3811015611d3957611d3281611e22565b9150611d45565b611d4281612391565b91505b60008563ffffffff168763ffffffff1684611d609190613a49565b611d6a9190613840565b9050600160831b811015611d8f57611d8181612486565b607f94509450505050611dc3565b6000611d9a82612ab1565b9050611db6611daa82607f613a68565b60ff1683901c82612b64565b95509350611dc392505050565b94509492505050565b600082611dd98382613854565b9150811115611c345760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015260640161037b565b6000808080806fd3094c70f034de4b96ff7d5b6f99fcd88610611e7b57611e4d6001607e1b8561368a565b93506fd3094c70f034de4b96ff7d5b6f99fcd8611e6e6001607f1b88613a49565b611e789190613840565b95505b6fa45af1e1f40c333b3de1db4dd55f29a78610611ece57611ea06001607d1b8561368a565b93506fa45af1e1f40c333b3de1db4dd55f29a7611ec16001607f1b88613a49565b611ecb9190613840565b95505b6f910b022db7ae67ce76b441c27035c6a18610611f2157611ef36001607c1b8561368a565b93506f910b022db7ae67ce76b441c27035c6a1611f146001607f1b88613a49565b611f1e9190613840565b95505b6f88415abbe9a76bead8d00cf112e4d4a88610611f7457611f466001607b1b8561368a565b93506f88415abbe9a76bead8d00cf112e4d4a8611f676001607f1b88613a49565b611f719190613840565b95505b6f84102b00893f64c705e841d5d4064bd38610611fc757611f996001607a1b8561368a565b93506f84102b00893f64c705e841d5d4064bd3611fba6001607f1b88613a49565b611fc49190613840565b95505b6f8204055aaef1c8bd5c3259f4822735a2861061201a57611fec600160791b8561368a565b93506f8204055aaef1c8bd5c3259f4822735a261200d6001607f1b88613a49565b6120179190613840565b95505b6f810100ab00222d861931c15e39b44e99861061206d5761203f600160781b8561368a565b93506f810100ab00222d861931c15e39b44e996120606001607f1b88613a49565b61206a9190613840565b95505b6f808040155aabbbe9451521693554f73386106120c057612092600160771b8561368a565b93506f808040155aabbbe9451521693554f7336120b36001607f1b88613a49565b6120bd9190613840565b95505b6120ce6001607f1b87613854565b92508291506001607f1b6120e28380613a49565b6120ec9190613840565b9050600160801b6120fd8482613854565b6121079084613a49565b6121119190613840565b61211b908561368a565b93506001607f1b61212c8284613a49565b6121369190613840565b9150600160811b612157846faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa613854565b6121619084613a49565b61216b9190613840565b612175908561368a565b93506001607f1b6121868284613a49565b6121909190613840565b9150600360801b6121b1846f99999999999999999999999999999999613854565b6121bb9084613a49565b6121c59190613840565b6121cf908561368a565b93506001607f1b6121e08284613a49565b6121ea9190613840565b9150600160821b61220b846f92492492492492492492492492492492613854565b6122159084613a49565b61221f9190613840565b612229908561368a565b93506001607f1b61223a8284613a49565b6122449190613840565b9150600560801b612265846f8e38e38e38e38e38e38e38e38e38e38e613854565b61226f9084613a49565b6122799190613840565b612283908561368a565b93506001607f1b6122948284613a49565b61229e9190613840565b9150600360811b6122bf846f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b613854565b6122c99084613a49565b6122d39190613840565b6122dd908561368a565b93506001607f1b6122ee8284613a49565b6122f89190613840565b9150600760801b612319846f89d89d89d89d89d89d89d89d89d89d89613854565b6123239084613a49565b61232d9190613840565b612337908561368a565b93506001607f1b6123488284613a49565b6123529190613840565b9150600160831b612373846f88888888888888888888888888888888613854565b61237d9084613a49565b6123879190613840565b610d61908561368a565b600080600160801b83106123d55760006123b76123b26001607f1b86613840565b6131c2565b60ff811694851c949091506123d1906001607f1b90613a49565b9150505b6001607f1b83111561244a57607f5b60ff811615612448576001607f1b6123fc8580613a49565b6124069190613840565b9350600160801b841061243857600193841c936124239082613a68565b60ff166001901b82612435919061368a565b91505b61244181613a8b565b90506123e4565b505b6f05b9de1d10bf4103d647b0955897ba806124756f03f80fe03f80fe03f80fe03f80fe03f883613a49565b61247f9190613840565b9392505050565b60008080806124996001607c1b86613aa8565b91508190506001607f1b6124ad8280613a49565b6124b79190613840565b90506124cb816710e1b3be415a0000613a49565b6124d5908461368a565b92506001607f1b6124e68383613a49565b6124f09190613840565b9050612504816705a0913f6b1e0000613a49565b61250e908461368a565b92506001607f1b61251f8383613a49565b6125299190613840565b905061253d81670168244fdac78000613a49565b612547908461368a565b92506001607f1b6125588383613a49565b6125629190613840565b905061257581664807432bc18000613a49565b61257f908461368a565b92506001607f1b6125908383613a49565b61259a9190613840565b90506125ad81660c0135dca04000613a49565b6125b7908461368a565b92506001607f1b6125c88383613a49565b6125d29190613840565b90506125e5816601b707b1cdc000613a49565b6125ef908461368a565b92506001607f1b6126008383613a49565b61260a9190613840565b905061261c816536e0f639b800613a49565b612626908461368a565b92506001607f1b6126378383613a49565b6126419190613840565b905061265381650618fee9f800613a49565b61265d908461368a565b92506001607f1b61266e8383613a49565b6126789190613840565b905061268981649c197dcc00613a49565b612693908461368a565b92506001607f1b6126a48383613a49565b6126ae9190613840565b90506126bf81640e30dce400613a49565b6126c9908461368a565b92506001607f1b6126da8383613a49565b6126e49190613840565b90506126f58164012ebd1300613a49565b6126ff908461368a565b92506001607f1b6127108383613a49565b61271a9190613840565b905061272a816317499f00613a49565b612734908461368a565b92506001607f1b6127458383613a49565b61274f9190613840565b905061275f816301a9d480613a49565b612769908461368a565b92506001607f1b61277a8383613a49565b6127849190613840565b905061279381621c6380613a49565b61279d908461368a565b92506001607f1b6127ae8383613a49565b6127b89190613840565b90506127c7816201c638613a49565b6127d1908461368a565b92506001607f1b6127e28383613a49565b6127ec9190613840565b90506127fa81611ab8613a49565b612804908461368a565b92506001607f1b6128158383613a49565b61281f9190613840565b905061282d8161017c613a49565b612837908461368a565b92506001607f1b6128488383613a49565b6128529190613840565b905061285f816014613a49565b612869908461368a565b92506001607f1b61287a8383613a49565b6128849190613840565b9050612891816001613a49565b61289b908461368a565b92506001607f1b826128b56721c3677c82b4000086613840565b6128bf919061368a565b6128c9919061368a565b92506001607c1b8516156129115770018ebef9eac820ae8682b9793ac6d1e776612904847001c3d6a24ed82218787d624d3e5eba95f9613a49565b61290e9190613840565b92505b6001607d1b851615612957577001368b2fc6f9609fe7aceb46aa619baed461294a8470018ebef9eac820ae8682b9793ac6d1e778613a49565b6129549190613840565b92505b6001607e1b85161561299c576fbc5ab1b16779be3575bd8f0520a9f21f61298f847001368b2fc6f9609fe7aceb46aa619baed5613a49565b6129999190613840565b92505b6001607f1b8516156129e0576f454aaa8efe072e7f6ddbab84b40a55c96129d3846fbc5ab1b16779be3575bd8f0520a9f21e613a49565b6129dd9190613840565b92505b600160801b851615612a24576f0960aadc109e7a3bf4578099615711ea612a17846f454aaa8efe072e7f6ddbab84b40a55c5613a49565b612a219190613840565b92505b600160811b851615612a67576e2bf84208204f5977f9a8cf01fdce3d612a5a846f0960aadc109e7a3bf4578099615711d7613a49565b612a649190613840565b92505b600160821b851615612aa8576d03c6ab775dd0b95b4cbee7e65d11612a9b846e2bf84208204f5977f9a8cf01fdc307613a49565b612aa59190613840565b92505b50909392505050565b60006020607f5b60ff8116612ac7836001613abc565b60ff161015612b1a5760006002612ade8385613abc565b612ae89190613ae1565b90508460008260ff1660808110612b0157612b016136b8565b015410612b1057809250612b14565b8091505b50612ab8565b8360008260ff1660808110612b3157612b316136b8565b015410612b3f579392505050565b8360008360ff1660808110612b5657612b566136b8565b015410610116575092915050565b6000828160ff8416612b768380613a49565b901c9150612b94826f03442c4e6074a82f1797f72ac0000000613a49565b612b9e908261368a565b905060ff8416612bae8684613a49565b901c9150612bcc826f0116b96f757c380fb287fd0e40000000613a49565b612bd6908261368a565b905060ff8416612be68684613a49565b901c9150612c03826e45ae5bdd5f0e03eca1ff4390000000613a49565b612c0d908261368a565b905060ff8416612c1d8684613a49565b901c9150612c3a826e0defabf91302cd95b9ffda50000000613a49565b612c44908261368a565b905060ff8416612c548684613a49565b901c9150612c71826e02529ca9832b22439efff9b8000000613a49565b612c7b908261368a565b905060ff8416612c8b8684613a49565b901c9150612ca7826d54f1cf12bd04e516b6da88000000613a49565b612cb1908261368a565b905060ff8416612cc18684613a49565b901c9150612cdd826d0a9e39e257a09ca2d6db51000000613a49565b612ce7908261368a565b905060ff8416612cf78684613a49565b901c9150612d13826d012e066e7b839fa050c309000000613a49565b612d1d908261368a565b905060ff8416612d2d8684613a49565b901c9150612d48826c1e33d7d926c329a1ad1a800000613a49565b612d52908261368a565b905060ff8416612d628684613a49565b901c9150612d7d826c02bee513bdb4a6b19b5f800000613a49565b612d87908261368a565b905060ff8416612d978684613a49565b901c9150612db1826b3a9316fa79b88eccf2a00000613a49565b612dbb908261368a565b905060ff8416612dcb8684613a49565b901c9150612de5826b048177ebe1fa812375200000613a49565b612def908261368a565b905060ff8416612dff8684613a49565b901c9150612e18826a5263fe90242dcbacf00000613a49565b612e22908261368a565b905060ff8416612e328684613a49565b901c9150612e4b826a057e22099c030d94100000613a49565b612e55908261368a565b905060ff8416612e658684613a49565b901c9150612e7d826957e22099c030d9410000613a49565b612e87908261368a565b905060ff8416612e978684613a49565b901c9150612eaf8269052b6b54569976310000613a49565b612eb9908261368a565b905060ff8416612ec98684613a49565b901c9150612ee082684985f67696bf748000613a49565b612eea908261368a565b905060ff8416612efa8684613a49565b901c9150612f11826803dea12ea99e498000613a49565b612f1b908261368a565b905060ff8416612f2b8684613a49565b901c9150612f41826731880f2214b6e000613a49565b612f4b908261368a565b905060ff8416612f5b8684613a49565b901c9150612f718267025bcff56eb36000613a49565b612f7b908261368a565b905060ff8416612f8b8684613a49565b901c9150612fa082661b722e10ab1000613a49565b612faa908261368a565b905060ff8416612fba8684613a49565b901c9150612fcf826601317c70077000613a49565b612fd9908261368a565b905060ff8416612fe98684613a49565b901c9150612ffd82650cba84aafa00613a49565b613007908261368a565b905060ff84166130178684613a49565b901c915061302a826482573a0a00613a49565b613034908261368a565b905060ff84166130448684613a49565b901c9150613057826405035ad900613a49565b613061908261368a565b905060ff84166130718684613a49565b901c915061308382632f881b00613a49565b61308d908261368a565b905060ff841661309d8684613a49565b901c91506130af826301b29340613a49565b6130b9908261368a565b905060ff84166130c98684613a49565b901c91506130da82620efc40613a49565b6130e4908261368a565b905060ff84166130f48684613a49565b901c915061310482617fe0613a49565b61310e908261368a565b905060ff841661311e8684613a49565b901c915061312e82610420613a49565b613138908261368a565b905060ff84166131488684613a49565b901c9150613157826021613a49565b613161908261368a565b905060ff84166131718684613a49565b901c9150613180826001613a49565b61318a908261368a565b9050600160ff85161b856131ae6f0688589cc0e9505e2f2fee558000000084613840565b6131b8919061368a565b610ff9919061368a565b6000806101008310156131f5575b60018311156131f057600192831c926131e99082613abc565b90506131d0565b611c34565b60805b60ff81161561322757600160ff82161b841061321c5760ff81169390931c92908117905b60011c607f166131f8565b5092915050565b6001600160a01b038116811461324357600080fd5b50565b60008083601f84011261325857600080fd5b50813567ffffffffffffffff81111561327057600080fd5b6020830191508360208260051b850101111561089957600080fd5b60008060008060008060a087890312156132a457600080fd5b86356132af8161322e565b955060208701356132bf8161322e565b945060408701356132cf8161322e565b935060608701359250608087013567ffffffffffffffff8111156132f257600080fd5b6132fe89828a01613246565b979a9699509497509295939492505050565b6020808252825182820181905260009190848201906040850190845b818110156133485783518352928401929184019160010161332c565b50909695505050505050565b6000806040838503121561336757600080fd5b82356133728161322e565b915060208301356133828161322e565b809150509250929050565b6000806000606084860312156133a257600080fd5b83356133ad8161322e565b925060208401356133bd8161322e565b915060408401356133cd8161322e565b809150509250925092565b6000806000606084860312156133ed57600080fd5b83356133f88161322e565b925060208401356134088161322e565b929592945050506040919091013590565b63ffffffff8116811461324357600080fd5b60008060008060008060c0878903121561344457600080fd5b863595506020870135945060408701359350606087013561346481613419565b9250608087013561347481613419565b915060a087013561348481613419565b809150509295509295509295565b600080600080600060a086880312156134aa57600080fd5b8535945060208601359350604086013592506060860135915060808601356134d181613419565b809150509295509295909350565b6000806000806000608086880312156134f757600080fd5b85356135028161322e565b945060208601356135128161322e565b935060408601359250606086013567ffffffffffffffff81111561353557600080fd5b61354188828901613246565b969995985093965092949392505050565b6001600160701b038116811461324357600080fd5b600080600080600080600060e0888a03121561358257600080fd5b87359650602088013561359481613552565b955060408801356135a481613552565b945060608801356135b481613419565b935060808801356135c481613419565b925060a08801356135d481613552565b915060c08801356135e481613552565b8091505092959891949750929550565b60008060006060848603121561360957600080fd5b505081359360208301359350604090920135919050565b60006020828403121561363257600080fd5b813561247f8161322e565b6020808252601c908201527f5265717569656d466f726d756c613a20494e56414c49445f5041544800000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561369d5761369d613674565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006000198214156136e2576136e2613674565b5060010190565b60208082526026908201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f4f556040820152650a8bea082a8960d31b606082015260800190565b60008060006060848603121561374457600080fd5b835161374f81613419565b602085015190935061376081613419565b60408501519092506133cd81613419565b60008060006060848603121561378657600080fd5b835161379181613552565b602085015190935061376081613552565b6000602082840312156137b457600080fd5b815161247f8161322e565b60208082526026908201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160408201526555494449545960d01b606082015260800190565b600063ffffffff8381169083168181101561382257613822613674565b039392505050565b634e487b7160e01b600052601260045260246000fd5b60008261384f5761384f61382a565b500490565b60008282101561386657613866613674565b500390565b60008161387a5761387a613674565b506000190190565b60208082526025908201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f494e6040820152640bea082a8960db1b606082015260800190565b600080604083850312156138da57600080fd5b82516138e581613419565b602084015190925061338281613419565b600060033d111561390f5760046000803e5060005160e01c5b90565b601f8201601f1916810167ffffffffffffffff8111828210171561394657634e487b7160e01b600052604160045260246000fd5b6040525050565b600060443d101561395b5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561398b57505050505090565b82850191508151818111156139a35750505050505090565b843d87010160208285010111156139bd5750505050505090565b6139cc60208286010187613912565b509095945050505050565b600060208083528351808285015260005b81811015613a04578581018301518582016040015282016139e8565b81811115613a16576000604083870101525b50601f01601f1916929092016040019392505050565b600060208284031215613a3e57600080fd5b815161247f81613419565b6000816000190483118215151615613a6357613a63613674565b500290565b600060ff821660ff841680821015613a8257613a82613674565b90039392505050565b600060ff821680613a9e57613a9e613674565b6000190192915050565b600082613ab757613ab761382a565b500690565b600060ff821660ff84168060ff03821115613ad957613ad9613674565b019392505050565b600060ff831680613af457613af461382a565b8060ff8416049150509291505056fea264697066735822122049cd388e802dc4222e0b3defe1b474810b6513dab75c133bf698ad8439c4ef3564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAmountIn(uint256,uint256,uint256,uint32,uint32,uint32)": {
        "details": "given an output amount of an asset and pair reserves, returns a required input amount of the other asset Formula: return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)",
        "params": {
          "amountOut": "target reserve amount",
          "reserveIn": "source reserve balance",
          "reserveOut": "target reserve balance",
          "swapFee": "swap fee of the conversion",
          "tokenWeightIn": "source reserve weight, represented in ppm (2-98)",
          "tokenWeightOut": "target reserve weight, represented in ppm (2-98)"
        },
        "returns": {
          "amountIn": "amountIn"
        }
      },
      "getAmountOut(uint256,uint256,uint256,uint32,uint32,uint32)": {
        "details": "given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset, Formula: return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))",
        "params": {
          "amountIn": "source reserve amount",
          "reserveIn": "source reserve balance",
          "reserveOut": "target reserve balance",
          "swapFee": "swap fee of the conversion",
          "tokenWeightIn": "source reserve weight, represented in ppm (2-98)",
          "tokenWeightOut": "target reserve weight, represented in ppm (2-98)"
        },
        "returns": {
          "amountOut": "amountOut"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1110,
        "contract": "contracts/RequiemFormula.sol:RequiemFormula",
        "label": "maxExpArray",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)128_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)128_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[128]",
        "numberOfBytes": "4096"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}