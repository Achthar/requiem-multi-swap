{
  "address": "0xacd3602152763C3AAFA705D8a90C36661ecD7d46",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_formula",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INIT_CODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "getPairs",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_tokenPairs",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x52d1dbb2910714bd0cf20bd967749f01623c64d8ec7018ab1272fc80035f26c7",
  "receipt": {
    "to": null,
    "from": "0x10E38dFfFCfdBaaf590D5A9958B01C9cfcF6A63B",
    "contractAddress": "0xacd3602152763C3AAFA705D8a90C36661ecD7d46",
    "transactionIndex": 0,
    "gasUsed": "4965148",
    "logsBloom": "0x
    "blockHash": "0x258d65e7c7cd6f4f554e2e681c9095be5cd55300ed770bd9ad10d11f0a9dbddb",
    "transactionHash": "0x52d1dbb2910714bd0cf20bd967749f01623c64d8ec7018ab1272fc80035f26c7",
    "logs": [],
    "blockNumber": 3698152,
    "cumulativeGasUsed": "4965148",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x10E38dFfFCfdBaaf590D5A9958B01C9cfcF6A63B",
    "0x27b18F4aad3223d5A92F1aF0C4798f996aC78968"
  ],
  "solcInputHash": "10d5afa37f3c5b8806b9c3b149add779",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_formula\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getPairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenPairs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemWeightedPairFactory.sol\":\"RequiemWeightedPairFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/RequiemPairERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IRequiemPairERC20.sol\\\";\\n\\n// solhint-disable not-rely-on-time, no-inline-assembly, var-name-mixedcase, max-line-length\\n\\ncontract RequiemPairERC20 is IRequiemPairERC20 {\\n\\n    string public constant name = \\\"Requiem Pair Liquidity Provider\\\";\\n    string public constant symbol = \\\"RPLP\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    bytes32 public override DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    constructor() {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"), keccak256(bytes(name)), keccak256(bytes(\\\"1\\\")), chainId, address(this))\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply += value;\\n        balanceOf[to] += value;\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] -= value;\\n        totalSupply -= value;\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] -= value;\\n        balanceOf[to] += value;\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= value;\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"RLP: EXPIRED\\\");\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"RLP: IS\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x70660e5dc9c7a804e1e235689aa7994141c6f7915f875e0839becdec5fe1763c\",\"license\":\"MIT\"},\"contracts/RequiemWeightedPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IRequiemWeightedPair.sol\\\";\\nimport \\\"./interfaces/IRequiemSwap.sol\\\";\\nimport \\\"./interfaces/IRequiemFormula.sol\\\";\\nimport \\\"./RequiemPairERC20.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IRequiemWeightedPairFactory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Callee.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string, avoid-low-level-calls\\n\\ncontract RequiemWeightedPair is IRequiemSwap, IRequiemWeightedPair, RequiemPairERC20 {\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 private unlocked = 1;\\n    address public formula;\\n\\n    uint112 private collectedFee0; // uses single storage slot, accessible via getReserves\\n    uint112 private collectedFee1; // uses single storage slot, accessible via getReserves\\n\\n    uint32 private tokenWeight0;\\n    uint32 private tokenWeight1;\\n    uint32 private swapFee;\\n\\n    modifier lock() {\\n        require(unlocked == 1, \\\"REQLP: L\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function getCollectedFees() public view returns (uint112 _collectedFee0, uint112 _collectedFee1) {\\n        _collectedFee0 = collectedFee0;\\n        _collectedFee1 = collectedFee1;\\n    }\\n\\n    function getTokenWeights() public view returns (uint32 _tokenWeight0, uint32 _tokenWeight1) {\\n        _tokenWeight0 = tokenWeight0;\\n        _tokenWeight1 = tokenWeight1;\\n    }\\n\\n    function getSwapFee() public view returns (uint32 _swapFee) {\\n        _swapFee = swapFee;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"REQLP: TF\\\");\\n    }\\n\\n    constructor() {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(\\n        address _token0,\\n        address _token1,\\n        uint32 _tokenWeight0,\\n        uint32 _swapFee\\n    ) external {\\n        require(msg.sender == factory, \\\"REQLP: F\\\");\\n        // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n        tokenWeight0 = _tokenWeight0;\\n        tokenWeight1 = 100 - tokenWeight0;\\n        swapFee = _swapFee;\\n        formula = IRequiemWeightedPairFactory(factory).formula();\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        uint32 _tokenWeight0 = tokenWeight0;\\n        require(balance0 * (100 - _tokenWeight0) <= type(uint112).max && balance1 * _tokenWeight0 <= type(uint112).max, \\\"REQLP: O\\\");\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n        // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            uint112 mReserve0 = _reserve0 * (100 - _tokenWeight0);\\n            uint112 mReserve1 = _reserve1 * _tokenWeight0;\\n            price0CumulativeLast += uint256(UQ112x112.encode(mReserve1).uqdiv(mReserve0)) * timeElapsed;\\n            price1CumulativeLast += uint256(UQ112x112.encode(mReserve0).uqdiv(mReserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IRequiemWeightedPairFactory(factory).feeTo();\\n        uint112 protocolFee = uint112(IRequiemWeightedPairFactory(factory).protocolFee());\\n        feeOn = feeTo != address(0);\\n        (uint112 _collectedFee0, uint112 _collectedFee1) = getCollectedFees();\\n        if (protocolFee > 0 && feeOn && (_collectedFee0 > 0 || _collectedFee1 > 0)) {\\n            uint32 _tokenWeight0 = tokenWeight0;\\n            uint256 liquidity = IRequiemFormula(formula).mintLiquidityFee(\\n                totalSupply,\\n                _reserve0,\\n                _reserve1,\\n                _tokenWeight0,\\n                100 - _tokenWeight0,\\n                _collectedFee0 / protocolFee,\\n                _collectedFee1 / protocolFee\\n            );\\n            if (liquidity > 0) _mint(feeTo, liquidity);\\n        }\\n        if (_collectedFee0 > 0) collectedFee0 = 0;\\n        if (_collectedFee1 > 0) collectedFee1 = 0;\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0 - _reserve0;\\n        uint256 amount1 = balance1 - _reserve1;\\n        _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply;\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min((amount0 * _totalSupply) / _reserve0, (amount1 * _totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, \\\"REQLP: ILM\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n        _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = (liquidity * balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = (liquidity * balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, \\\"REQLP: ILB\\\");\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata\\n    ) external lock {\\n        _swap(amount0Out, amount1Out, to);\\n    }\\n\\n    //\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address,\\n        uint256 amountIn\\n    ) external view returns (uint256) {\\n        (uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = tokenIn == token0\\n            ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n            : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        return IRequiemFormula(formula).getAmountOut(amountIn, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address,\\n        uint256 amountOut\\n    ) external view returns (uint256) {\\n        (uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = tokenIn == token0\\n            ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n            : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        return IRequiemFormula(formula).getAmountIn(amountOut, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)) - reserve0);\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)) - reserve1);\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n\\n    // calculates output amount for given input and executes the respective trade\\n    // viable for use in multi swaps as it returns the output value\\n    // requires the amount in to be sent to this address beforehand\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address,\\n        uint256 amountIn,\\n        uint256,\\n        address to\\n    ) external override lock returns (uint256) {\\n        bool inToken0 = tokenIn == token0;\\n        (uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = inToken0\\n            ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n            : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        uint256 amountOut = IRequiemFormula(formula).getAmountOut(amountIn, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n        (uint256 amount0Out, uint256 amount1Out) = inToken0 ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n        return _swap(amount0Out, amount1Out, to);\\n    }\\n\\n    // calculates input amount for given output and executes the respective trade\\n    // calling this one only makes sense if a single trade is supposd to be executed in the tx\\n    // requires the amount in to be sent to this address beforehand\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address,\\n        uint256 amountOut,\\n        uint256,\\n        address to\\n    ) external override lock returns (uint256) {\\n        bool inToken0 = tokenIn == token0;\\n        (uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = tokenIn == token0\\n            ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n            : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        uint256 amountIn = IRequiemFormula(formula).getAmountIn(amountOut, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n        (uint256 amount0Out, uint256 amount1Out) = inToken0 ? (uint256(0), amountIn) : (amountIn, uint256(0));\\n        return _swap(amount0Out, amount1Out, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function _swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to\\n    ) internal returns (uint256) {\\n        require(amount0Out > 0 || amount1Out > 0, \\\"REQLP: IOA\\\");\\n        uint112 _reserve0 = reserve0; // gas savings\\n        uint112 _reserve1 = reserve1; // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"REQLP: IL\\\");\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"REQLP: IT\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n\\n        require(amount0In > 0 || amount1In > 0, \\\"REQLP: IIA\\\");\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0 * 10000;\\n            uint256 balance1Adjusted = balance1 * 10000;\\n            {\\n                // avoids stack too deep errors\\n                if (amount0In > 0) {\\n                    uint256 amount0InFee = amount0In * swapFee;\\n                    balance0Adjusted -= amount0InFee;\\n                    collectedFee0 = uint112(uint256(collectedFee0) + amount0InFee);\\n                }\\n                if (amount1In > 0) {\\n                    uint256 amount1InFee = amount1In * swapFee;\\n                    balance1Adjusted -= amount1InFee;\\n                    collectedFee1 = uint112(uint256(collectedFee1) + amount1InFee);\\n                }\\n                uint32 _tokenWeight0 = tokenWeight0; // gas savings\\n                if (_tokenWeight0 == 50) {\\n                    // gas savings for pair 50/50\\n                    require(balance0Adjusted * balance1Adjusted >= uint256(_reserve0) * _reserve1 * (10000**2), \\\"REQLP: K\\\");\\n                } else {\\n                    require(IRequiemFormula(formula).ensureConstantValue(uint256(_reserve0) * 10000, uint256(_reserve1) * 10000, balance0Adjusted, balance1Adjusted, _tokenWeight0), \\\"REQLP: K\\\");\\n                }\\n            }\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n        return amount0Out > 0 ? amount0Out : amount1Out;\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function onSwap(\\n        address tokenIn,\\n        address,\\n        uint256,\\n        uint256 amountOut,\\n        address to\\n    ) external override lock {\\n        (uint256 amount0Out, uint256 amount1Out) = token0 == tokenIn ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n        require(amount0Out > 0 || amount1Out > 0, \\\"REQLP: IOA\\\");\\n        uint112 _reserve0 = reserve0; // gas savings\\n        uint112 _reserve1 = reserve1; // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"REQLP: IL\\\");\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"REQLP: IT\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n\\n        require(amount0In > 0 || amount1In > 0, \\\"REQLP: IIA\\\");\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0 * 10000;\\n            uint256 balance1Adjusted = balance1 * 10000;\\n            {\\n                // avoids stack too deep errors\\n                if (amount0In > 0) {\\n                    uint256 amount0InFee = amount0In * swapFee;\\n                    balance0Adjusted -= amount0InFee;\\n                    collectedFee0 = uint112(uint256(collectedFee0) + amount0InFee);\\n                }\\n                if (amount1In > 0) {\\n                    uint256 amount1InFee = amount1In * swapFee;\\n                    balance1Adjusted -= amount1InFee;\\n                    collectedFee1 = uint112(uint256(collectedFee1) + amount1InFee);\\n                }\\n                uint32 _tokenWeight0 = tokenWeight0; // gas savings\\n                if (_tokenWeight0 == 50) {\\n                    // gas savings for pair 50/50\\n                    require(balance0Adjusted * balance1Adjusted >= uint256(_reserve0) * _reserve1 * (10000**2), \\\"REQLP: K\\\");\\n                } else {\\n                    require(IRequiemFormula(formula).ensureConstantValue(uint256(_reserve0) * 10000, uint256(_reserve1) * 10000, balance0Adjusted, balance1Adjusted, _tokenWeight0), \\\"REQLP: K\\\");\\n                }\\n            }\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n}\\n\",\"keccak256\":\"0x5f5bf73e43400e03e03f04e1941985fdea923bbb294ba4e3af6801d712b6f3c6\",\"license\":\"MIT\"},\"contracts/RequiemWeightedPairFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IRequiemWeightedPairFactory.sol\\\";\\nimport \\\"./libraries/EnumerableSet.sol\\\";\\nimport \\\"./RequiemWeightedPair.sol\\\";\\n\\n// solhint-disable no-inline-assembly\\n\\ncontract RequiemWeightedPairFactory is IRequiemWeightedPairFactory {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address public feeTo;\\n    address public formula;\\n    uint256 public protocolFee;\\n    address public feeToSetter;\\n    bytes32 public constant INIT_CODE_HASH = keccak256(abi.encodePacked(type(RequiemWeightedPair).creationCode));\\n\\n    mapping(bytes32 => address) private _pairSalts;\\n    address[] public allPairs;\\n    mapping(address => uint64) private _pairs;\\n\\n    mapping(IERC20 => mapping(IERC20 => EnumerableSet.AddressSet)) internal tokenPairs;\\n\\n    constructor(address _feeToSetter, address _formula) {\\n        feeToSetter = _feeToSetter;\\n        formula = _formula;\\n    }\\n\\n    function isPair(address b) external view returns (bool) {\\n        return _pairs[b] > 0;\\n    }\\n\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external view returns (address pair) {\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0, swapFee));\\n        pair = _pairSalts[salt];\\n    }\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external returns (address pair) {\\n        require(tokenA != tokenB, \\\"RLP: IA\\\");\\n        require(tokenWeightA >= 2 && tokenWeightA <= 98 && (tokenWeightA % 2) == 0, \\\"RLP: IW\\\");\\n        // swap fee from [0.01% - 20%]\\n        require(swapFee >= 1 && swapFee <= 2000, \\\"RLP: ISF\\\");\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        require(token0 != address(0), \\\"RLP: ZA\\\");\\n        // single check is sufficient\\n        bytes memory bytecode = type(RequiemWeightedPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0, swapFee));\\n        require(_pairSalts[salt] == address(0), \\\"RLP: PE\\\");\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IRequiemWeightedPair(pair).initialize(token0, token1, tokenWeight0, swapFee);\\n\\n        tokenPairs[IERC20(token0)][IERC20(token1)].add(pair);\\n        tokenPairs[IERC20(token1)][IERC20(token0)].add(pair);\\n\\n        _pairSalts[salt] = address(pair);\\n        allPairs.push(pair);\\n        uint64 weightAndFee = uint64(swapFee);\\n        weightAndFee |= uint64(tokenWeight0) << 32;\\n        _pairs[address(pair)] = weightAndFee;\\n        emit PairCreated(token0, token1, pair, tokenWeight0, swapFee, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: F\\\");\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: F\\\");\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function setProtocolFee(uint256 _protocolFee) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: F\\\");\\n        require(_protocolFee == 0 || (_protocolFee >= 10000 && _protocolFee <= 100000), \\\"RLP: IPF\\\");\\n        protocolFee = _protocolFee;\\n    }\\n\\n    function getWeightsAndSwapFee(address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        )\\n    {\\n        uint64 weightAndFee = _pairs[pair];\\n        if (weightAndFee > 0) {\\n            swapFee = uint32(weightAndFee);\\n            tokenWeight0 = uint32(weightAndFee >> 32);\\n            tokenWeight1 = 100 - tokenWeight0;\\n        } else {\\n            // Default is 0.3%\\n            return (50, 50, 30);\\n        }\\n    }\\n\\n    function getPairs(IERC20 token0, IERC20 token1) external view returns (address[] memory _tokenPairs) {\\n        uint256 length = tokenPairs[token0][token1].length();\\n        _tokenPairs = new address[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            _tokenPairs[i] = tokenPairs[token0][token1].at(i);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9e1acf1901192c86ef2422037db8312093fbbfd5c737b9200a8cd32d8de4f70c\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb7230835a4efbbbebcb5371d121977e859388b33f3ee5d9a7a44fc4de8d6b970\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.10;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IRequiemFormula {\\n\\n    function getReserveAndWeights(address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getPairAmountIn(address pair, address tokenIn, uint amountOut) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getPairAmountOut(address pair, address tokenIn, uint amountIn) external view returns (uint amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x801bfafc508f453eba70058a66da15de703047424df29d54001d80901f0c8f0a\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IRequiemPairERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemPairERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x54909aaa58357205c588740c70e25af35f1e47716fced8011af45258a832edc7\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemSwap {\\n    // this funtion requires the correctly calculated amounts as input\\n    // the others are supposed to implement that calculation\\n    // no return value required since the amounts are already known\\n    function onSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address to\\n    ) external;\\n\\n    //\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external returns (uint256);\\n\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to\\n    ) external returns (uint256);\\n\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (uint256);\\n\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x905db01e6f2b1be6fa834315054c375eac7f2c719dc3ca333dfb5d5597bfde56\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IRequiemPairERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemWeightedPair is IRequiemPairERC20 {\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n    function getSwapFee() external view returns (uint32);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address,\\n        address,\\n        uint32,\\n        uint32\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdc14681f3c19282e4ef1e79de84867b359df1d1554f3660dafce3d93fdd0af0c\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPairFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.10;\\n\\ninterface IRequiemWeightedPairFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function protocolFee() external view returns (uint256);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function isPair(address) external view returns (bool);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external returns (address pair);\\n\\n    function getWeightsAndSwapFee(address pair)\\n        external\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        );\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setProtocolFee(uint256) external;\\n}\\n\",\"keccak256\":\"0xf7e09bea1624240eaa03b3e6a22b6c1309b1c5a76345fd2609218883ed421e61\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x03a0e446df01556c28b09cd214d00cc4341c696d55c99b4a41164fe89911b750\",\"license\":\"MIT\"},\"contracts/libraries/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the EnumerableSet library from OpenZeppelin Contracts, altered to remove the base private functions that\\n// work on bytes32, replacing them with a native implementation for address and bytes32 values, to reduce bytecode \\n// size and runtime costs.\\n// The `unchecked_at` function was also added, which allows for more gas efficient data reads in some scenarios.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // The original OpenZeppelin implementation uses a generic Set type with bytes32 values: this was replaced with\\n    // AddressSet, which uses address keys natively, resulting in more dense bytecode.\\n\\n    struct AddressSet {\\n        // Storage of set values\\n        address[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(address => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // The swap is only necessary if we're not removing the last element\\n            if (toDeleteIndex != lastIndex) {\\n                address lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        RequiemErrors._require(set._values.length > index, Errors.OUT_OF_BOUNDS);\\n        return unchecked_at(set, index);\\n    }\\n\\n    /**\\n     * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\\n     * than {length}). O(1).\\n     *\\n     * This function performs one less storage read than {at}, but should only be used when `index` is known to be\\n     * within bounds.\\n     */\\n    function unchecked_at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return set._values[index];\\n    }\\n\\n    function rawIndexOf(AddressSet storage set, address value) internal view returns (uint256) {\\n        return set._indexes[value] - 1;\\n    }\\n\\n    struct Bytes32Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0 \\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not \\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // The swap is only necessary if we're not removing the last element\\n            if (toDeleteIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        RequiemErrors._require(set._values.length > index, Errors.OUT_OF_BOUNDS);\\n        return unchecked_at(set, index);\\n    }\\n\\n    /**\\n     * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\\n     * than {length}). O(1).\\n     *\\n     * This function performs one less storage read than {at}, but should only be used when `index` is known to be\\n     * within bounds.\\n     */\\n    function unchecked_at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    function rawIndexOf(Bytes32Set storage set, bytes32 value) internal view returns (uint256) {\\n        return set._indexes[value] - 1;\\n    }\\n}\\n\",\"keccak256\":\"0x83faf7e7c2b2109e683b506ca26aa6db815c86c991c3307ea0df60d032fb1479\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.10;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd3daf0e3416f5b273d855a27cf9460eb6b779508cd3f07fb3da89f202ee1d256\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.10;\\n\\n// solhint-disable avoid-low-level-calls, reason-string\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xcb1337f49b7a886980209ccd42806883db2bfa17b8dac448587f31ddd1147a1b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.10;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 private constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x2fcc622b784e07041c0000b5ae6d96bbe05a82dfd09dd2f5ceb0d3be223a80d9\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x37ebaca1c58a9daf307229c45122f12d603a95d1d92c1a8e7648b1910755bfa0\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063574f2ba311610097578063bfd63f4d11610066578063bfd63f4d14610219578063ca2229791461022c578063e5e31b1314610266578063f46901ed146102b857600080fd5b8063574f2ba3146101e0578063787dce3d146101e8578063a2e74af6146101fd578063b0e21e8a1461021057600080fd5b806316093fad116100d357806316093fad146101775780631e3dd18b14610197578063257671f5146101aa5780634b75f54f146101c057600080fd5b8063017e7e58146100fa578063094b74151461014457806314572adb14610164575b600080fd5b60005461011a9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b60035461011a9073ffffffffffffffffffffffffffffffffffffffff1681565b61011a6101723660046110fb565b6102cb565b61018a610185366004611153565b610935565b60405161013b919061118c565b61011a6101a53660046111e6565b610a48565b6101b2610a7f565b60405190815260200161013b565b60015461011a9073ffffffffffffffffffffffffffffffffffffffff1681565b6005546101b2565b6101fb6101f63660046111e6565b610ae7565b005b6101fb61020b3660046111ff565b610bf0565b6101b260025481565b61011a6102273660046110fb565b610cb8565b61023f61023a3660046111ff565b610dea565b6040805163ffffffff9485168152928416602084015292169181019190915260600161013b565b6102a86102743660046111ff565b73ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205467ffffffffffffffff16151590565b604051901515815260200161013b565b6101fb6102c63660046111ff565b610e60565b60008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f524c503a2049410000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60028363ffffffff1610158015610386575060628363ffffffff1611155b80156103a0575061039860028461121c565b63ffffffff16155b610406576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f524c503a20495700000000000000000000000000000000000000000000000000604482015260640161035f565b60018263ffffffff161015801561042557506107d08263ffffffff1611155b61048b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f524c503a20495346000000000000000000000000000000000000000000000000604482015260640161035f565b60008060008673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16106104d55786886104d0886064611295565b6104d9565b8787875b9194509250905073ffffffffffffffffffffffffffffffffffffffff831661055d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f524c503a205a4100000000000000000000000000000000000000000000000000604482015260640161035f565b60006040518060200161056f906110b0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f9091011660408190527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087811b8216602084015286901b1660348201527fffffffff0000000000000000000000000000000000000000000000000000000060e085811b8216604884015289901b16604c820152909150600090605001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600490935291205490915073ffffffffffffffffffffffffffffffffffffffff16156106da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f524c503a20504500000000000000000000000000000000000000000000000000604482015260640161035f565b808251602084016000f56040517fd0f6957900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152868116602483015263ffffffff80871660448401528a1660648301529197509087169063d0f6957990608401600060405180830381600087803b15801561076d57600080fd5b505af1158015610781573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff80871660009081526007602090815260408083209389168352929052206107c1915087610f28565b5073ffffffffffffffffffffffffffffffffffffffff80851660009081526007602090815260408083209389168352929052206107fe9087610f28565b50600081815260046020908152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff8c8116918217909355600580546001810182557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805490931682179092558086526006855294839020805463ffffffff8e81168b881b67ffffffff000000001681177fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909316831790935592548551978852928a16958701959095528584015260608501529051919287821692918916917f41f8736f924f57e464ededb08bf71f868f9d142885bbc73a1516db2be21fc4289181900360800190a3505050505050949350505050565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600760209081526040808320938516835292905220546060908067ffffffffffffffff811115610984576109846112ba565b6040519080825280602002602001820160405280156109ad578160200160208202803683370190505b50915060005b81811015610a405773ffffffffffffffffffffffffffffffffffffffff80861660009081526007602090815260408083209388168352929052206109f79082610fce565b838281518110610a0957610a096112e9565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280610a3881611318565b9150506109b3565b505092915050565b60058181548110610a5857600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b604051610a8e602082016110b0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f909101166040819052610ace9190602001611351565b6040516020818303038152906040528051906020012081565b60035473ffffffffffffffffffffffffffffffffffffffff163314610b68576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f524c503a20460000000000000000000000000000000000000000000000000000604482015260640161035f565b801580610b8557506127108110158015610b855750620186a08111155b610beb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f524c503a20495046000000000000000000000000000000000000000000000000604482015260640161035f565b600255565b60035473ffffffffffffffffffffffffffffffffffffffff163314610c71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f524c503a20460000000000000000000000000000000000000000000000000000604482015260640161035f565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000806000808673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1610610d03578688610cfe886064611295565b610d07565b8787875b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085811b8216602084015284901b1660348201527fffffffff0000000000000000000000000000000000000000000000000000000060e083811b821660488401528a901b16604c8201529295509093509150600090605001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000908152600490925290205473ffffffffffffffffffffffffffffffffffffffff169998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660205260408120548190819067ffffffffffffffff168015610e465763ffffffff602082901c169350905080610e3f846064611295565b9250610e57565b603280601e93509350935050610e59565b505b9193909250565b60035473ffffffffffffffffffffffffffffffffffffffff163314610ee1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f524c503a20460000000000000000000000000000000000000000000000000000604482015260640161035f565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600183016020526040812054610fc457508154600180820184556000848152602080822090930180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915585549082528286019093526040902091909155610fc8565b5060005b92915050565b8154600090610fe09083106064610ff1565b610fea8383611003565b9392505050565b81610fff57610fff81611043565b5050565b600082600001828154811061101a5761101a6112e9565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169392505050565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6145078061138d83390190565b73ffffffffffffffffffffffffffffffffffffffff811681146110df57600080fd5b50565b803563ffffffff811681146110f657600080fd5b919050565b6000806000806080858703121561111157600080fd5b843561111c816110bd565b9350602085013561112c816110bd565b925061113a604086016110e2565b9150611148606086016110e2565b905092959194509250565b6000806040838503121561116657600080fd5b8235611171816110bd565b91506020830135611181816110bd565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156111da57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016111a8565b50909695505050505050565b6000602082840312156111f857600080fd5b5035919050565b60006020828403121561121157600080fd5b8135610fea816110bd565b600063ffffffff8084168061125a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b92169190910692915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600063ffffffff838116908316818110156112b2576112b2611266565b039392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561134a5761134a611266565b5060010190565b6000825160005b818110156113725760208186018101518583015201611358565b81811115611381576000828501525b50919091019291505056fe60806040526001600b5534801561001557600080fd5b50604080518082018252601f81527f5265717569656d2050616972204c69717569646974792050726f7669646572006020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f4d949f5c4c4f80d7bdbde28a36135fecf440532cf0f2bb46c4801ec3299b1062818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556143ec8061011b6000396000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c80636a62784211610145578063cc56fd43116100bd578063d505accf1161008c578063dd62ed3e11610071578063dd62ed3e1461065e578063e9255bae14610689578063fff6cae91461069c57600080fd5b8063d505accf1461060f578063d54a8d181461062257600080fd5b8063cc56fd43146105a3578063d0f69579146105b6578063d21220a7146105c9578063d4cadf68146105e957600080fd5b806395d89b4111610114578063ba9a7a56116100f9578063ba9a7a5614610567578063bc25cf7714610570578063c45a01551461058357600080fd5b806395d89b4114610518578063a9059cbb1461055457600080fd5b80636a6278421461049d57806370a08231146104b05780637ecebe00146104d057806389afcb44146104f057600080fd5b806330adf81f116101d85780633644e515116101a75780634b75f54f1161018c5780634b75f54f1461046b5780635909c0d51461048b5780635a3d54931461049457600080fd5b80633644e5151461044f5780634ac00e031461045857600080fd5b806330adf81f146103b8578063313ce567146103df57806332bfe469146103f957806332fd54931461043c57600080fd5b80630dfe1681116102145780630dfe1681146103365780630e6d8bce1461037b57806318160ddd1461039c57806323b872dd146103a557600080fd5b8063022c0d9f1461024657806306fdde031461025b5780630902f1ac146102ad578063095ea7b314610313575b600080fd5b610259610254366004613e09565b6106a4565b005b6102976040518060400160405280601f81526020017f5265717569656d2050616972204c69717569646974792050726f76696465720081525081565b6040516102a49190613ecf565b60405180910390f35b600854604080516dffffffffffffffffffffffffffff80841682526e01000000000000000000000000000084041660208201527c010000000000000000000000000000000000000000000000000000000090920463ffffffff16908201526060016102a4565b610326610321366004613f20565b610732565b60405190151581526020016102a4565b6006546103569073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102a4565b61038e610389366004613f4c565b610748565b6040519081526020016102a4565b61038e60005481565b6103266103b3366004613fab565b6109dc565b61038e7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6103e7601281565b60405160ff90911681526020016102a4565b600d54600e54604080517c010000000000000000000000000000000000000000000000000000000090930463ffffffff90811684529091166020830152016102a4565b61025961044a366004613f4c565b610a8e565b61038e60035481565b61038e610466366004613f4c565b611373565b600c546103569073ffffffffffffffffffffffffffffffffffffffff1681565b61038e60095481565b61038e600a5481565b61038e6104ab366004613fec565b61158a565b61038e6104be366004613fec565b60016020526000908152604090205481565b61038e6104de366004613fec565b60046020526000908152604090205481565b6105036104fe366004613fec565b611900565b604080519283526020830191909152016102a4565b6102976040518060400160405280600481526020017f52504c500000000000000000000000000000000000000000000000000000000081525081565b610326610562366004613f20565b611d53565b61038e6103e881565b61025961057e366004613fec565b611d60565b6005546103569073ffffffffffffffffffffffffffffffffffffffff1681565b61038e6105b1366004613fab565b611f22565b6102596105c436600461401d565b6120fe565b6007546103569073ffffffffffffffffffffffffffffffffffffffff1681565b600e54640100000000900463ffffffff1660405163ffffffff90911681526020016102a4565b61025961061d366004614075565b612357565b600d54604080516dffffffffffffffffffffffffffff80841682526e0100000000000000000000000000009093049092166020830152016102a4565b61038e61066c3660046140ec565b600260209081526000928352604080842090915290825290205481565b61038e610697366004613fab565b612642565b6102596127d5565b600b54600114610715576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204c00000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000600b556107258585856129a1565b50506001600b5550505050565b600061073f3384846131ea565b50600192915050565b6000600b546001146107b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204c000000000000000000000000000000000000000000000000604482015260640161070c565b6000600b81905560065473ffffffffffffffffffffffffffffffffffffffff888116911614908080808461084257600854600e54600d546dffffffffffffffffffffffffffff6e0100000000000000000000000000008404811693169163ffffffff908116917c010000000000000000000000000000000000000000000000000000000090041661089d565b600854600d54600e546dffffffffffffffffffffffffffff808416936e0100000000000000000000000000009004169163ffffffff7c0100000000000000000000000000000000000000000000000000000000909104811691165b600c54600e546040517fb19210b00000000000000000000000000000000000000000000000000000000081526dffffffffffffffffffffffffffff9687169a50949095169750919550935060009273ffffffffffffffffffffffffffffffffffffffff9091169163b19210b09161095f918e918a918a918a918a9163ffffffff64010000000090910416906004019586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b602060405180830381865afa15801561097c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a09190614125565b9050600080876109b2578260006109b6565b6000835b915091506109c582828c6129a1565b6001600b559e9d5050505050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610a795773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915281208054849290610a7390849061416d565b90915550505b610a84848484613259565b5060019392505050565b600b54600114610afa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204c000000000000000000000000000000000000000000000000604482015260640161070c565b6000600b819055600654819073ffffffffffffffffffffffffffffffffffffffff888116911614610b2d57836000610b31565b6000845b915091506000821180610b445750600081115b610baa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5245514c503a20494f4100000000000000000000000000000000000000000000604482015260640161070c565b6008546dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004168184108015610bf15750806dffffffffffffffffffffffffffff1683105b610c57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f5245514c503a20494c0000000000000000000000000000000000000000000000604482015260640161070c565b600654600754600091829173ffffffffffffffffffffffffffffffffffffffff918216919081169089168214801590610cbc57508073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b610d22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f5245514c503a2049540000000000000000000000000000000000000000000000604482015260640161070c565b8715610d3357610d33828a8a61332e565b8615610d4457610d44818a8961332e565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd29190614125565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290945073ffffffffffffffffffffffffffffffffffffffff8216906370a0823190602401602060405180830381865afa158015610e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e639190614125565b92505050600086856dffffffffffffffffffffffffffff16610e85919061416d565b8311610e92576000610eb6565b610eac876dffffffffffffffffffffffffffff871661416d565b610eb6908461416d565b90506000610ed4876dffffffffffffffffffffffffffff871661416d565b8311610ee1576000610f05565b610efb876dffffffffffffffffffffffffffff871661416d565b610f05908461416d565b90506000821180610f165750600081115b610f7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5245514c503a2049494100000000000000000000000000000000000000000000604482015260640161070c565b6000610f8a85612710614184565b90506000610f9a85612710614184565b9050831561102e57600e54600090610fc090640100000000900463ffffffff1686614184565b9050610fcc818461416d565b600d54909350610fed9082906dffffffffffffffffffffffffffff166141c1565b600d80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff92909216919091179055505b82156110c757600e5460009061105290640100000000900463ffffffff1685614184565b905061105e818361416d565b600d549092506110919082906e01000000000000000000000000000090046dffffffffffffffffffffffffffff166141c1565b600d600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550505b600d547c0100000000000000000000000000000000000000000000000000000000900463ffffffff16603281141561119b576111166dffffffffffffffffffffffffffff808a16908b16614184565b611124906305f5e100614184565b61112e8385614184565b1015611196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204b000000000000000000000000000000000000000000000000604482015260640161070c565b6112ee565b600c5473ffffffffffffffffffffffffffffffffffffffff166379c91b376111d56dffffffffffffffffffffffffffff8c16612710614184565b6111f16dffffffffffffffffffffffffffff8c16612710614184565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604481018690526064810185905263ffffffff8416608482015260a401602060405180830381865afa158015611264573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128891906141d9565b6112ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204b000000000000000000000000000000000000000000000000604482015260640161070c565b5050506112fd848488886134ce565b60408051838152602081018390529081018990526060810188905273ffffffffffffffffffffffffffffffffffffffff8a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600b555050505050505050505050565b6000600b546001146113e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204c000000000000000000000000000000000000000000000000604482015260640161070c565b6000600b81905560065473ffffffffffffffffffffffffffffffffffffffff888116911614908080808461146d57600854600e54600d546dffffffffffffffffffffffffffff6e0100000000000000000000000000008404811693169163ffffffff908116917c01000000000000000000000000000000000000000000000000000000009004166114c8565b600854600d54600e546dffffffffffffffffffffffffffff808416936e0100000000000000000000000000009004169163ffffffff7c0100000000000000000000000000000000000000000000000000000000909104811691165b600c54600e546040517f671a11b50000000000000000000000000000000000000000000000000000000081526dffffffffffffffffffffffffffff9687169a50949095169750919550935060009273ffffffffffffffffffffffffffffffffffffffff9091169163671a11b59161095f918e918a918a918a918a9163ffffffff64010000000090910416906004019586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b6000600b546001146115f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204c000000000000000000000000000000000000000000000000604482015260640161070c565b6000600b819055600854600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516dffffffffffffffffffffffffffff808516956e01000000000000000000000000000090950416939273ffffffffffffffffffffffffffffffffffffffff16916370a082319160248083019260209291908290030181865afa15801561169e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c29190614125565b6007546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291925060009173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175a9190614125565b905060006117786dffffffffffffffffffffffffffff86168461416d565b905060006117966dffffffffffffffffffffffffffff86168461416d565b90506117a28686613832565b50600054806117de576103e86117c06117bb8486614184565b613bcf565b6117ca919061416d565b97506117d960006103e8613c3f565b611833565b6118306dffffffffffffffffffffffffffff88166117fc8386614184565b611806919061422a565b6dffffffffffffffffffffffffffff88166118218486614184565b61182b919061422a565b613ce2565b97505b6000881161189d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5245514c503a20494c4d00000000000000000000000000000000000000000000604482015260640161070c565b6118a78989613c3f565b6118b3858589896134ce565b604080518481526020810184905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600b55509395945050505050565b600080600b5460011461196f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204c000000000000000000000000000000000000000000000000604482015260640161070c565b6000600b819055600854600654600754604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516dffffffffffffffffffffffffffff808616966e010000000000000000000000000000909604169473ffffffffffffffffffffffffffffffffffffffff94851694909316929184916370a08231916024808201926020929091908290030181865afa158015611a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a459190614125565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015611ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad99190614125565b30600090815260016020526040902054909150611af68787613832565b5060005480611b058584614184565b611b0f919061422a565b995080611b1c8484614184565b611b26919061422a565b985060008a118015611b385750600089115b611b9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5245514c503a20494c4200000000000000000000000000000000000000000000604482015260640161070c565b611ba83083613cfa565b611bb3868c8c61332e565b611bbe858c8b61332e565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8716906370a0823190602401602060405180830381865afa158015611c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4c9190614125565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290945073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015611cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdd9190614125565b9250611ceb84848a8a6134ce565b604080518b8152602081018b905273ffffffffffffffffffffffffffffffffffffffff8d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a350505050505050506001600b81905550915091565b600061073f338484613259565b600b54600114611dcc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204c000000000000000000000000000000000000000000000000604482015260640161070c565b6000600b556006546007546008546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9384169390921691611e9891849186916dffffffffffffffffffffffffffff169083906370a08231906024015b602060405180830381865afa158015611e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e899190614125565b611e93919061416d565b61332e565b6008546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152611f1891839186916e01000000000000000000000000000090046dffffffffffffffffffffffffffff169073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401611e48565b50506001600b5550565b600654600090819081908190819073ffffffffffffffffffffffffffffffffffffffff898116911614611fad57600854600e54600d546dffffffffffffffffffffffffffff6e0100000000000000000000000000008404811693169163ffffffff908116917c0100000000000000000000000000000000000000000000000000000000900416612008565b600854600d54600e546dffffffffffffffffffffffffffff808416936e0100000000000000000000000000009004169163ffffffff7c0100000000000000000000000000000000000000000000000000000000909104811691165b600c54600e546040517fb19210b0000000000000000000000000000000000000000000000000000000008152600481018d90526dffffffffffffffffffffffffffff96871660248201819052959096166044870181905263ffffffff8086166064890152808516608489015264010000000090920490911660a4870152939850929650909450925073ffffffffffffffffffffffffffffffffffffffff169063b19210b09060c4015b602060405180830381865afa1580156120ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f29190614125565b98975050505050505050565b60055473ffffffffffffffffffffffffffffffffffffffff16331461217f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a2046000000000000000000000000000000000000000000000000604482015260640161070c565b600680547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff8781169190911790925560078054909116918516919091179055600d80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff85811682029290921792839055612235920416606461423e565b600e805463ffffffff848116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909216931692909217919091179055600554604080517f4b75f54f000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691634b75f54f916004818101926020929091908290030181865afa1580156122e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230c9190614263565b600c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550505050565b428410156123c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f524c503a20455850495245440000000000000000000000000000000000000000604482015260640161070c565b60035473ffffffffffffffffffffffffffffffffffffffff8816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b91908761242183614280565b9091555060408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016124c29291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561254b573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158015906125c657508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b61262c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f524c503a20495300000000000000000000000000000000000000000000000000604482015260640161070c565b6126378989896131ea565b505050505050505050565b600654600090819081908190819073ffffffffffffffffffffffffffffffffffffffff8981169116146126cd57600854600e54600d546dffffffffffffffffffffffffffff6e0100000000000000000000000000008404811693169163ffffffff908116917c0100000000000000000000000000000000000000000000000000000000900416612728565b600854600d54600e546dffffffffffffffffffffffffffff808416936e0100000000000000000000000000009004169163ffffffff7c0100000000000000000000000000000000000000000000000000000000909104811691165b600c54600e546040517f671a11b5000000000000000000000000000000000000000000000000000000008152600481018d90526dffffffffffffffffffffffffffff96871660248201819052959096166044870181905263ffffffff8086166064890152808516608489015264010000000090920490911660a4870152939850929650909450925073ffffffffffffffffffffffffffffffffffffffff169063671a11b59060c4016120b1565b600b54600114612841576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204c000000000000000000000000000000000000000000000000604482015260640161070c565b6000600b556006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015261299a9173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156128b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128da9190614125565b6007546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296c9190614125565b6008546dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004166134ce565b6001600b55565b6000808411806129b15750600083115b612a17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5245514c503a20494f4100000000000000000000000000000000000000000000604482015260640161070c565b6008546dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004168186108015612a5e5750806dffffffffffffffffffffffffffff1685105b612ac4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f5245514c503a20494c0000000000000000000000000000000000000000000000604482015260640161070c565b600654600754600091829173ffffffffffffffffffffffffffffffffffffffff918216919081169088168214801590612b2957508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614155b612b8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f5245514c503a2049540000000000000000000000000000000000000000000000604482015260640161070c565b8915612ba057612ba082898c61332e565b8815612bb157612bb181898b61332e565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015612c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3f9190614125565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290945073ffffffffffffffffffffffffffffffffffffffff8216906370a0823190602401602060405180830381865afa158015612cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd09190614125565b92505050600088856dffffffffffffffffffffffffffff16612cf2919061416d565b8311612cff576000612d23565b612d19896dffffffffffffffffffffffffffff871661416d565b612d23908461416d565b90506000612d41896dffffffffffffffffffffffffffff871661416d565b8311612d4e576000612d72565b612d68896dffffffffffffffffffffffffffff871661416d565b612d72908461416d565b90506000821180612d835750600081115b612de9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5245514c503a2049494100000000000000000000000000000000000000000000604482015260640161070c565b6000612df785612710614184565b90506000612e0785612710614184565b90508315612e9b57600e54600090612e2d90640100000000900463ffffffff1686614184565b9050612e39818461416d565b600d54909350612e5a9082906dffffffffffffffffffffffffffff166141c1565b600d80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff92909216919091179055505b8215612f3457600e54600090612ebf90640100000000900463ffffffff1685614184565b9050612ecb818361416d565b600d54909250612efe9082906e01000000000000000000000000000090046dffffffffffffffffffffffffffff166141c1565b600d600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550505b600d547c0100000000000000000000000000000000000000000000000000000000900463ffffffff16603281141561300857612f836dffffffffffffffffffffffffffff808a16908b16614184565b612f91906305f5e100614184565b612f9b8385614184565b1015613003576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204b000000000000000000000000000000000000000000000000604482015260640161070c565b61315b565b600c5473ffffffffffffffffffffffffffffffffffffffff166379c91b376130426dffffffffffffffffffffffffffff8c16612710614184565b61305e6dffffffffffffffffffffffffffff8c16612710614184565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604481018690526064810185905263ffffffff8416608482015260a401602060405180830381865afa1580156130d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f591906141d9565b61315b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204b000000000000000000000000000000000000000000000000604482015260640161070c565b50505061316a848488886134ce565b60408051838152602081018390529081018b9052606081018a905273ffffffffffffffffffffffffffffffffffffffff89169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a360008a116131da57886131dc565b895b9a9950505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600160205260408120805483929061328e90849061416d565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040812080548392906132c89084906141c1565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161324c91815260200190565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283928716916133f591906142b9565b6000604051808303816000865af19150503d8060008114613432576040519150601f19603f3d011682016040523d82523d6000602084013e613437565b606091505b509150915081801561346157508051158061346157508080602001905181019061346191906141d9565b6134c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f5245514c503a2054460000000000000000000000000000000000000000000000604482015260640161070c565b5050505050565b600d547c0100000000000000000000000000000000000000000000000000000000900463ffffffff166dffffffffffffffffffffffffffff61351182606461423e565b6135219063ffffffff1687614184565b1115801561354c57506dffffffffffffffffffffffffffff61354963ffffffff831686614184565b11155b6135b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204f000000000000000000000000000000000000000000000000604482015260640161070c565b60006135c3640100000000426142d5565b6008549091506000906135fc907c0100000000000000000000000000000000000000000000000000000000900463ffffffff168361423e565b905060008163ffffffff1611801561362357506dffffffffffffffffffffffffffff851615155b801561363e57506dffffffffffffffffffffffffffff841615155b1561374157600061365084606461423e565b6136609063ffffffff16876142e9565b9050600061367463ffffffff8616876142e9565b90508263ffffffff166136ae8361368a84613d97565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690613dc8565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166136d69190614184565b600960008282546136e791906141c1565b909155505063ffffffff83166137008261368a85613d97565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166137289190614184565b600a600082825461373991906141c1565b909155505050505b6008805463ffffffff84167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff8a81166e0100000000000000000000000000009081027fffffffff000000000000000000000000000000000000000000000000000000009095168d83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a150505050505050565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156138a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c69190614263565b90506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061395b9190614125565b73ffffffffffffffffffffffffffffffffffffffff83161515935090506000806139ab600d546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000009092041690565b915091506000836dffffffffffffffffffffffffffff161180156139cc5750845b8015613a0257506000826dffffffffffffffffffffffffffff161180613a0257506000816dffffffffffffffffffffffffffff16115b15613b4757600d54600c54600080547c010000000000000000000000000000000000000000000000000000000090930463ffffffff1692909173ffffffffffffffffffffffffffffffffffffffff16906392aec23c908b8b86613a6681606461423e565b613a708c8c61431f565b613a7a8d8c61431f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b16815260048101979097526dffffffffffffffffffffffffffff9586166024880152938516604487015263ffffffff928316606487015291166084850152821660a48401521660c482015260e401602060405180830381865afa158015613b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b329190614125565b90508015613b4457613b448682613c3f565b50505b6dffffffffffffffffffffffffffff821615613b8657600d80547fffffffffffffffffffffffffffffffffffff00000000000000000000000000001690555b6dffffffffffffffffffffffffffff811615613bc557600d80547fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff1690555b5050505092915050565b60006003821115613c305750806000613be960028361422a565b613bf49060016141c1565b90505b81811015613c2a57905080600281613c0f818661422a565b613c1991906141c1565b613c23919061422a565b9050613bf7565b50919050565b8115613c3a575060015b919050565b80600080828254613c5091906141c1565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208054839290613c8a9084906141c1565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b6000818310613cf15781613cf3565b825b9392505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208054839290613d2f90849061416d565b9250508190555080600080828254613d47919061416d565b909155505060405181815260009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001613cd6565b6000613dc26e0100000000000000000000000000006dffffffffffffffffffffffffffff841661434c565b92915050565b6000613cf36dffffffffffffffffffffffffffff831684614387565b73ffffffffffffffffffffffffffffffffffffffff81168114613e0657600080fd5b50565b600080600080600060808688031215613e2157600080fd5b85359450602086013593506040860135613e3a81613de4565b9250606086013567ffffffffffffffff80821115613e5757600080fd5b818801915088601f830112613e6b57600080fd5b813581811115613e7a57600080fd5b896020828501011115613e8c57600080fd5b9699959850939650602001949392505050565b60005b83811015613eba578181015183820152602001613ea2565b83811115613ec9576000848401525b50505050565b6020815260008251806020840152613eee816040850160208701613e9f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008060408385031215613f3357600080fd5b8235613f3e81613de4565b946020939093013593505050565b600080600080600060a08688031215613f6457600080fd5b8535613f6f81613de4565b94506020860135613f7f81613de4565b935060408601359250606086013591506080860135613f9d81613de4565b809150509295509295909350565b600080600060608486031215613fc057600080fd5b8335613fcb81613de4565b92506020840135613fdb81613de4565b929592945050506040919091013590565b600060208284031215613ffe57600080fd5b8135613cf381613de4565b803563ffffffff81168114613c3a57600080fd5b6000806000806080858703121561403357600080fd5b843561403e81613de4565b9350602085013561404e81613de4565b925061405c60408601614009565b915061406a60608601614009565b905092959194509250565b600080600080600080600060e0888a03121561409057600080fd5b873561409b81613de4565b965060208801356140ab81613de4565b95506040880135945060608801359350608088013560ff811681146140cf57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156140ff57600080fd5b823561410a81613de4565b9150602083013561411a81613de4565b809150509250929050565b60006020828403121561413757600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561417f5761417f61413e565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156141bc576141bc61413e565b500290565b600082198211156141d4576141d461413e565b500190565b6000602082840312156141eb57600080fd5b81518015158114613cf357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082614239576142396141fb565b500490565b600063ffffffff8381169083168181101561425b5761425b61413e565b039392505050565b60006020828403121561427557600080fd5b8151613cf381613de4565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156142b2576142b261413e565b5060010190565b600082516142cb818460208701613e9f565b9190910192915050565b6000826142e4576142e46141fb565b500690565b60006dffffffffffffffffffffffffffff808316818516818304811182151516156143165761431661413e565b02949350505050565b60006dffffffffffffffffffffffffffff80841680614340576143406141fb565b92169190910492915050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff808316818516818304811182151516156143165761431661413e565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff80841680614340576143406141fb56fea2646970667358221220887dc81804ee18b33d659b976a5b237f13c44a02f506cc6bdbffe4c6d648474d64736f6c634300080a0033a26469706673582212205f5fff1bab38d7f766ff9c21a20830fd67a0aa74002abfaebbbfd84e02f818b464736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23151,
        "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23153,
        "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
        "label": "formula",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 23155,
        "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
        "label": "protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 23157,
        "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 23172,
        "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
        "label": "_pairSalts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 23175,
        "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 23179,
        "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
        "label": "_pairs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint64)"
      },
      {
        "astId": 23188,
        "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
        "label": "tokenPairs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_contract(IERC20)30555,t_mapping(t_contract(IERC20)30555,t_struct(AddressSet)37118_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)30555": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_contract(IERC20)30555,t_mapping(t_contract(IERC20)30555,t_struct(AddressSet)37118_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)30555",
        "label": "mapping(contract IERC20 => mapping(contract IERC20 => struct EnumerableSet.AddressSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)30555,t_struct(AddressSet)37118_storage)"
      },
      "t_mapping(t_contract(IERC20)30555,t_struct(AddressSet)37118_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)30555",
        "label": "mapping(contract IERC20 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)37118_storage"
      },
      "t_struct(AddressSet)37118_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 37113,
            "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 37117,
            "contract": "contracts/RequiemWeightedPairFactory.sol:RequiemWeightedPairFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}