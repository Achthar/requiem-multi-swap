{
  "address": "0x49E3c7e61e5de25Bd0c52aa6faebAa9700d45C68",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_formula",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x981096480174a979f977c5ce64354c7821f3b06d56935035dda79b74b8e97df4",
  "receipt": {
    "to": null,
    "from": "0x10E38dFfFCfdBaaf590D5A9958B01C9cfcF6A63B",
    "contractAddress": "0x49E3c7e61e5de25Bd0c52aa6faebAa9700d45C68",
    "transactionIndex": 0,
    "gasUsed": "2982160",
    "logsBloom": "0x
    "blockHash": "0x9b851512b0aee1c6a7bfa4f58934265ab2b4f438e2ee955500e425016547cdcd",
    "transactionHash": "0x981096480174a979f977c5ce64354c7821f3b06d56935035dda79b74b8e97df4",
    "logs": [],
    "blockNumber": 2421753,
    "cumulativeGasUsed": "2982160",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x10E38dFfFCfdBaaf590D5A9958B01C9cfcF6A63B",
    "0xb9B260D0031a0E10C106FF85ad4691C694A4E778"
  ],
  "solcInputHash": "2af3591c91b85899e2a95c10a4d6adb3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_formula\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemFactory.sol\":\"RequiemFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RequiemERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IRequiemERC20.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\n\\ncontract RequiemERC20 is IRequiemERC20 {\\n    using SafeMath for uint256;\\n\\n    string public constant name = \\\"Requiem Liquidity Provider\\\";\\n    string public constant symbol = \\\"FLP\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    bytes32 public override DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    constructor() {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"), keccak256(bytes(name)), keccak256(bytes(\\\"1\\\")), chainId, address(this))\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"FLP: EXPIRED\\\");\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"FLP: INVALID_SIGNATURE\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x8b2fc0e759bcb2629fc94dbe89a921d4a6a4d2da1b884342833b7e7c1aa15ffc\",\"license\":\"MIT\"},\"contracts/RequiemFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IRequiemFactory.sol\\\";\\nimport \\\"./RequiemPair.sol\\\";\\n\\ncontract RequiemFactory is IRequiemFactory {\\n    address public feeTo;\\n    address public formula;\\n    uint256 public protocolFee;\\n    address public feeToSetter;\\n\\n    mapping(bytes32 => address) private _pairSalts;\\n    address[] public allPairs;\\n    mapping(address => uint64) private _pairs;\\n\\n    constructor(address _feeToSetter, address _formula) {\\n        feeToSetter = _feeToSetter;\\n        formula = _formula;\\n    }\\n\\n    function isPair(address b) external view returns (bool) {\\n        return _pairs[b] > 0;\\n    }\\n\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external view returns (address pair) {\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0, swapFee));\\n        pair = _pairSalts[salt];\\n    }\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external returns (address pair) {\\n        require(tokenA != tokenB, \\\"FLP: IDENTICAL_ADDRESSES\\\");\\n        require(tokenWeightA >= 2 && tokenWeightA <= 98 && (tokenWeightA % 2) == 0, \\\"FLP: INVALID_TOKEN_WEIGHT\\\");\\n        // swap fee from [0.01% - 20%]\\n        require(swapFee >= 1 && swapFee <= 2000, \\\"FLP: INVALID_SWAP_FEE\\\");\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        require(token0 != address(0), \\\"FLP: ZERO_ADDRESS\\\");\\n        // single check is sufficient\\n        bytes memory bytecode = type(RequiemPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0, swapFee));\\n        require(_pairSalts[salt] == address(0), \\\"FLP: PAIR_EXISTS\\\");\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IRequiemPair(pair).initialize(token0, token1, tokenWeight0, swapFee);\\n        _pairSalts[salt] = address(pair);\\n        allPairs.push(pair);\\n        uint64 weightAndFee = uint64(swapFee);\\n        weightAndFee |= uint64(tokenWeight0) << 32;\\n        _pairs[address(pair)] = weightAndFee;\\n        emit PairCreated(token0, token1, pair, tokenWeight0, swapFee, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, \\\"FLP: FORBIDDEN\\\");\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, \\\"FLP: FORBIDDEN\\\");\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function setProtocolFee(uint256 _protocolFee) external {\\n        require(msg.sender == feeToSetter, \\\"FLP: FORBIDDEN\\\");\\n        require(_protocolFee == 0 || (_protocolFee >= 10000 && _protocolFee <= 100000), \\\"FLP: Invalid Protocol fee\\\");\\n        protocolFee = _protocolFee;\\n    }\\n\\n    function getWeightsAndSwapFee(address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        )\\n    {\\n        uint64 weightAndFee = _pairs[pair];\\n        if (weightAndFee > 0) {\\n            swapFee = uint32(weightAndFee);\\n            tokenWeight0 = uint32(weightAndFee >> 32);\\n            tokenWeight1 = 100 - tokenWeight0;\\n        } else {\\n            // Default is 0.3%\\n            return (50, 50, 30);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x33d9165474d2d5ce82ebf3e298acebb3e71f7531d3b40c5624b37002e48a5f8b\",\"license\":\"MIT\"},\"contracts/RequiemPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IRequiemPair.sol\\\";\\nimport \\\"./interfaces/IRequiemFormula.sol\\\";\\nimport \\\"./RequiemERC20.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IRequiemFactory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Callee.sol\\\";\\n\\ncontract RequiemPair is IRequiemPair, RequiemERC20 {\\n    using SafeMath  for uint;\\n    using UQ112x112 for uint224;\\n\\n    uint public constant MINIMUM_LIQUIDITY = 10 ** 3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    \\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n    uint public price0CumulativeLast;\\n    uint public price1CumulativeLast;\\n    uint private unlocked = 1;\\n    address public formula;\\n\\n    uint112 private collectedFee0;           // uses single storage slot, accessible via getReserves\\n    uint112 private collectedFee1;           // uses single storage slot, accessible via getReserves\\n    uint32 private tokenWeight0;\\n\\n    uint32 private swapFee;\\n\\n    modifier lock() {\\n        require(unlocked == 1, \\\"REQLP: LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function getCollectedFees() public view returns (uint112 _collectedFee0, uint112 _collectedFee1) {\\n        _collectedFee0 = collectedFee0;\\n        _collectedFee1 = collectedFee1;\\n    }\\n\\n    function getTokenWeights() public view returns (uint32 _tokenWeight0, uint32 _tokenWeight1) {\\n        _tokenWeight0 = tokenWeight0;\\n        _tokenWeight1 = 100 - tokenWeight0;\\n    }\\n\\n    function getSwapFee() public view returns (uint32 _swapFee) {\\n        _swapFee = swapFee;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"REQLP: TRANSFER_FAILED\\\");\\n    }\\n\\n    constructor() {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1, uint32 _tokenWeight0, uint32 _swapFee) external {\\n        require(msg.sender == factory, \\\"REQLP: FORBIDDEN\\\");\\n        // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n        tokenWeight0 = _tokenWeight0;\\n        swapFee = _swapFee;\\n        formula = IRequiemFactory(factory).formula();\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\\n        uint32 _tokenWeight0 = tokenWeight0;\\n        require(balance0 * (100 - _tokenWeight0) <= type(uint112).max && balance1 * _tokenWeight0 <= type(uint112).max, \\\"REQLP: OVERFLOW\\\");\\n        uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n        // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            uint112 mReserve0 = _reserve0 * (100 - _tokenWeight0);\\n            uint112 mReserve1 = _reserve1 * _tokenWeight0;\\n            price0CumulativeLast += uint(UQ112x112.encode(mReserve1).uqdiv(mReserve0)) * timeElapsed;\\n            price1CumulativeLast += uint(UQ112x112.encode(mReserve0).uqdiv(mReserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IRequiemFactory(factory).feeTo();\\n        uint112 protocolFee = uint112(IRequiemFactory(factory).protocolFee());\\n        feeOn = feeTo != address(0);\\n        (uint112 _collectedFee0, uint112 _collectedFee1) = getCollectedFees();\\n        if (protocolFee > 0 && feeOn && (_collectedFee0 > 0 || _collectedFee1 > 0)) {\\n            uint32 _tokenWeight0 = tokenWeight0;\\n            uint liquidity = IRequiemFormula(formula).mintLiquidityFee(\\n                totalSupply, _reserve0, _reserve1,\\n                _tokenWeight0, 100 - _tokenWeight0,\\n                _collectedFee0 / protocolFee, _collectedFee1 / protocolFee\\n            );\\n            if (liquidity > 0) _mint(feeTo, liquidity);\\n        }\\n        if (_collectedFee0 > 0) collectedFee0 = 0;\\n        if (_collectedFee1 > 0) collectedFee1 = 0;\\n    }\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        uint balance0 = IERC20(token0).balanceOf(address(this));\\n        uint balance1 = IERC20(token1).balanceOf(address(this));\\n        uint amount0 = balance0.sub(_reserve0);\\n        uint amount1 = balance1.sub(_reserve1);\\n        _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply;\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, \\\"REQLP: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint amount0, uint amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint liquidity = balanceOf[address(this)];\\n        _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply;// using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply;// using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, \\\"REQLP: INSUFFICIENT_LIQUIDITY_BURNED\\\");\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, \\\"REQLP: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint112 _reserve0 = reserve0; // gas savings\\n        uint112 _reserve1 = reserve1; // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"REQLP: INSUFFICIENT_LIQUIDITY\\\");\\n\\n        uint balance0;\\n        uint balance1;\\n        { // scope for _token{0,1}, avoids stack too deep errors\\n        address _token0 = token0;\\n        address _token1 = token1;\\n        require(to != _token0 && to != _token1, \\\"REQLP: INVALID_TO\\\");\\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n        if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, \\\"REQLP: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint balance0Adjusted = balance0.mul(10000);\\n            uint balance1Adjusted = balance1.mul(10000);\\n            { // avoids stack too deep errors\\n                if (amount0In > 0) {\\n                    uint amount0InFee = amount0In.mul(swapFee);\\n                    balance0Adjusted = balance0Adjusted.sub(amount0InFee);\\n                    collectedFee0 = uint112(uint(collectedFee0).add(amount0InFee));\\n                }\\n                if (amount1In > 0) {\\n                    uint amount1InFee = amount1In.mul(swapFee);\\n                    balance1Adjusted = balance1Adjusted.sub(amount1InFee);\\n                    collectedFee1 = uint112(uint(collectedFee1).add(amount1InFee));\\n                }\\n                uint32 _tokenWeight0 = tokenWeight0;// gas savings\\n                if (_tokenWeight0 == 50) { // gas savings for pair 50/50\\n                    require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(10000**2), \\\"REQLP: K\\\");\\n                } else {\\n                    require(IRequiemFormula(formula).ensureConstantValue(uint(_reserve0).mul(10000), uint(_reserve1).mul(10000), balance0Adjusted, balance1Adjusted, _tokenWeight0), \\\"REQLP: K\\\");\\n                }\\n            }\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n}\\n\",\"keccak256\":\"0xe317c4bc3953a467be19d827d86dc8cc4ab3ecd776bb7e46909e57e56408318e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb55c91551ef864f86edd296378fc3430f19798c0d1de468ff772a83a842df24c\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0xe04488fd0e667e3af01de45b2fbdd948bada51d2c1398926c208505f773d9926\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\ninterface IRequiemFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint);\\n    function feeTo() external view returns (address);\\n    function formula() external view returns (address);\\n    function protocolFee() external view returns (uint);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function isPair(address) external view returns (bool);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external returns (address pair);\\n    function getWeightsAndSwapFee(address pair) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setProtocolFee(uint) external;\\n}\\n\",\"keccak256\":\"0x500ff0062150432105415e938dcaa0d64b666c224764c4cb901137ce45204b5d\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.5.16;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IRequiemFormula {\\n\\n    function getReserveAndWeights(address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getPairAmountIn(address pair, address tokenIn, uint amountOut) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getPairAmountOut(address pair, address tokenIn, uint amountIn) external view returns (uint amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x8a32e1c404f6a93f17cf6151173ff21fedb58abe50a6635cb10f47780f044c98\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IRequiemPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IRequiemERC20.sol\\\";\\n\\ninterface IRequiemPair is IRequiemERC20 {\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n    function getSwapFee() external view returns (uint32);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address,\\n        address,\\n        uint32,\\n        uint32\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc88df44cb82ceeb98805481ebad2a38cd6dcc9950ab00728576ebd11d6638969\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x03a0e446df01556c28b09cd214d00cc4341c696d55c99b4a41164fe89911b750\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0a0a3dba77df0880faa55c0415e5b12d4c955d69543fb69887702ff1c8fb60a\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n    function div(uint a, uint b) internal pure returns (uint c) {\\n        require(b > 0, \\\"ds-math-division-by-zero\\\");\\n        c = a / b;\\n    }\\n}\\n\",\"keccak256\":\"0xac02044b4e30134dcc8191e3a8c2f0dbba60dc29c99d97fdf20fc6b07df48e96\",\"license\":\"MIT\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0xff91bb395bc9766fd6b772069900c09ade711a8fc2e24b3389942128a23b2295\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516134dd3803806134dd83398101604081905261002f9161007c565b600380546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b61341f806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063787dce3d1161008c578063bfd63f4d11610066578063bfd63f4d14610193578063ca222979146101a6578063e5e31b13146101e0578063f46901ed1461022557600080fd5b8063787dce3d14610162578063a2e74af614610177578063b0e21e8a1461018a57600080fd5b8063017e7e58146100d4578063094b74151461010457806314572adb146101175780631e3dd18b1461012a5780634b75f54f1461013d578063574f2ba314610150575b600080fd5b6000546100e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6003546100e7906001600160a01b031681565b6100e76101253660046108d4565b610238565b6100e7610138366004610928565b610645565b6001546100e7906001600160a01b031681565b6005545b6040519081526020016100fb565b610175610170366004610928565b61066f565b005b610175610185366004610941565b610707565b61015460025481565b6100e76101a13660046108d4565b610753565b6101b96101b4366004610941565b6107e2565b6040805163ffffffff948516815292841660208401529216918101919091526060016100fb565b6102156101ee366004610941565b6001600160a01b031660009081526006602052604090205467ffffffffffffffff16151590565b60405190151581526020016100fb565b610175610233366004610941565b61084b565b6000836001600160a01b0316856001600160a01b031614156102a15760405162461bcd60e51b815260206004820152601860248201527f464c503a204944454e544943414c5f414444524553534553000000000000000060448201526064015b60405180910390fd5b60028363ffffffff16101580156102bf575060628363ffffffff1611155b80156102d957506102d1600284610963565b63ffffffff16155b6103255760405162461bcd60e51b815260206004820152601960248201527f464c503a20494e56414c49445f544f4b454e5f574549474854000000000000006044820152606401610298565b60018263ffffffff161015801561034457506107d08263ffffffff1611155b6103885760405162461bcd60e51b8152602060048201526015602482015274464c503a20494e56414c49445f535741505f46454560581b6044820152606401610298565b6000806000866001600160a01b0316886001600160a01b0316106103b85786886103b3886064610994565b6103bc565b8787875b919450925090506001600160a01b03831661040d5760405162461bcd60e51b8152602060048201526011602482015270464c503a205a45524f5f4144445245535360781b6044820152606401610298565b60006040518060200161041f90610897565b6020820181038252601f19601f82011660405250905060008484848960405160200161044e94939291906109c7565b60408051601f198184030181529181528151602092830120600081815260049093529120549091506001600160a01b0316156104bf5760405162461bcd60e51b815260206004820152601060248201526f464c503a20504149525f45584953545360801b6044820152606401610298565b808251602084016000f560405163d0f6957960e01b81526001600160a01b038781166004830152868116602483015263ffffffff80871660448401528a1660648301529197509087169063d0f6957990608401600060405180830381600087803b15801561052c57600080fd5b505af1158015610540573d6000803e3d6000fd5b505050600082815260046020908152604080832080546001600160a01b03199081166001600160a01b038d8116918217909355600580546001810182557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805490931682179092558086526006855294839020805463ffffffff8f81168c881b67ffffffff0000000016811767ffffffffffffffff19909316831790935592548551978852928b169587019590955292850192909252606084019190915290925086811691908816907f41f8736f924f57e464ededb08bf71f868f9d142885bbc73a1516db2be21fc4289060800160405180910390a3505050505050949350505050565b6005818154811061065557600080fd5b6000918252602090912001546001600160a01b0316905081565b6003546001600160a01b031633146106995760405162461bcd60e51b815260040161029890610a0e565b8015806106b6575061271081101580156106b65750620186a08111155b6107025760405162461bcd60e51b815260206004820152601960248201527f464c503a20496e76616c69642050726f746f636f6c20666565000000000000006044820152606401610298565b600255565b6003546001600160a01b031633146107315760405162461bcd60e51b815260040161029890610a0e565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600080600080866001600160a01b0316886001600160a01b03161061078457868861077f886064610994565b610788565b8787875b9250925092506000838383886040516020016107a794939291906109c7565b60408051601f198184030181529181528151602092830120600090815260049092529020546001600160a01b03169998505050505050505050565b6001600160a01b0381166000908152600660205260408120548190819067ffffffffffffffff1680156108315763ffffffff602082901c16935090508061082a846064610994565b9250610842565b603280601e93509350935050610844565b505b9193909250565b6003546001600160a01b031633146108755760405162461bcd60e51b815260040161029890610a0e565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6129b380610a3783390190565b80356001600160a01b03811681146108bb57600080fd5b919050565b803563ffffffff811681146108bb57600080fd5b600080600080608085870312156108ea57600080fd5b6108f3856108a4565b9350610901602086016108a4565b925061090f604086016108c0565b915061091d606086016108c0565b905092959194509250565b60006020828403121561093a57600080fd5b5035919050565b60006020828403121561095357600080fd5b61095c826108a4565b9392505050565b600063ffffffff8084168061098857634e487b7160e01b600052601260045260246000fd5b92169190910692915050565b600063ffffffff838116908316818110156109bf57634e487b7160e01b600052601160045260246000fd5b039392505050565b6bffffffffffffffffffffffff19606095861b811682529390941b90921660148401526001600160e01b031960e091821b8116602885015291901b16602c82015260300190565b6020808252600e908201526d2326281d102327a92124a22222a760911b60408201526060019056fe60806040526001600b5534801561001557600080fd5b50604080518082018252601a81527f5265717569656d204c69717569646974792050726f76696465720000000000006020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f2e1adfbb118fada029d9623aa0ed8dd2318a25545f57095be55dcbd209508e12818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556128988061011b6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806370a0823111610104578063c45a0155116100a2578063d505accf11610071578063d505accf146104a3578063d54a8d18146104b6578063dd62ed3e146104e0578063fff6cae91461050b57600080fd5b8063c45a015514610452578063d0f6957914610465578063d21220a714610478578063d4cadf681461048b57600080fd5b806395d89b41116100de57806395d89b4114610401578063a9059cbb14610423578063ba9a7a5614610436578063bc25cf771461043f57600080fd5b806370a08231146103995780637ecebe00146103b957806389afcb44146103d957600080fd5b806330adf81f1161017c5780634b75f54f1161014b5780634b75f54f146103615780635909c0d5146103745780635a3d54931461037d5780636a6278421461038657600080fd5b806330adf81f146102f2578063313ce5671461031957806332bfe469146103335780633644e5151461035857600080fd5b8063095ea7b3116101b8578063095ea7b31461027a5780630dfe16811461029d57806318160ddd146102c857806323b872dd146102df57600080fd5b8063022c0d9f146101df57806306fdde03146101f45780630902f1ac14610246575b600080fd5b6101f26101ed366004612365565b610513565b005b6102306040518060400160405280601a81526020017f5265717569656d204c69717569646974792050726f766964657200000000000081525081565b60405161023d919061242b565b60405180910390f35b61024e610bfa565b604080516001600160701b03948516815293909216602084015263ffffffff169082015260600161023d565b61028d61028836600461245e565b610c24565b604051901515815260200161023d565b6006546102b0906001600160a01b031681565b6040516001600160a01b03909116815260200161023d565b6102d160005481565b60405190815260200161023d565b61028d6102ed36600461248a565b610c3b565b6102d17f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610321601281565b60405160ff909116815260200161023d565b61033b610ccf565b6040805163ffffffff93841681529290911660208301520161023d565b6102d160035481565b600c546102b0906001600160a01b031681565b6102d160095481565b6102d1600a5481565b6102d16103943660046124cb565b610cf2565b6102d16103a73660046124cb565b60016020526000908152604090205481565b6102d16103c73660046124cb565b60046020526000908152604090205481565b6103ec6103e73660046124cb565b610fa7565b6040805192835260208301919091520161023d565b610230604051806040016040528060038152602001620464c560ec1b81525081565b61028d61043136600461245e565b611317565b6102d16103e881565b6101f261044d3660046124cb565b611324565b6005546102b0906001600160a01b031681565b6101f26104733660046124fc565b611447565b6007546102b0906001600160a01b031681565b600e5460405163ffffffff909116815260200161023d565b6101f26104b1366004612554565b611597565b600d54604080516001600160701b038084168252600160701b90930490921660208301520161023d565b6102d16104ee3660046125cb565b600260209081526000928352604080842090915290825290205481565b6101f261179e565b600b5460011461053e5760405162461bcd60e51b815260040161053590612604565b60405180910390fd5b6000600b55841515806105515750600084115b6105a75760405162461bcd60e51b815260206004820152602160248201527f5245514c503a20494e53554646494349454e545f4f55545055545f414d4f554e6044820152601560fa1b6064820152608401610535565b6008546001600160701b0380821691600160701b90041681871080156105d55750806001600160701b031686105b6106215760405162461bcd60e51b815260206004820152601d60248201527f5245514c503a20494e53554646494349454e545f4c49515549444954590000006044820152606401610535565b60065460075460009182916001600160a01b0391821691908116908916821480159061065f5750806001600160a01b0316896001600160a01b031614155b61069f5760405162461bcd60e51b81526020600482015260116024820152705245514c503a20494e56414c49445f544f60781b6044820152606401610535565b8a156106b0576106b0828a8d6118e0565b89156106c1576106c1818a8c6118e0565b861561072e576040516304347a1760e21b81526001600160a01b038a16906310d1e85c906106fb9033908f908f908e908e9060040161262b565b600060405180830381600087803b15801561071557600080fd5b505af1158015610729573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b15801561076d57600080fd5b505afa158015610781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a59190612677565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a082319060240160206040518083038186803b1580156107e757600080fd5b505afa1580156107fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081f9190612677565b92505050600089856001600160701b031661083a91906126a6565b8311610847576000610864565b61085a8a6001600160701b0387166126a6565b61086490846126a6565b9050600061087b8a6001600160701b0387166126a6565b83116108885760006108a5565b61089b8a6001600160701b0387166126a6565b6108a590846126a6565b905060008211806108b65750600081115b6109025760405162461bcd60e51b815260206004820181905260248201527f5245514c503a20494e53554646494349454e545f494e5055545f414d4f554e546044820152606401610535565b600061091085612710611a24565b9050600061092085612710611a24565b9050831561098a57600e5460009061094390869063ffffffff90811690611a2416565b905061094f8382611a8b565b600d54909350610968906001600160701b031682611ae1565b600d80546001600160701b0319166001600160701b0392909216919091179055505b82156109ff57600e546000906109ab90859063ffffffff90811690611a2416565b90506109b78282611a8b565b600d549092506109d790600160701b90046001600160701b031682611ae1565b600d600e6101000a8154816001600160701b0302191690836001600160701b03160217905550505b600d54600160e01b900463ffffffff166032811415610a8457610a3c6305f5e100610a366001600160701b038c8116908c16611a24565b90611a24565b610a468484611a24565b1015610a7f5760405162461bcd60e51b81526020600482015260086024820152675245514c503a204b60c01b6044820152606401610535565b610b84565b600c546001600160a01b03166379c91b37610aaa6001600160701b038c16612710611a24565b610abf6001600160701b038c16612710611a24565b6040516001600160e01b031960e085901b16815260048101929092526024820152604481018690526064810185905263ffffffff8416608482015260a40160206040518083038186803b158015610b1557600080fd5b505afa158015610b29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4d91906126bd565b610b845760405162461bcd60e51b81526020600482015260086024820152675245514c503a204b60c01b6044820152606401610535565b505050610b9384848888611b36565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600b55505050505050505050565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610c31338484611d8d565b5060015b92915050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610cba576001600160a01b0384166000908152600260209081526040808320338452909152902054610c959083611a8b565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610cc5848484611def565b5060019392505050565b600d54600160e01b900463ffffffff166000610cec8260646126df565b90509091565b6000600b54600114610d165760405162461bcd60e51b815260040161053590612604565b6000600b81905580610d26610bfa565b506006546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610d7357600080fd5b505afa158015610d87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dab9190612677565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610df457600080fd5b505afa158015610e08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2c9190612677565b90506000610e43836001600160701b038716611a8b565b90506000610e5a836001600160701b038716611a8b565b9050610e668686611e95565b5060005480610ea157610e8d6103e8610e87610e828686611a24565b61217e565b90611a8b565b9750610e9c60006103e86121ee565b610ee8565b610ee56001600160701b038816610eb88584611a24565b610ec2919061271a565b6001600160701b038816610ed68585611a24565b610ee0919061271a565b61227d565b97505b60008811610f445760405162461bcd60e51b8152602060048201526024808201527f5245514c503a20494e53554646494349454e545f4c49515549444954595f4d496044820152631395115160e21b6064820152608401610535565b610f4e89896121ee565b610f5a85858989611b36565b604080518481526020810184905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600b55509395945050505050565b600080600b54600114610fcc5760405162461bcd60e51b815260040161053590612604565b6000600b81905580610fdc610bfa565b506006546007546040516370a0823160e01b81523060048201529395509193506001600160a01b039081169291169060009083906370a082319060240160206040518083038186803b15801561103157600080fd5b505afa158015611045573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110699190612677565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b1580156110ae57600080fd5b505afa1580156110c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e69190612677565b306000908152600160205260409020549091506111038787611e95565b50600054806111128386611a24565b61111c919061271a565b9950806111298385611a24565b611133919061271a565b985060008a1180156111455750600089115b61119d5760405162461bcd60e51b8152602060048201526024808201527f5245514c503a20494e53554646494349454e545f4c49515549444954595f42556044820152631493915160e21b6064820152608401610535565b6111a73083612295565b6111b2868c8c6118e0565b6111bd858c8b6118e0565b6040516370a0823160e01b81523060048201526001600160a01b038716906370a082319060240160206040518083038186803b1580156111fc57600080fd5b505afa158015611210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112349190612677565b6040516370a0823160e01b81523060048201529094506001600160a01b038616906370a082319060240160206040518083038186803b15801561127657600080fd5b505afa15801561128a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ae9190612677565b92506112bc84848a8a611b36565b604080518b8152602081018b90526001600160a01b038d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a350505050505050506001600b81905550915091565b6000610c31338484611def565b600b546001146113465760405162461bcd60e51b815260040161053590612604565b6000600b556006546007546008546040516370a0823160e01b81523060048201526001600160a01b0393841693909216916113f091849186916113eb916001600160701b039091169084906370a08231906024015b60206040518083038186803b1580156113b357600080fd5b505afa1580156113c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e879190612677565b6118e0565b6008546040516370a0823160e01b815230600482015261143d91839186916113eb91600160701b9091046001600160701b0316906001600160a01b038516906370a082319060240161139b565b50506001600b5550565b6005546001600160a01b031633146114945760405162461bcd60e51b815260206004820152601060248201526f2922a8a6281d102327a92124a22222a760811b6044820152606401610535565b600680546001600160a01b038087166001600160a01b031992831617909255600780548684169216919091179055600d805463ffffffff808616600160e01b026001600160e01b0390921691909117909155600e805491841663ffffffff1990921691909117905560055460408051634b75f54f60e01b815290519190921691634b75f54f916004808301926020929190829003018186803b15801561153957600080fd5b505afa15801561154d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611571919061272e565b600c80546001600160a01b0319166001600160a01b039290921691909117905550505050565b428410156115d65760405162461bcd60e51b815260206004820152600c60248201526b1193140e881156141254915160a21b6044820152606401610535565b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876116298361274b565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016116a292919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561170d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906117435750886001600160a01b0316816001600160a01b0316145b6117885760405162461bcd60e51b8152602060048201526016602482015275464c503a20494e56414c49445f5349474e415455524560501b6044820152606401610535565b611793898989611d8d565b505050505050505050565b600b546001146117c05760405162461bcd60e51b815260040161053590612604565b6000600b556006546040516370a0823160e01b81523060048201526118d9916001600160a01b0316906370a082319060240160206040518083038186803b15801561180a57600080fd5b505afa15801561181e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118429190612677565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561188557600080fd5b505afa158015611899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bd9190612677565b6008546001600160701b0380821691600160701b900416611b36565b6001600b55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1790529151600092839287169161196c9190612766565b6000604051808303816000865af19150503d80600081146119a9576040519150601f19603f3d011682016040523d82523d6000602084013e6119ae565b606091505b50915091508180156119d85750805115806119d85750808060200190518101906119d891906126bd565b611a1d5760405162461bcd60e51b815260206004820152601660248201527514915453140e881514905394d1915497d1905253115160521b6044820152606401610535565b5050505050565b6000811580611a4857508282611a3a8183612782565b9250611a46908361271a565b145b610c355760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610535565b600082611a9883826126a6565b9150811115610c355760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606401610535565b600082611aee83826127a1565b9150811015610c355760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610535565b600d54600160e01b900463ffffffff166001600160701b03611b598260646126df565b611b699063ffffffff1687612782565b11158015611b8d57506001600160701b03611b8a63ffffffff831686612782565b11155b611bcb5760405162461bcd60e51b815260206004820152600f60248201526e5245514c503a204f564552464c4f5760881b6044820152606401610535565b6000611bdc640100000000426127b9565b600854909150600090611bfc90600160e01b900463ffffffff16836126df565b905060008163ffffffff16118015611c1c57506001600160701b03851615155b8015611c3057506001600160701b03841615155b15611cf4576000611c428460646126df565b611c529063ffffffff16876127cd565b90506000611c6663ffffffff8616876127cd565b90508263ffffffff16611c8b83611c7c8461231f565b6001600160e01b031690612338565b6001600160e01b0316611c9e9190612782565b60096000828254611caf91906127a1565b909155505063ffffffff8316611cc882611c7c8561231f565b6001600160e01b0316611cdb9190612782565b600a6000828254611cec91906127a1565b909155505050505b6008805463ffffffff8416600160e01b026001600160e01b036001600160701b038a8116600160701b9081026001600160e01b03199095168d83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a150505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260016020526040902054611e129082611a8b565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611e419082611ae1565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611de29085815260200190565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611ee657600080fd5b505afa158015611efa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1e919061272e565b90506000600560009054906101000a90046001600160a01b03166001600160a01b031663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7057600080fd5b505afa158015611f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa89190612677565b6001600160a01b038316151593509050600080611fd9600d546001600160701b0380821692600160701b9092041690565b915091506000836001600160701b0316118015611ff35750845b801561201b57506000826001600160701b0316118061201b57506000816001600160701b0316115b1561212a57600d54600c5460008054600160e01b90930463ffffffff169290916001600160a01b0316906392aec23c908b8b866120598160646126df565b6120638c8c6127fc565b61206d8d8c6127fc565b6040516001600160e01b031960e08a901b16815260048101979097526001600160701b039586166024880152938516604487015263ffffffff928316606487015291166084850152821660a48401521660c482015260e40160206040518083038186803b1580156120dd57600080fd5b505afa1580156120f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121159190612677565b905080156121275761212786826121ee565b50505b6001600160701b0382161561214a57600d80546001600160701b03191690555b6001600160701b0381161561217457600d80546dffffffffffffffffffffffffffff60701b191690555b5050505092915050565b600060038211156121df575080600061219860028361271a565b6121a39060016127a1565b90505b818110156121d9579050806002816121be818661271a565b6121c891906127a1565b6121d2919061271a565b90506121a6565b50919050565b81156121e9575060015b919050565b6000546121fb9082611ae1565b60009081556001600160a01b0383168152600160205260409020546122209082611ae1565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906122719085815260200190565b60405180910390a35050565b600081831061228c578161228e565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546122b89082611a8b565b6001600160a01b038316600090815260016020526040812091909155546122df9082611a8b565b60009081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612271565b6000610c35600160701b6001600160701b038416612822565b600061228e6001600160701b03831684612848565b6001600160a01b038116811461236257600080fd5b50565b60008060008060006080868803121561237d57600080fd5b853594506020860135935060408601356123968161234d565b9250606086013567ffffffffffffffff808211156123b357600080fd5b818801915088601f8301126123c757600080fd5b8135818111156123d657600080fd5b8960208285010111156123e857600080fd5b9699959850939650602001949392505050565b60005b838110156124165781810151838201526020016123fe565b83811115612425576000848401525b50505050565b602081526000825180602084015261244a8160408501602087016123fb565b601f01601f19169190910160400192915050565b6000806040838503121561247157600080fd5b823561247c8161234d565b946020939093013593505050565b60008060006060848603121561249f57600080fd5b83356124aa8161234d565b925060208401356124ba8161234d565b929592945050506040919091013590565b6000602082840312156124dd57600080fd5b813561228e8161234d565b803563ffffffff811681146121e957600080fd5b6000806000806080858703121561251257600080fd5b843561251d8161234d565b9350602085013561252d8161234d565b925061253b604086016124e8565b9150612549606086016124e8565b905092959194509250565b600080600080600080600060e0888a03121561256f57600080fd5b873561257a8161234d565b9650602088013561258a8161234d565b95506040880135945060608801359350608088013560ff811681146125ae57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156125de57600080fd5b82356125e98161234d565b915060208301356125f98161234d565b809150509250929050565b6020808252600d908201526c14915453140e881313d0d2d151609a1b604082015260600190565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60006020828403121561268957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156126b8576126b8612690565b500390565b6000602082840312156126cf57600080fd5b8151801515811461228e57600080fd5b600063ffffffff838116908316818110156126fc576126fc612690565b039392505050565b634e487b7160e01b600052601260045260246000fd5b60008261272957612729612704565b500490565b60006020828403121561274057600080fd5b815161228e8161234d565b600060001982141561275f5761275f612690565b5060010190565b600082516127788184602087016123fb565b9190910192915050565b600081600019048311821515161561279c5761279c612690565b500290565b600082198211156127b4576127b4612690565b500190565b6000826127c8576127c8612704565b500690565b60006001600160701b03808316818516818304811182151516156127f3576127f3612690565b02949350505050565b60006001600160701b038084168061281657612816612704565b92169190910492915050565b60006001600160e01b03828116848216811515828404821116156127f3576127f3612690565b60006001600160e01b03838116806128165761281661270456fea2646970667358221220a632c086b7032daae8d09ae54d54d28a898412942dabf045bc2f19f63acb718564736f6c63430008090033a2646970667358221220a3943c1860b455ebe687e6bb87e796b424652fc628aeeb99cf15047d6ec3c99164736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063787dce3d1161008c578063bfd63f4d11610066578063bfd63f4d14610193578063ca222979146101a6578063e5e31b13146101e0578063f46901ed1461022557600080fd5b8063787dce3d14610162578063a2e74af614610177578063b0e21e8a1461018a57600080fd5b8063017e7e58146100d4578063094b74151461010457806314572adb146101175780631e3dd18b1461012a5780634b75f54f1461013d578063574f2ba314610150575b600080fd5b6000546100e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6003546100e7906001600160a01b031681565b6100e76101253660046108d4565b610238565b6100e7610138366004610928565b610645565b6001546100e7906001600160a01b031681565b6005545b6040519081526020016100fb565b610175610170366004610928565b61066f565b005b610175610185366004610941565b610707565b61015460025481565b6100e76101a13660046108d4565b610753565b6101b96101b4366004610941565b6107e2565b6040805163ffffffff948516815292841660208401529216918101919091526060016100fb565b6102156101ee366004610941565b6001600160a01b031660009081526006602052604090205467ffffffffffffffff16151590565b60405190151581526020016100fb565b610175610233366004610941565b61084b565b6000836001600160a01b0316856001600160a01b031614156102a15760405162461bcd60e51b815260206004820152601860248201527f464c503a204944454e544943414c5f414444524553534553000000000000000060448201526064015b60405180910390fd5b60028363ffffffff16101580156102bf575060628363ffffffff1611155b80156102d957506102d1600284610963565b63ffffffff16155b6103255760405162461bcd60e51b815260206004820152601960248201527f464c503a20494e56414c49445f544f4b454e5f574549474854000000000000006044820152606401610298565b60018263ffffffff161015801561034457506107d08263ffffffff1611155b6103885760405162461bcd60e51b8152602060048201526015602482015274464c503a20494e56414c49445f535741505f46454560581b6044820152606401610298565b6000806000866001600160a01b0316886001600160a01b0316106103b85786886103b3886064610994565b6103bc565b8787875b919450925090506001600160a01b03831661040d5760405162461bcd60e51b8152602060048201526011602482015270464c503a205a45524f5f4144445245535360781b6044820152606401610298565b60006040518060200161041f90610897565b6020820181038252601f19601f82011660405250905060008484848960405160200161044e94939291906109c7565b60408051601f198184030181529181528151602092830120600081815260049093529120549091506001600160a01b0316156104bf5760405162461bcd60e51b815260206004820152601060248201526f464c503a20504149525f45584953545360801b6044820152606401610298565b808251602084016000f560405163d0f6957960e01b81526001600160a01b038781166004830152868116602483015263ffffffff80871660448401528a1660648301529197509087169063d0f6957990608401600060405180830381600087803b15801561052c57600080fd5b505af1158015610540573d6000803e3d6000fd5b505050600082815260046020908152604080832080546001600160a01b03199081166001600160a01b038d8116918217909355600580546001810182557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805490931682179092558086526006855294839020805463ffffffff8f81168c881b67ffffffff0000000016811767ffffffffffffffff19909316831790935592548551978852928b169587019590955292850192909252606084019190915290925086811691908816907f41f8736f924f57e464ededb08bf71f868f9d142885bbc73a1516db2be21fc4289060800160405180910390a3505050505050949350505050565b6005818154811061065557600080fd5b6000918252602090912001546001600160a01b0316905081565b6003546001600160a01b031633146106995760405162461bcd60e51b815260040161029890610a0e565b8015806106b6575061271081101580156106b65750620186a08111155b6107025760405162461bcd60e51b815260206004820152601960248201527f464c503a20496e76616c69642050726f746f636f6c20666565000000000000006044820152606401610298565b600255565b6003546001600160a01b031633146107315760405162461bcd60e51b815260040161029890610a0e565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600080600080866001600160a01b0316886001600160a01b03161061078457868861077f886064610994565b610788565b8787875b9250925092506000838383886040516020016107a794939291906109c7565b60408051601f198184030181529181528151602092830120600090815260049092529020546001600160a01b03169998505050505050505050565b6001600160a01b0381166000908152600660205260408120548190819067ffffffffffffffff1680156108315763ffffffff602082901c16935090508061082a846064610994565b9250610842565b603280601e93509350935050610844565b505b9193909250565b6003546001600160a01b031633146108755760405162461bcd60e51b815260040161029890610a0e565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6129b380610a3783390190565b80356001600160a01b03811681146108bb57600080fd5b919050565b803563ffffffff811681146108bb57600080fd5b600080600080608085870312156108ea57600080fd5b6108f3856108a4565b9350610901602086016108a4565b925061090f604086016108c0565b915061091d606086016108c0565b905092959194509250565b60006020828403121561093a57600080fd5b5035919050565b60006020828403121561095357600080fd5b61095c826108a4565b9392505050565b600063ffffffff8084168061098857634e487b7160e01b600052601260045260246000fd5b92169190910692915050565b600063ffffffff838116908316818110156109bf57634e487b7160e01b600052601160045260246000fd5b039392505050565b6bffffffffffffffffffffffff19606095861b811682529390941b90921660148401526001600160e01b031960e091821b8116602885015291901b16602c82015260300190565b6020808252600e908201526d2326281d102327a92124a22222a760911b60408201526060019056fe60806040526001600b5534801561001557600080fd5b50604080518082018252601a81527f5265717569656d204c69717569646974792050726f76696465720000000000006020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f2e1adfbb118fada029d9623aa0ed8dd2318a25545f57095be55dcbd209508e12818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556128988061011b6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806370a0823111610104578063c45a0155116100a2578063d505accf11610071578063d505accf146104a3578063d54a8d18146104b6578063dd62ed3e146104e0578063fff6cae91461050b57600080fd5b8063c45a015514610452578063d0f6957914610465578063d21220a714610478578063d4cadf681461048b57600080fd5b806395d89b41116100de57806395d89b4114610401578063a9059cbb14610423578063ba9a7a5614610436578063bc25cf771461043f57600080fd5b806370a08231146103995780637ecebe00146103b957806389afcb44146103d957600080fd5b806330adf81f1161017c5780634b75f54f1161014b5780634b75f54f146103615780635909c0d5146103745780635a3d54931461037d5780636a6278421461038657600080fd5b806330adf81f146102f2578063313ce5671461031957806332bfe469146103335780633644e5151461035857600080fd5b8063095ea7b3116101b8578063095ea7b31461027a5780630dfe16811461029d57806318160ddd146102c857806323b872dd146102df57600080fd5b8063022c0d9f146101df57806306fdde03146101f45780630902f1ac14610246575b600080fd5b6101f26101ed366004612365565b610513565b005b6102306040518060400160405280601a81526020017f5265717569656d204c69717569646974792050726f766964657200000000000081525081565b60405161023d919061242b565b60405180910390f35b61024e610bfa565b604080516001600160701b03948516815293909216602084015263ffffffff169082015260600161023d565b61028d61028836600461245e565b610c24565b604051901515815260200161023d565b6006546102b0906001600160a01b031681565b6040516001600160a01b03909116815260200161023d565b6102d160005481565b60405190815260200161023d565b61028d6102ed36600461248a565b610c3b565b6102d17f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610321601281565b60405160ff909116815260200161023d565b61033b610ccf565b6040805163ffffffff93841681529290911660208301520161023d565b6102d160035481565b600c546102b0906001600160a01b031681565b6102d160095481565b6102d1600a5481565b6102d16103943660046124cb565b610cf2565b6102d16103a73660046124cb565b60016020526000908152604090205481565b6102d16103c73660046124cb565b60046020526000908152604090205481565b6103ec6103e73660046124cb565b610fa7565b6040805192835260208301919091520161023d565b610230604051806040016040528060038152602001620464c560ec1b81525081565b61028d61043136600461245e565b611317565b6102d16103e881565b6101f261044d3660046124cb565b611324565b6005546102b0906001600160a01b031681565b6101f26104733660046124fc565b611447565b6007546102b0906001600160a01b031681565b600e5460405163ffffffff909116815260200161023d565b6101f26104b1366004612554565b611597565b600d54604080516001600160701b038084168252600160701b90930490921660208301520161023d565b6102d16104ee3660046125cb565b600260209081526000928352604080842090915290825290205481565b6101f261179e565b600b5460011461053e5760405162461bcd60e51b815260040161053590612604565b60405180910390fd5b6000600b55841515806105515750600084115b6105a75760405162461bcd60e51b815260206004820152602160248201527f5245514c503a20494e53554646494349454e545f4f55545055545f414d4f554e6044820152601560fa1b6064820152608401610535565b6008546001600160701b0380821691600160701b90041681871080156105d55750806001600160701b031686105b6106215760405162461bcd60e51b815260206004820152601d60248201527f5245514c503a20494e53554646494349454e545f4c49515549444954590000006044820152606401610535565b60065460075460009182916001600160a01b0391821691908116908916821480159061065f5750806001600160a01b0316896001600160a01b031614155b61069f5760405162461bcd60e51b81526020600482015260116024820152705245514c503a20494e56414c49445f544f60781b6044820152606401610535565b8a156106b0576106b0828a8d6118e0565b89156106c1576106c1818a8c6118e0565b861561072e576040516304347a1760e21b81526001600160a01b038a16906310d1e85c906106fb9033908f908f908e908e9060040161262b565b600060405180830381600087803b15801561071557600080fd5b505af1158015610729573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b15801561076d57600080fd5b505afa158015610781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a59190612677565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a082319060240160206040518083038186803b1580156107e757600080fd5b505afa1580156107fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081f9190612677565b92505050600089856001600160701b031661083a91906126a6565b8311610847576000610864565b61085a8a6001600160701b0387166126a6565b61086490846126a6565b9050600061087b8a6001600160701b0387166126a6565b83116108885760006108a5565b61089b8a6001600160701b0387166126a6565b6108a590846126a6565b905060008211806108b65750600081115b6109025760405162461bcd60e51b815260206004820181905260248201527f5245514c503a20494e53554646494349454e545f494e5055545f414d4f554e546044820152606401610535565b600061091085612710611a24565b9050600061092085612710611a24565b9050831561098a57600e5460009061094390869063ffffffff90811690611a2416565b905061094f8382611a8b565b600d54909350610968906001600160701b031682611ae1565b600d80546001600160701b0319166001600160701b0392909216919091179055505b82156109ff57600e546000906109ab90859063ffffffff90811690611a2416565b90506109b78282611a8b565b600d549092506109d790600160701b90046001600160701b031682611ae1565b600d600e6101000a8154816001600160701b0302191690836001600160701b03160217905550505b600d54600160e01b900463ffffffff166032811415610a8457610a3c6305f5e100610a366001600160701b038c8116908c16611a24565b90611a24565b610a468484611a24565b1015610a7f5760405162461bcd60e51b81526020600482015260086024820152675245514c503a204b60c01b6044820152606401610535565b610b84565b600c546001600160a01b03166379c91b37610aaa6001600160701b038c16612710611a24565b610abf6001600160701b038c16612710611a24565b6040516001600160e01b031960e085901b16815260048101929092526024820152604481018690526064810185905263ffffffff8416608482015260a40160206040518083038186803b158015610b1557600080fd5b505afa158015610b29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4d91906126bd565b610b845760405162461bcd60e51b81526020600482015260086024820152675245514c503a204b60c01b6044820152606401610535565b505050610b9384848888611b36565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600b55505050505050505050565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610c31338484611d8d565b5060015b92915050565b6001600160a01b038316600090815260026020908152604080832033845290915281205460001914610cba576001600160a01b0384166000908152600260209081526040808320338452909152902054610c959083611a8b565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b610cc5848484611def565b5060019392505050565b600d54600160e01b900463ffffffff166000610cec8260646126df565b90509091565b6000600b54600114610d165760405162461bcd60e51b815260040161053590612604565b6000600b81905580610d26610bfa565b506006546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610d7357600080fd5b505afa158015610d87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dab9190612677565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610df457600080fd5b505afa158015610e08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2c9190612677565b90506000610e43836001600160701b038716611a8b565b90506000610e5a836001600160701b038716611a8b565b9050610e668686611e95565b5060005480610ea157610e8d6103e8610e87610e828686611a24565b61217e565b90611a8b565b9750610e9c60006103e86121ee565b610ee8565b610ee56001600160701b038816610eb88584611a24565b610ec2919061271a565b6001600160701b038816610ed68585611a24565b610ee0919061271a565b61227d565b97505b60008811610f445760405162461bcd60e51b8152602060048201526024808201527f5245514c503a20494e53554646494349454e545f4c49515549444954595f4d496044820152631395115160e21b6064820152608401610535565b610f4e89896121ee565b610f5a85858989611b36565b604080518481526020810184905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600b55509395945050505050565b600080600b54600114610fcc5760405162461bcd60e51b815260040161053590612604565b6000600b81905580610fdc610bfa565b506006546007546040516370a0823160e01b81523060048201529395509193506001600160a01b039081169291169060009083906370a082319060240160206040518083038186803b15801561103157600080fd5b505afa158015611045573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110699190612677565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b1580156110ae57600080fd5b505afa1580156110c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e69190612677565b306000908152600160205260409020549091506111038787611e95565b50600054806111128386611a24565b61111c919061271a565b9950806111298385611a24565b611133919061271a565b985060008a1180156111455750600089115b61119d5760405162461bcd60e51b8152602060048201526024808201527f5245514c503a20494e53554646494349454e545f4c49515549444954595f42556044820152631493915160e21b6064820152608401610535565b6111a73083612295565b6111b2868c8c6118e0565b6111bd858c8b6118e0565b6040516370a0823160e01b81523060048201526001600160a01b038716906370a082319060240160206040518083038186803b1580156111fc57600080fd5b505afa158015611210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112349190612677565b6040516370a0823160e01b81523060048201529094506001600160a01b038616906370a082319060240160206040518083038186803b15801561127657600080fd5b505afa15801561128a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ae9190612677565b92506112bc84848a8a611b36565b604080518b8152602081018b90526001600160a01b038d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a350505050505050506001600b81905550915091565b6000610c31338484611def565b600b546001146113465760405162461bcd60e51b815260040161053590612604565b6000600b556006546007546008546040516370a0823160e01b81523060048201526001600160a01b0393841693909216916113f091849186916113eb916001600160701b039091169084906370a08231906024015b60206040518083038186803b1580156113b357600080fd5b505afa1580156113c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e879190612677565b6118e0565b6008546040516370a0823160e01b815230600482015261143d91839186916113eb91600160701b9091046001600160701b0316906001600160a01b038516906370a082319060240161139b565b50506001600b5550565b6005546001600160a01b031633146114945760405162461bcd60e51b815260206004820152601060248201526f2922a8a6281d102327a92124a22222a760811b6044820152606401610535565b600680546001600160a01b038087166001600160a01b031992831617909255600780548684169216919091179055600d805463ffffffff808616600160e01b026001600160e01b0390921691909117909155600e805491841663ffffffff1990921691909117905560055460408051634b75f54f60e01b815290519190921691634b75f54f916004808301926020929190829003018186803b15801561153957600080fd5b505afa15801561154d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611571919061272e565b600c80546001600160a01b0319166001600160a01b039290921691909117905550505050565b428410156115d65760405162461bcd60e51b815260206004820152600c60248201526b1193140e881156141254915160a21b6044820152606401610535565b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876116298361274b565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016116a292919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561170d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906117435750886001600160a01b0316816001600160a01b0316145b6117885760405162461bcd60e51b8152602060048201526016602482015275464c503a20494e56414c49445f5349474e415455524560501b6044820152606401610535565b611793898989611d8d565b505050505050505050565b600b546001146117c05760405162461bcd60e51b815260040161053590612604565b6000600b556006546040516370a0823160e01b81523060048201526118d9916001600160a01b0316906370a082319060240160206040518083038186803b15801561180a57600080fd5b505afa15801561181e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118429190612677565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561188557600080fd5b505afa158015611899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bd9190612677565b6008546001600160701b0380821691600160701b900416611b36565b6001600b55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1790529151600092839287169161196c9190612766565b6000604051808303816000865af19150503d80600081146119a9576040519150601f19603f3d011682016040523d82523d6000602084013e6119ae565b606091505b50915091508180156119d85750805115806119d85750808060200190518101906119d891906126bd565b611a1d5760405162461bcd60e51b815260206004820152601660248201527514915453140e881514905394d1915497d1905253115160521b6044820152606401610535565b5050505050565b6000811580611a4857508282611a3a8183612782565b9250611a46908361271a565b145b610c355760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610535565b600082611a9883826126a6565b9150811115610c355760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b6044820152606401610535565b600082611aee83826127a1565b9150811015610c355760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610535565b600d54600160e01b900463ffffffff166001600160701b03611b598260646126df565b611b699063ffffffff1687612782565b11158015611b8d57506001600160701b03611b8a63ffffffff831686612782565b11155b611bcb5760405162461bcd60e51b815260206004820152600f60248201526e5245514c503a204f564552464c4f5760881b6044820152606401610535565b6000611bdc640100000000426127b9565b600854909150600090611bfc90600160e01b900463ffffffff16836126df565b905060008163ffffffff16118015611c1c57506001600160701b03851615155b8015611c3057506001600160701b03841615155b15611cf4576000611c428460646126df565b611c529063ffffffff16876127cd565b90506000611c6663ffffffff8616876127cd565b90508263ffffffff16611c8b83611c7c8461231f565b6001600160e01b031690612338565b6001600160e01b0316611c9e9190612782565b60096000828254611caf91906127a1565b909155505063ffffffff8316611cc882611c7c8561231f565b6001600160e01b0316611cdb9190612782565b600a6000828254611cec91906127a1565b909155505050505b6008805463ffffffff8416600160e01b026001600160e01b036001600160701b038a8116600160701b9081026001600160e01b03199095168d83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a150505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260016020526040902054611e129082611a8b565b6001600160a01b038085166000908152600160205260408082209390935590841681522054611e419082611ae1565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611de29085815260200190565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015611ee657600080fd5b505afa158015611efa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1e919061272e565b90506000600560009054906101000a90046001600160a01b03166001600160a01b031663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7057600080fd5b505afa158015611f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa89190612677565b6001600160a01b038316151593509050600080611fd9600d546001600160701b0380821692600160701b9092041690565b915091506000836001600160701b0316118015611ff35750845b801561201b57506000826001600160701b0316118061201b57506000816001600160701b0316115b1561212a57600d54600c5460008054600160e01b90930463ffffffff169290916001600160a01b0316906392aec23c908b8b866120598160646126df565b6120638c8c6127fc565b61206d8d8c6127fc565b6040516001600160e01b031960e08a901b16815260048101979097526001600160701b039586166024880152938516604487015263ffffffff928316606487015291166084850152821660a48401521660c482015260e40160206040518083038186803b1580156120dd57600080fd5b505afa1580156120f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121159190612677565b905080156121275761212786826121ee565b50505b6001600160701b0382161561214a57600d80546001600160701b03191690555b6001600160701b0381161561217457600d80546dffffffffffffffffffffffffffff60701b191690555b5050505092915050565b600060038211156121df575080600061219860028361271a565b6121a39060016127a1565b90505b818110156121d9579050806002816121be818661271a565b6121c891906127a1565b6121d2919061271a565b90506121a6565b50919050565b81156121e9575060015b919050565b6000546121fb9082611ae1565b60009081556001600160a01b0383168152600160205260409020546122209082611ae1565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906122719085815260200190565b60405180910390a35050565b600081831061228c578161228e565b825b9392505050565b6001600160a01b0382166000908152600160205260409020546122b89082611a8b565b6001600160a01b038316600090815260016020526040812091909155546122df9082611a8b565b60009081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612271565b6000610c35600160701b6001600160701b038416612822565b600061228e6001600160701b03831684612848565b6001600160a01b038116811461236257600080fd5b50565b60008060008060006080868803121561237d57600080fd5b853594506020860135935060408601356123968161234d565b9250606086013567ffffffffffffffff808211156123b357600080fd5b818801915088601f8301126123c757600080fd5b8135818111156123d657600080fd5b8960208285010111156123e857600080fd5b9699959850939650602001949392505050565b60005b838110156124165781810151838201526020016123fe565b83811115612425576000848401525b50505050565b602081526000825180602084015261244a8160408501602087016123fb565b601f01601f19169190910160400192915050565b6000806040838503121561247157600080fd5b823561247c8161234d565b946020939093013593505050565b60008060006060848603121561249f57600080fd5b83356124aa8161234d565b925060208401356124ba8161234d565b929592945050506040919091013590565b6000602082840312156124dd57600080fd5b813561228e8161234d565b803563ffffffff811681146121e957600080fd5b6000806000806080858703121561251257600080fd5b843561251d8161234d565b9350602085013561252d8161234d565b925061253b604086016124e8565b9150612549606086016124e8565b905092959194509250565b600080600080600080600060e0888a03121561256f57600080fd5b873561257a8161234d565b9650602088013561258a8161234d565b95506040880135945060608801359350608088013560ff811681146125ae57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156125de57600080fd5b82356125e98161234d565b915060208301356125f98161234d565b809150509250929050565b6020808252600d908201526c14915453140e881313d0d2d151609a1b604082015260600190565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60006020828403121561268957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156126b8576126b8612690565b500390565b6000602082840312156126cf57600080fd5b8151801515811461228e57600080fd5b600063ffffffff838116908316818110156126fc576126fc612690565b039392505050565b634e487b7160e01b600052601260045260246000fd5b60008261272957612729612704565b500490565b60006020828403121561274057600080fd5b815161228e8161234d565b600060001982141561275f5761275f612690565b5060010190565b600082516127788184602087016123fb565b9190910192915050565b600081600019048311821515161561279c5761279c612690565b500290565b600082198211156127b4576127b4612690565b500190565b6000826127c8576127c8612704565b500690565b60006001600160701b03808316818516818304811182151516156127f3576127f3612690565b02949350505050565b60006001600160701b038084168061281657612816612704565b92169190910492915050565b60006001600160e01b03828116848216811515828404821116156127f3576127f3612690565b60006001600160e01b03838116806128165761281661270456fea2646970667358221220a632c086b7032daae8d09ae54d54d28a898412942dabf045bc2f19f63acb718564736f6c63430008090033a2646970667358221220a3943c1860b455ebe687e6bb87e796b424652fc628aeeb99cf15047d6ec3c99164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 646,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 648,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "formula",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 650,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 652,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 656,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "_pairSalts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 659,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 663,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "_pairs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint64)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}