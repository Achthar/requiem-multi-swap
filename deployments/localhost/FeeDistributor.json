{
  "address": "0xc3e53F4d16Ae77Db1c982e75a937B9f60FE63690",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferFee",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getSwapConfig",
      "outputs": [
        {
          "internalType": "enum FeeDistributor.SwapPoolType",
          "name": "poolType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "basePool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "operators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "enum FeeDistributor.SwapPoolType",
          "name": "poolType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "basePool",
          "type": "address"
        }
      ],
      "name": "setSwapConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract RequiemStableSwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "toggleOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whiteListedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa0996fe7c7bfc11b61604e7123a426e330cce174ce5e609b67c2f5760cbfafd",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xc3e53F4d16Ae77Db1c982e75a937B9f60FE63690",
    "transactionIndex": 0,
    "gasUsed": "1349261",
    "logsBloom": "0x
    "blockHash": "0x6049f5eac136ec009eb88131104f33be0b6ad870fe5bf7b8101081bfd646e711",
    "transactionHash": "0xaa0996fe7c7bfc11b61604e7123a426e330cce174ce5e609b67c2f5760cbfafd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32,
        "transactionHash": "0xaa0996fe7c7bfc11b61604e7123a426e330cce174ce5e609b67c2f5760cbfafd",
        "address": "0xc3e53F4d16Ae77Db1c982e75a937B9f60FE63690",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6049f5eac136ec009eb88131104f33be0b6ad870fe5bf7b8101081bfd646e711"
      }
    ],
    "blockNumber": 32,
    "cumulativeGasUsed": "1349261",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8290fa77de4ad21ef1293cae3f9f4a1b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getSwapConfig\",\"outputs\":[{\"internalType\":\"enum FeeDistributor.SwapPoolType\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"basePool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"enum FeeDistributor.SwapPoolType\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"basePool\",\"type\":\"address\"}],\"name\":\"setSwapConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract RequiemStableSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"toggleOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whiteListedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"getSwapConfig\":{\"details\":\"fromToken => routerAddress\"},\"target\":{\"details\":\"convert all fee to this token\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FeeDistributor.sol\":\"FeeDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999999},\"remappings\":[]},\"sources\":{\"contracts/FeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\n\\nimport \\\"./libraries/Initializable.sol\\\";\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IRequiemSwap.sol\\\";\\nimport \\\"./RequiemStableSwapRouter.sol\\\";\\n\\ncontract FeeDistributor is Initializable, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    enum SwapPoolType {\\n        plain,\\n        meta\\n    }\\n\\n    struct SwapConfig {\\n        SwapPoolType poolType;\\n        address pool;\\n        address basePool;\\n    }\\n\\n    /// @dev convert all fee to this token\\n    address public target;\\n\\n    /// @dev fromToken => routerAddress\\n    mapping(address => SwapConfig) public getSwapConfig;\\n    mapping(address => bool) public operators;\\n\\n    RequiemStableSwapRouter public swapRouter;\\n    address[] public whiteListedTokens;\\n    uint256 constant swapTimeout = 3600;\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n\\n    function transfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        if (operators[msg.sender] == true) {\\n            uint256 _before = token.balanceOf(address(this));\\n            if (_before >= amount) {\\n                token.safeTransfer(to, amount);\\n                uint256 _after = token.balanceOf(address(this));\\n                require(_before - _after == amount, \\\"transfer-fail\\\");\\n                emit TransferFee(msg.sender, to, token, amount);\\n            }\\n        }\\n    }\\n\\n    function swap() external {\\n        if (operators[msg.sender] == true) {\\n            for (uint256 i = 0; i < whiteListedTokens.length; i++) {\\n                address fromToken = whiteListedTokens[i];\\n                SwapConfig storage swapConfig = getSwapConfig[fromToken];\\n\\n                if (swapConfig.poolType == SwapPoolType.plain) {\\n                    swapPlainPool(swapConfig, fromToken);\\n                } else if (swapConfig.poolType == SwapPoolType.meta) {\\n                    swapMetaPool(swapConfig, fromToken);\\n                }\\n            }\\n        }\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function swapPlainPool(SwapConfig storage config, address fromTokenAddress) internal {\\n        IERC20 fromToken = IERC20(fromTokenAddress);\\n        uint256 inAmount = fromToken.balanceOf(address(this));\\n        if (inAmount > 0) {\\n            IRequiemSwap pool = IRequiemSwap(config.pool);\\n            fromToken.safeIncreaseAllowance(config.pool, inAmount);\\n            pool.onSwapGivenIn(fromTokenAddress, target, inAmount, 0, address(this));\\n        }\\n    }\\n\\n    function swapMetaPool(SwapConfig storage config, address fromTokenAddress) internal {\\n        IERC20 fromToken = IERC20(fromTokenAddress);\\n        uint256 inAmount = fromToken.balanceOf(address(this));\\n\\n        if (inAmount > 0) {\\n            IRequiemStableSwap pool = IRequiemStableSwap(config.pool);\\n            IRequiemStableSwap basePool = IRequiemStableSwap(config.basePool);\\n            // uint8 tokenIndexFrom = pool.getTokenIndex(fromTokenAddress);\\n            // uint8 tokenIndexTo = basePool.getTokenIndex(target);\\n            fromToken.safeIncreaseAllowance(address(swapRouter), inAmount);\\n            // swapRouter.swapToBase(pool, basePool, tokenIndexFrom, tokenIndexTo, inAmount, 0, block.timestamp + swapTimeout);\\n        }\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function initialize(address _target, address _swapRouter) external onlyOwner initializer {\\n        target = _target;\\n        swapRouter = RequiemStableSwapRouter(_swapRouter);\\n    }\\n\\n    function toggleOperator(address _operator) external onlyOwner {\\n        operators[_operator] = !operators[_operator];\\n    }\\n\\n    function setSwapConfig(\\n        address _fromToken,\\n        SwapPoolType poolType,\\n        address pool,\\n        address basePool\\n    ) external onlyOwner {\\n        require(_fromToken != address(0), \\\"zeroFromTokenAddress\\\");\\n        require(pool != address(0), \\\"zeroPoolAddress\\\");\\n\\n        if (poolType == SwapPoolType.meta) {\\n            require(basePool != address(0), \\\"zeroBasePoolAddress\\\");\\n        }\\n\\n        if (getSwapConfig[_fromToken].pool == address(0)) {\\n            whiteListedTokens.push(_fromToken);\\n        }\\n\\n        getSwapConfig[_fromToken] = SwapConfig({poolType: poolType, pool: pool, basePool: basePool});\\n    }\\n\\n    /* =============== EVENTS ==================== */\\n\\n    event TransferFee(address caller, address to, IERC20 token, uint256 amount);\\n}\\n\",\"keccak256\":\"0xba8f5cf18b41c93407167bf9659fc54db0409e7589ff3ab787af00185a6c6aaa\",\"license\":\"MIT\"},\"contracts/RequiemStableSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.14;\\n\\nimport \\\"./interfaces/IRequiemStableSwap.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\nusing SafeERC20 for IERC20 global;\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\ncontract RequiemStableSwapRouter {\\n\\n    // function calculateConvert(\\n    //     IRequiemStableSwap fromPool,\\n    //     IRequiemStableSwap toPool,\\n    //     uint256 amount\\n    // ) external view returns (uint256) {\\n    //     uint256 fromPoolLength = fromPool.getNumberOfTokens();\\n    //     uint256[] memory amounts = fromPool.calculateRemoveLiquidity(address(this), amount);\\n    //     uint256[] memory meta_amounts = new uint256[](fromPoolLength);\\n    //     for (uint8 i = 0; i < fromPoolLength; i++) {\\n    //         IERC20 fromCoin = fromPool.getToken(i);\\n    //         uint256 toCoinIndex = toPool.getTokenIndex(address(fromCoin));\\n    //         meta_amounts[toCoinIndex] = amounts[i];\\n    //     }\\n    //     return toPool.calculateTokenAmount(meta_amounts, true);\\n    // }\\n\\n    // function convert(\\n    //     IRequiemStableSwap fromPool,\\n    //     IRequiemStableSwap toPool,\\n    //     uint256 amount,\\n    //     uint256 minToMint,\\n    //     uint256 deadline\\n    // ) external returns (uint256) {\\n    //     uint256 fromPoolLength = fromPool.getNumberOfTokens();\\n    //     uint256 toPoolLength = toPool.getNumberOfTokens();\\n    //     require(address(fromPool) != address(toPool), \\\"fromPool = toPool\\\");\\n    //     require(fromPoolLength == toPoolLength, \\\"poolTokensLengthMissmatch\\\");\\n    //     IERC20 fromToken = fromPool.getLpToken();\\n    //     IERC20 toToken = toPool.getLpToken();\\n    //     uint256[] memory min_amounts = new uint256[](fromPoolLength);\\n    //     // validate token\\n    //     for (uint8 i = 0; i < fromPoolLength; i++) {\\n    //         IERC20 coin = fromPool.getToken(i);\\n    //         toPool.getTokenIndex(address(coin));\\n    //     }\\n    //     fromToken.transferFrom(msg.sender, address(this), amount);\\n    //     fromToken.safeIncreaseAllowance(address(fromPool), amount);\\n    //     fromPool.removeLiquidity(amount, min_amounts, deadline);\\n\\n    //     uint256[] memory meta_amounts = new uint256[](toPoolLength);\\n\\n    //     for (uint8 i = 0; i < toPoolLength; i++) {\\n    //         IERC20 coin = toPool.getToken(i);\\n    //         uint256 addBalance = coin.balanceOf(address(this));\\n    //         coin.safeIncreaseAllowance(address(toPool), addBalance);\\n    //         meta_amounts[i] = addBalance;\\n    //     }\\n    //     toPool.addLiquidity(meta_amounts, minToMint, deadline);\\n\\n    //     uint256 lpAmount = toToken.balanceOf(address(this));\\n    //     toToken.transfer(msg.sender, lpAmount);\\n    //     return lpAmount;\\n    // }\\n\\n    // function addLiquidity(\\n    //     IRequiemStableSwap pool,\\n    //     IRequiemStableSwap basePool,\\n    //     uint256[] memory meta_amounts,\\n    //     uint256[] memory base_amounts,\\n    //     uint256 minToMint,\\n    //     uint256 deadline\\n    // ) external returns (uint256) {\\n    //     IERC20 token = IERC20(pool.getLpToken());\\n    //     require(base_amounts.length == basePool.getNumberOfTokens(), \\\"invalidBaseAmountsLength\\\");\\n    //     require(meta_amounts.length == pool.getNumberOfTokens(), \\\"invalidMetaAmountsLength\\\");\\n    //     bool deposit_base = false;\\n    //     for (uint8 i = 0; i < base_amounts.length; i++) {\\n    //         uint256 amount = base_amounts[i];\\n    //         if (amount > 0) {\\n    //             deposit_base = true;\\n    //             IERC20 coin = basePool.getToken(i);\\n    //             coin.safeTransferFrom(msg.sender, address(this), amount);\\n    //             uint256 transferred = coin.balanceOf(address(this));\\n    //             coin.safeIncreaseAllowance(address(basePool), transferred);\\n    //             base_amounts[i] = transferred;\\n    //         }\\n    //     }\\n    //     if (deposit_base) {\\n    //         basePool.addLiquidity(base_amounts, 0, deadline);\\n    //     }\\n\\n    //     for (uint8 i = 0; i < meta_amounts.length; i++) {\\n    //         IERC20 coin = pool.getToken(i);\\n    //         if (meta_amounts[i] > 0) {\\n    //             coin.safeTransferFrom(msg.sender, address(this), meta_amounts[i]);\\n    //         }\\n    //         uint256 transferred = coin.balanceOf(address(this));\\n    //         coin.safeIncreaseAllowance(address(pool), transferred);\\n    //         meta_amounts[i] = transferred;\\n    //     }\\n    //     pool.addLiquidity(meta_amounts, minToMint, deadline);\\n    //     uint256 lpAmount = token.balanceOf(address(this));\\n    //     token.transfer(msg.sender, lpAmount);\\n    //     return lpAmount;\\n    // }\\n\\n    // function removeLiquidity(\\n    //     IRequiemStableSwap pool,\\n    //     IRequiemStableSwap basePool,\\n    //     uint256 _amount,\\n    //     uint256[] calldata min_amounts_meta,\\n    //     uint256[] calldata min_amounts_base,\\n    //     uint256 deadline\\n    // ) external returns (uint256[] memory amounts, uint256[] memory base_amounts) {\\n    //     IERC20 token = pool.getLpToken();\\n    //     IERC20 baseToken = basePool.getLpToken();\\n    //     token.transferFrom(msg.sender, address(this), _amount);\\n    //     token.safeIncreaseAllowance(address(pool), _amount);\\n    //     pool.removeLiquidity(_amount, min_amounts_meta, deadline);\\n    //     uint256 _base_amount = baseToken.balanceOf(address(this));\\n    //     baseToken.safeIncreaseAllowance(address(basePool), _base_amount);\\n\\n    //     basePool.removeLiquidity(_base_amount, min_amounts_base, deadline);\\n    //     // Transfer all coins out\\n    //     amounts = new uint256[](pool.getNumberOfTokens());\\n    //     for (uint8 i = 0; i < pool.getNumberOfTokens(); i++) {\\n    //         IERC20 coin = pool.getToken(i);\\n    //         amounts[i] = coin.balanceOf(address(this));\\n    //         if (amounts[i] > 0) {\\n    //             coin.safeTransfer(msg.sender, amounts[i]);\\n    //         }\\n    //     }\\n\\n    //     base_amounts = new uint256[](basePool.getNumberOfTokens());\\n    //     for (uint8 i = 0; i < basePool.getNumberOfTokens(); i++) {\\n    //         IERC20 coin = basePool.getToken(i);\\n    //         base_amounts[i] = coin.balanceOf(address(this));\\n    //         if (base_amounts[i] > 0) {\\n    //             coin.safeTransfer(msg.sender, base_amounts[i]);\\n    //         }\\n    //     }\\n    // }\\n\\n    // function calculateTokenAmount(\\n    //     IRequiemStableSwap pool,\\n    //     IRequiemStableSwap basePool,\\n    //     uint256[] memory meta_amounts,\\n    //     uint256[] memory base_amounts,\\n    //     bool is_deposit\\n    // ) external view returns (uint256) {\\n    //     IERC20 baseToken = basePool.getLpToken();\\n    //     uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n    //     uint256 _base_tokens = basePool.calculateTokenAmount(base_amounts, is_deposit);\\n    //     meta_amounts[baseTokenIndex] = meta_amounts[baseTokenIndex] + _base_tokens;\\n    //     return pool.calculateTokenAmount(meta_amounts, is_deposit);\\n    // }\\n\\n    // function calculateRemoveLiquidity(\\n    //     IRequiemStableSwap pool,\\n    //     IRequiemStableSwap basePool,\\n    //     uint256 amount\\n    // ) external view returns (uint256[] memory meta_amounts, uint256[] memory base_amounts) {\\n    //     IERC20 baseToken = basePool.getLpToken();\\n    //     uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n    //     meta_amounts = pool.calculateRemoveLiquidity(address(this), amount);\\n    //     uint256 lpAmount = meta_amounts[baseTokenIndex];\\n    //     meta_amounts[baseTokenIndex] = 0;\\n    //     base_amounts = basePool.calculateRemoveLiquidity(address(this), lpAmount);\\n    // }\\n\\n    // function swapFromBase(\\n    //     IRequiemStableSwap pool,\\n    //     IRequiemStableSwap basePool,\\n    //     uint8 tokenIndexFrom,\\n    //     uint8 tokenIndexTo,\\n    //     uint256 dx,\\n    //     uint256 minDy,\\n    //     uint256 deadline\\n    // ) external returns (uint256) {\\n    //     IERC20 baseToken = basePool.getLpToken();\\n    //     uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n    //     uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n    //     base_amounts[tokenIndexFrom] = dx;\\n    //     IERC20 coin = basePool.getToken(tokenIndexFrom);\\n    //     coin.safeTransferFrom(msg.sender, address(this), dx);\\n    //     coin.safeIncreaseAllowance(address(basePool), dx);\\n    //     uint256 baseLpAmount = basePool.addLiquidity(base_amounts, 0, deadline);\\n    //     if (baseTokenIndex != tokenIndexTo) {\\n    //         baseToken.safeIncreaseAllowance(address(pool), baseLpAmount);\\n    //         pool.swap(baseTokenIndex, tokenIndexTo, baseLpAmount, minDy, address(this),deadline);\\n    //     }\\n    //     IERC20 coinTo = pool.getToken(tokenIndexTo);\\n    //     uint256 amountOut = coinTo.balanceOf(address(this));\\n    //     coinTo.safeTransfer(msg.sender, amountOut);\\n    //     return amountOut;\\n    // }\\n\\n    // function calculateSwapFromBase(\\n    //     IRequiemStableSwap pool,\\n    //     IRequiemStableSwap basePool,\\n    //     uint8 tokenIndexFrom,\\n    //     uint8 tokenIndexTo,\\n    //     uint256 dx\\n    // ) external view returns (uint256) {\\n    //     IERC20 baseToken = basePool.getLpToken();\\n    //     uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n    //     uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n    //     base_amounts[tokenIndexFrom] = dx;\\n    //     uint256 baseLpAmount = basePool.calculateTokenAmount(base_amounts, true);\\n    //     if (baseTokenIndex == tokenIndexTo) {\\n    //         return baseLpAmount;\\n    //     }\\n    //     return pool.calculateSwap(baseTokenIndex, tokenIndexTo, baseLpAmount);\\n    // }\\n\\n    // function swapToBase(\\n    //     IRequiemStableSwap pool,\\n    //     IRequiemStableSwap basePool,\\n    //     uint8 tokenIndexFrom,\\n    //     uint8 tokenIndexTo,\\n    //     uint256 dx,\\n    //     uint256 minDy,\\n    //     uint256 deadline\\n    // ) external returns (uint256) {\\n    //     IERC20 baseToken = basePool.getLpToken();\\n    //     uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n    //     IERC20 coin = pool.getToken(tokenIndexFrom);\\n    //     coin.safeTransferFrom(msg.sender, address(this), dx);\\n    //     uint256 tokenLPAmount = dx;\\n    //     if (baseTokenIndex != tokenIndexFrom) {\\n    //         coin.safeIncreaseAllowance(address(pool), dx);\\n    //         tokenLPAmount = pool.swap(tokenIndexFrom, baseTokenIndex, dx, 0,address(this), deadline);\\n    //     }\\n    //     baseToken.safeIncreaseAllowance(address(basePool), tokenLPAmount);\\n    //     basePool.removeLiquidityOneToken(tokenLPAmount, tokenIndexTo, minDy, deadline);\\n    //     IERC20 coinTo = basePool.getToken(tokenIndexTo);\\n    //     uint256 amountOut = coinTo.balanceOf(address(this));\\n    //     coinTo.safeTransfer(msg.sender, amountOut);\\n    //     return amountOut;\\n    // }\\n\\n    // function calculateSwapToBase(\\n    //     IRequiemStableSwap pool,\\n    //     IRequiemStableSwap basePool,\\n    //     uint8 tokenIndexFrom,\\n    //     uint8 tokenIndexTo,\\n    //     uint256 dx\\n    // ) external view returns (uint256) {\\n    //     IERC20 baseToken = basePool.getLpToken();\\n    //     uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n    //     uint256 tokenLPAmount = dx;\\n    //     if (baseTokenIndex != tokenIndexFrom) {\\n    //         tokenLPAmount = pool.calculateSwap(tokenIndexFrom, baseTokenIndex, dx);\\n    //     }\\n    //     return basePool.calculateRemoveLiquidityOneToken(address(this), tokenLPAmount, tokenIndexTo);\\n    // }\\n}\\n\",\"keccak256\":\"0xd08ccf9c5f4ef1e4d410a496f28c5c741520cf65579f90cbd50bd0407b558407\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xab442747ba7fbbe95ce3e26fac7ff53c7ed1f2ddb11ee665905bcd85593ac42e\",\"license\":\"MIT\"},\"contracts/interfaces/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.14;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdc804530ff03ec48ca5792c4c18a0ed0950c18f6f3cf31d8b6be25d5de492b66\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.14;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event TokenExchange(address indexed buyer, uint256 soldId, uint256 tokensSold, uint256 boughtId, uint256 tokensBought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 flashFee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0xbae15b6941fabfc280c110c65d6bbca64e29eb5144d79d1c0ffb9d539d577249\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\n\\ninterface IRequiemSwap {\\n    /**  \\n    * @notice amount in is expected to be sent to the pool before calling onSwap\\n    * - This function is designed for a multi swap exact out structure\\n    * - It just checks the invariant condition or more generally the validity of the swap\\n    * - No return value required since the amounts are already known in that case\\n    */\\n    function onSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address to\\n    ) external;\\n\\n    /**\\n    * @notice Calculates the swap value internally and sends the amount to the to address \\n    * - Returns the calculated output amount.\\n    * - Can be done without readjusting the invariant as the internally called pricing should ensure validity\\n     */\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n    * @notice Calculates the input amount internally and sends that amount from the caller to the pool and the amountOut to the to address\\n    * - Returns the calculated input amount.\\n    * - Can be done without readjusting the invariant as the internally called pricing should ensure validity\\n     */\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to\\n    ) external returns (uint256);\\n\\n    // calculator functions that should be used in sync with the swap functions above, i.e. most\\n    // importantly for the exact out swap above\\n\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (uint256);\\n\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xab06dfa4c7c3ba9c548fe29359fdb649a57c7a7e6894a6a8ba37b3a7dd91173a\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x1e37be1406d40b13daaba8dd730eab1303311bb780625d791f8d3f724f3153f6\",\"license\":\"MIT\"},\"contracts/libraries/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\",\"keccak256\":\"0xb65425255681ab6c33749bb100758e67f0de571e5bff4a07bbd0be68d14f51d8\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xf65378dbd07bb0ad967fa83e97dc41e9bc9e9148aad564c7cd994b81a98fbc2b\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.14;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SAFE_ERC20_CALL_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe6c94e57fa5a447d7a1a5063122a99751b7072ce6de3ae1a14594d525daaa401\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61007a565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b61172e806100896000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638119c0651161008c578063beabacc811610066578063beabacc81461021d578063c31c9c0714610230578063d4b8399214610250578063f2fde38b1461027057600080fd5b80638119c065146101de5780638da5cb5b146101e6578063a166a94d1461020a57600080fd5b8063485cc955116100bd578063485cc9551461018b5780636aee0e631461019e578063715018a6146101d657600080fd5b806313e7c9d8146100e45780633fe529f01461011c57806342b054f014610131575b600080fd5b6101076100f2366004611411565b60036020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61012f61012a366004611411565b610283565b005b61017c61013f366004611411565b6002602052600090815260409020805460019091015460ff82169173ffffffffffffffffffffffffffffffffffffffff6101009091048116911683565b60405161011393929190611464565b61012f6101993660046114ca565b610364565b6101b16101ac366004611503565b610559565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610113565b61012f610590565b61012f610624565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff166101b1565b61012f61021836600461151c565b6106ff565b61012f61022b36600461157c565b610ad4565b6004546101b19073ffffffffffffffffffffffffffffffffffffffff1681565b6001546101b19073ffffffffffffffffffffffffffffffffffffffff1681565b61012f61027e366004611411565b610d15565b60005473ffffffffffffffffffffffffffffffffffffffff62010000909104163314610310576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff16600090815260036020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff90911615179055565b60005473ffffffffffffffffffffffffffffffffffffffff620100009091041633146103ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610307565b600054610100900460ff1680610405575060005460ff16155b610491576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610307565b600054610100900460ff161580156104d057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6001805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556004805492851692909116919091179055801561055457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b6005818154811061056957600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60005473ffffffffffffffffffffffffffffffffffffffff62010000909104163314610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610307565b6106226000610e45565b565b3360009081526003602052604090205460ff1615156001036106225760005b6005548110156106fc57600060058281548110610662576106626115bd565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1680835260029091526040822090925090815460ff1660018111156106ac576106ac611435565b036106c0576106bb8183610ec3565b6106e7565b6001815460ff1660018111156106d8576106d8611435565b036106e7576106e78183611045565b505080806106f49061161b565b915050610643565b50565b60005473ffffffffffffffffffffffffffffffffffffffff62010000909104163314610787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610307565b73ffffffffffffffffffffffffffffffffffffffff8416610804576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f7a65726f46726f6d546f6b656e416464726573730000000000000000000000006044820152606401610307565b73ffffffffffffffffffffffffffffffffffffffff8216610881576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7a65726f506f6f6c4164647265737300000000000000000000000000000000006044820152606401610307565b600183600181111561089557610895611435565b036109175773ffffffffffffffffffffffffffffffffffffffff8116610917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f7a65726f42617365506f6f6c41646472657373000000000000000000000000006044820152606401610307565b73ffffffffffffffffffffffffffffffffffffffff8481166000908152600260205260409020546101009004166109b957600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b60405180606001604052808460018111156109d6576109d6611435565b815273ffffffffffffffffffffffffffffffffffffffff80851660208084019190915284821660409384015290871660009081526002909152208151815482907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018381811115610a4b57610a4b611435565b0217905550602082015181547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff92831602178255604090920151600190910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169190921617905550505050565b3360009081526003602052604090205460ff161515600103610554576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b819190611653565b9050818110610d0f57610bab73ffffffffffffffffffffffffffffffffffffffff8516848461111b565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015610c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3c9190611653565b905082610c49828461166c565b14610cb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f7472616e736665722d6661696c000000000000000000000000000000000000006044820152606401610307565b6040805133815273ffffffffffffffffffffffffffffffffffffffff86811660208301528716818301526060810185905290517f399b8b2d1a2cd048deba86f2732270178911b7def887b957d4e4530a5955e1249181900360800190a1505b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff62010000909104163314610d9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610307565b73ffffffffffffffffffffffffffffffffffffffff8116610e40576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610307565b6106fc815b6000805473ffffffffffffffffffffffffffffffffffffffff838116620100008181027fffffffffffffffffffff0000000000000000000000000000000000000000ffff851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610f32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f569190611653565b90508015610d0f57835473ffffffffffffffffffffffffffffffffffffffff610100909104811690610f8b90841682846111ef565b6001546040517f4ac00e0300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301529182166024820152604481018490526000606482015230608482015290821690634ac00e039060a4016020604051808303816000875af1158015611019573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103d9190611653565b505050505050565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa1580156110b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d89190611653565b90508015610d0f578354600185015460045473ffffffffffffffffffffffffffffffffffffffff6101009093048316929182169161103d918682169116856111ef565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526105549084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526112ed565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015611266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128a9190611653565b6112949190611683565b60405173ffffffffffffffffffffffffffffffffffffffff8516602482015260448101829052909150610d0f9085907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161116d565b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051611315919061169b565b6000604051808303816000865af19150503d8060008114611352576040519150601f19603f3d011682016040523d82523d6000602084013e611357565b606091505b5090925090508161136c573d6000803e3d6000fd5b8051158061138957508080602001905181019061138991906116d6565b610d0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f534146455f45524332305f43414c4c5f4641494c4544000000000000000000006044820152606401610307565b73ffffffffffffffffffffffffffffffffffffffff811681146106fc57600080fd5b60006020828403121561142357600080fd5b813561142e816113ef565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b606081016002851061149f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b93815273ffffffffffffffffffffffffffffffffffffffff9283166020820152911660409091015290565b600080604083850312156114dd57600080fd5b82356114e8816113ef565b915060208301356114f8816113ef565b809150509250929050565b60006020828403121561151557600080fd5b5035919050565b6000806000806080858703121561153257600080fd5b843561153d816113ef565b935060208501356002811061155157600080fd5b92506040850135611561816113ef565b91506060850135611571816113ef565b939692955090935050565b60008060006060848603121561159157600080fd5b833561159c816113ef565b925060208401356115ac816113ef565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361164c5761164c6115ec565b5060010190565b60006020828403121561166557600080fd5b5051919050565b60008282101561167e5761167e6115ec565b500390565b60008219821115611696576116966115ec565b500190565b6000825160005b818110156116bc57602081860181015185830152016116a2565b818111156116cb576000828501525b509190910192915050565b6000602082840312156116e857600080fd5b8151801515811461142e57600080fdfea2646970667358221220503c575f8246e3ceb7ff293021547ead9611f9f3f6d2beb000c7f9b7597a504f64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c80638119c0651161008c578063beabacc811610066578063beabacc81461021d578063c31c9c0714610230578063d4b8399214610250578063f2fde38b1461027057600080fd5b80638119c065146101de5780638da5cb5b146101e6578063a166a94d1461020a57600080fd5b8063485cc955116100bd578063485cc9551461018b5780636aee0e631461019e578063715018a6146101d657600080fd5b806313e7c9d8146100e45780633fe529f01461011c57806342b054f014610131575b600080fd5b6101076100f2366004611411565b60036020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61012f61012a366004611411565b610283565b005b61017c61013f366004611411565b6002602052600090815260409020805460019091015460ff82169173ffffffffffffffffffffffffffffffffffffffff6101009091048116911683565b60405161011393929190611464565b61012f6101993660046114ca565b610364565b6101b16101ac366004611503565b610559565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610113565b61012f610590565b61012f610624565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff166101b1565b61012f61021836600461151c565b6106ff565b61012f61022b36600461157c565b610ad4565b6004546101b19073ffffffffffffffffffffffffffffffffffffffff1681565b6001546101b19073ffffffffffffffffffffffffffffffffffffffff1681565b61012f61027e366004611411565b610d15565b60005473ffffffffffffffffffffffffffffffffffffffff62010000909104163314610310576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff16600090815260036020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff90911615179055565b60005473ffffffffffffffffffffffffffffffffffffffff620100009091041633146103ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610307565b600054610100900460ff1680610405575060005460ff16155b610491576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610307565b600054610100900460ff161580156104d057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6001805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556004805492851692909116919091179055801561055457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b6005818154811061056957600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60005473ffffffffffffffffffffffffffffffffffffffff62010000909104163314610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610307565b6106226000610e45565b565b3360009081526003602052604090205460ff1615156001036106225760005b6005548110156106fc57600060058281548110610662576106626115bd565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1680835260029091526040822090925090815460ff1660018111156106ac576106ac611435565b036106c0576106bb8183610ec3565b6106e7565b6001815460ff1660018111156106d8576106d8611435565b036106e7576106e78183611045565b505080806106f49061161b565b915050610643565b50565b60005473ffffffffffffffffffffffffffffffffffffffff62010000909104163314610787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610307565b73ffffffffffffffffffffffffffffffffffffffff8416610804576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f7a65726f46726f6d546f6b656e416464726573730000000000000000000000006044820152606401610307565b73ffffffffffffffffffffffffffffffffffffffff8216610881576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f7a65726f506f6f6c4164647265737300000000000000000000000000000000006044820152606401610307565b600183600181111561089557610895611435565b036109175773ffffffffffffffffffffffffffffffffffffffff8116610917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f7a65726f42617365506f6f6c41646472657373000000000000000000000000006044820152606401610307565b73ffffffffffffffffffffffffffffffffffffffff8481166000908152600260205260409020546101009004166109b957600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b60405180606001604052808460018111156109d6576109d6611435565b815273ffffffffffffffffffffffffffffffffffffffff80851660208084019190915284821660409384015290871660009081526002909152208151815482907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018381811115610a4b57610a4b611435565b0217905550602082015181547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff92831602178255604090920151600190910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169190921617905550505050565b3360009081526003602052604090205460ff161515600103610554576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b819190611653565b9050818110610d0f57610bab73ffffffffffffffffffffffffffffffffffffffff8516848461111b565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015610c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3c9190611653565b905082610c49828461166c565b14610cb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f7472616e736665722d6661696c000000000000000000000000000000000000006044820152606401610307565b6040805133815273ffffffffffffffffffffffffffffffffffffffff86811660208301528716818301526060810185905290517f399b8b2d1a2cd048deba86f2732270178911b7def887b957d4e4530a5955e1249181900360800190a1505b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff62010000909104163314610d9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610307565b73ffffffffffffffffffffffffffffffffffffffff8116610e40576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610307565b6106fc815b6000805473ffffffffffffffffffffffffffffffffffffffff838116620100008181027fffffffffffffffffffff0000000000000000000000000000000000000000ffff851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610f32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f569190611653565b90508015610d0f57835473ffffffffffffffffffffffffffffffffffffffff610100909104811690610f8b90841682846111ef565b6001546040517f4ac00e0300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301529182166024820152604481018490526000606482015230608482015290821690634ac00e039060a4016020604051808303816000875af1158015611019573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103d9190611653565b505050505050565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa1580156110b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d89190611653565b90508015610d0f578354600185015460045473ffffffffffffffffffffffffffffffffffffffff6101009093048316929182169161103d918682169116856111ef565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526105549084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526112ed565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015611266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128a9190611653565b6112949190611683565b60405173ffffffffffffffffffffffffffffffffffffffff8516602482015260448101829052909150610d0f9085907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161116d565b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051611315919061169b565b6000604051808303816000865af19150503d8060008114611352576040519150601f19603f3d011682016040523d82523d6000602084013e611357565b606091505b5090925090508161136c573d6000803e3d6000fd5b8051158061138957508080602001905181019061138991906116d6565b610d0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f534146455f45524332305f43414c4c5f4641494c4544000000000000000000006044820152606401610307565b73ffffffffffffffffffffffffffffffffffffffff811681146106fc57600080fd5b60006020828403121561142357600080fd5b813561142e816113ef565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b606081016002851061149f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b93815273ffffffffffffffffffffffffffffffffffffffff9283166020820152911660409091015290565b600080604083850312156114dd57600080fd5b82356114e8816113ef565b915060208301356114f8816113ef565b809150509250929050565b60006020828403121561151557600080fd5b5035919050565b6000806000806080858703121561153257600080fd5b843561153d816113ef565b935060208501356002811061155157600080fd5b92506040850135611561816113ef565b91506060850135611571816113ef565b939692955090935050565b60008060006060848603121561159157600080fd5b833561159c816113ef565b925060208401356115ac816113ef565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361164c5761164c6115ec565b5060010190565b60006020828403121561166557600080fd5b5051919050565b60008282101561167e5761167e6115ec565b500390565b60008219821115611696576116966115ec565b500190565b6000825160005b818110156116bc57602081860181015185830152016116a2565b818111156116cb576000828501525b509190910192915050565b6000602082840312156116e857600080fd5b8151801515811461142e57600080fdfea2646970667358221220503c575f8246e3ceb7ff293021547ead9611f9f3f6d2beb000c7f9b7597a504f64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "getSwapConfig": {
        "details": "fromToken => routerAddress"
      },
      "target": {
        "details": "convert all fee to this token"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 55526,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 55529,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 55736,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 29,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "target",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 35,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "getSwapConfig",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(SwapConfig)26_storage)"
      },
      {
        "astId": 39,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "operators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 42,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "swapRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(RequiemStableSwapRouter)19580"
      },
      {
        "astId": 45,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "whiteListedTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(RequiemStableSwapRouter)19580": {
        "encoding": "inplace",
        "label": "contract RequiemStableSwapRouter",
        "numberOfBytes": "20"
      },
      "t_enum(SwapPoolType)18": {
        "encoding": "inplace",
        "label": "enum FeeDistributor.SwapPoolType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(SwapConfig)26_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FeeDistributor.SwapConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(SwapConfig)26_storage"
      },
      "t_struct(SwapConfig)26_storage": {
        "encoding": "inplace",
        "label": "struct FeeDistributor.SwapConfig",
        "members": [
          {
            "astId": 21,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "poolType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(SwapPoolType)18"
          },
          {
            "astId": 23,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "pool",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 25,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "basePool",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}