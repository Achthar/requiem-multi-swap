{
  "address": "0xc3e53F4d16Ae77Db1c982e75a937B9f60FE63690",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferFee",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getSwapConfig",
      "outputs": [
        {
          "internalType": "enum FeeDistributor.SwapPoolType",
          "name": "poolType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "basePool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "operators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "enum FeeDistributor.SwapPoolType",
          "name": "poolType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "basePool",
          "type": "address"
        }
      ],
      "name": "setSwapConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract RequiemStableSwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "toggleOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whiteListedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7620ba78ec0c2fdd3c6e8dd3b2642684d0af19b5f448de34d09ffb5840b43746",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xc3e53F4d16Ae77Db1c982e75a937B9f60FE63690",
    "transactionIndex": 0,
    "gasUsed": "1258003",
    "logsBloom": "0x
    "blockHash": "0x8b7e5bd358c73ee3d86ebb600cfa86fafde1d7003c61bef507181d13ee17ea20",
    "transactionHash": "0x7620ba78ec0c2fdd3c6e8dd3b2642684d0af19b5f448de34d09ffb5840b43746",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32,
        "transactionHash": "0x7620ba78ec0c2fdd3c6e8dd3b2642684d0af19b5f448de34d09ffb5840b43746",
        "address": "0xc3e53F4d16Ae77Db1c982e75a937B9f60FE63690",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8b7e5bd358c73ee3d86ebb600cfa86fafde1d7003c61bef507181d13ee17ea20"
      }
    ],
    "blockNumber": 32,
    "cumulativeGasUsed": "1258003",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "238606047f22772c3f8250a1182ecfba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getSwapConfig\",\"outputs\":[{\"internalType\":\"enum FeeDistributor.SwapPoolType\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"basePool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"enum FeeDistributor.SwapPoolType\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"basePool\",\"type\":\"address\"}],\"name\":\"setSwapConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract RequiemStableSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"toggleOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whiteListedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"getSwapConfig\":{\"details\":\"fromToken => routerAddress\"},\"target\":{\"details\":\"convert all fee to this token\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FeeDistributor.sol\":\"FeeDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/FeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./libraries/Initializable.sol\\\";\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IRequiemStableSwap.sol\\\";\\nimport \\\"./RequiemStableSwapRouter.sol\\\";\\n\\ncontract FeeDistributor is Initializable, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    enum SwapPoolType {\\n        plain,\\n        meta\\n    }\\n\\n    struct SwapConfig {\\n        SwapPoolType poolType;\\n        address pool;\\n        address basePool;\\n    }\\n\\n    /// @dev convert all fee to this token\\n    address public target;\\n\\n    /// @dev fromToken => routerAddress\\n    mapping(address => SwapConfig) public getSwapConfig;\\n    mapping(address => bool) public operators;\\n\\n    RequiemStableSwapRouter public swapRouter;\\n    address[] public whiteListedTokens;\\n    uint256 constant swapTimeout = 3600;\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n\\n    function transfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        if (operators[msg.sender] == true) {\\n            uint256 _before = token.balanceOf(address(this));\\n            if (_before >= amount) {\\n                token.safeTransfer(to, amount);\\n                uint256 _after = token.balanceOf(address(this));\\n                require(_before - _after == amount, \\\"transfer-fail\\\");\\n                emit TransferFee(msg.sender, to, token, amount);\\n            }\\n        }\\n    }\\n\\n    function swap() external {\\n        if (operators[msg.sender] == true) {\\n            for (uint256 i = 0; i < whiteListedTokens.length; i++) {\\n                address fromToken = whiteListedTokens[i];\\n                SwapConfig storage swapConfig = getSwapConfig[fromToken];\\n\\n                if (swapConfig.poolType == SwapPoolType.plain) {\\n                    swapPlainPool(swapConfig, fromToken);\\n                } else if (swapConfig.poolType == SwapPoolType.meta) {\\n                    swapMetaPool(swapConfig, fromToken);\\n                }\\n            }\\n        }\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function swapPlainPool(SwapConfig storage config, address fromTokenAddress) internal {\\n        IERC20 fromToken = IERC20(fromTokenAddress);\\n        uint256 inAmount = fromToken.balanceOf(address(this));\\n        if (inAmount > 0) {\\n            IRequiemStableSwap pool = IRequiemStableSwap(config.pool);\\n            uint8 fromIndex = pool.getTokenIndex(fromTokenAddress);\\n            uint8 toIndex = pool.getTokenIndex(target);\\n            fromToken.safeIncreaseAllowance(config.pool, inAmount);\\n            pool.swap(fromIndex, toIndex, inAmount, 0, address(this), block.timestamp + swapTimeout);\\n        }\\n    }\\n\\n    function swapMetaPool(SwapConfig storage config, address fromTokenAddress) internal {\\n        IERC20 fromToken = IERC20(fromTokenAddress);\\n        uint256 inAmount = fromToken.balanceOf(address(this));\\n\\n        if (inAmount > 0) {\\n            IRequiemStableSwap pool = IRequiemStableSwap(config.pool);\\n            IRequiemStableSwap basePool = IRequiemStableSwap(config.basePool);\\n            uint8 tokenIndexFrom = pool.getTokenIndex(fromTokenAddress);\\n            uint8 tokenIndexTo = basePool.getTokenIndex(target);\\n            fromToken.safeIncreaseAllowance(address(swapRouter), inAmount);\\n            swapRouter.swapToBase(pool, basePool, tokenIndexFrom, tokenIndexTo, inAmount, 0, block.timestamp + swapTimeout);\\n        }\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function initialize(address _target, address _swapRouter) external onlyOwner initializer {\\n        target = _target;\\n        swapRouter = RequiemStableSwapRouter(_swapRouter);\\n    }\\n\\n    function toggleOperator(address _operator) external onlyOwner {\\n        operators[_operator] = !operators[_operator];\\n    }\\n\\n    function setSwapConfig(\\n        address _fromToken,\\n        SwapPoolType poolType,\\n        address pool,\\n        address basePool\\n    ) external onlyOwner {\\n        require(_fromToken != address(0), \\\"zeroFromTokenAddress\\\");\\n        require(pool != address(0), \\\"zeroPoolAddress\\\");\\n\\n        if (poolType == SwapPoolType.meta) {\\n            require(basePool != address(0), \\\"zeroBasePoolAddress\\\");\\n        }\\n\\n        if (getSwapConfig[_fromToken].pool == address(0)) {\\n            whiteListedTokens.push(_fromToken);\\n        }\\n\\n        getSwapConfig[_fromToken] = SwapConfig({poolType: poolType, pool: pool, basePool: basePool});\\n    }\\n\\n    /* =============== EVENTS ==================== */\\n\\n    event TransferFee(address caller, address to, IERC20 token, uint256 amount);\\n}\\n\",\"keccak256\":\"0xafc5d09a68f90e49f1c7a4667b935bf887878e616778dacd1de80ccce90059fe\",\"license\":\"MIT\"},\"contracts/RequiemStableSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/IRequiemStableSwap.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\ncontract RequiemStableSwapRouter {\\n    using SafeERC20 for IERC20;\\n\\n    function calculateConvert(\\n        IRequiemStableSwap fromPool,\\n        IRequiemStableSwap toPool,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        uint256 fromPoolLength = fromPool.getNumberOfTokens();\\n        uint256[] memory amounts = fromPool.calculateRemoveLiquidity(address(this), amount);\\n        uint256[] memory meta_amounts = new uint256[](fromPoolLength);\\n        for (uint8 i = 0; i < fromPoolLength; i++) {\\n            IERC20 fromCoin = fromPool.getToken(i);\\n            uint256 toCoinIndex = toPool.getTokenIndex(address(fromCoin));\\n            meta_amounts[toCoinIndex] = amounts[i];\\n        }\\n        return toPool.calculateTokenAmount(meta_amounts, true);\\n    }\\n\\n    function convert(\\n        IRequiemStableSwap fromPool,\\n        IRequiemStableSwap toPool,\\n        uint256 amount,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        uint256 fromPoolLength = fromPool.getNumberOfTokens();\\n        uint256 toPoolLength = toPool.getNumberOfTokens();\\n        require(address(fromPool) != address(toPool), \\\"fromPool = toPool\\\");\\n        require(fromPoolLength == toPoolLength, \\\"poolTokensLengthMissmatch\\\");\\n        IERC20 fromToken = fromPool.getLpToken();\\n        IERC20 toToken = toPool.getLpToken();\\n        uint256[] memory min_amounts = new uint256[](fromPoolLength);\\n        // validate token\\n        for (uint8 i = 0; i < fromPoolLength; i++) {\\n            IERC20 coin = fromPool.getToken(i);\\n            toPool.getTokenIndex(address(coin));\\n        }\\n        fromToken.transferFrom(msg.sender, address(this), amount);\\n        fromToken.safeIncreaseAllowance(address(fromPool), amount);\\n        fromPool.removeLiquidity(amount, min_amounts, deadline);\\n\\n        uint256[] memory meta_amounts = new uint256[](toPoolLength);\\n\\n        for (uint8 i = 0; i < toPoolLength; i++) {\\n            IERC20 coin = toPool.getToken(i);\\n            uint256 addBalance = coin.balanceOf(address(this));\\n            coin.safeIncreaseAllowance(address(toPool), addBalance);\\n            meta_amounts[i] = addBalance;\\n        }\\n        toPool.addLiquidity(meta_amounts, minToMint, deadline);\\n\\n        uint256 lpAmount = toToken.balanceOf(address(this));\\n        toToken.transfer(msg.sender, lpAmount);\\n        return lpAmount;\\n    }\\n\\n    function addLiquidity(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 token = IERC20(pool.getLpToken());\\n        require(base_amounts.length == basePool.getNumberOfTokens(), \\\"invalidBaseAmountsLength\\\");\\n        require(meta_amounts.length == pool.getNumberOfTokens(), \\\"invalidMetaAmountsLength\\\");\\n        bool deposit_base = false;\\n        for (uint8 i = 0; i < base_amounts.length; i++) {\\n            uint256 amount = base_amounts[i];\\n            if (amount > 0) {\\n                deposit_base = true;\\n                IERC20 coin = basePool.getToken(i);\\n                coin.safeTransferFrom(msg.sender, address(this), amount);\\n                uint256 transferred = coin.balanceOf(address(this));\\n                coin.safeIncreaseAllowance(address(basePool), transferred);\\n                base_amounts[i] = transferred;\\n            }\\n        }\\n        if (deposit_base) {\\n            basePool.addLiquidity(base_amounts, 0, deadline);\\n        }\\n\\n        for (uint8 i = 0; i < meta_amounts.length; i++) {\\n            IERC20 coin = pool.getToken(i);\\n            if (meta_amounts[i] > 0) {\\n                coin.safeTransferFrom(msg.sender, address(this), meta_amounts[i]);\\n            }\\n            uint256 transferred = coin.balanceOf(address(this));\\n            coin.safeIncreaseAllowance(address(pool), transferred);\\n            meta_amounts[i] = transferred;\\n        }\\n        pool.addLiquidity(meta_amounts, minToMint, deadline);\\n        uint256 lpAmount = token.balanceOf(address(this));\\n        token.transfer(msg.sender, lpAmount);\\n        return lpAmount;\\n    }\\n\\n    function removeLiquidity(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256 _amount,\\n        uint256[] calldata min_amounts_meta,\\n        uint256[] calldata min_amounts_base,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts, uint256[] memory base_amounts) {\\n        IERC20 token = pool.getLpToken();\\n        IERC20 baseToken = basePool.getLpToken();\\n        token.transferFrom(msg.sender, address(this), _amount);\\n        token.safeIncreaseAllowance(address(pool), _amount);\\n        pool.removeLiquidity(_amount, min_amounts_meta, deadline);\\n        uint256 _base_amount = baseToken.balanceOf(address(this));\\n        baseToken.safeIncreaseAllowance(address(basePool), _base_amount);\\n\\n        basePool.removeLiquidity(_base_amount, min_amounts_base, deadline);\\n        // Transfer all coins out\\n        amounts = new uint256[](pool.getNumberOfTokens());\\n        for (uint8 i = 0; i < pool.getNumberOfTokens(); i++) {\\n            IERC20 coin = pool.getToken(i);\\n            amounts[i] = coin.balanceOf(address(this));\\n            if (amounts[i] > 0) {\\n                coin.safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        for (uint8 i = 0; i < basePool.getNumberOfTokens(); i++) {\\n            IERC20 coin = basePool.getToken(i);\\n            base_amounts[i] = coin.balanceOf(address(this));\\n            if (base_amounts[i] > 0) {\\n                coin.safeTransfer(msg.sender, base_amounts[i]);\\n            }\\n        }\\n    }\\n\\n    function calculateTokenAmount(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts,\\n        bool is_deposit\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 _base_tokens = basePool.calculateTokenAmount(base_amounts, is_deposit);\\n        meta_amounts[baseTokenIndex] = meta_amounts[baseTokenIndex] + _base_tokens;\\n        return pool.calculateTokenAmount(meta_amounts, is_deposit);\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256 amount\\n    ) external view returns (uint256[] memory meta_amounts, uint256[] memory base_amounts) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        meta_amounts = pool.calculateRemoveLiquidity(address(this), amount);\\n        uint256 lpAmount = meta_amounts[baseTokenIndex];\\n        meta_amounts[baseTokenIndex] = 0;\\n        base_amounts = basePool.calculateRemoveLiquidity(address(this), lpAmount);\\n    }\\n\\n    function swapFromBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        base_amounts[tokenIndexFrom] = dx;\\n        IERC20 coin = basePool.getToken(tokenIndexFrom);\\n        coin.safeTransferFrom(msg.sender, address(this), dx);\\n        coin.safeIncreaseAllowance(address(basePool), dx);\\n        uint256 baseLpAmount = basePool.addLiquidity(base_amounts, 0, deadline);\\n        if (baseTokenIndex != tokenIndexTo) {\\n            baseToken.safeIncreaseAllowance(address(pool), baseLpAmount);\\n            pool.swap(baseTokenIndex, tokenIndexTo, baseLpAmount, minDy, address(this),deadline);\\n        }\\n        IERC20 coinTo = pool.getToken(tokenIndexTo);\\n        uint256 amountOut = coinTo.balanceOf(address(this));\\n        coinTo.safeTransfer(msg.sender, amountOut);\\n        return amountOut;\\n    }\\n\\n    function calculateSwapFromBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        base_amounts[tokenIndexFrom] = dx;\\n        uint256 baseLpAmount = basePool.calculateTokenAmount(base_amounts, true);\\n        if (baseTokenIndex == tokenIndexTo) {\\n            return baseLpAmount;\\n        }\\n        return pool.calculateSwap(baseTokenIndex, tokenIndexTo, baseLpAmount);\\n    }\\n\\n    function swapToBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        IERC20 coin = pool.getToken(tokenIndexFrom);\\n        coin.safeTransferFrom(msg.sender, address(this), dx);\\n        uint256 tokenLPAmount = dx;\\n        if (baseTokenIndex != tokenIndexFrom) {\\n            coin.safeIncreaseAllowance(address(pool), dx);\\n            tokenLPAmount = pool.swap(tokenIndexFrom, baseTokenIndex, dx, 0,address(this), deadline);\\n        }\\n        baseToken.safeIncreaseAllowance(address(basePool), tokenLPAmount);\\n        basePool.removeLiquidityOneToken(tokenLPAmount, tokenIndexTo, minDy, deadline);\\n        IERC20 coinTo = basePool.getToken(tokenIndexTo);\\n        uint256 amountOut = coinTo.balanceOf(address(this));\\n        coinTo.safeTransfer(msg.sender, amountOut);\\n        return amountOut;\\n    }\\n\\n    function calculateSwapToBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 tokenLPAmount = dx;\\n        if (baseTokenIndex != tokenIndexFrom) {\\n            tokenLPAmount = pool.calculateSwap(tokenIndexFrom, baseTokenIndex, dx);\\n        }\\n        return basePool.calculateRemoveLiquidityOneToken(address(this), tokenLPAmount, tokenIndexTo);\\n    }\\n}\\n\",\"keccak256\":\"0x8ff067d1f1f9c71628a0dca56f118fb81c1b9e2f80ef957a2028a8b9f4a15bf6\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xa67a41e5fda599c131836b335224ff7a7b9ca413fd4e50eebf094010a92f2ed6\",\"license\":\"MIT\"},\"contracts/interfaces/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.13;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0b4b58556ab45ed60f0c1a71afcd654eb68d95abf3e8428b90db1ae9da2ed9e2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event TokenExchange(address indexed buyer, uint256 soldId, uint256 tokensSold, uint256 boughtId, uint256 tokensBought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 flashFee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0x95d4a839cdc7330d7dde45912fbe94fae2e099b37dbab297f27512e934064986\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x120a788e5a65b0fd09c3095fd9a7e6d537e1febaf9597c354ac566784f42552a\",\"license\":\"MIT\"},\"contracts/libraries/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\",\"keccak256\":\"0xb65425255681ab6c33749bb100758e67f0de571e5bff4a07bbd0be68d14f51d8\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0x59e02b5f3787999017ae9f91e04ea9397d779df128804ed661efc2c9a71ba211\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SAFE_ERC20_CALL_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf19e5c0648254052a70c105d5255f753e10b371308458b8001c264ae8b175d1e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61007a565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b611568806100896000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638119c0651161008c578063beabacc811610066578063beabacc8146101f6578063c31c9c0714610209578063d4b839921461021c578063f2fde38b1461022f57600080fd5b80638119c065146101c45780638da5cb5b146101cc578063a166a94d146101e357600080fd5b8063485cc955116100bd578063485cc9551461017e5780636aee0e6314610191578063715018a6146101bc57600080fd5b806313e7c9d8146100e45780633fe529f01461011c57806342b054f014610131575b600080fd5b6101076100f23660046112b6565b60036020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61012f61012a3660046112b6565b610242565b005b61016f61013f3660046112b6565b6002602052600090815260409020805460019091015460ff8216916001600160a01b036101009091048116911683565b604051610113939291906112f0565b61012f61018c366004611330565b6102d1565b6101a461019f366004611369565b610433565b6040516001600160a01b039091168152602001610113565b61012f61045d565b61012f6104ca565b6000546201000090046001600160a01b03166101a4565b61012f6101f1366004611382565b61059b565b61012f6102043660046113e2565b61086d565b6004546101a4906001600160a01b031681565b6001546101a4906001600160a01b031681565b61012f61023d3660046112b6565b610a2f565b6000546001600160a01b03620100009091041633146102a85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03166000908152600360205260409020805460ff19811660ff90911615179055565b6000546001600160a01b03620100009091041633146103325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029f565b600054610100900460ff168061034b575060005460ff16155b6103bd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161029f565b600054610100900460ff161580156103df576000805461ffff19166101011790555b600180546001600160a01b0380861673ffffffffffffffffffffffffffffffffffffffff19928316179092556004805492851692909116919091179055801561042e576000805461ff00191690555b505050565b6005818154811061044357600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b03620100009091041633146104be5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029f565b6104c86000610b11565b565b3360009081526003602052604090205460ff161515600114156104c85760005b6005548110156105985760006005828154811061050957610509611423565b60009182526020808320909101546001600160a01b031680835260029091526040822090925090815460ff166001811115610546576105466112da565b141561055b576105568183610b82565b610583565b6001815460ff166001811115610573576105736112da565b1415610583576105838183610dd4565b505080806105909061144f565b9150506104ea565b50565b6000546001600160a01b03620100009091041633146105fc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029f565b6001600160a01b0384166106525760405162461bcd60e51b815260206004820152601460248201527f7a65726f46726f6d546f6b656e41646472657373000000000000000000000000604482015260640161029f565b6001600160a01b0382166106a85760405162461bcd60e51b815260206004820152600f60248201527f7a65726f506f6f6c416464726573730000000000000000000000000000000000604482015260640161029f565b60018360018111156106bc576106bc6112da565b1415610718576001600160a01b0381166107185760405162461bcd60e51b815260206004820152601360248201527f7a65726f42617365506f6f6c4164647265737300000000000000000000000000604482015260640161029f565b6001600160a01b0384811660009081526002602052604090205461010090041661079557600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790555b60405180606001604052808460018111156107b2576107b26112da565b81526001600160a01b03808516602080840191909152848216604093840152908716600090815260029091522081518154829060ff1916600183818111156107fc576107fc6112da565b0217905550602082015181547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b03928316021782556040909201516001909101805473ffffffffffffffffffffffffffffffffffffffff19169190921617905550505050565b3360009081526003602052604090205460ff1615156001141561042e576040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa1580156108d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f5919061146a565b9050818110610a29576109126001600160a01b0385168484611036565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a0823190602401602060405180830381865afa158015610959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097d919061146a565b90508261098a8284611483565b146109d75760405162461bcd60e51b815260206004820152600d60248201527f7472616e736665722d6661696c00000000000000000000000000000000000000604482015260640161029f565b604080513381526001600160a01b0386811660208301528716818301526060810185905290517f399b8b2d1a2cd048deba86f2732270178911b7def887b957d4e4530a5955e1249181900360800190a1505b50505050565b6000546001600160a01b0362010000909104163314610a905760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029f565b6001600160a01b038116610b0c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161029f565b610598815b600080546001600160a01b03838116620100008181027fffffffffffffffffffff0000000000000000000000000000000000000000ffff851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b6040516370a0823160e01b815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bef919061146a565b90508015610a295783546040516319b02f4960e21b81526001600160a01b0385811660048301526101009092049091169060009082906366c0bd2490602401602060405180830381865afa158015610c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6f919061149a565b6001546040516319b02f4960e21b81526001600160a01b039182166004820152919250600091908416906366c0bd2490602401602060405180830381865afa158015610cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce3919061149a565b8754909150610d04906001600160a01b0387811691610100900416866110df565b6001600160a01b03831663bfd3956b838387600030610d25610e10426114bd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e089901b16815260ff9687166004820152959094166024860152604485019290925260648401526001600160a01b0316608483015260a482015260c4016020604051808303816000875af1158015610da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dca919061146a565b5050505050505050565b6040516370a0823160e01b815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e41919061146a565b90508015610a2957835460018501546040516319b02f4960e21b81526001600160a01b0386811660048301526101009093048316929091169060009083906366c0bd2490602401602060405180830381865afa158015610ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec9919061149a565b6001546040516319b02f4960e21b81526001600160a01b039182166004820152919250600091908416906366c0bd2490602401602060405180830381865afa158015610f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3d919061149a565b600454909150610f5a906001600160a01b038881169116876110df565b6004546001600160a01b031663ff969322858585858a6000610f7e610e10426114bd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b1681526001600160a01b03978816600482015296909516602487015260ff9384166044870152929091166064850152608484015260a483015260c482015260e4016020604051808303816000875af1158015611007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102b919061146a565b505050505050505050565b6040516001600160a01b03831660248201526044810182905261042e9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526111c3565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015611149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116d919061146a565b61117791906114bd565b6040516001600160a01b038516602482015260448101829052909150610a299085907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161107b565b600080836001600160a01b0316836040516111de91906114d5565b6000604051808303816000865af19150503d806000811461121b576040519150601f19603f3d011682016040523d82523d6000602084013e611220565b606091505b50915091506000821415611238573d6000803e3d6000fd5b805115806112555750808060200190518101906112559190611510565b610a295760405162461bcd60e51b815260206004820152601660248201527f534146455f45524332305f43414c4c5f4641494c454400000000000000000000604482015260640161029f565b6001600160a01b038116811461059857600080fd5b6000602082840312156112c857600080fd5b81356112d3816112a1565b9392505050565b634e487b7160e01b600052602160045260246000fd5b606081016002851061131257634e487b7160e01b600052602160045260246000fd5b9381526001600160a01b039283166020820152911660409091015290565b6000806040838503121561134357600080fd5b823561134e816112a1565b9150602083013561135e816112a1565b809150509250929050565b60006020828403121561137b57600080fd5b5035919050565b6000806000806080858703121561139857600080fd5b84356113a3816112a1565b93506020850135600281106113b757600080fd5b925060408501356113c7816112a1565b915060608501356113d7816112a1565b939692955090935050565b6000806000606084860312156113f757600080fd5b8335611402816112a1565b92506020840135611412816112a1565b929592945050506040919091013590565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561146357611463611439565b5060010190565b60006020828403121561147c57600080fd5b5051919050565b60008282101561149557611495611439565b500390565b6000602082840312156114ac57600080fd5b815160ff811681146112d357600080fd5b600082198211156114d0576114d0611439565b500190565b6000825160005b818110156114f657602081860181015185830152016114dc565b81811115611505576000828501525b509190910192915050565b60006020828403121561152257600080fd5b815180151581146112d357600080fdfea2646970667358221220c0494b6aeabb8c1b300d6b12b545240c05d6861fd0b156f1f4d511ff8eac256e64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c80638119c0651161008c578063beabacc811610066578063beabacc8146101f6578063c31c9c0714610209578063d4b839921461021c578063f2fde38b1461022f57600080fd5b80638119c065146101c45780638da5cb5b146101cc578063a166a94d146101e357600080fd5b8063485cc955116100bd578063485cc9551461017e5780636aee0e6314610191578063715018a6146101bc57600080fd5b806313e7c9d8146100e45780633fe529f01461011c57806342b054f014610131575b600080fd5b6101076100f23660046112b6565b60036020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61012f61012a3660046112b6565b610242565b005b61016f61013f3660046112b6565b6002602052600090815260409020805460019091015460ff8216916001600160a01b036101009091048116911683565b604051610113939291906112f0565b61012f61018c366004611330565b6102d1565b6101a461019f366004611369565b610433565b6040516001600160a01b039091168152602001610113565b61012f61045d565b61012f6104ca565b6000546201000090046001600160a01b03166101a4565b61012f6101f1366004611382565b61059b565b61012f6102043660046113e2565b61086d565b6004546101a4906001600160a01b031681565b6001546101a4906001600160a01b031681565b61012f61023d3660046112b6565b610a2f565b6000546001600160a01b03620100009091041633146102a85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03166000908152600360205260409020805460ff19811660ff90911615179055565b6000546001600160a01b03620100009091041633146103325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029f565b600054610100900460ff168061034b575060005460ff16155b6103bd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161029f565b600054610100900460ff161580156103df576000805461ffff19166101011790555b600180546001600160a01b0380861673ffffffffffffffffffffffffffffffffffffffff19928316179092556004805492851692909116919091179055801561042e576000805461ff00191690555b505050565b6005818154811061044357600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b03620100009091041633146104be5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029f565b6104c86000610b11565b565b3360009081526003602052604090205460ff161515600114156104c85760005b6005548110156105985760006005828154811061050957610509611423565b60009182526020808320909101546001600160a01b031680835260029091526040822090925090815460ff166001811115610546576105466112da565b141561055b576105568183610b82565b610583565b6001815460ff166001811115610573576105736112da565b1415610583576105838183610dd4565b505080806105909061144f565b9150506104ea565b50565b6000546001600160a01b03620100009091041633146105fc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029f565b6001600160a01b0384166106525760405162461bcd60e51b815260206004820152601460248201527f7a65726f46726f6d546f6b656e41646472657373000000000000000000000000604482015260640161029f565b6001600160a01b0382166106a85760405162461bcd60e51b815260206004820152600f60248201527f7a65726f506f6f6c416464726573730000000000000000000000000000000000604482015260640161029f565b60018360018111156106bc576106bc6112da565b1415610718576001600160a01b0381166107185760405162461bcd60e51b815260206004820152601360248201527f7a65726f42617365506f6f6c4164647265737300000000000000000000000000604482015260640161029f565b6001600160a01b0384811660009081526002602052604090205461010090041661079557600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386161790555b60405180606001604052808460018111156107b2576107b26112da565b81526001600160a01b03808516602080840191909152848216604093840152908716600090815260029091522081518154829060ff1916600183818111156107fc576107fc6112da565b0217905550602082015181547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b03928316021782556040909201516001909101805473ffffffffffffffffffffffffffffffffffffffff19169190921617905550505050565b3360009081526003602052604090205460ff1615156001141561042e576040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa1580156108d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f5919061146a565b9050818110610a29576109126001600160a01b0385168484611036565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a0823190602401602060405180830381865afa158015610959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097d919061146a565b90508261098a8284611483565b146109d75760405162461bcd60e51b815260206004820152600d60248201527f7472616e736665722d6661696c00000000000000000000000000000000000000604482015260640161029f565b604080513381526001600160a01b0386811660208301528716818301526060810185905290517f399b8b2d1a2cd048deba86f2732270178911b7def887b957d4e4530a5955e1249181900360800190a1505b50505050565b6000546001600160a01b0362010000909104163314610a905760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029f565b6001600160a01b038116610b0c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161029f565b610598815b600080546001600160a01b03838116620100008181027fffffffffffffffffffff0000000000000000000000000000000000000000ffff851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b6040516370a0823160e01b815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bef919061146a565b90508015610a295783546040516319b02f4960e21b81526001600160a01b0385811660048301526101009092049091169060009082906366c0bd2490602401602060405180830381865afa158015610c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6f919061149a565b6001546040516319b02f4960e21b81526001600160a01b039182166004820152919250600091908416906366c0bd2490602401602060405180830381865afa158015610cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce3919061149a565b8754909150610d04906001600160a01b0387811691610100900416866110df565b6001600160a01b03831663bfd3956b838387600030610d25610e10426114bd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e089901b16815260ff9687166004820152959094166024860152604485019290925260648401526001600160a01b0316608483015260a482015260c4016020604051808303816000875af1158015610da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dca919061146a565b5050505050505050565b6040516370a0823160e01b815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e41919061146a565b90508015610a2957835460018501546040516319b02f4960e21b81526001600160a01b0386811660048301526101009093048316929091169060009083906366c0bd2490602401602060405180830381865afa158015610ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec9919061149a565b6001546040516319b02f4960e21b81526001600160a01b039182166004820152919250600091908416906366c0bd2490602401602060405180830381865afa158015610f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3d919061149a565b600454909150610f5a906001600160a01b038881169116876110df565b6004546001600160a01b031663ff969322858585858a6000610f7e610e10426114bd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b1681526001600160a01b03978816600482015296909516602487015260ff9384166044870152929091166064850152608484015260a483015260c482015260e4016020604051808303816000875af1158015611007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102b919061146a565b505050505050505050565b6040516001600160a01b03831660248201526044810182905261042e9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526111c3565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015611149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116d919061146a565b61117791906114bd565b6040516001600160a01b038516602482015260448101829052909150610a299085907f095ea7b3000000000000000000000000000000000000000000000000000000009060640161107b565b600080836001600160a01b0316836040516111de91906114d5565b6000604051808303816000865af19150503d806000811461121b576040519150601f19603f3d011682016040523d82523d6000602084013e611220565b606091505b50915091506000821415611238573d6000803e3d6000fd5b805115806112555750808060200190518101906112559190611510565b610a295760405162461bcd60e51b815260206004820152601660248201527f534146455f45524332305f43414c4c5f4641494c454400000000000000000000604482015260640161029f565b6001600160a01b038116811461059857600080fd5b6000602082840312156112c857600080fd5b81356112d3816112a1565b9392505050565b634e487b7160e01b600052602160045260246000fd5b606081016002851061131257634e487b7160e01b600052602160045260246000fd5b9381526001600160a01b039283166020820152911660409091015290565b6000806040838503121561134357600080fd5b823561134e816112a1565b9150602083013561135e816112a1565b809150509250929050565b60006020828403121561137b57600080fd5b5035919050565b6000806000806080858703121561139857600080fd5b84356113a3816112a1565b93506020850135600281106113b757600080fd5b925060408501356113c7816112a1565b915060608501356113d7816112a1565b939692955090935050565b6000806000606084860312156113f757600080fd5b8335611402816112a1565b92506020840135611412816112a1565b929592945050506040919091013590565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561146357611463611439565b5060010190565b60006020828403121561147c57600080fd5b5051919050565b60008282101561149557611495611439565b500390565b6000602082840312156114ac57600080fd5b815160ff811681146112d357600080fd5b600082198211156114d0576114d0611439565b500190565b6000825160005b818110156114f657602081860181015185830152016114dc565b81811115611505576000828501525b509190910192915050565b60006020828403121561152257600080fd5b815180151581146112d357600080fdfea2646970667358221220c0494b6aeabb8c1b300d6b12b545240c05d6861fd0b156f1f4d511ff8eac256e64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "getSwapConfig": {
        "details": "fromToken => routerAddress"
      },
      "target": {
        "details": "convert all fee to this token"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 37815,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 37818,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 38006,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 29,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "target",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 35,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "getSwapConfig",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(SwapConfig)26_storage)"
      },
      {
        "astId": 39,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "operators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 42,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "swapRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(RequiemStableSwapRouter)21347"
      },
      {
        "astId": 45,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "whiteListedTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(RequiemStableSwapRouter)21347": {
        "encoding": "inplace",
        "label": "contract RequiemStableSwapRouter",
        "numberOfBytes": "20"
      },
      "t_enum(SwapPoolType)18": {
        "encoding": "inplace",
        "label": "enum FeeDistributor.SwapPoolType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(SwapConfig)26_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FeeDistributor.SwapConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(SwapConfig)26_storage"
      },
      "t_struct(SwapConfig)26_storage": {
        "encoding": "inplace",
        "label": "struct FeeDistributor.SwapConfig",
        "members": [
          {
            "astId": 21,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "poolType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(SwapPoolType)18"
          },
          {
            "astId": 23,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "pool",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 25,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "basePool",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}