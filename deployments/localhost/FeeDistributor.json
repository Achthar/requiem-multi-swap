{
  "address": "0x7a2088a1bFc9d81c55368AE168C2C02570cB814F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferFee",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getSwapConfig",
      "outputs": [
        {
          "internalType": "enum FeeDistributor.SwapPoolType",
          "name": "poolType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "basePool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "operators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "enum FeeDistributor.SwapPoolType",
          "name": "poolType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "basePool",
          "type": "address"
        }
      ],
      "name": "setSwapConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract RequiemStableSwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "toggleOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whiteListedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa4de7982572a2869bdfc339269e3a172b9cbf5f94fc58eae418d3f7dfafe5caa",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x7a2088a1bFc9d81c55368AE168C2C02570cB814F",
    "transactionIndex": 0,
    "gasUsed": "1152933",
    "logsBloom": "0x
    "blockHash": "0x024ad914d3cbb73b20daa322e1bcf060deaf15ea15fb113084d7af513a2d9c9a",
    "transactionHash": "0xa4de7982572a2869bdfc339269e3a172b9cbf5f94fc58eae418d3f7dfafe5caa",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 27,
        "transactionHash": "0xa4de7982572a2869bdfc339269e3a172b9cbf5f94fc58eae418d3f7dfafe5caa",
        "address": "0x7a2088a1bFc9d81c55368AE168C2C02570cB814F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x024ad914d3cbb73b20daa322e1bcf060deaf15ea15fb113084d7af513a2d9c9a"
      }
    ],
    "blockNumber": 27,
    "cumulativeGasUsed": "1152933",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d6a1208242f8eeb061cb4a070250613f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getSwapConfig\",\"outputs\":[{\"internalType\":\"enum FeeDistributor.SwapPoolType\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"basePool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"enum FeeDistributor.SwapPoolType\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"basePool\",\"type\":\"address\"}],\"name\":\"setSwapConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract RequiemStableSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"toggleOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whiteListedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"getSwapConfig\":{\"details\":\"fromToken => routerAddress\"},\"target\":{\"details\":\"convert all fee to this token\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FeeDistributor.sol\":\"FeeDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/FeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./libraries/Initializable.sol\\\";\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IRequiemStableSwap.sol\\\";\\nimport \\\"./RequiemStableSwapRouter.sol\\\";\\n\\ncontract FeeDistributor is Initializable, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    enum SwapPoolType {\\n        plain,\\n        meta\\n    }\\n\\n    struct SwapConfig {\\n        SwapPoolType poolType;\\n        address pool;\\n        address basePool;\\n    }\\n\\n    /// @dev convert all fee to this token\\n    address public target;\\n\\n    /// @dev fromToken => routerAddress\\n    mapping(address => SwapConfig) public getSwapConfig;\\n    mapping(address => bool) public operators;\\n\\n    RequiemStableSwapRouter public swapRouter;\\n    address[] public whiteListedTokens;\\n    uint256 constant swapTimeout = 3600;\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n\\n    function transfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        if (operators[msg.sender] == true) {\\n            uint256 _before = token.balanceOf(address(this));\\n            if (_before >= amount) {\\n                token.safeTransfer(to, amount);\\n                uint256 _after = token.balanceOf(address(this));\\n                require(_before - _after == amount, \\\"transfer-fail\\\");\\n                emit TransferFee(msg.sender, to, token, amount);\\n            }\\n        }\\n    }\\n\\n    function swap() external {\\n        if (operators[msg.sender] == true) {\\n            for (uint256 i = 0; i < whiteListedTokens.length; i++) {\\n                address fromToken = whiteListedTokens[i];\\n                SwapConfig storage swapConfig = getSwapConfig[fromToken];\\n\\n                if (swapConfig.poolType == SwapPoolType.plain) {\\n                    swapPlainPool(swapConfig, fromToken);\\n                } else if (swapConfig.poolType == SwapPoolType.meta) {\\n                    swapMetaPool(swapConfig, fromToken);\\n                }\\n            }\\n        }\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function swapPlainPool(SwapConfig storage config, address fromTokenAddress) internal {\\n        IERC20 fromToken = IERC20(fromTokenAddress);\\n        uint256 inAmount = fromToken.balanceOf(address(this));\\n        if (inAmount > 0) {\\n            IRequiemStableSwap pool = IRequiemStableSwap(config.pool);\\n            uint8 fromIndex = pool.getTokenIndex(fromTokenAddress);\\n            uint8 toIndex = pool.getTokenIndex(target);\\n            fromToken.safeIncreaseAllowance(config.pool, inAmount);\\n            pool.swap(fromIndex, toIndex, inAmount, 0, address(this), block.timestamp + swapTimeout);\\n        }\\n    }\\n\\n    function swapMetaPool(SwapConfig storage config, address fromTokenAddress) internal {\\n        IERC20 fromToken = IERC20(fromTokenAddress);\\n        uint256 inAmount = fromToken.balanceOf(address(this));\\n\\n        if (inAmount > 0) {\\n            IRequiemStableSwap pool = IRequiemStableSwap(config.pool);\\n            IRequiemStableSwap basePool = IRequiemStableSwap(config.basePool);\\n            uint8 tokenIndexFrom = pool.getTokenIndex(fromTokenAddress);\\n            uint8 tokenIndexTo = basePool.getTokenIndex(target);\\n            fromToken.safeIncreaseAllowance(address(swapRouter), inAmount);\\n            swapRouter.swapToBase(pool, basePool, tokenIndexFrom, tokenIndexTo, inAmount, 0, block.timestamp + swapTimeout);\\n        }\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function initialize(address _target, address _swapRouter) external onlyOwner initializer {\\n        target = _target;\\n        swapRouter = RequiemStableSwapRouter(_swapRouter);\\n    }\\n\\n    function toggleOperator(address _operator) external onlyOwner {\\n        operators[_operator] = !operators[_operator];\\n    }\\n\\n    function setSwapConfig(\\n        address _fromToken,\\n        SwapPoolType poolType,\\n        address pool,\\n        address basePool\\n    ) external onlyOwner {\\n        require(_fromToken != address(0), \\\"zeroFromTokenAddress\\\");\\n        require(pool != address(0), \\\"zeroPoolAddress\\\");\\n\\n        if (poolType == SwapPoolType.meta) {\\n            require(basePool != address(0), \\\"zeroBasePoolAddress\\\");\\n        }\\n\\n        if (getSwapConfig[_fromToken].pool == address(0)) {\\n            whiteListedTokens.push(_fromToken);\\n        }\\n\\n        getSwapConfig[_fromToken] = SwapConfig({poolType: poolType, pool: pool, basePool: basePool});\\n    }\\n\\n    /* =============== EVENTS ==================== */\\n\\n    event TransferFee(address caller, address to, IERC20 token, uint256 amount);\\n}\\n\",\"keccak256\":\"0xecfafe076544de83f098a7408453a1146799770162fbad92cfb25c9ce7e122aa\",\"license\":\"MIT\"},\"contracts/RequiemStableSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IRequiemStableSwap.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\ncontract RequiemStableSwapRouter {\\n    using SafeERC20 for IERC20;\\n\\n    function calculateConvert(\\n        IRequiemStableSwap fromPool,\\n        IRequiemStableSwap toPool,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        uint256 fromPoolLength = fromPool.getNumberOfTokens();\\n        uint256[] memory amounts = fromPool.calculateRemoveLiquidity(address(this), amount);\\n        uint256[] memory meta_amounts = new uint256[](fromPoolLength);\\n        for (uint8 i = 0; i < fromPoolLength; i++) {\\n            IERC20 fromCoin = fromPool.getToken(i);\\n            uint256 toCoinIndex = toPool.getTokenIndex(address(fromCoin));\\n            meta_amounts[toCoinIndex] = amounts[i];\\n        }\\n        return toPool.calculateTokenAmount(meta_amounts, true);\\n    }\\n\\n    function convert(\\n        IRequiemStableSwap fromPool,\\n        IRequiemStableSwap toPool,\\n        uint256 amount,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        uint256 fromPoolLength = fromPool.getNumberOfTokens();\\n        uint256 toPoolLength = toPool.getNumberOfTokens();\\n        require(address(fromPool) != address(toPool), \\\"fromPool = toPool\\\");\\n        require(fromPoolLength == toPoolLength, \\\"poolTokensLengthMissmatch\\\");\\n        IERC20 fromToken = fromPool.getLpToken();\\n        IERC20 toToken = toPool.getLpToken();\\n        uint256[] memory min_amounts = new uint256[](fromPoolLength);\\n        // validate token\\n        for (uint8 i = 0; i < fromPoolLength; i++) {\\n            IERC20 coin = fromPool.getToken(i);\\n            toPool.getTokenIndex(address(coin));\\n        }\\n        fromToken.transferFrom(msg.sender, address(this), amount);\\n        fromToken.safeIncreaseAllowance(address(fromPool), amount);\\n        fromPool.removeLiquidity(amount, min_amounts, deadline);\\n\\n        uint256[] memory meta_amounts = new uint256[](toPoolLength);\\n\\n        for (uint8 i = 0; i < toPoolLength; i++) {\\n            IERC20 coin = toPool.getToken(i);\\n            uint256 addBalance = coin.balanceOf(address(this));\\n            coin.safeIncreaseAllowance(address(toPool), addBalance);\\n            meta_amounts[i] = addBalance;\\n        }\\n        toPool.addLiquidity(meta_amounts, minToMint, deadline);\\n\\n        uint256 lpAmount = toToken.balanceOf(address(this));\\n        toToken.transfer(msg.sender, lpAmount);\\n        return lpAmount;\\n    }\\n\\n    function addLiquidity(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 token = IERC20(pool.getLpToken());\\n        require(base_amounts.length == basePool.getNumberOfTokens(), \\\"invalidBaseAmountsLength\\\");\\n        require(meta_amounts.length == pool.getNumberOfTokens(), \\\"invalidMetaAmountsLength\\\");\\n        bool deposit_base = false;\\n        for (uint8 i = 0; i < base_amounts.length; i++) {\\n            uint256 amount = base_amounts[i];\\n            if (amount > 0) {\\n                deposit_base = true;\\n                IERC20 coin = basePool.getToken(i);\\n                coin.safeTransferFrom(msg.sender, address(this), amount);\\n                uint256 transferred = coin.balanceOf(address(this));\\n                coin.safeIncreaseAllowance(address(basePool), transferred);\\n                base_amounts[i] = transferred;\\n            }\\n        }\\n        if (deposit_base) {\\n            basePool.addLiquidity(base_amounts, 0, deadline);\\n        }\\n\\n        for (uint8 i = 0; i < meta_amounts.length; i++) {\\n            IERC20 coin = pool.getToken(i);\\n            if (meta_amounts[i] > 0) {\\n                coin.safeTransferFrom(msg.sender, address(this), meta_amounts[i]);\\n            }\\n            uint256 transferred = coin.balanceOf(address(this));\\n            coin.safeIncreaseAllowance(address(pool), transferred);\\n            meta_amounts[i] = transferred;\\n        }\\n        pool.addLiquidity(meta_amounts, minToMint, deadline);\\n        uint256 lpAmount = token.balanceOf(address(this));\\n        token.transfer(msg.sender, lpAmount);\\n        return lpAmount;\\n    }\\n\\n    function removeLiquidity(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256 _amount,\\n        uint256[] calldata min_amounts_meta,\\n        uint256[] calldata min_amounts_base,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts, uint256[] memory base_amounts) {\\n        IERC20 token = pool.getLpToken();\\n        IERC20 baseToken = basePool.getLpToken();\\n        token.transferFrom(msg.sender, address(this), _amount);\\n        token.safeIncreaseAllowance(address(pool), _amount);\\n        pool.removeLiquidity(_amount, min_amounts_meta, deadline);\\n        uint256 _base_amount = baseToken.balanceOf(address(this));\\n        baseToken.safeIncreaseAllowance(address(basePool), _base_amount);\\n\\n        basePool.removeLiquidity(_base_amount, min_amounts_base, deadline);\\n        // Transfer all coins out\\n        amounts = new uint256[](pool.getNumberOfTokens());\\n        for (uint8 i = 0; i < pool.getNumberOfTokens(); i++) {\\n            IERC20 coin = pool.getToken(i);\\n            amounts[i] = coin.balanceOf(address(this));\\n            if (amounts[i] > 0) {\\n                coin.safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        for (uint8 i = 0; i < basePool.getNumberOfTokens(); i++) {\\n            IERC20 coin = basePool.getToken(i);\\n            base_amounts[i] = coin.balanceOf(address(this));\\n            if (base_amounts[i] > 0) {\\n                coin.safeTransfer(msg.sender, base_amounts[i]);\\n            }\\n        }\\n    }\\n\\n    function calculateTokenAmount(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts,\\n        bool is_deposit\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 _base_tokens = basePool.calculateTokenAmount(base_amounts, is_deposit);\\n        meta_amounts[baseTokenIndex] = meta_amounts[baseTokenIndex] + _base_tokens;\\n        return pool.calculateTokenAmount(meta_amounts, is_deposit);\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256 amount\\n    ) external view returns (uint256[] memory meta_amounts, uint256[] memory base_amounts) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        meta_amounts = pool.calculateRemoveLiquidity(address(this), amount);\\n        uint256 lpAmount = meta_amounts[baseTokenIndex];\\n        meta_amounts[baseTokenIndex] = 0;\\n        base_amounts = basePool.calculateRemoveLiquidity(address(this), lpAmount);\\n    }\\n\\n    function swapFromBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        base_amounts[tokenIndexFrom] = dx;\\n        IERC20 coin = basePool.getToken(tokenIndexFrom);\\n        coin.safeTransferFrom(msg.sender, address(this), dx);\\n        coin.safeIncreaseAllowance(address(basePool), dx);\\n        uint256 baseLpAmount = basePool.addLiquidity(base_amounts, 0, deadline);\\n        if (baseTokenIndex != tokenIndexTo) {\\n            baseToken.safeIncreaseAllowance(address(pool), baseLpAmount);\\n            pool.swap(baseTokenIndex, tokenIndexTo, baseLpAmount, minDy, address(this),deadline);\\n        }\\n        IERC20 coinTo = pool.getToken(tokenIndexTo);\\n        uint256 amountOut = coinTo.balanceOf(address(this));\\n        coinTo.safeTransfer(msg.sender, amountOut);\\n        return amountOut;\\n    }\\n\\n    function calculateSwapFromBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        base_amounts[tokenIndexFrom] = dx;\\n        uint256 baseLpAmount = basePool.calculateTokenAmount(base_amounts, true);\\n        if (baseTokenIndex == tokenIndexTo) {\\n            return baseLpAmount;\\n        }\\n        return pool.calculateSwap(baseTokenIndex, tokenIndexTo, baseLpAmount);\\n    }\\n\\n    function swapToBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        IERC20 coin = pool.getToken(tokenIndexFrom);\\n        coin.safeTransferFrom(msg.sender, address(this), dx);\\n        uint256 tokenLPAmount = dx;\\n        if (baseTokenIndex != tokenIndexFrom) {\\n            coin.safeIncreaseAllowance(address(pool), dx);\\n            tokenLPAmount = pool.swap(tokenIndexFrom, baseTokenIndex, dx, 0,address(this), deadline);\\n        }\\n        baseToken.safeIncreaseAllowance(address(basePool), tokenLPAmount);\\n        basePool.removeLiquidityOneToken(tokenLPAmount, tokenIndexTo, minDy, deadline);\\n        IERC20 coinTo = basePool.getToken(tokenIndexTo);\\n        uint256 amountOut = coinTo.balanceOf(address(this));\\n        coinTo.safeTransfer(msg.sender, amountOut);\\n        return amountOut;\\n    }\\n\\n    function calculateSwapToBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 tokenLPAmount = dx;\\n        if (baseTokenIndex != tokenIndexFrom) {\\n            tokenLPAmount = pool.calculateSwap(tokenIndexFrom, baseTokenIndex, dx);\\n        }\\n        return basePool.calculateRemoveLiquidityOneToken(address(this), tokenLPAmount, tokenIndexTo);\\n    }\\n}\\n\",\"keccak256\":\"0xead97497ee3641b7bfbc154c53621d7b2027074be1bb5c5e16316118ea447568\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb7230835a4efbbbebcb5371d121977e859388b33f3ee5d9a7a44fc4de8d6b970\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event TokenExchange(address indexed buyer, uint256 soldId, uint256 tokensSold, uint256 boughtId, uint256 tokensBought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0xe47d45ba36e1a5e9e044ebb0815b1c4ced235dc5c7b38d30f9fe6d3768d5749f\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xd5f49ed9e5ab4471a4c25f3730f50ed4c29a9bfa9637306f227c2a59a18bbe81\",\"license\":\"MIT\"},\"contracts/libraries/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\",\"keccak256\":\"0xb65425255681ab6c33749bb100758e67f0de571e5bff4a07bbd0be68d14f51d8\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xd978150fb13e68cd0b2b4b237d65306f55397437127bea72622d5cd4244ba92b\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        RequiemErrors._require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\n    }\\n}\\n\",\"keccak256\":\"0xa39a2c090cd9727eeca0658c5a3c382f9dcfe581f4d323bb388776c3237c72fd\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x37ebaca1c58a9daf307229c45122f12d603a95d1d92c1a8e7648b1910755bfa0\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61007a565b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b611370806100896000396000f3fe608060405234801561001057600080fd5b50600436106100af5760003560e01c806313e7c9d8146100b45780633fe529f0146100ec57806342b054f014610101578063485cc9551461014e5780636aee0e6314610161578063715018a6146101815780638119c065146101895780638da5cb5b14610191578063a166a94d14610199578063beabacc8146101ac578063c31c9c07146101bf578063d4b83992146101d2578063f2fde38b146101e5575b600080fd5b6100d76100c236600461105c565b60036020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100ff6100fa36600461105c565b6101f8565b005b61013f61010f36600461105c565b6002602052600090815260409020805460019091015460ff8216916001600160a01b036101009091048116911683565b6040516100e393929190611096565b6100ff61015c3660046110d6565b610259565b61017461016f36600461110f565b61036d565b6040516100e39190611128565b6100ff610397565b6100ff6103d2565b6101746104a3565b6100ff6101a736600461113c565b6104b8565b6100ff6101ba36600461119c565b610706565b600454610174906001600160a01b031681565b600154610174906001600160a01b031681565b6100ff6101f336600461105c565b6108c2565b336102016104a3565b6001600160a01b0316146102305760405162461bcd60e51b8152600401610227906111dd565b60405180910390fd5b6001600160a01b03166000908152600360205260409020805460ff19811660ff90911615179055565b336102626104a3565b6001600160a01b0316146102885760405162461bcd60e51b8152600401610227906111dd565b600054610100900460ff16806102a1575060005460ff16155b6103045760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610227565b600054610100900460ff16158015610326576000805461ffff19166101011790555b600180546001600160a01b038086166001600160a01b03199283161790925560048054928516929091169190911790558015610368576000805461ff00191690555b505050565b6005818154811061037d57600080fd5b6000918252602090912001546001600160a01b0316905081565b336103a06104a3565b6001600160a01b0316146103c65760405162461bcd60e51b8152600401610227906111dd565b6103d0600061095b565b565b3360009081526003602052604090205460ff161515600114156103d05760005b6005548110156104a05760006005828154811061041157610411611212565b60009182526020808320909101546001600160a01b031680835260029091526040822090925090815460ff16600181111561044e5761044e611080565b14156104635761045e81836109b6565b61048b565b6001815460ff16600181111561047b5761047b611080565b141561048b5761048b8183610bfb565b505080806104989061123e565b9150506103f2565b50565b6000546201000090046001600160a01b031690565b336104c16104a3565b6001600160a01b0316146104e75760405162461bcd60e51b8152600401610227906111dd565b6001600160a01b0384166105345760405162461bcd60e51b81526020600482015260146024820152737a65726f46726f6d546f6b656e4164647265737360601b6044820152606401610227565b6001600160a01b03821661057c5760405162461bcd60e51b815260206004820152600f60248201526e7a65726f506f6f6c4164647265737360881b6044820152606401610227565b600183600181111561059057610590611080565b14156105e2576001600160a01b0381166105e25760405162461bcd60e51b81526020600482015260136024820152727a65726f42617365506f6f6c4164647265737360681b6044820152606401610227565b6001600160a01b0384811660009081526002602052604090205461010090041661065257600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b0386161790555b604051806060016040528084600181111561066f5761066f611080565b81526001600160a01b03808516602080840191909152848216604093840152908716600090815260029091522081518154829060ff1916600183818111156106b9576106b9611080565b021790555060208201518154610100600160a81b0319166101006001600160a01b0392831602178255604090920151600190910180546001600160a01b0319169190921617905550505050565b3360009081526003602052604090205460ff16151560011415610368576040516370a0823160e01b81526000906001600160a01b038516906370a0823190610752903090600401611128565b602060405180830381865afa15801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190611259565b90508181106108bc576107b06001600160a01b0385168484610e52565b6040516370a0823160e01b81526000906001600160a01b038616906370a08231906107df903090600401611128565b602060405180830381865afa1580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108209190611259565b90508261082d8284611272565b1461086a5760405162461bcd60e51b815260206004820152600d60248201526c1d1c985b9cd9995c8b59985a5b609a1b6044820152606401610227565b604080513381526001600160a01b0386811660208301528716818301526060810185905290517f399b8b2d1a2cd048deba86f2732270178911b7def887b957d4e4530a5955e1249181900360800190a1505b50505050565b336108cb6104a3565b6001600160a01b0316146108f15760405162461bcd60e51b8152600401610227906111dd565b6001600160a01b0381166109565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610227565b6104a0815b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b6040516370a0823160e01b815281906000906001600160a01b038316906370a08231906109e7903090600401611128565b602060405180830381865afa158015610a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a289190611259565b905080156108bc5783546040516319b02f4960e21b81526101009091046001600160a01b03169060009082906366c0bd2490610a68908890600401611128565b602060405180830381865afa158015610a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa99190611289565b6001546040516319b02f4960e21b81529192506000916001600160a01b03858116926366c0bd2492610ae19290911690600401611128565b602060405180830381865afa158015610afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b229190611289565b8754909150610b43906001600160a01b038781169161010090041686610ea8565b6001600160a01b03831663bfd3956b838387600030610b64610e10426112ac565b6040516001600160e01b031960e089901b16815260ff9687166004820152959094166024860152604485019290925260648401526001600160a01b0316608483015260a482015260c4016020604051808303816000875af1158015610bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf19190611259565b5050505050505050565b6040516370a0823160e01b815281906000906001600160a01b038316906370a0823190610c2c903090600401611128565b602060405180830381865afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d9190611259565b905080156108bc57835460018501546040516319b02f4960e21b81526101009092046001600160a01b039081169291169060009083906366c0bd2490610cb7908990600401611128565b602060405180830381865afa158015610cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf89190611289565b6001546040516319b02f4960e21b81529192506000916001600160a01b03858116926366c0bd2492610d309290911690600401611128565b602060405180830381865afa158015610d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d719190611289565b600454909150610d8e906001600160a01b03888116911687610ea8565b6004546001600160a01b031663ff969322858585858a6000610db2610e10426112ac565b6040516001600160e01b031960e08a901b1681526001600160a01b03978816600482015296909516602487015260ff9384166044870152929091166064850152608484015260a483015260c482015260e4016020604051808303816000875af1158015610e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e479190611259565b505050505050505050565b6103688363a9059cbb60e01b8484604051602401610e719291906112c4565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610f48565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015610ef9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1d9190611259565b610f2791906112ac565b90506108bc8463095ea7b360e01b8584604051602401610e719291906112c4565b600080836001600160a01b031683604051610f6391906112dd565b6000604051808303816000865af19150503d8060008114610fa0576040519150601f19603f3d011682016040523d82523d6000602084013e610fa5565b606091505b50915091506000821415610fbd573d6000803e3d6000fd5b6108bc815160001480610fdf575081806020019051810190610fdf9190611318565b6101a281610ff057610ff081610ff4565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6001600160a01b03811681146104a057600080fd5b60006020828403121561106e57600080fd5b813561107981611047565b9392505050565b634e487b7160e01b600052602160045260246000fd5b60608101600285106110b857634e487b7160e01b600052602160045260246000fd5b9381526001600160a01b039283166020820152911660409091015290565b600080604083850312156110e957600080fd5b82356110f481611047565b9150602083013561110481611047565b809150509250929050565b60006020828403121561112157600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6000806000806080858703121561115257600080fd5b843561115d81611047565b935060208501356002811061117157600080fd5b9250604085013561118181611047565b9150606085013561119181611047565b939692955090935050565b6000806000606084860312156111b157600080fd5b83356111bc81611047565b925060208401356111cc81611047565b929592945050506040919091013590565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561125257611252611228565b5060010190565b60006020828403121561126b57600080fd5b5051919050565b60008282101561128457611284611228565b500390565b60006020828403121561129b57600080fd5b815160ff8116811461107957600080fd5b600082198211156112bf576112bf611228565b500190565b6001600160a01b03929092168252602082015260400190565b6000825160005b818110156112fe57602081860181015185830152016112e4565b8181111561130d576000828501525b509190910192915050565b60006020828403121561132a57600080fd5b8151801515811461107957600080fdfea26469706673582212200cf37307fcc58e54af857a18d8e7dfe2c20103de819dee0c809e5742f2e47b3864736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100af5760003560e01c806313e7c9d8146100b45780633fe529f0146100ec57806342b054f014610101578063485cc9551461014e5780636aee0e6314610161578063715018a6146101815780638119c065146101895780638da5cb5b14610191578063a166a94d14610199578063beabacc8146101ac578063c31c9c07146101bf578063d4b83992146101d2578063f2fde38b146101e5575b600080fd5b6100d76100c236600461105c565b60036020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100ff6100fa36600461105c565b6101f8565b005b61013f61010f36600461105c565b6002602052600090815260409020805460019091015460ff8216916001600160a01b036101009091048116911683565b6040516100e393929190611096565b6100ff61015c3660046110d6565b610259565b61017461016f36600461110f565b61036d565b6040516100e39190611128565b6100ff610397565b6100ff6103d2565b6101746104a3565b6100ff6101a736600461113c565b6104b8565b6100ff6101ba36600461119c565b610706565b600454610174906001600160a01b031681565b600154610174906001600160a01b031681565b6100ff6101f336600461105c565b6108c2565b336102016104a3565b6001600160a01b0316146102305760405162461bcd60e51b8152600401610227906111dd565b60405180910390fd5b6001600160a01b03166000908152600360205260409020805460ff19811660ff90911615179055565b336102626104a3565b6001600160a01b0316146102885760405162461bcd60e51b8152600401610227906111dd565b600054610100900460ff16806102a1575060005460ff16155b6103045760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610227565b600054610100900460ff16158015610326576000805461ffff19166101011790555b600180546001600160a01b038086166001600160a01b03199283161790925560048054928516929091169190911790558015610368576000805461ff00191690555b505050565b6005818154811061037d57600080fd5b6000918252602090912001546001600160a01b0316905081565b336103a06104a3565b6001600160a01b0316146103c65760405162461bcd60e51b8152600401610227906111dd565b6103d0600061095b565b565b3360009081526003602052604090205460ff161515600114156103d05760005b6005548110156104a05760006005828154811061041157610411611212565b60009182526020808320909101546001600160a01b031680835260029091526040822090925090815460ff16600181111561044e5761044e611080565b14156104635761045e81836109b6565b61048b565b6001815460ff16600181111561047b5761047b611080565b141561048b5761048b8183610bfb565b505080806104989061123e565b9150506103f2565b50565b6000546201000090046001600160a01b031690565b336104c16104a3565b6001600160a01b0316146104e75760405162461bcd60e51b8152600401610227906111dd565b6001600160a01b0384166105345760405162461bcd60e51b81526020600482015260146024820152737a65726f46726f6d546f6b656e4164647265737360601b6044820152606401610227565b6001600160a01b03821661057c5760405162461bcd60e51b815260206004820152600f60248201526e7a65726f506f6f6c4164647265737360881b6044820152606401610227565b600183600181111561059057610590611080565b14156105e2576001600160a01b0381166105e25760405162461bcd60e51b81526020600482015260136024820152727a65726f42617365506f6f6c4164647265737360681b6044820152606401610227565b6001600160a01b0384811660009081526002602052604090205461010090041661065257600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b0386161790555b604051806060016040528084600181111561066f5761066f611080565b81526001600160a01b03808516602080840191909152848216604093840152908716600090815260029091522081518154829060ff1916600183818111156106b9576106b9611080565b021790555060208201518154610100600160a81b0319166101006001600160a01b0392831602178255604090920151600190910180546001600160a01b0319169190921617905550505050565b3360009081526003602052604090205460ff16151560011415610368576040516370a0823160e01b81526000906001600160a01b038516906370a0823190610752903090600401611128565b602060405180830381865afa15801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190611259565b90508181106108bc576107b06001600160a01b0385168484610e52565b6040516370a0823160e01b81526000906001600160a01b038616906370a08231906107df903090600401611128565b602060405180830381865afa1580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108209190611259565b90508261082d8284611272565b1461086a5760405162461bcd60e51b815260206004820152600d60248201526c1d1c985b9cd9995c8b59985a5b609a1b6044820152606401610227565b604080513381526001600160a01b0386811660208301528716818301526060810185905290517f399b8b2d1a2cd048deba86f2732270178911b7def887b957d4e4530a5955e1249181900360800190a1505b50505050565b336108cb6104a3565b6001600160a01b0316146108f15760405162461bcd60e51b8152600401610227906111dd565b6001600160a01b0381166109565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610227565b6104a0815b600080546001600160a01b038381166201000081810262010000600160b01b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b6040516370a0823160e01b815281906000906001600160a01b038316906370a08231906109e7903090600401611128565b602060405180830381865afa158015610a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a289190611259565b905080156108bc5783546040516319b02f4960e21b81526101009091046001600160a01b03169060009082906366c0bd2490610a68908890600401611128565b602060405180830381865afa158015610a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa99190611289565b6001546040516319b02f4960e21b81529192506000916001600160a01b03858116926366c0bd2492610ae19290911690600401611128565b602060405180830381865afa158015610afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b229190611289565b8754909150610b43906001600160a01b038781169161010090041686610ea8565b6001600160a01b03831663bfd3956b838387600030610b64610e10426112ac565b6040516001600160e01b031960e089901b16815260ff9687166004820152959094166024860152604485019290925260648401526001600160a01b0316608483015260a482015260c4016020604051808303816000875af1158015610bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf19190611259565b5050505050505050565b6040516370a0823160e01b815281906000906001600160a01b038316906370a0823190610c2c903090600401611128565b602060405180830381865afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d9190611259565b905080156108bc57835460018501546040516319b02f4960e21b81526101009092046001600160a01b039081169291169060009083906366c0bd2490610cb7908990600401611128565b602060405180830381865afa158015610cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf89190611289565b6001546040516319b02f4960e21b81529192506000916001600160a01b03858116926366c0bd2492610d309290911690600401611128565b602060405180830381865afa158015610d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d719190611289565b600454909150610d8e906001600160a01b03888116911687610ea8565b6004546001600160a01b031663ff969322858585858a6000610db2610e10426112ac565b6040516001600160e01b031960e08a901b1681526001600160a01b03978816600482015296909516602487015260ff9384166044870152929091166064850152608484015260a483015260c482015260e4016020604051808303816000875af1158015610e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e479190611259565b505050505050505050565b6103688363a9059cbb60e01b8484604051602401610e719291906112c4565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610f48565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015610ef9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1d9190611259565b610f2791906112ac565b90506108bc8463095ea7b360e01b8584604051602401610e719291906112c4565b600080836001600160a01b031683604051610f6391906112dd565b6000604051808303816000865af19150503d8060008114610fa0576040519150601f19603f3d011682016040523d82523d6000602084013e610fa5565b606091505b50915091506000821415610fbd573d6000803e3d6000fd5b6108bc815160001480610fdf575081806020019051810190610fdf9190611318565b6101a281610ff057610ff081610ff4565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6001600160a01b03811681146104a057600080fd5b60006020828403121561106e57600080fd5b813561107981611047565b9392505050565b634e487b7160e01b600052602160045260246000fd5b60608101600285106110b857634e487b7160e01b600052602160045260246000fd5b9381526001600160a01b039283166020820152911660409091015290565b600080604083850312156110e957600080fd5b82356110f481611047565b9150602083013561110481611047565b809150509250929050565b60006020828403121561112157600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6000806000806080858703121561115257600080fd5b843561115d81611047565b935060208501356002811061117157600080fd5b9250604085013561118181611047565b9150606085013561119181611047565b939692955090935050565b6000806000606084860312156111b157600080fd5b83356111bc81611047565b925060208401356111cc81611047565b929592945050506040919091013590565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561125257611252611228565b5060010190565b60006020828403121561126b57600080fd5b5051919050565b60008282101561128457611284611228565b500390565b60006020828403121561129b57600080fd5b815160ff8116811461107957600080fd5b600082198211156112bf576112bf611228565b500190565b6001600160a01b03929092168252602082015260400190565b6000825160005b818110156112fe57602081860181015185830152016112e4565b8181111561130d576000828501525b509190910192915050565b60006020828403121561132a57600080fd5b8151801515811461107957600080fdfea26469706673582212200cf37307fcc58e54af857a18d8e7dfe2c20103de819dee0c809e5742f2e47b3864736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "getSwapConfig": {
        "details": "fromToken => routerAddress"
      },
      "target": {
        "details": "convert all fee to this token"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 40124,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 40127,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 40315,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 29,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "target",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 35,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "getSwapConfig",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(SwapConfig)26_storage)"
      },
      {
        "astId": 39,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "operators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 42,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "swapRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(RequiemStableSwapRouter)25642"
      },
      {
        "astId": 45,
        "contract": "contracts/FeeDistributor.sol:FeeDistributor",
        "label": "whiteListedTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(RequiemStableSwapRouter)25642": {
        "encoding": "inplace",
        "label": "contract RequiemStableSwapRouter",
        "numberOfBytes": "20"
      },
      "t_enum(SwapPoolType)18": {
        "encoding": "inplace",
        "label": "enum FeeDistributor.SwapPoolType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(SwapConfig)26_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FeeDistributor.SwapConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(SwapConfig)26_storage"
      },
      "t_struct(SwapConfig)26_storage": {
        "encoding": "inplace",
        "label": "struct FeeDistributor.SwapConfig",
        "members": [
          {
            "astId": 21,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "poolType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(SwapPoolType)18"
          },
          {
            "astId": 23,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "pool",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 25,
            "contract": "contracts/FeeDistributor.sol:FeeDistributor",
            "label": "basePool",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}