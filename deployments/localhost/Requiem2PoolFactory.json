{
  "address": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_formula",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weightedMath",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenWeight0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "normalizedWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFeePercentage",
          "type": "uint32"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "normalizedWeight0",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "swapFeePercentage",
          "type": "uint32"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "getWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenWeight0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenWeight1",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "isPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weightedMath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x300bebc712dbe3d30e371a21b1ac4e4c7cc2ef4e960370b1485bb02c2bf1ab5f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
    "transactionIndex": 0,
    "gasUsed": "2988014",
    "logsBloom": "0x
    "blockHash": "0x2a6594cdb59a29ba1621a3a9e84e41ac447a7daba7739886bab73a5e442214ed",
    "transactionHash": "0x300bebc712dbe3d30e371a21b1ac4e4c7cc2ef4e960370b1485bb02c2bf1ab5f",
    "logs": [],
    "blockNumber": 12,
    "cumulativeGasUsed": "2988014",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
    "0x610178dA211FEF7D417bC0e6FeD39F05609AD788"
  ],
  "solcInputHash": "805deb118869de4d09a8d2c6ccdde3e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_formula\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weightedMath\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenWeight0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"normalizedWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFeePercentage\",\"type\":\"uint32\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"normalizedWeight0\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"swapFeePercentage\",\"type\":\"uint32\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenWeight0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenWeight1\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightedMath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Requiem2PoolFactory.sol\":\"Requiem2PoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/Requiem2Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IRequiem2Pool.sol\\\";\\nimport \\\"./interfaces/IRequiemPoolFormula.sol\\\";\\nimport \\\"./RequiemERC20.sol\\\";\\nimport \\\"./interfaces/pool/IFormulaProvider.sol\\\";\\nimport \\\"./interfaces/pool/IRequiemWeightedMath.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./libraries/math/Math.sol\\\";\\nimport \\\"./libraries/math/FixedPoint.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20Metadata.sol\\\";\\nimport \\\"./interfaces/IRequiem2PoolFactory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Callee.sol\\\";\\n\\ncontract Requiem2Pool is IRequiem2Pool, RequiemERC20 {\\n    using FixedPoint for uint256;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    address public factory;\\n    address public baseFormula;\\n    address public token0;\\n    address public token1;\\n\\n    IRequiemWeightedMath private immutable weightedMath;\\n\\n    event SwapFeePercentageChanged(uint256 swapFeePercentage);\\n\\n    uint256 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint256 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 private unlocked = 1;\\n\\n    uint256 private collectedFee0; // uses single storage slot, accessible via getReserves\\n    uint256 private collectedFee1; // uses single storage slot, accessible via getReserves\\n    uint32 private tokenWeight0;\\n\\n    uint256 private _lastInvariant;\\n\\n    address internal _token0;\\n    address internal _token1;\\n\\n    uint256 private _normalizedWeight0;\\n    uint256 private _normalizedWeight1;\\n\\n    // The protocol fees will always be charged using the token associated with the max weight in the pool.\\n    // Since these Pools will register tokens only once, we can assume this index will be constant.\\n    uint256 private _maxWeightTokenIndex;\\n\\n    // All token balances are normalized to behave as if the token had 18 decimals. We assume a token's decimals will\\n    // not change throughout its lifetime, and store the corresponding scaling factor for each at construction time.\\n    // These factors are always greater than or equal to one: tokens with more than 18 decimals are not supported.\\n    uint256 internal _scalingFactor0;\\n    uint256 internal _scalingFactor1;\\n\\n    uint32 private swapFee;\\n\\n    modifier lock() {\\n        require(unlocked == 1, \\\"REQLP: LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint256 _reserve0,\\n            uint256 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function getCollectedFees() public view returns (uint256 _collectedFee0, uint256 _collectedFee1) {\\n        _collectedFee0 = collectedFee0;\\n        _collectedFee1 = collectedFee1;\\n    }\\n\\n    function getTokenWeights() public view returns (uint256 _tokenWeight0, uint256 _tokenWeight1) {\\n        _tokenWeight0 = _normalizedWeight0;\\n        _tokenWeight1 = _normalizedWeight1;\\n    }\\n\\n    function getSwapFee() public view returns (uint32 _swapFee) {\\n        _swapFee = swapFee;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"REQLP: TRANSFER_FAILED\\\");\\n    }\\n\\n    constructor() {\\n        factory = msg.sender;\\n        weightedMath = IRequiemWeightedMath(IFormulaProvider(factory).weightedMath());\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(\\n        address token0,\\n        address token1,\\n        uint256 normalizedWeight0,\\n        uint32 swapFeePercentage\\n    ) external override {\\n        require(msg.sender == factory, \\\"REQLP: FORBIDDEN\\\");\\n\\n        uint256 normalizedWeight1 = FixedPoint.ONE - normalizedWeight0;\\n        _scalingFactor0 = _computeScalingFactor(token0);\\n        _scalingFactor1 = _computeScalingFactor(token1);\\n\\n        // Ensure each normalized weight is above them minimum and find the token index of the maximum weight\\n        RequiemErrors._require(FixedPoint.ONE * normalizedWeight0 >= weightedMath._MIN_WEIGHT(), Errors.MIN_WEIGHT);\\n        RequiemErrors._require(FixedPoint.ONE * normalizedWeight1 >= weightedMath._MIN_WEIGHT(), Errors.MIN_WEIGHT);\\n\\n        // Ensure that the normalized weights sum to ONE\\n        uint256 normalizedSum = normalizedWeight0 + normalizedWeight1;\\n        RequiemErrors._require(normalizedSum == FixedPoint.ONE, Errors.NORMALIZED_WEIGHT_INVARIANT);\\n\\n        _normalizedWeight0 = uint256(normalizedWeight0);\\n        _normalizedWeight1 = normalizedWeight1;\\n        _maxWeightTokenIndex = normalizedWeight0 >= normalizedWeight1 ? 0 : 1;\\n        swapFee = swapFeePercentage;\\n    }\\n\\n    /**\\n     * @dev Returns a scaling factor that, when multiplied to a token amount for `token`, normalizes its balance as if\\n     * it had 18 decimals.\\n     */\\n    function _computeScalingFactor(address token) private view returns (uint256) {\\n        // Tokens that don't implement the `decimals` method are not supported.\\n        uint256 tokenDecimals = IERC20Metadata(address(token)).decimals();\\n\\n        // Tokens with more than 18 decimals are not supported.\\n        uint256 decimalsDifference = 18 - tokenDecimals;\\n        return 10**decimalsDifference;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint256 _reserve0,\\n        uint256 _reserve1\\n    ) private {\\n        uint256 _tokenWeight0 = tokenWeight0;\\n        require(balance0 * (100 - _tokenWeight0) <= type(uint256).max && balance1 * _tokenWeight0 <= type(uint256).max, \\\"REQLP: OVERFLOW\\\");\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n        // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            uint256 mReserve0 = _reserve0 * (100 - _tokenWeight0);\\n            uint256 mReserve1 = _reserve1 * _tokenWeight0;\\n            price0CumulativeLast += (mReserve1 / mReserve0) * timeElapsed;\\n            price1CumulativeLast += (mReserve0 / mReserve1) * timeElapsed;\\n        }\\n        reserve0 = uint256(balance0);\\n        reserve1 = uint256(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    function _mintFee(uint256 _reserve0, uint256 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IRequiem2PoolFactory(factory).feeTo();\\n        uint256 protocolFee = uint256(IRequiem2PoolFactory(factory).protocolFee());\\n        feeOn = feeTo != address(0);\\n        (uint256 _collectedFee0, uint256 _collectedFee1) = getCollectedFees();\\n        if (protocolFee > 0 && feeOn && (_collectedFee0 > 0 || _collectedFee1 > 0)) {\\n            uint256 _tokenWeight0 = tokenWeight0;\\n            uint256 liquidity = IRequiemFormula(baseFormula).mintLiquidityFee(\\n                totalSupply,\\n                _reserve0,\\n                _reserve1,\\n                _tokenWeight0,\\n                100 - _tokenWeight0,\\n                _collectedFee0 / protocolFee,\\n                _collectedFee1 / protocolFee\\n            );\\n            if (liquidity > 0) _mint(feeTo, liquidity);\\n        }\\n        if (_collectedFee0 > 0) collectedFee0 = 0;\\n        if (_collectedFee1 > 0) collectedFee1 = 0;\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint256 liquidity) {\\n        (uint256 _reserve0, uint256 _reserve1, ) = getReserves(); // gas savings\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0.sub(_reserve0);\\n        uint256 amount1 = balance1.sub(_reserve1);\\n        _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply;\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0 * amount1).sub(MINIMUM_LIQUIDITY);\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min((amount0 * _totalSupply) / _reserve0, (amount1 * _totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, \\\"REQLP: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\\n        (uint256 _reserve0, uint256 _reserve1, ) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n        _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = (liquidity * balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = (liquidity * balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, \\\"REQLP: INSUFFICIENT_LIQUIDITY_BURNED\\\");\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)) - reserve0);\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)) - reserve1);\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n\\n    function onSwap(\\n        SwapRequest memory request,\\n        uint256 balanceTokenIn,\\n        uint256 balanceTokenOut\\n    ) public virtual override returns (uint256) {\\n        bool tokenInIsToken0 = request.tokenIn == _token0;\\n\\n        uint256 scalingFactorTokenIn = _scalingFactor(tokenInIsToken0);\\n        uint256 scalingFactorTokenOut = _scalingFactor(!tokenInIsToken0);\\n\\n        uint256 normalizedWeightIn = _normalizedWeights(tokenInIsToken0);\\n        uint256 normalizedWeightOut = _normalizedWeights(!tokenInIsToken0);\\n\\n        // All token amounts are upscaled.\\n        balanceTokenIn = _upscale(balanceTokenIn, scalingFactorTokenIn);\\n        balanceTokenOut = _upscale(balanceTokenOut, scalingFactorTokenOut);\\n\\n        if (request.kind == SwapKind.GIVEN_IN) {\\n            // Fees are subtracted before scaling, to reduce the complexity of the rounding direction analysis.\\n            // This is amount - fee amount, so we round up (favoring a higher fee amount).\\n            uint256 feeAmount = request.amount.mulUp(getSwapFeePercentage());\\n            request.amount = _upscale(request.amount.sub(feeAmount), scalingFactorTokenIn);\\n\\n            uint256 amountOut = _onSwapGivenIn(request, balanceTokenIn, balanceTokenOut, normalizedWeightIn, normalizedWeightOut);\\n\\n            // amountOut tokens are exiting the Pool, so we round down.\\n            return _downscaleDown(amountOut, scalingFactorTokenOut);\\n        } else {\\n            request.amount = _upscale(request.amount, scalingFactorTokenOut);\\n\\n            uint256 amountIn = _onSwapGivenOut(request, balanceTokenIn, balanceTokenOut, normalizedWeightIn, normalizedWeightOut);\\n\\n            // amountIn tokens are entering the Pool, so we round up.\\n            amountIn = _downscaleUp(amountIn, scalingFactorTokenIn);\\n\\n            // Fees are added after scaling happens, to reduce the complexity of the rounding direction analysis.\\n            // This is amount + fee amount, so we round up (favoring a higher fee amount).\\n            return amountIn.divUp(getSwapFeePercentage().complement());\\n        }\\n    }\\n\\n    function getSwapFeePercentage() public view returns (uint256) {\\n        return swapFee;\\n    }\\n\\n    /**\\n     * @dev Returns the scaling factor for one of the Pool's tokens. Reverts if `token` is not a token registered by the\\n     * Pool.\\n     */\\n    function _scalingFactor(bool isToken0) internal view returns (uint256) {\\n        return isToken0 ? _scalingFactor0 : _scalingFactor1;\\n    }\\n\\n    /**\\n     * @dev Applies `scalingFactor` to `amount`, resulting in a larger or equal value depending on whether it needed\\n     * scaling or not.\\n     */\\n    function _upscale(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return amount * scalingFactor;\\n    }\\n\\n    /**\\n     * @dev Same as `_upscale`, but for an entire array (of two elements). This function does not return anything, but\\n     * instead *mutates* the `amounts` array.\\n     */\\n    function _upscaleArray(uint256[] memory amounts) internal view {\\n        amounts[0] = amounts[0] * _scalingFactor(true);\\n        amounts[1] = amounts[1] * _scalingFactor(false);\\n    }\\n\\n    /**\\n     * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\\n     * whether it needed scaling or not. The result is rounded down.\\n     */\\n    function _downscaleDown(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return Math.divDown(amount, scalingFactor);\\n    }\\n\\n    /**\\n     * @dev Same as `_downscaleDown`, but for an entire array (of two elements). This function does not return anything,\\n     * but instead *mutates* the `amounts` array.\\n     */\\n    function _downscaleDownArray(uint256[] memory amounts) internal view {\\n        amounts[0] = Math.divDown(amounts[0], _scalingFactor(true));\\n        amounts[1] = Math.divDown(amounts[1], _scalingFactor(false));\\n    }\\n\\n    /**\\n     * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\\n     * whether it needed scaling or not. The result is rounded up.\\n     */\\n    function _downscaleUp(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return Math.divUp(amount, scalingFactor);\\n    }\\n\\n    function _onSwapGivenIn(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut,\\n        uint256 normalizedWeightIn,\\n        uint256 normalizedWeightOut\\n    ) private view returns (uint256) {\\n        // Swaps are disabled while the contract is paused.\\n        return weightedMath._calcOutGivenIn(currentBalanceTokenIn, normalizedWeightIn, currentBalanceTokenOut, normalizedWeightOut, swapRequest.amount);\\n    }\\n\\n    function _onSwapGivenOut(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut,\\n        uint256 normalizedWeightIn,\\n        uint256 normalizedWeightOut\\n    ) private view returns (uint256) {\\n        // Swaps are disabled while the contract is paused.\\n        return weightedMath._calcInGivenOut(currentBalanceTokenIn, normalizedWeightIn, currentBalanceTokenOut, normalizedWeightOut, swapRequest.amount);\\n    }\\n\\n    function getNormalizedWeights() external view returns (uint256[] memory) {\\n        return _normalizedWeights();\\n    }\\n\\n    function _normalizedWeights() internal view virtual returns (uint256[] memory) {\\n        uint256[] memory normalizedWeights = new uint256[](2);\\n        normalizedWeights[0] = _normalizedWeights(true);\\n        normalizedWeights[1] = _normalizedWeights(false);\\n        return normalizedWeights;\\n    }\\n\\n    function _normalizedWeights(bool isToken0) internal view virtual returns (uint256) {\\n        return isToken0 ? _normalizedWeight0 : _normalizedWeight1;\\n    }\\n\\n    function getLastInvariant() external view returns (uint256) {\\n        return _lastInvariant;\\n    }\\n}\\n\",\"keccak256\":\"0x6efd89d0fc1cbe99393c06c2aaac793f669b5a650cbe9775d7fd37a12bdbf3d1\",\"license\":\"MIT\"},\"contracts/Requiem2PoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IRequiem2PoolFactory.sol\\\";\\nimport \\\"./Requiem2Pool.sol\\\";\\n\\ncontract Requiem2PoolFactory is IRequiem2PoolFactory {\\n    address public feeTo;\\n    address public formula;\\n    uint256 public protocolFee;\\n    address public feeToSetter;\\n    address public weightedMath;\\n\\n    mapping(bytes32 => address) private _poolSalts;\\n    address[] public allPools;\\n    mapping(address => uint64) private _pools;\\n\\n    constructor(\\n        address _feeToSetter,\\n        address _formula,\\n        address _weightedMath\\n    ) {\\n        feeToSetter = _feeToSetter;\\n        formula = _formula;\\n        weightedMath = _weightedMath;\\n    }\\n\\n    function isPool(address b) external view returns (bool) {\\n        return _pools[b] > 0;\\n    }\\n\\n    function allPoolsLength() external view returns (uint256) {\\n        return allPools.length;\\n    }\\n\\n    function getPool(\\n        address token0,\\n        address token1,\\n        uint256 normalizedWeight0,\\n        uint32 swapFeePercentage\\n    ) external view returns (address pool) {\\n        address tokenA = token0;\\n        address tokenB = token1;\\n        uint256 tokenWeightA = normalizedWeight0;\\n        uint32 swapFee = swapFeePercentage;\\n        (address _token0, address _token1, uint256 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        bytes32 salt = keccak256(abi.encodePacked(_token0, _token1, tokenWeight0, swapFee));\\n        pool = _poolSalts[salt];\\n    }\\n\\n    function createPool(\\n        address token0,\\n        address token1,\\n        uint32 normalizedWeight0,\\n        uint32 swapFeePercentage\\n    ) external returns (address pool) {\\n        address tokenA = token0;\\n        address tokenB = token1;\\n        uint32 tokenWeightA = normalizedWeight0;\\n        uint32 swapFee = swapFeePercentage;\\n        require(tokenA != tokenB, \\\"RLP: IDENTICAL_ADDRESSES\\\");\\n        require(tokenWeightA >= 2 && tokenWeightA <= 98 && (tokenWeightA % 2) == 0, \\\"RLP: INVALID_TOKEN_WEIGHT\\\");\\n        // swap fee from [0.01% - 20%]\\n        require(swapFee >= 1 && swapFee <= 2000, \\\"RLP: INVALID_SWAP_FEE\\\");\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        require(token0 != address(0), \\\"RLP: ZERO_ADDRESS\\\");\\n        // single check is sufficient\\n        bytes memory bytecode = type(Requiem2Pool).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0, swapFee));\\n        require(_poolSalts[salt] == address(0), \\\"RLP: POOL_EXISTS\\\");\\n        assembly {\\n            pool := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IRequiem2Pool(pool).initialize(token0, token1, uint256(tokenWeight0) * 1e16, swapFee);\\n        _poolSalts[salt] = address(pool);\\n        allPools.push(pool);\\n        uint64 weightAndFee = uint64(swapFee);\\n        weightAndFee |= uint64(tokenWeight0) << 32;\\n        _pools[address(pool)] = weightAndFee;\\n        emit PoolCreated(token0, token1, pool, tokenWeight0, swapFee, allPools.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: FORBIDDEN\\\");\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: FORBIDDEN\\\");\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function setProtocolFee(uint256 _protocolFee) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: FORBIDDEN\\\");\\n        require(_protocolFee == 0 || (_protocolFee >= 10000 && _protocolFee <= 100000), \\\"RLP: Invalid Protocol fee\\\");\\n        protocolFee = _protocolFee;\\n    }\\n\\n    function getWeightsAndSwapFee(address pool)\\n        public\\n        view\\n        returns (\\n            uint256 tokenWeight0,\\n            uint256 tokenWeight1,\\n            uint32 swapFee\\n        )\\n    {\\n        uint64 weightAndFee = _pools[pool];\\n        if (weightAndFee > 0) {\\n            swapFee = uint32(weightAndFee);\\n            tokenWeight0 = uint256(weightAndFee >> 32);\\n            tokenWeight1 = 100 - tokenWeight0;\\n        } else {\\n            // Default is 0.3%\\n            return (50, 50, 30);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7781e061ac08a9a985b550fe285bf36046d4d273bff98671d7b8a5cd397daa07\",\"license\":\"MIT\"},\"contracts/RequiemERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IRequiemERC20.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\n\\ncontract RequiemERC20 is IRequiemERC20 {\\n    using SafeMath for uint256;\\n\\n    string public constant name = \\\"Requiem Liquidity Provider\\\";\\n    string public constant symbol = \\\"RLP\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    bytes32 public override DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    constructor() {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"), keccak256(bytes(name)), keccak256(bytes(\\\"1\\\")), chainId, address(this))\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"RLP: EXPIRED\\\");\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"RLP: INVALID_SIGNATURE\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xaf3a69b70d6504cff82881ab3179100cac6ef560d3ba6662d2c9d3bc2eeaa548\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb7230835a4efbbbebcb5371d121977e859388b33f3ee5d9a7a44fc4de8d6b970\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0xc92c369d1363b5cbec9337ea8921578bd4acd272af2ac9eaf7227a17689f29e9\",\"license\":\"MIT\"},\"contracts/interfaces/IMinimalSwapInfo.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Pool contracts with the MinimalSwapInfo or TwoToken specialization settings should implement this interface.\\n *\\n * This is called by the Router when a user calls `IRouter.swap` or `IRouter.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will grant\\n * to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Router.\\n */\\ninterface IMinimalSwapInfo {\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\n    //\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\n    //\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\n    // some Pools.\\n    //\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\n    // one Pool.\\n    //\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\n    //    balance.\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\n    //\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\n    // where the Pool sends the outgoing tokens.\\n    //\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\n    struct SwapRequest {\\n        SwapKind kind;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amount;\\n        address from;\\n        address to;\\n    }\\n\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x0e62d7a280ae32c8b7e202b748e0f301db6ba5743b3652b345ce2ccf34d8013a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IRequiem2Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IRequiemERC20.sol\\\";\\nimport \\\"./IMinimalSwapInfo.sol\\\";\\n\\ninterface IRequiem2Pool is IRequiemERC20, IMinimalSwapInfo {\\n    event PaidProtocolFee(uint256 collectedFee0, uint256 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint256 reserve0, uint256 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint256 reserve0,\\n            uint256 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function getCollectedFees() external view returns (uint256 _collectedFee0, uint256 _collectedFee1);\\n\\n    function getTokenWeights() external view returns (uint256 tokenWeight0, uint256 tokenWeight1);\\n\\n    function getSwapFee() external view returns (uint32);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    struct NewPoolParams {\\n        string name;\\n        string symbol;\\n        address token0;\\n        address token1;\\n        uint256 normalizedWeight0;\\n        uint256 normalizedWeight1;\\n        uint32 swapFeePercentage;\\n    }\\n\\n    function initialize(\\n        address token0,\\n        address token1,\\n        uint256 normalizedWeight0,\\n        uint32 swapFeePercentage\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f34a3b5bea2cbe63e423185a4f782ba0059f5f4318555857915bbd71e52b55d\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiem2PoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiem2PoolFactory {\\n    event PoolCreated(address indexed token0, address indexed token1, address pool, uint256 tokenWeight0, uint32 swapFee, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function protocolFee() external view returns (uint256);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPool(\\n        address token0,\\n        address token1,\\n        uint256 normalizedWeight0,\\n        uint32 swapFeePercentage\\n    ) external view returns (address pool);\\n\\n    function allPools(uint256) external view returns (address pool);\\n\\n    function isPool(address) external view returns (bool);\\n\\n    function allPoolsLength() external view returns (uint256);\\n\\n    function createPool(\\n        address token0,\\n        address token1,\\n        uint32 normalizedWeight0,\\n        uint32 swapFeePercentage\\n    ) external returns (address pool);\\n\\n    function getWeightsAndSwapFee(address pool)\\n        external\\n        view\\n        returns (\\n            uint256 tokenWeight0,\\n            uint256 tokenWeight1,\\n            uint32 swapFee\\n        );\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setProtocolFee(uint256) external;\\n\\n}\\n\",\"keccak256\":\"0x7e34ddcdf86378671993f4043d3d6e092fd14babef22c69fe5369d4220431e17\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x59ca041c7f003069ae1fc9ede79694b1fa0b11e6eebf4eb765a044a27030687c\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemPoolFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.5.16;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IRequiemFormula {\\n\\n    function getReserveAndWeights(address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint256 tokenWeightA,\\n        uint256 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint256 tokenWeightA,\\n        uint256 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint256 tokenWeightIn, uint256 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getPairAmountIn(address pair, address tokenIn, uint amountOut) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint256 tokenWeightIn, uint256 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getPairAmountOut(address pair, address tokenIn, uint amountIn) external view returns (uint amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint256 reserve0,\\n        uint256  reserve1,\\n        uint256 tokenWeight0,\\n        uint256 tokenWeight1,\\n        uint256  collectedFee0,\\n        uint256 collectedFee1) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x9b80e9c3b227a33ee5a7b8f1de7a84ecff70f976f0f85907a71c70bc5769d993\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x03a0e446df01556c28b09cd214d00cc4341c696d55c99b4a41164fe89911b750\",\"license\":\"MIT\"},\"contracts/interfaces/pool/IFormulaProvider.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\ninterface IFormulaProvider {\\n    /**\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     */\\n    function formula() external view returns (address);\\n\\n    function weightedMath() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1e349e779d7f77d152cd323eb7bdc525a9a95ed5302007956b2a38f3fc14dd72\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/pool/IRequiemWeightedMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// These functions start with an underscore, as if they were part of a contract and not a library. At some point this\\n// should be fixed.\\n// solhint-disable private-vars-leading-underscore\\n\\ninterface IRequiemWeightedMath {\\n    function _MIN_WEIGHT() external pure returns (uint256);\\n\\n    // Having a minimum normalized weight imposes a limit on the maximum number of tokens;\\n    // i.e., the largest possible pool is one where all tokens have exactly the minimum weight.\\n    function _MAX_WEIGHTED_TOKENS() external pure returns (uint256);\\n\\n    // Pool limits that arise from limitations in the fixed point power function (and the imposed 1:100 maximum weight\\n    // ratio).\\n\\n    // Swap limits: amounts swapped may not be larger than this percentage of total balance.\\n    function _MAX_IN_RATIO() external pure returns (uint256);\\n\\n    function _MAX_OUT_RATIO() external pure returns (uint256);\\n\\n    // Invariant growth limit: non-proportional joins cannot cause the invariant to increase by more than this ratio.\\n    function _MAX_INVARIANT_RATIO() external pure returns (uint256);\\n\\n    // Invariant shrink limit: non-proportional exits cannot cause the invariant to decrease by less than this ratio.\\n    function _MIN_INVARIANT_RATIO() external pure returns (uint256);\\n\\n    // Invariant is used to collect protocol swap fees by comparing its value between two times.\\n    // So we can round always to the same direction. It is also used to initiate the BPT amount\\n    // and, because there is a minimum BPT, we round down the invariant.\\n    function _calculateInvariant(uint256[] memory normalizedWeights, uint256[] memory balances) external pure returns (uint256 invariant);\\n\\n    // Computes how many tokens can be taken out of a pool if `amountIn` are sent, given the\\n    // current balances and weights.\\n    function _calcOutGivenIn(\\n        uint256 balanceIn,\\n        uint256 weightIn,\\n        uint256 balanceOut,\\n        uint256 weightOut,\\n        uint256 amountIn\\n    ) external pure returns (uint256);\\n\\n    // Computes how many tokens must be sent to a pool in order to take `amountOut`, given the\\n    // current balances and weights.\\n    function _calcInGivenOut(\\n        uint256 balanceIn,\\n        uint256 weightIn,\\n        uint256 balanceOut,\\n        uint256 weightOut,\\n        uint256 amountOut\\n    ) external pure returns (uint256);\\n\\n    function _calcBptOutGivenExactTokensIn(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory amountsIn,\\n        uint256 bptTotalSupply,\\n        uint256 swapFeePercentage\\n    ) external pure returns (uint256, uint256[] memory);\\n\\n    /**\\n     * @dev Intermediate function to avoid stack-too-deep \\\"\\n     */\\n    // function _computeJoinExactTokensInInvariantRatio(\\n    //     uint256[] memory balances,\\n    //     uint256[] memory normalizedWeights,\\n    //     uint256[] memory amountsIn,\\n    //     uint256[] memory balanceRatiosWithFee,\\n    //     uint256 invariantRatioWithFees,\\n    //     uint256 swapFeePercentage\\n    // ) external pure returns (uint256 invariantRatio, uint256[] memory swapFees);\\n\\n    function _calcTokenInGivenExactBptOut(\\n        uint256 balance,\\n        uint256 normalizedWeight,\\n        uint256 bptAmountOut,\\n        uint256 bptTotalSupply,\\n        uint256 swapFeePercentage\\n    ) external pure returns (uint256 amountIn, uint256 swapFee);\\n\\n    function _calcAllTokensInGivenExactBptOut(\\n        uint256[] memory balances,\\n        uint256 bptAmountOut,\\n        uint256 totalBPT\\n    ) external pure returns (uint256[] memory);\\n\\n    function _calcBptInGivenExactTokensOut(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory amountsOut,\\n        uint256 bptTotalSupply,\\n        uint256 swapFeePercentage\\n    ) external pure returns (uint256, uint256[] memory);\\n\\n    /**\\n     * @dev Intermediate function to avoid stack-too-deep \\\"\\n     */\\n    // function _computeExitExactTokensOutInvariantRatio(\\n    //     uint256[] memory balances,\\n    //     uint256[] memory normalizedWeights,\\n    //     uint256[] memory amountsOut,\\n    //     uint256[] memory balanceRatiosWithoutFee,\\n    //     uint256 invariantRatioWithoutFees,\\n    //     uint256 swapFeePercentage\\n    // ) external pure returns (uint256 invariantRatio, uint256[] memory swapFees);\\n\\n    function _calcTokenOutGivenExactBptIn(\\n        uint256 balance,\\n        uint256 normalizedWeight,\\n        uint256 bptAmountIn,\\n        uint256 bptTotalSupply,\\n        uint256 swapFeePercentage\\n    ) external pure returns (uint256 amountOut, uint256 swapFee);\\n\\n    function _calcTokensOutGivenExactBptIn(\\n        uint256[] memory balances,\\n        uint256 bptAmountIn,\\n        uint256 totalBPT\\n    ) external pure returns (uint256[] memory);\\n\\n    function _calcDueTokenProtocolSwapFeeAmount(\\n        uint256 balance,\\n        uint256 normalizedWeight,\\n        uint256 previousInvariant,\\n        uint256 currentInvariant,\\n        uint256 protocolSwapFeePercentage\\n    ) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0xeb00a346482e063ba62ee101bb558199d634663c556d7d0b7aaeb9fcce181c05\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        RequiemErrors._require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        uint256 errorCode\\n    ) internal pure returns (uint256) {\\n        RequiemErrors._require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc82c3356797b0e56c4ac77d5554343f66b3b436a18537bdb146e10921605d729\",\"license\":\"MIT\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0xff91bb395bc9766fd6b772069900c09ade711a8fc2e24b3389942128a23b2295\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x37ebaca1c58a9daf307229c45122f12d603a95d1d92c1a8e7648b1910755bfa0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./LogExpMath.sol\\\";\\n\\n/* solhint-disable private-vars-leading-underscore */\\n\\nlibrary FixedPoint {\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n    uint256 internal constant MAX_POW_RELATIVE_ERROR = 10000; // 10^(-14)\\n\\n    // Minimum base for the power function when the exponent is 'free' (larger than ONE).\\n    uint256 internal constant MIN_POW_BASE_FREE_EXPONENT = 0.7e18;\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        require(b <= a, \\\"SUB_OVERFLOW\\\");\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        require(a == 0 || product / a == b, \\\"MUL_OVERFLOW\\\");\\n\\n        return product / ONE;\\n    }\\n\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        require(a == 0 || product / a == b, \\\"MUL_OVERFLOW\\\");\\n\\n        if (product == 0) {\\n            return 0;\\n        } else {\\n            // The traditional divUp formula is:\\n            // divUp(x, y) := (x + y - 1) / y\\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\\n            // divUp(x, y) := (x - 1) / y + 1\\n            // Note that this requires x != 0, which we already tested for.\\n\\n            return ((product - 1) / ONE) + 1;\\n        }\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            uint256 aInflated = a * ONE;\\n            require(aInflated / a == ONE, \\\"DIV_INTERNAL\\\"); // mul overflow\\n\\n            return aInflated / b;\\n        }\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            uint256 aInflated = a * ONE;\\n            require(aInflated / a == ONE, \\\"DIV_INTERNAL\\\"); // mul overflow\\n\\n            // The traditional divUp formula is:\\n            // divUp(x, y) := (x + y - 1) / y\\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\\n            // divUp(x, y) := (x - 1) / y + 1\\n            // Note that this requires x != 0, which we already tested for.\\n\\n            return ((aInflated - 1) / b) + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding down. The result is guaranteed to not be above\\n     * the true value (that is, the error function expected - actual is always positive).\\n     */\\n    function powDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        uint256 raw = LogExpMath.pow(x, y);\\n        uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\\n\\n        if (raw < maxError) {\\n            return 0;\\n        } else {\\n            return sub(raw, maxError);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding up. The result is guaranteed to not be below\\n     * the true value (that is, the error function expected - actual is always negative).\\n     */\\n    function powUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        uint256 raw = LogExpMath.pow(x, y);\\n        uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\\n\\n        return add(raw, maxError);\\n    }\\n\\n    /**\\n     * @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\\n     *\\n     * Useful when computing the complement for values with some level of relative error, as it strips this error and\\n     * prevents intermediate negative values.\\n     */\\n    function complement(uint256 x) internal pure returns (uint256) {\\n        return (x < ONE) ? (ONE - x) : 0;\\n    }\\n}\\n\",\"keccak256\":\"0xe2959bd91a7efbccc2258eb94d48a5fc1602fa52d51dc43799b0c38fccd9f60d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/math/LogExpMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\\n// documentation files (the \\u201cSoftware\\u201d), to deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\\n// Software.\\n\\n// THE SOFTWARE IS PROVIDED \\u201cAS IS\\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\npragma solidity ^0.8.10;\\n\\n/* solhint-disable */\\n\\n/**\\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\\n *\\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\\n * exponentiation and logarithm (where the base is Euler's number).\\n *\\n * @author Fernando Martinelli - @fernandomartinelli\\n * @author Sergio Yuhjtman - @sergioyuhjtman\\n * @author Daniel Fernandez - @dmf7z\\n */\\nlibrary LogExpMath {\\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\\n    // two numbers, and multiply by ONE when dividing them.\\n\\n    // All arguments and return values are 18 decimal fixed point numbers.\\n    int256 constant ONE_18 = 1e18;\\n\\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\\n    // case of ln36, 36 decimals.\\n    int256 constant ONE_20 = 1e20;\\n    int256 constant ONE_36 = 1e36;\\n\\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\\n    //\\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\\n    // The smallest possible result is 10^(-18), which makes largest negative argument\\n    // ln(10^(-18)) = -41.446531673892822312.\\n    // We use 130.0 and -41.0 to have some safety margin.\\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\\n\\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\\n    // 256 bit integer.\\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\\n\\n    uint256 constant MILD_EXPONENT_BOUND = 2**254 / uint256(ONE_20);\\n\\n    // 18 decimal constants\\n    int256 constant x0 = 128000000000000000000; // 2\\u02c67\\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // e\\u02c6(x0) (no decimals)\\n    int256 constant x1 = 64000000000000000000; // 2\\u02c66\\n    int256 constant a1 = 6235149080811616882910000000; // e\\u02c6(x1) (no decimals)\\n\\n    // 20 decimal constants\\n    int256 constant x2 = 3200000000000000000000; // 2\\u02c65\\n    int256 constant a2 = 7896296018268069516100000000000000; // e\\u02c6(x2)\\n    int256 constant x3 = 1600000000000000000000; // 2\\u02c64\\n    int256 constant a3 = 888611052050787263676000000; // e\\u02c6(x3)\\n    int256 constant x4 = 800000000000000000000; // 2\\u02c63\\n    int256 constant a4 = 298095798704172827474000; // e\\u02c6(x4)\\n    int256 constant x5 = 400000000000000000000; // 2\\u02c62\\n    int256 constant a5 = 5459815003314423907810; // e\\u02c6(x5)\\n    int256 constant x6 = 200000000000000000000; // 2\\u02c61\\n    int256 constant a6 = 738905609893065022723; // e\\u02c6(x6)\\n    int256 constant x7 = 100000000000000000000; // 2\\u02c60\\n    int256 constant a7 = 271828182845904523536; // e\\u02c6(x7)\\n    int256 constant x8 = 50000000000000000000; // 2\\u02c6-1\\n    int256 constant a8 = 164872127070012814685; // e\\u02c6(x8)\\n    int256 constant x9 = 25000000000000000000; // 2\\u02c6-2\\n    int256 constant a9 = 128402541668774148407; // e\\u02c6(x9)\\n    int256 constant x10 = 12500000000000000000; // 2\\u02c6-3\\n    int256 constant a10 = 113314845306682631683; // e\\u02c6(x10)\\n    int256 constant x11 = 6250000000000000000; // 2\\u02c6-4\\n    int256 constant a11 = 106449445891785942956; // e\\u02c6(x11)\\n\\n    /**\\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\\n     *\\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\n        if (y == 0) {\\n            // We solve the 0^0 indetermination by making it equal one.\\n            return uint256(ONE_18);\\n        }\\n\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\\n        // x^y = exp(y * ln(x)).\\n\\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\\n        require(x < 2**255, \\\"X_OUT_OF_BOUNDS\\\");\\n        int256 x_int256 = int256(x);\\n\\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\\n\\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\\n        require(y < MILD_EXPONENT_BOUND, \\\"Y_OUT_OF_BOUNDS\\\");\\n        int256 y_int256 = int256(y);\\n\\n        int256 logx_times_y;\\n        if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\\n            int256 ln_36_x = _ln_36(x_int256);\\n\\n            // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\\n            // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\\n            // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\\n            // (downscaled) last 18 decimals.\\n            logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\\n        } else {\\n            logx_times_y = _ln(x_int256) * y_int256;\\n        }\\n        logx_times_y /= ONE_18;\\n\\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\\n        require(\\n            MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT,\\n            \\\"PRODUCT_OUT_OF_BOUNDS\\\"\\n        );\\n\\n        return uint256(exp(logx_times_y));\\n    }\\n\\n    /**\\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\\n     *\\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function exp(int256 x) internal pure returns (int256) {\\n        require(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT, \\\"INVALID_EXPONENT\\\");\\n\\n        if (x < 0) {\\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\\n            // Fixed point division requires multiplying by ONE_18.\\n            return ((ONE_18 * ONE_18) / exp(-x));\\n        }\\n\\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\\n        // decomposition.\\n        // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\\n        // decomposition, which will be lower than the smallest x_n.\\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\\n\\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\\n        // decomposition.\\n\\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\\n        // it and compute the accumulated product.\\n\\n        int256 firstAN;\\n        if (x >= x0) {\\n            x -= x0;\\n            firstAN = a0;\\n        } else if (x >= x1) {\\n            x -= x1;\\n            firstAN = a1;\\n        } else {\\n            firstAN = 1; // One with no decimal places\\n        }\\n\\n        // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\\n        // smaller terms.\\n        x *= 100;\\n\\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\\n        int256 product = ONE_20;\\n\\n        if (x >= x2) {\\n            x -= x2;\\n            product = (product * a2) / ONE_20;\\n        }\\n        if (x >= x3) {\\n            x -= x3;\\n            product = (product * a3) / ONE_20;\\n        }\\n        if (x >= x4) {\\n            x -= x4;\\n            product = (product * a4) / ONE_20;\\n        }\\n        if (x >= x5) {\\n            x -= x5;\\n            product = (product * a5) / ONE_20;\\n        }\\n        if (x >= x6) {\\n            x -= x6;\\n            product = (product * a6) / ONE_20;\\n        }\\n        if (x >= x7) {\\n            x -= x7;\\n            product = (product * a7) / ONE_20;\\n        }\\n        if (x >= x8) {\\n            x -= x8;\\n            product = (product * a8) / ONE_20;\\n        }\\n        if (x >= x9) {\\n            x -= x9;\\n            product = (product * a9) / ONE_20;\\n        }\\n\\n        // x10 and x11 are unnecessary here since we have high enough precision already.\\n\\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\\n\\n        int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\\n        int256 term; // Each term in the sum, where the nth term is (x^n / n!).\\n\\n        // The first term is simply x.\\n        term = x;\\n        seriesSum += term;\\n\\n        // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\\n        // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\\n\\n        term = ((term * x) / ONE_20) / 2;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 3;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 4;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 5;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 6;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 7;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 8;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 9;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 10;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 11;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 12;\\n        seriesSum += term;\\n\\n        // 12 Taylor terms are sufficient for 18 decimal precision.\\n\\n        // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\\n        // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\\n        // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\\n        // and then drop two digits to return an 18 decimal value.\\n\\n        return (((product * seriesSum) / ONE_20) * firstAN) / 100;\\n    }\\n\\n    /**\\n     * @dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument.\\n     */\\n    function log(int256 arg, int256 base) internal pure returns (int256) {\\n        // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\\n\\n        // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\\n        // upscaling.\\n\\n        int256 logBase;\\n        if (LN_36_LOWER_BOUND < base && base < LN_36_UPPER_BOUND) {\\n            logBase = _ln_36(base);\\n        } else {\\n            logBase = _ln(base) * ONE_18;\\n        }\\n\\n        int256 logArg;\\n        if (LN_36_LOWER_BOUND < arg && arg < LN_36_UPPER_BOUND) {\\n            logArg = _ln_36(arg);\\n        } else {\\n            logArg = _ln(arg) * ONE_18;\\n        }\\n\\n        // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\\n        return (logArg * ONE_18) / logBase;\\n    }\\n\\n    /**\\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function ln(int256 a) internal pure returns (int256) {\\n        // The real natural logarithm is not defined for negative numbers or zero.\\n        require(a > 0, \\\"OUT_OF_BOUNDS\\\");\\n        if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\\n            return _ln_36(a) / ONE_18;\\n        } else {\\n            return _ln(a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function _ln(int256 a) private pure returns (int256) {\\n        if (a < ONE_18) {\\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\\n            // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\\n            // Fixed point division requires multiplying by ONE_18.\\n            return (-_ln((ONE_18 * ONE_18) / a));\\n        }\\n\\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\\n        // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\\n        // decomposition, which will be lower than the smallest a_n.\\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\\n\\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\\n        // ONE_18 to convert them to fixed point.\\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\\n        // by it and compute the accumulated sum.\\n\\n        int256 sum = 0;\\n        if (a >= a0 * ONE_18) {\\n            a /= a0; // Integer, not fixed point division\\n            sum += x0;\\n        }\\n\\n        if (a >= a1 * ONE_18) {\\n            a /= a1; // Integer, not fixed point division\\n            sum += x1;\\n        }\\n\\n        // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\\n        sum *= 100;\\n        a *= 100;\\n\\n        // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\\n\\n        if (a >= a2) {\\n            a = (a * ONE_20) / a2;\\n            sum += x2;\\n        }\\n\\n        if (a >= a3) {\\n            a = (a * ONE_20) / a3;\\n            sum += x3;\\n        }\\n\\n        if (a >= a4) {\\n            a = (a * ONE_20) / a4;\\n            sum += x4;\\n        }\\n\\n        if (a >= a5) {\\n            a = (a * ONE_20) / a5;\\n            sum += x5;\\n        }\\n\\n        if (a >= a6) {\\n            a = (a * ONE_20) / a6;\\n            sum += x6;\\n        }\\n\\n        if (a >= a7) {\\n            a = (a * ONE_20) / a7;\\n            sum += x7;\\n        }\\n\\n        if (a >= a8) {\\n            a = (a * ONE_20) / a8;\\n            sum += x8;\\n        }\\n\\n        if (a >= a9) {\\n            a = (a * ONE_20) / a9;\\n            sum += x9;\\n        }\\n\\n        if (a >= a10) {\\n            a = (a * ONE_20) / a10;\\n            sum += x10;\\n        }\\n\\n        if (a >= a11) {\\n            a = (a * ONE_20) / a11;\\n            sum += x11;\\n        }\\n\\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\\n        // Let z = (a - 1) / (a + 1).\\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\\n        // division by ONE_20.\\n        int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\\n        int256 z_squared = (z * z) / ONE_20;\\n\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\n        int256 num = z;\\n\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n        int256 seriesSum = num;\\n\\n        // In each step, the numerator is multiplied by z^2\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 3;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 5;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 7;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 9;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 11;\\n\\n        // 6 Taylor terms are sufficient for 36 decimal precision.\\n\\n        // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\\n        seriesSum *= 2;\\n\\n        // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\\n        // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\\n        // value.\\n\\n        return (sum + seriesSum) / 100;\\n    }\\n\\n    /**\\n     * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\\n     * for x close to one.\\n     *\\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\\n     */\\n    function _ln_36(int256 x) private pure returns (int256) {\\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\\n        // worthwhile.\\n\\n        // First, we transform x to a 36 digit fixed point value.\\n        x *= ONE_18;\\n\\n        // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\\n        // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n        // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\\n        // division by ONE_36.\\n        int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\\n        int256 z_squared = (z * z) / ONE_36;\\n\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\n        int256 num = z;\\n\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n        int256 seriesSum = num;\\n\\n        // In each step, the numerator is multiplied by z^2\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 3;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 5;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 7;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 9;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 11;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 13;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 15;\\n\\n        // 8 Taylor terms are sufficient for 36 decimal precision.\\n\\n        // All that remains is multiplying by 2 (non fixed point).\\n        return seriesSum * 2;\\n    }\\n}\\n\",\"keccak256\":\"0x0eea00e060292852106f9a7db75300fc12112f4638fb657668955bd4491f074d\",\"license\":\"MIT\"},\"contracts/libraries/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\\n * Adapted from OpenZeppelin's SafeMath library\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SUB_OVERFLOW\\\");\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SUB_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers of 256 bits.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers of 256 bits.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a * b;\\n        require(a == 0 || c / a == b, \\\"MUL_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        bool roundUp\\n    ) internal pure returns (uint256) {\\n        return roundUp ? divUp(a, b) : divDown(a, b);\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return 1 + (a - 1) / b;\\n        }\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07a18ca0ff454e4adbdb6bd509df38e4b0198c5118ff2494bf0f010fa3b8909c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516134b63803806134b683398101604081905261002f9161008d565b600380546001600160a01b039485166001600160a01b0319918216179091556001805493851693821693909317909255600480549190931691161790556100d0565b80516001600160a01b038116811461008857600080fd5b919050565b6000806000606084860312156100a257600080fd5b6100ab84610071565b92506100b960208501610071565b91506100c760408501610071565b90509250925092565b6133d7806100df6000396000f3fe608060405234801561001057600080fd5b50600436106100ba5760003560e01c8063017e7e58146100bf578063094b7415146100ef5780630ef203041461010257806328b1fab31461011557806341d1de97146101285780634b75f54f1461013b5780635b16ebb71461014e5780637565b1f614610192578063787dce3d146101a5578063a2e74af6146101ba578063b0e21e8a146101cd578063ca222979146101e4578063efde4e6414610218578063f46901ed14610220575b600080fd5b6000546100d2906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6003546100d2906001600160a01b031681565b6100d26101103660046109b6565b610233565b6004546100d2906001600160a01b031681565b6100d2610136366004610a0a565b6106ff565b6001546100d2906001600160a01b031681565b61018261015c366004610a23565b6001600160a01b03166000908152600760205260409020546001600160401b0316151590565b60405190151581526020016100e6565b6100d26101a0366004610a45565b610729565b6101b86101b3366004610a0a565b6107e4565b005b6101b86101c8366004610a23565b610878565b6101d660025481565b6040519081526020016100e6565b6101f76101f2366004610a23565b6108c4565b60408051938452602084019290925263ffffffff16908201526060016100e6565b6006546101d6565b6101b861022e366004610a23565b61092c565b6000848484846001600160a01b0380851690841614156102955760405162461bcd60e51b8152602060048201526018602482015277524c503a204944454e544943414c5f41444452455353455360401b60448201526064015b60405180910390fd5b60028263ffffffff16101580156102b3575060628263ffffffff1611155b80156102cd57506102c5600283610a87565b63ffffffff16155b6103155760405162461bcd60e51b81526020600482015260196024820152781493140e881253959053125117d513d2d15397d5d15251d215603a1b604482015260640161028c565b60018163ffffffff161015801561033457506107d08163ffffffff1611155b6103785760405162461bcd60e51b8152602060048201526015602482015274524c503a20494e56414c49445f535741505f46454560581b604482015260640161028c565b6000806000856001600160a01b0316876001600160a01b0316106103a85785876103a3876064610ace565b6103ac565b8686865b919450925090506001600160a01b0383166103fd5760405162461bcd60e51b8152602060048201526011602482015270524c503a205a45524f5f4144445245535360781b604482015260640161028c565b60006040518060200161040f90610978565b601f1982820381018352601f9091011660408190526001600160601b0319606087811b8216602084015286901b1660348201526001600160e01b031960e085811b8216604884015288901b16604c82015290915060009060500160408051601f198184030181529181528151602092830120600081815260059093529120549091506001600160a01b0316156104da5760405162461bcd60e51b815260206004820152601060248201526f524c503a20504f4f4c5f45584953545360801b604482015260640161028c565b808251602084016000f599506001600160a01b038a1663566f7f9c868661050e63ffffffff8816662386f26fc10000610af3565b6040516001600160e01b031960e086901b1681526001600160a01b039384166004820152929091166024830152604482015263ffffffff89166064820152608401600060405180830381600087803b15801561056957600080fd5b505af115801561057d573d6000803e3d6000fd5b50505050896005600083815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060068a9080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b0316021790555060008663ffffffff16905060208463ffffffff166001600160401b0316901b8117905080600760008d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160401b0302191690836001600160401b03160217905550846001600160a01b0316866001600160a01b03167f89caf1af0a960bc0022763800d278f9ecb9929ef61966e68a703ace92e14880b8d878b6006805490506040516106e594939291906001600160a01b0394909416845263ffffffff928316602085015291166040830152606082015260800190565b60405180910390a350505050505050505050949350505050565b6006818154811061070f57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000848484848480806001600160a01b0380871690881610610757578587610752876064610b12565b61075b565b8686865b6040516001600160601b0319606085811b8216602084015284901b166034820152604881018290526001600160e01b031960e089901b1660688201529295509093509150600090606c0160408051601f198184030181529181528151602092830120600090815260059092529020546001600160a01b03169d9c50505050505050505050505050565b6003546001600160a01b0316331461080e5760405162461bcd60e51b815260040161028c90610b29565b80158061082b5750612710811015801561082b5750620186a08111155b6108735760405162461bcd60e51b8152602060048201526019602482015278524c503a20496e76616c69642050726f746f636f6c2066656560381b604482015260640161028c565b600255565b6003546001600160a01b031633146108a25760405162461bcd60e51b815260040161028c90610b29565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116600090815260076020526040812054819081906001600160401b031680156109125763ffffffff602082901c16935090508061090b846064610b12565b9250610923565b603280601e93509350935050610925565b505b9193909250565b6003546001600160a01b031633146109565760405162461bcd60e51b815260040161028c90610b29565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6128508062000b5283390190565b80356001600160a01b038116811461099d57600080fd5b919050565b803563ffffffff8116811461099d57600080fd5b600080600080608085870312156109cc57600080fd5b6109d585610986565b93506109e360208601610986565b92506109f1604086016109a2565b91506109ff606086016109a2565b905092959194509250565b600060208284031215610a1c57600080fd5b5035919050565b600060208284031215610a3557600080fd5b610a3e82610986565b9392505050565b60008060008060808587031215610a5b57600080fd5b610a6485610986565b9350610a7260208601610986565b9250604085013591506109ff606086016109a2565b600063ffffffff80841680610aac57634e487b7160e01b600052601260045260246000fd5b92169190910692915050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff83811690831681811015610aeb57610aeb610ab8565b039392505050565b6000816000190483118215151615610b0d57610b0d610ab8565b500290565b600082821015610b2457610b24610ab8565b500390565b6020808252600e908201526d2926281d102327a92124a22222a760911b60408201526060019056fe60a06040526001600e553480156200001657600080fd5b50604080518082018252601a81527f5265717569656d204c69717569646974792050726f76696465720000000000006020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f2e1adfbb118fada029d9623aa0ed8dd2318a25545f57095be55dcbd209508e12818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c08201808552815191840191909120600355600580546001600160a01b031916339081179091556328b1fab360e01b90915292516328b1fab39260c4808401939192918290030181865afa15801562000149573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016f919062000181565b6001600160a01b0316608052620001b3565b6000602082840312156200019457600080fd5b81516001600160a01b0381168114620001ac57600080fd5b9392505050565b60805161266c620001e460003960008181610718015281816107b9015281816114fd01526115ae015261266c6000f3fe608060405234801561001057600080fd5b506004361061018b5760003560e01c806306fdde03146101905780630902f1ac146101df578063095ea7b3146102085780630dfe16811461022b57806318160ddd1461024b57806323b872dd1461026257806330adf81f14610275578063313ce5671461028a57806332bfe469146102a45780633644e515146102b95780635543410f146102c257806355c67628146102d5578063566f7f9c146102e35780635909c0d5146102f85780635a3d5493146103015780636a6278421461030a57806370a082311461031d5780637ecebe001461033d57806389afcb441461035d578063955a8d381461037057806395d89b41146103835780639b02cdde146103a5578063a9059cbb146103ad578063ba9a7a56146103c0578063bc25cf77146103c9578063c45a0155146103dc578063d21220a7146103ef578063d4cadf6814610402578063d505accf1461041a578063d54a8d181461042d578063dd62ed3e14610438578063f89f27ed14610463578063fff6cae914610478575b600080fd5b6101c96040518060400160405280601a8152602001792932b8bab4b2b6902634b8bab4b234ba3c90283937bb34b232b960311b81525081565b6040516101d69190611fc5565b60405180910390f35b6101e7610480565b60408051938452602084019290925263ffffffff16908201526060016101d6565b61021b61021636600461201b565b610496565b60405190151581526020016101d6565b60075461023e906001600160a01b031681565b6040516101d69190612047565b61025460005481565b6040519081526020016101d6565b61021b61027036600461205b565b6104ad565b61025460008051602061261783398151915281565b610292601281565b60405160ff90911681526020016101d6565b6015546016545b6040516101d692919061209c565b61025460035481565b6102546102d03660046120b9565b610542565b601a5463ffffffff16610254565b6102f66102f1366004612180565b610690565b005b610254600c5481565b610254600d5481565b6102546103183660046121dc565b6108b2565b61025461032b3660046121dc565b60016020526000908152604090205481565b61025461034b3660046121dc565b60046020526000908152604090205481565b6102ab61036b3660046121dc565b610b37565b60065461023e906001600160a01b031681565b6101c9604051806040016040528060038152602001620524c560ec1b81525081565b601254610254565b61021b6103bb36600461201b565b610e84565b6102546103e881565b6102f66103d73660046121dc565b610e91565b60055461023e906001600160a01b031681565b60085461023e906001600160a01b031681565b601a5460405163ffffffff90911681526020016101d6565b6102f6610428366004612208565b610f8b565b600f546010546102ab565b610254610446366004612279565b600260209081526000928352604080842090915290825290205481565b61046b611180565b6040516101d691906122b2565b6102f661118f565b600954600a54600b549192909163ffffffff1690565b60006104a33384846112ac565b5060015b92915050565b6001600160a01b03831660009081526002602090815260408083203384529091528120546000191461052c576001600160a01b0384166000908152600260209081526040808320338452909152902054610507908361130e565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b61053784848461131c565b5060015b9392505050565b60135460208401516000916001600160a01b0391821691161481610565826113b0565b9050600061057383156113b0565b90506000610580846113c7565b9050600061058e85156113c7565b905061059a88856113de565b97506105a687846113de565b96506000895160018111156105bd576105bd6122f6565b14156106325760006105e26105d7601a5463ffffffff1690565b60608c0151906113ea565b90506106046105fe828c6060015161148990919063ffffffff16565b866113de565b60608b015260006106188b8b8b87876114de565b90506106248186611583565b97505050505050505061053b565b6106408960600151846113de565b60608a015260006106548a8a8a868661158f565b905061066081866115e9565b905061068361067c610677601a5463ffffffff1690565b6115f5565b829061161f565b965050505050505061053b565b6005546001600160a01b031633146106e25760405162461bcd60e51b815260206004820152601060248201526f2922a8a6281d102327a92124a22222a760811b60448201526064015b60405180910390fd5b60006106f683670de0b6b3a7640000612322565b9050610701856116bc565b60185561070d846116bc565b6019819055506107b47f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663418307846040518163ffffffff1660e01b8152600401602060405180830381865afa158015610774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107989190612339565b6107aa85670de0b6b3a7640000612352565b101561012e611740565b61084b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663418307846040518163ffffffff1660e01b8152600401602060405180830381865afa158015610815573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108399190612339565b6107aa83670de0b6b3a7640000612352565b60006108578285612371565b905061086f670de0b6b3a76400008214610134611740565b601584905560168290558184101561088857600161088b565b60005b60ff166017555050601a805463ffffffff191663ffffffff92909216919091179055505050565b6000600e546001146108d65760405162461bcd60e51b81526004016106d990612389565b6000600e819055806108e6610480565b506007546040516370a0823160e01b81529294509092506000916001600160a01b03909116906370a0823190610920903090600401612047565b602060405180830381865afa15801561093d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109619190612339565b6008546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610997903090600401612047565b602060405180830381865afa1580156109b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d89190612339565b905060006109e68386611489565b905060006109f48386611489565b9050610a008686611752565b5060005480610a3b57610a276103e8610a21610a1c8587612352565b611998565b90611489565b9750610a3660006103e8611a08565b610a70565b610a6d87610a498386612352565b610a5391906123c6565b87610a5e8486612352565b610a6891906123c6565b611a85565b97505b60008811610acc5760405162461bcd60e51b8152602060048201526024808201527f5245514c503a20494e53554646494349454e545f4c49515549444954595f4d496044820152631395115160e21b60648201526084016106d9565b610ad68989611a08565b610ae285858989611a9b565b336001600160a01b03167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f8484604051610b1d92919061209c565b60405180910390a250506001600e55509395945050505050565b600080600e54600114610b5c5760405162461bcd60e51b81526004016106d990612389565b6000600e81905580610b6c610480565b506007546008546040516370a0823160e01b81529395509193506001600160a01b039081169291169060009083906370a0823190610bae903090600401612047565b602060405180830381865afa158015610bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bef9190612339565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610c1f9190612047565b602060405180830381865afa158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c609190612339565b30600090815260016020526040902054909150610c7d8787611752565b5060005480610c8c8584612352565b610c9691906123c6565b995080610ca38484612352565b610cad91906123c6565b985060008a118015610cbf5750600089115b610d175760405162461bcd60e51b8152602060048201526024808201527f5245514c503a20494e53554646494349454e545f4c49515549444954595f42556044820152631493915160e21b60648201526084016106d9565b610d213083611c51565b610d2c868c8c611cc9565b610d37858c8b611cc9565b6040516370a0823160e01b81526001600160a01b038716906370a0823190610d63903090600401612047565b602060405180830381865afa158015610d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da49190612339565b6040516370a0823160e01b81529094506001600160a01b038616906370a0823190610dd3903090600401612047565b602060405180830381865afa158015610df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e149190612339565b9250610e2284848a8a611a9b565b8a6001600160a01b0316336001600160a01b03167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968c8c604051610e6792919061209c565b60405180910390a350505050505050506001600e81905550915091565b60006104a333848461131c565b600e54600114610eb35760405162461bcd60e51b81526004016106d990612389565b6000600e556007546008546009546040516370a0823160e01b81526001600160a01b039384169390921691610f4d91849186919083906370a0823190610efd903090600401612047565b602060405180830381865afa158015610f1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3e9190612339565b610f489190612322565b611cc9565b610f818184600a54846001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610efd9190612047565b50506001600e5550565b42841015610fca5760405162461bcd60e51b815260206004820152600c60248201526b1493140e881156141254915160a21b60448201526064016106d9565b6003546001600160a01b03881660009081526004602052604081208054919291600080516020612617833981519152918b918b918b91908761100b836123da565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161108492919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156110ef573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906111255750886001600160a01b0316816001600160a01b0316145b61116a5760405162461bcd60e51b8152602060048201526016602482015275524c503a20494e56414c49445f5349474e415455524560501b60448201526064016106d9565b6111758989896112ac565b505050505050505050565b606061118a611e09565b905090565b600e546001146111b15760405162461bcd60e51b81526004016106d990612389565b6000600e556007546040516370a0823160e01b81526112a5916001600160a01b0316906370a08231906111e8903090600401612047565b602060405180830381865afa158015611205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112299190612339565b6008546040516370a0823160e01b81526001600160a01b03909116906370a0823190611259903090600401612047565b602060405180830381865afa158015611276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a9190612339565b600954600a54611a9b565b6001600e55565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061053b83836001611e84565b6001600160a01b03831660009081526001602052604090205461133f908261130e565b6001600160a01b03808516600090815260016020526040808220939093559084168152205461136e9082611ea8565b6001600160a01b0380841660008181526001602052604090819020939093559151908516906000805160206125f7833981519152906113019085815260200190565b6000816113bf576019546104a7565b505060185490565b6000816113d6576016546104a7565b505060155490565b600061053b8284612352565b6000806113f78385612352565b905083158061140e57508261140c85836123c6565b145b6114495760405162461bcd60e51b815260206004820152600c60248201526b4d554c5f4f564552464c4f5760a01b60448201526064016106d9565b806114585760009150506104a7565b670de0b6b3a764000061146c600183612322565b61147691906123c6565b611481906001612371565b9150506104a7565b6000828211156114ca5760405162461bcd60e51b815260206004820152600c60248201526b5355425f4f564552464c4f5760a01b60448201526064016106d9565b60006114d68385612322565b949350505050565b6060850151604051630b9c7bab60e31b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691635ce3dd589161153891899188918a9189916004016123f5565b602060405180830381865afa158015611555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115799190612339565b9695505050505050565b600061053b8383611ec5565b606085015160405163e9be73ef60e01b81526000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163e9be73ef9161153891899188918a9189916004016123f5565b600061053b8383611eee565b6000670de0b6b3a7640000821061160d5760006104a7565b6104a782670de0b6b3a7640000612322565b60008161163e5760405162461bcd60e51b81526004016106d990612418565b8261164b575060006104a7565b600061165f670de0b6b3a764000085612352565b9050670de0b6b3a764000061167485836123c6565b146116b05760405162461bcd60e51b815260206004820152600c60248201526b11125597d25395115493905360a21b60448201526064016106d9565b8261146c600183612322565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611721919061243f565b60ff1690506000611733826012612322565b90506114d681600a612540565b8161174e5761174e81611f42565b5050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cc919061254c565b90506000600560009054906101000a90046001600160a01b03166001600160a01b031663b0e21e8a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611823573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118479190612339565b6001600160a01b038316151593509050600080611867600f546010549091565b915091506000831180156118785750845b801561188e5750600082118061188e5750600081115b15611976576011546006546000805463ffffffff9093169290916001600160a01b031690630c8750c2908b8b866118c6816064612322565b6118d08c8c6123c6565b6118da8d8c6123c6565b6040516001600160e01b031960e08a901b1681526004810197909752602487019590955260448601939093526064850191909152608484015260a483015260c482015260e401602060405180830381865afa15801561193d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119619190612339565b90508015611973576119738682611a08565b50505b8115611982576000600f555b801561198e5760006010555b5050505092915050565b600060038211156119f957508060006119b26002836123c6565b6119bd906001612371565b90505b818110156119f3579050806002816119d881866123c6565b6119e29190612371565b6119ec91906123c6565b90506119c0565b50919050565b8115611a03575060015b919050565b600054611a159082611ea8565b60009081556001600160a01b038316815260016020526040902054611a3a9082611ea8565b6001600160a01b0383166000818152600160205260408082209390935591519091906000805160206125f783398151915290611a799085815260200190565b60405180910390a35050565b6000818310611a94578161053b565b5090919050565b60115463ffffffff16600019611ab2826064612322565b611abc9087612352565b11158015611ad55750600019611ad28286612352565b11155b611b135760405162461bcd60e51b815260206004820152600f60248201526e5245514c503a204f564552464c4f5760881b60448201526064016106d9565b6000611b23600160201b42612569565b600b54909150600090611b3c9063ffffffff168361257d565b905060008163ffffffff16118015611b5357508415155b8015611b5e57508315155b15611bef576000611b70846064612322565b611b7a9087612352565b90506000611b888587612352565b905063ffffffff8316611b9b83836123c6565b611ba59190612352565b600c6000828254611bb69190612371565b909155505063ffffffff8316611bcc82846123c6565b611bd69190612352565b600d6000828254611be79190612371565b909155505050505b6009879055600a869055600b805463ffffffff191663ffffffff84161790556040517fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a90611c40908990899061209c565b60405180910390a150505050505050565b6001600160a01b038216600090815260016020526040902054611c74908261130e565b6001600160a01b03831660009081526001602052604081209190915554611c9b908261130e565b60009081556040518281526001600160a01b038416906000805160206125f783398151915290602001611a79565b60408051808201825260198152787472616e7366657228616464726573732c75696e743235362960381b60209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b17905291516000928392871691611d5191906125a2565b6000604051808303816000865af19150503d8060008114611d8e576040519150601f19603f3d011682016040523d82523d6000602084013e611d93565b606091505b5091509150818015611dbd575080511580611dbd575080806020019051810190611dbd91906125be565b611e025760405162461bcd60e51b815260206004820152601660248201527514915453140e881514905394d1915497d1905253115160521b60448201526064016106d9565b5050505050565b60408051600280825260608083018452926000929190602083019080368337019050509050611e3860016113c7565b81600081518110611e4b57611e4b6125e0565b602002602001018181525050611e6160006113c7565b81600181518110611e7457611e746125e0565b6020908102919091010152919050565b6000611e938484111583611740565b6000611e9f8486612322565b95945050505050565b600080611eb58385612371565b905061053b848210156000611740565b600081611ee45760405162461bcd60e51b81526004016106d990612418565b61053b82846123c6565b600081611f0d5760405162461bcd60e51b81526004016106d990612418565b82611f1a575060006104a7565b81611f26600185612322565b611f3091906123c6565b611f3b906001612371565b90506104a7565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60005b83811015611fb0578181015183820152602001611f98565b83811115611fbf576000848401525b50505050565b6020815260008251806020840152611fe4816040850160208701611f95565b601f01601f19169190910160400192915050565b6001600160a01b038116811461200d57600080fd5b50565b8035611a0381611ff8565b6000806040838503121561202e57600080fd5b823561203981611ff8565b946020939093013593505050565b6001600160a01b0391909116815260200190565b60008060006060848603121561207057600080fd5b833561207b81611ff8565b9250602084013561208b81611ff8565b929592945050506040919091013590565b918252602082015260400190565b803560028110611a0357600080fd5b60008060008385036101008112156120d057600080fd5b60c08112156120de57600080fd5b5060405160c081016001600160401b038111828210171561210f57634e487b7160e01b600052604160045260246000fd5b60405261211b856120aa565b815261212960208601612010565b602082015261213a60408601612010565b60408201526060850135606082015261215560808601612010565b608082015261216660a08601612010565b60a08201529560c0850135955060e0909401359392505050565b6000806000806080858703121561219657600080fd5b84356121a181611ff8565b935060208501356121b181611ff8565b925060408501359150606085013563ffffffff811681146121d157600080fd5b939692955090935050565b6000602082840312156121ee57600080fd5b813561053b81611ff8565b60ff8116811461200d57600080fd5b600080600080600080600060e0888a03121561222357600080fd5b873561222e81611ff8565b9650602088013561223e81611ff8565b95506040880135945060608801359350608088013561225c816121f9565b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561228c57600080fd5b823561229781611ff8565b915060208301356122a781611ff8565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156122ea578351835292840192918401916001016122ce565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156123345761233461230c565b500390565b60006020828403121561234b57600080fd5b5051919050565b600081600019048311821515161561236c5761236c61230c565b500290565b600082198211156123845761238461230c565b500190565b6020808252600d908201526c14915453140e881313d0d2d151609a1b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b6000826123d5576123d56123b0565b500490565b60006000198214156123ee576123ee61230c565b5060010190565b948552602085019390935260408401919091526060830152608082015260a00190565b6020808252600d908201526c2d22a927afa224ab24a9a4a7a760991b604082015260600190565b60006020828403121561245157600080fd5b815161053b816121f9565b600181815b8085111561249757816000190482111561247d5761247d61230c565b8085161561248a57918102915b93841c9390800290612461565b509250929050565b6000826124ae575060016104a7565b816124bb575060006104a7565b81600181146124d157600281146124db576124f7565b60019150506104a7565b60ff8411156124ec576124ec61230c565b50506001821b6104a7565b5060208310610133831016604e8410600b841016171561251a575081810a6104a7565b612524838361245c565b80600019048211156125385761253861230c565b029392505050565b600061053b838361249f565b60006020828403121561255e57600080fd5b815161053b81611ff8565b600082612578576125786123b0565b500690565b600063ffffffff8381169083168181101561259a5761259a61230c565b039392505050565b600082516125b4818460208701611f95565b9190910192915050565b6000602082840312156125d057600080fd5b8151801515811461053b57600080fd5b634e487b7160e01b600052603260045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9a2646970667358221220ca73c833b33cc3b0910eca4f890e5fc0bc74de957917ede4602faf37edf2968f64736f6c634300080a0033a2646970667358221220b9dd2dcd21fe6dd8a94ea562c52f18af6192954060f00b1642e04e1eb86767e464736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ba5760003560e01c8063017e7e58146100bf578063094b7415146100ef5780630ef203041461010257806328b1fab31461011557806341d1de97146101285780634b75f54f1461013b5780635b16ebb71461014e5780637565b1f614610192578063787dce3d146101a5578063a2e74af6146101ba578063b0e21e8a146101cd578063ca222979146101e4578063efde4e6414610218578063f46901ed14610220575b600080fd5b6000546100d2906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6003546100d2906001600160a01b031681565b6100d26101103660046109b6565b610233565b6004546100d2906001600160a01b031681565b6100d2610136366004610a0a565b6106ff565b6001546100d2906001600160a01b031681565b61018261015c366004610a23565b6001600160a01b03166000908152600760205260409020546001600160401b0316151590565b60405190151581526020016100e6565b6100d26101a0366004610a45565b610729565b6101b86101b3366004610a0a565b6107e4565b005b6101b86101c8366004610a23565b610878565b6101d660025481565b6040519081526020016100e6565b6101f76101f2366004610a23565b6108c4565b60408051938452602084019290925263ffffffff16908201526060016100e6565b6006546101d6565b6101b861022e366004610a23565b61092c565b6000848484846001600160a01b0380851690841614156102955760405162461bcd60e51b8152602060048201526018602482015277524c503a204944454e544943414c5f41444452455353455360401b60448201526064015b60405180910390fd5b60028263ffffffff16101580156102b3575060628263ffffffff1611155b80156102cd57506102c5600283610a87565b63ffffffff16155b6103155760405162461bcd60e51b81526020600482015260196024820152781493140e881253959053125117d513d2d15397d5d15251d215603a1b604482015260640161028c565b60018163ffffffff161015801561033457506107d08163ffffffff1611155b6103785760405162461bcd60e51b8152602060048201526015602482015274524c503a20494e56414c49445f535741505f46454560581b604482015260640161028c565b6000806000856001600160a01b0316876001600160a01b0316106103a85785876103a3876064610ace565b6103ac565b8686865b919450925090506001600160a01b0383166103fd5760405162461bcd60e51b8152602060048201526011602482015270524c503a205a45524f5f4144445245535360781b604482015260640161028c565b60006040518060200161040f90610978565b601f1982820381018352601f9091011660408190526001600160601b0319606087811b8216602084015286901b1660348201526001600160e01b031960e085811b8216604884015288901b16604c82015290915060009060500160408051601f198184030181529181528151602092830120600081815260059093529120549091506001600160a01b0316156104da5760405162461bcd60e51b815260206004820152601060248201526f524c503a20504f4f4c5f45584953545360801b604482015260640161028c565b808251602084016000f599506001600160a01b038a1663566f7f9c868661050e63ffffffff8816662386f26fc10000610af3565b6040516001600160e01b031960e086901b1681526001600160a01b039384166004820152929091166024830152604482015263ffffffff89166064820152608401600060405180830381600087803b15801561056957600080fd5b505af115801561057d573d6000803e3d6000fd5b50505050896005600083815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060068a9080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b0316021790555060008663ffffffff16905060208463ffffffff166001600160401b0316901b8117905080600760008d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160401b0302191690836001600160401b03160217905550846001600160a01b0316866001600160a01b03167f89caf1af0a960bc0022763800d278f9ecb9929ef61966e68a703ace92e14880b8d878b6006805490506040516106e594939291906001600160a01b0394909416845263ffffffff928316602085015291166040830152606082015260800190565b60405180910390a350505050505050505050949350505050565b6006818154811061070f57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000848484848480806001600160a01b0380871690881610610757578587610752876064610b12565b61075b565b8686865b6040516001600160601b0319606085811b8216602084015284901b166034820152604881018290526001600160e01b031960e089901b1660688201529295509093509150600090606c0160408051601f198184030181529181528151602092830120600090815260059092529020546001600160a01b03169d9c50505050505050505050505050565b6003546001600160a01b0316331461080e5760405162461bcd60e51b815260040161028c90610b29565b80158061082b5750612710811015801561082b5750620186a08111155b6108735760405162461bcd60e51b8152602060048201526019602482015278524c503a20496e76616c69642050726f746f636f6c2066656560381b604482015260640161028c565b600255565b6003546001600160a01b031633146108a25760405162461bcd60e51b815260040161028c90610b29565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116600090815260076020526040812054819081906001600160401b031680156109125763ffffffff602082901c16935090508061090b846064610b12565b9250610923565b603280601e93509350935050610925565b505b9193909250565b6003546001600160a01b031633146109565760405162461bcd60e51b815260040161028c90610b29565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6128508062000b5283390190565b80356001600160a01b038116811461099d57600080fd5b919050565b803563ffffffff8116811461099d57600080fd5b600080600080608085870312156109cc57600080fd5b6109d585610986565b93506109e360208601610986565b92506109f1604086016109a2565b91506109ff606086016109a2565b905092959194509250565b600060208284031215610a1c57600080fd5b5035919050565b600060208284031215610a3557600080fd5b610a3e82610986565b9392505050565b60008060008060808587031215610a5b57600080fd5b610a6485610986565b9350610a7260208601610986565b9250604085013591506109ff606086016109a2565b600063ffffffff80841680610aac57634e487b7160e01b600052601260045260246000fd5b92169190910692915050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff83811690831681811015610aeb57610aeb610ab8565b039392505050565b6000816000190483118215151615610b0d57610b0d610ab8565b500290565b600082821015610b2457610b24610ab8565b500390565b6020808252600e908201526d2926281d102327a92124a22222a760911b60408201526060019056fe60a06040526001600e553480156200001657600080fd5b50604080518082018252601a81527f5265717569656d204c69717569646974792050726f76696465720000000000006020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f2e1adfbb118fada029d9623aa0ed8dd2318a25545f57095be55dcbd209508e12818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c08201808552815191840191909120600355600580546001600160a01b031916339081179091556328b1fab360e01b90915292516328b1fab39260c4808401939192918290030181865afa15801562000149573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016f919062000181565b6001600160a01b0316608052620001b3565b6000602082840312156200019457600080fd5b81516001600160a01b0381168114620001ac57600080fd5b9392505050565b60805161266c620001e460003960008181610718015281816107b9015281816114fd01526115ae015261266c6000f3fe608060405234801561001057600080fd5b506004361061018b5760003560e01c806306fdde03146101905780630902f1ac146101df578063095ea7b3146102085780630dfe16811461022b57806318160ddd1461024b57806323b872dd1461026257806330adf81f14610275578063313ce5671461028a57806332bfe469146102a45780633644e515146102b95780635543410f146102c257806355c67628146102d5578063566f7f9c146102e35780635909c0d5146102f85780635a3d5493146103015780636a6278421461030a57806370a082311461031d5780637ecebe001461033d57806389afcb441461035d578063955a8d381461037057806395d89b41146103835780639b02cdde146103a5578063a9059cbb146103ad578063ba9a7a56146103c0578063bc25cf77146103c9578063c45a0155146103dc578063d21220a7146103ef578063d4cadf6814610402578063d505accf1461041a578063d54a8d181461042d578063dd62ed3e14610438578063f89f27ed14610463578063fff6cae914610478575b600080fd5b6101c96040518060400160405280601a8152602001792932b8bab4b2b6902634b8bab4b234ba3c90283937bb34b232b960311b81525081565b6040516101d69190611fc5565b60405180910390f35b6101e7610480565b60408051938452602084019290925263ffffffff16908201526060016101d6565b61021b61021636600461201b565b610496565b60405190151581526020016101d6565b60075461023e906001600160a01b031681565b6040516101d69190612047565b61025460005481565b6040519081526020016101d6565b61021b61027036600461205b565b6104ad565b61025460008051602061261783398151915281565b610292601281565b60405160ff90911681526020016101d6565b6015546016545b6040516101d692919061209c565b61025460035481565b6102546102d03660046120b9565b610542565b601a5463ffffffff16610254565b6102f66102f1366004612180565b610690565b005b610254600c5481565b610254600d5481565b6102546103183660046121dc565b6108b2565b61025461032b3660046121dc565b60016020526000908152604090205481565b61025461034b3660046121dc565b60046020526000908152604090205481565b6102ab61036b3660046121dc565b610b37565b60065461023e906001600160a01b031681565b6101c9604051806040016040528060038152602001620524c560ec1b81525081565b601254610254565b61021b6103bb36600461201b565b610e84565b6102546103e881565b6102f66103d73660046121dc565b610e91565b60055461023e906001600160a01b031681565b60085461023e906001600160a01b031681565b601a5460405163ffffffff90911681526020016101d6565b6102f6610428366004612208565b610f8b565b600f546010546102ab565b610254610446366004612279565b600260209081526000928352604080842090915290825290205481565b61046b611180565b6040516101d691906122b2565b6102f661118f565b600954600a54600b549192909163ffffffff1690565b60006104a33384846112ac565b5060015b92915050565b6001600160a01b03831660009081526002602090815260408083203384529091528120546000191461052c576001600160a01b0384166000908152600260209081526040808320338452909152902054610507908361130e565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b61053784848461131c565b5060015b9392505050565b60135460208401516000916001600160a01b0391821691161481610565826113b0565b9050600061057383156113b0565b90506000610580846113c7565b9050600061058e85156113c7565b905061059a88856113de565b97506105a687846113de565b96506000895160018111156105bd576105bd6122f6565b14156106325760006105e26105d7601a5463ffffffff1690565b60608c0151906113ea565b90506106046105fe828c6060015161148990919063ffffffff16565b866113de565b60608b015260006106188b8b8b87876114de565b90506106248186611583565b97505050505050505061053b565b6106408960600151846113de565b60608a015260006106548a8a8a868661158f565b905061066081866115e9565b905061068361067c610677601a5463ffffffff1690565b6115f5565b829061161f565b965050505050505061053b565b6005546001600160a01b031633146106e25760405162461bcd60e51b815260206004820152601060248201526f2922a8a6281d102327a92124a22222a760811b60448201526064015b60405180910390fd5b60006106f683670de0b6b3a7640000612322565b9050610701856116bc565b60185561070d846116bc565b6019819055506107b47f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663418307846040518163ffffffff1660e01b8152600401602060405180830381865afa158015610774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107989190612339565b6107aa85670de0b6b3a7640000612352565b101561012e611740565b61084b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663418307846040518163ffffffff1660e01b8152600401602060405180830381865afa158015610815573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108399190612339565b6107aa83670de0b6b3a7640000612352565b60006108578285612371565b905061086f670de0b6b3a76400008214610134611740565b601584905560168290558184101561088857600161088b565b60005b60ff166017555050601a805463ffffffff191663ffffffff92909216919091179055505050565b6000600e546001146108d65760405162461bcd60e51b81526004016106d990612389565b6000600e819055806108e6610480565b506007546040516370a0823160e01b81529294509092506000916001600160a01b03909116906370a0823190610920903090600401612047565b602060405180830381865afa15801561093d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109619190612339565b6008546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610997903090600401612047565b602060405180830381865afa1580156109b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d89190612339565b905060006109e68386611489565b905060006109f48386611489565b9050610a008686611752565b5060005480610a3b57610a276103e8610a21610a1c8587612352565b611998565b90611489565b9750610a3660006103e8611a08565b610a70565b610a6d87610a498386612352565b610a5391906123c6565b87610a5e8486612352565b610a6891906123c6565b611a85565b97505b60008811610acc5760405162461bcd60e51b8152602060048201526024808201527f5245514c503a20494e53554646494349454e545f4c49515549444954595f4d496044820152631395115160e21b60648201526084016106d9565b610ad68989611a08565b610ae285858989611a9b565b336001600160a01b03167f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f8484604051610b1d92919061209c565b60405180910390a250506001600e55509395945050505050565b600080600e54600114610b5c5760405162461bcd60e51b81526004016106d990612389565b6000600e81905580610b6c610480565b506007546008546040516370a0823160e01b81529395509193506001600160a01b039081169291169060009083906370a0823190610bae903090600401612047565b602060405180830381865afa158015610bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bef9190612339565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610c1f9190612047565b602060405180830381865afa158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c609190612339565b30600090815260016020526040902054909150610c7d8787611752565b5060005480610c8c8584612352565b610c9691906123c6565b995080610ca38484612352565b610cad91906123c6565b985060008a118015610cbf5750600089115b610d175760405162461bcd60e51b8152602060048201526024808201527f5245514c503a20494e53554646494349454e545f4c49515549444954595f42556044820152631493915160e21b60648201526084016106d9565b610d213083611c51565b610d2c868c8c611cc9565b610d37858c8b611cc9565b6040516370a0823160e01b81526001600160a01b038716906370a0823190610d63903090600401612047565b602060405180830381865afa158015610d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da49190612339565b6040516370a0823160e01b81529094506001600160a01b038616906370a0823190610dd3903090600401612047565b602060405180830381865afa158015610df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e149190612339565b9250610e2284848a8a611a9b565b8a6001600160a01b0316336001600160a01b03167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364968c8c604051610e6792919061209c565b60405180910390a350505050505050506001600e81905550915091565b60006104a333848461131c565b600e54600114610eb35760405162461bcd60e51b81526004016106d990612389565b6000600e556007546008546009546040516370a0823160e01b81526001600160a01b039384169390921691610f4d91849186919083906370a0823190610efd903090600401612047565b602060405180830381865afa158015610f1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3e9190612339565b610f489190612322565b611cc9565b610f818184600a54846001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610efd9190612047565b50506001600e5550565b42841015610fca5760405162461bcd60e51b815260206004820152600c60248201526b1493140e881156141254915160a21b60448201526064016106d9565b6003546001600160a01b03881660009081526004602052604081208054919291600080516020612617833981519152918b918b918b91908761100b836123da565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161108492919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156110ef573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906111255750886001600160a01b0316816001600160a01b0316145b61116a5760405162461bcd60e51b8152602060048201526016602482015275524c503a20494e56414c49445f5349474e415455524560501b60448201526064016106d9565b6111758989896112ac565b505050505050505050565b606061118a611e09565b905090565b600e546001146111b15760405162461bcd60e51b81526004016106d990612389565b6000600e556007546040516370a0823160e01b81526112a5916001600160a01b0316906370a08231906111e8903090600401612047565b602060405180830381865afa158015611205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112299190612339565b6008546040516370a0823160e01b81526001600160a01b03909116906370a0823190611259903090600401612047565b602060405180830381865afa158015611276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a9190612339565b600954600a54611a9b565b6001600e55565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061053b83836001611e84565b6001600160a01b03831660009081526001602052604090205461133f908261130e565b6001600160a01b03808516600090815260016020526040808220939093559084168152205461136e9082611ea8565b6001600160a01b0380841660008181526001602052604090819020939093559151908516906000805160206125f7833981519152906113019085815260200190565b6000816113bf576019546104a7565b505060185490565b6000816113d6576016546104a7565b505060155490565b600061053b8284612352565b6000806113f78385612352565b905083158061140e57508261140c85836123c6565b145b6114495760405162461bcd60e51b815260206004820152600c60248201526b4d554c5f4f564552464c4f5760a01b60448201526064016106d9565b806114585760009150506104a7565b670de0b6b3a764000061146c600183612322565b61147691906123c6565b611481906001612371565b9150506104a7565b6000828211156114ca5760405162461bcd60e51b815260206004820152600c60248201526b5355425f4f564552464c4f5760a01b60448201526064016106d9565b60006114d68385612322565b949350505050565b6060850151604051630b9c7bab60e31b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691635ce3dd589161153891899188918a9189916004016123f5565b602060405180830381865afa158015611555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115799190612339565b9695505050505050565b600061053b8383611ec5565b606085015160405163e9be73ef60e01b81526000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163e9be73ef9161153891899188918a9189916004016123f5565b600061053b8383611eee565b6000670de0b6b3a7640000821061160d5760006104a7565b6104a782670de0b6b3a7640000612322565b60008161163e5760405162461bcd60e51b81526004016106d990612418565b8261164b575060006104a7565b600061165f670de0b6b3a764000085612352565b9050670de0b6b3a764000061167485836123c6565b146116b05760405162461bcd60e51b815260206004820152600c60248201526b11125597d25395115493905360a21b60448201526064016106d9565b8261146c600183612322565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611721919061243f565b60ff1690506000611733826012612322565b90506114d681600a612540565b8161174e5761174e81611f42565b5050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cc919061254c565b90506000600560009054906101000a90046001600160a01b03166001600160a01b031663b0e21e8a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611823573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118479190612339565b6001600160a01b038316151593509050600080611867600f546010549091565b915091506000831180156118785750845b801561188e5750600082118061188e5750600081115b15611976576011546006546000805463ffffffff9093169290916001600160a01b031690630c8750c2908b8b866118c6816064612322565b6118d08c8c6123c6565b6118da8d8c6123c6565b6040516001600160e01b031960e08a901b1681526004810197909752602487019590955260448601939093526064850191909152608484015260a483015260c482015260e401602060405180830381865afa15801561193d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119619190612339565b90508015611973576119738682611a08565b50505b8115611982576000600f555b801561198e5760006010555b5050505092915050565b600060038211156119f957508060006119b26002836123c6565b6119bd906001612371565b90505b818110156119f3579050806002816119d881866123c6565b6119e29190612371565b6119ec91906123c6565b90506119c0565b50919050565b8115611a03575060015b919050565b600054611a159082611ea8565b60009081556001600160a01b038316815260016020526040902054611a3a9082611ea8565b6001600160a01b0383166000818152600160205260408082209390935591519091906000805160206125f783398151915290611a799085815260200190565b60405180910390a35050565b6000818310611a94578161053b565b5090919050565b60115463ffffffff16600019611ab2826064612322565b611abc9087612352565b11158015611ad55750600019611ad28286612352565b11155b611b135760405162461bcd60e51b815260206004820152600f60248201526e5245514c503a204f564552464c4f5760881b60448201526064016106d9565b6000611b23600160201b42612569565b600b54909150600090611b3c9063ffffffff168361257d565b905060008163ffffffff16118015611b5357508415155b8015611b5e57508315155b15611bef576000611b70846064612322565b611b7a9087612352565b90506000611b888587612352565b905063ffffffff8316611b9b83836123c6565b611ba59190612352565b600c6000828254611bb69190612371565b909155505063ffffffff8316611bcc82846123c6565b611bd69190612352565b600d6000828254611be79190612371565b909155505050505b6009879055600a869055600b805463ffffffff191663ffffffff84161790556040517fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a90611c40908990899061209c565b60405180910390a150505050505050565b6001600160a01b038216600090815260016020526040902054611c74908261130e565b6001600160a01b03831660009081526001602052604081209190915554611c9b908261130e565b60009081556040518281526001600160a01b038416906000805160206125f783398151915290602001611a79565b60408051808201825260198152787472616e7366657228616464726573732c75696e743235362960381b60209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b17905291516000928392871691611d5191906125a2565b6000604051808303816000865af19150503d8060008114611d8e576040519150601f19603f3d011682016040523d82523d6000602084013e611d93565b606091505b5091509150818015611dbd575080511580611dbd575080806020019051810190611dbd91906125be565b611e025760405162461bcd60e51b815260206004820152601660248201527514915453140e881514905394d1915497d1905253115160521b60448201526064016106d9565b5050505050565b60408051600280825260608083018452926000929190602083019080368337019050509050611e3860016113c7565b81600081518110611e4b57611e4b6125e0565b602002602001018181525050611e6160006113c7565b81600181518110611e7457611e746125e0565b6020908102919091010152919050565b6000611e938484111583611740565b6000611e9f8486612322565b95945050505050565b600080611eb58385612371565b905061053b848210156000611740565b600081611ee45760405162461bcd60e51b81526004016106d990612418565b61053b82846123c6565b600081611f0d5760405162461bcd60e51b81526004016106d990612418565b82611f1a575060006104a7565b81611f26600185612322565b611f3091906123c6565b611f3b906001612371565b90506104a7565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60005b83811015611fb0578181015183820152602001611f98565b83811115611fbf576000848401525b50505050565b6020815260008251806020840152611fe4816040850160208701611f95565b601f01601f19169190910160400192915050565b6001600160a01b038116811461200d57600080fd5b50565b8035611a0381611ff8565b6000806040838503121561202e57600080fd5b823561203981611ff8565b946020939093013593505050565b6001600160a01b0391909116815260200190565b60008060006060848603121561207057600080fd5b833561207b81611ff8565b9250602084013561208b81611ff8565b929592945050506040919091013590565b918252602082015260400190565b803560028110611a0357600080fd5b60008060008385036101008112156120d057600080fd5b60c08112156120de57600080fd5b5060405160c081016001600160401b038111828210171561210f57634e487b7160e01b600052604160045260246000fd5b60405261211b856120aa565b815261212960208601612010565b602082015261213a60408601612010565b60408201526060850135606082015261215560808601612010565b608082015261216660a08601612010565b60a08201529560c0850135955060e0909401359392505050565b6000806000806080858703121561219657600080fd5b84356121a181611ff8565b935060208501356121b181611ff8565b925060408501359150606085013563ffffffff811681146121d157600080fd5b939692955090935050565b6000602082840312156121ee57600080fd5b813561053b81611ff8565b60ff8116811461200d57600080fd5b600080600080600080600060e0888a03121561222357600080fd5b873561222e81611ff8565b9650602088013561223e81611ff8565b95506040880135945060608801359350608088013561225c816121f9565b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561228c57600080fd5b823561229781611ff8565b915060208301356122a781611ff8565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156122ea578351835292840192918401916001016122ce565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156123345761233461230c565b500390565b60006020828403121561234b57600080fd5b5051919050565b600081600019048311821515161561236c5761236c61230c565b500290565b600082198211156123845761238461230c565b500190565b6020808252600d908201526c14915453140e881313d0d2d151609a1b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b6000826123d5576123d56123b0565b500490565b60006000198214156123ee576123ee61230c565b5060010190565b948552602085019390935260408401919091526060830152608082015260a00190565b6020808252600d908201526c2d22a927afa224ab24a9a4a7a760991b604082015260600190565b60006020828403121561245157600080fd5b815161053b816121f9565b600181815b8085111561249757816000190482111561247d5761247d61230c565b8085161561248a57918102915b93841c9390800290612461565b509250929050565b6000826124ae575060016104a7565b816124bb575060006104a7565b81600181146124d157600281146124db576124f7565b60019150506104a7565b60ff8411156124ec576124ec61230c565b50506001821b6104a7565b5060208310610133831016604e8410600b841016171561251a575081810a6104a7565b612524838361245c565b80600019048211156125385761253861230c565b029392505050565b600061053b838361249f565b60006020828403121561255e57600080fd5b815161053b81611ff8565b600082612578576125786123b0565b500690565b600063ffffffff8381169083168181101561259a5761259a61230c565b039392505050565b600082516125b4818460208701611f95565b9190910192915050565b6000602082840312156125d057600080fd5b8151801515811461053b57600080fd5b634e487b7160e01b600052603260045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9a2646970667358221220ca73c833b33cc3b0910eca4f890e5fc0bc74de957917ede4602faf37edf2968f64736f6c634300080a0033a2646970667358221220b9dd2dcd21fe6dd8a94ea562c52f18af6192954060f00b1642e04e1eb86767e464736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1652,
        "contract": "contracts/Requiem2PoolFactory.sol:Requiem2PoolFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1654,
        "contract": "contracts/Requiem2PoolFactory.sol:Requiem2PoolFactory",
        "label": "formula",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1656,
        "contract": "contracts/Requiem2PoolFactory.sol:Requiem2PoolFactory",
        "label": "protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1658,
        "contract": "contracts/Requiem2PoolFactory.sol:Requiem2PoolFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1660,
        "contract": "contracts/Requiem2PoolFactory.sol:Requiem2PoolFactory",
        "label": "weightedMath",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1664,
        "contract": "contracts/Requiem2PoolFactory.sol:Requiem2PoolFactory",
        "label": "_poolSalts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 1667,
        "contract": "contracts/Requiem2PoolFactory.sol:Requiem2PoolFactory",
        "label": "allPools",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1671,
        "contract": "contracts/Requiem2PoolFactory.sol:Requiem2PoolFactory",
        "label": "_pools",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint64)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}