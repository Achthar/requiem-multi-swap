{
  "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_formula",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pairGovernance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INIT_CODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "initialFee",
          "type": "uint32"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "getPairs",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_tokenPairs",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_newSwapFee",
          "type": "uint32"
        }
      ],
      "name": "setSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFeeGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x57f4d04650a63b010037b591cdf998604801b32e18cbcf0683668071e6bed85a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "transactionIndex": 0,
    "gasUsed": "5225316",
    "logsBloom": "0x
    "blockHash": "0x99d1bd7f6722ee23f2edb2a16f2e67c4df14c9e2ed00284e80b91d8bba3afe67",
    "transactionHash": "0x57f4d04650a63b010037b591cdf998604801b32e18cbcf0683668071e6bed85a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11,
        "transactionHash": "0x57f4d04650a63b010037b591cdf998604801b32e18cbcf0683668071e6bed85a",
        "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x99d1bd7f6722ee23f2edb2a16f2e67c4df14c9e2ed00284e80b91d8bba3afe67"
      }
    ],
    "blockNumber": 11,
    "cumulativeGasUsed": "5225316",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "solcInputHash": "0dc166cf1c5dabbbdfd7d39ea91efa3d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_formula\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairGovernance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"initialFee\",\"type\":\"uint32\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getPairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenPairs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_newSwapFee\",\"type\":\"uint32\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WeightedPairFactoryV2.sol\":\"RequiemWeightedPairFactoryV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999999},\"remappings\":[]},\"sources\":{\"contracts/RequiemPairERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./interfaces/IRequiemPairERC20.sol\\\";\\n\\n// solhint-disable not-rely-on-time, no-inline-assembly, var-name-mixedcase, max-line-length\\n\\ncontract RequiemPairERC20 is IRequiemPairERC20 {\\n\\n    string public constant name = \\\"Requiem Pair Liquidity Provider\\\";\\n    string public constant symbol = \\\"RPLP\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    bytes32 public override DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    constructor() {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"), keccak256(bytes(name)), keccak256(bytes(\\\"1\\\")), chainId, address(this))\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply += value;\\n        balanceOf[to] += value;\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] -= value;\\n        totalSupply -= value;\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] -= value;\\n        balanceOf[to] += value;\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= value;\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"RLP: EXPIRED\\\");\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"RLP: IS\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x693ceb03b2774180b51e4513b6035daefc60267d5e88791f98b1c5c242c4bb18\",\"license\":\"MIT\"},\"contracts/WeightedPairFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./interfaces/IRequiemWeightedPairFactoryV2.sol\\\";\\nimport \\\"./libraries/EnumerableSet.sol\\\";\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./WeightedPairV2.sol\\\";\\n\\n// solhint-disable no-inline-assembly\\n\\ncontract RequiemWeightedPairFactoryV2 is IRequiemWeightedPairFactoryV2, Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address public feeTo;\\n    address public formula;\\n    uint256 public protocolFee;\\n    address public feeToSetter;\\n    address public swapFeeGovernance;\\n    bytes32 public constant INIT_CODE_HASH = keccak256(abi.encodePacked(type(RequiemWeightedPairV2).creationCode));\\n\\n    mapping(bytes32 => address) private _pairSalts;\\n    address[] public allPairs;\\n    mapping(address => bool) private _pairs;\\n\\n    mapping(IERC20 => mapping(IERC20 => EnumerableSet.AddressSet)) internal tokenPairs;\\n\\n    address public pairGovernance;\\n\\n    constructor(\\n        address _feeToSetter,\\n        address _formula,\\n        address _pairGovernance\\n    ) {\\n        feeToSetter = _feeToSetter;\\n        formula = _formula;\\n        pairGovernance = _pairGovernance;\\n    }\\n\\n    function isPair(address b) external view returns (bool) {\\n        return _pairs[b];\\n    }\\n\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA\\n    ) external view returns (address pair) {\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0));\\n        pair = _pairSalts[salt];\\n    }\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 initialFee\\n    ) external returns (address pair) {\\n        require(tokenA != tokenB, \\\"RLP: IA\\\");\\n        require(tokenWeightA >= 2 && tokenWeightA <= 98 && (tokenWeightA % 2) == 0, \\\"RLP: IW\\\");\\n\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        require(token0 != address(0), \\\"RLP: ZA\\\");\\n        // single check is sufficient\\n        bytes memory bytecode = type(RequiemWeightedPairV2).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0));\\n        require(_pairSalts[salt] == address(0), \\\"RLP: PE\\\");\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IRequiemWeightedPairV2(pair).initialize(token0, token1, tokenWeight0);\\n\\n     // swap fee from [0.01% - 20%]\\n        IRequiemWeightedPairV2(pair).setSwapFee(initialFee);\\n\\n        tokenPairs[IERC20(token0)][IERC20(token1)].add(pair);\\n        tokenPairs[IERC20(token1)][IERC20(token0)].add(pair);\\n\\n        _pairSalts[salt] = address(pair);\\n        allPairs.push(pair);\\n        _pairs[address(pair)] = true;\\n        emit PairCreated(token0, token1, pair, tokenWeight0, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: F\\\");\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: F\\\");\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function setProtocolFee(uint256 _protocolFee) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: F\\\");\\n        require(_protocolFee == 0 || (_protocolFee >= 10000 && _protocolFee <= 100000), \\\"RLP: IPF\\\");\\n        protocolFee = _protocolFee;\\n    }\\n\\n    function getWeightsAndSwapFee(address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        )\\n    {\\n        if (_pairs[pair]) {\\n            (tokenWeight0, tokenWeight1) = IRequiemWeightedPairV2(pair).getTokenWeights();\\n            swapFee = IRequiemWeightedPairV2(pair).getSwapFee();\\n        } else {\\n            // Default is 0.3%\\n            return (50, 50, 30);\\n        }\\n    }\\n\\n    function getPairs(IERC20 token0, IERC20 token1) external view returns (address[] memory _tokenPairs) {\\n        uint256 length = tokenPairs[token0][token1].length();\\n        _tokenPairs = new address[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            _tokenPairs[i] = tokenPairs[token0][token1].at(i);\\n        }\\n    }\\n\\n    function withdrawFee(address _pair, address _to) public {\\n        require(msg.sender == feeTo, \\\"unauthorized\\\");\\n        RequiemWeightedPairV2(_pair).withdrawAdminFee(_to);\\n    }\\n\\n    function setSwapFee(address _pair, uint32 _newSwapFee) external {\\n        require(msg.sender == pairGovernance || msg.sender == owner(), \\\"unauthorized\\\");\\n        RequiemWeightedPairV2(_pair).setSwapFee(_newSwapFee);\\n    }\\n}\\n\",\"keccak256\":\"0xc5bcd34f1d9e684d1977d1da354ae7fc4665ea63a02a6ef27968c310179ecd9f\",\"license\":\"MIT\"},\"contracts/WeightedPairV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./interfaces/IRequiemWeightedPairV2.sol\\\";\\nimport \\\"./interfaces/IRequiemSwap.sol\\\";\\nimport \\\"./interfaces/IRequiemFormula.sol\\\";\\nimport \\\"./RequiemPairERC20.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IRequiemWeightedPairFactory.sol\\\";\\nimport \\\"./interfaces/IRequiemCallee.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string, avoid-low-level-calls, max-states-count\\n\\ncontract RequiemWeightedPairV2 is IRequiemSwap, IRequiemWeightedPairV2, RequiemPairERC20 {\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    bytes4 private constant SELECTOR = 0xa9059cbb;\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 private unlocked = 1;\\n    address public formula;\\n\\n    uint112 private collectedAdminFee0; // uses single storage slot, accessible via getReserves\\n    uint112 private collectedAdminFee1; // uses single storage slot, accessible via getReserves\\n    uint32 private constant adminFee = 10000; // 10% of swapFee\\n\\n    uint112 private collectedFee0; // uses single storage slot, accessible via getReserves\\n    uint112 private collectedFee1; // uses single storage slot, accessible via getReserves\\n\\n    uint32 private tokenWeight0;\\n    uint32 private tokenWeight1;\\n    uint32 private swapFee;\\n\\n    modifier lock() {\\n        require(unlocked == 1, \\\"REQLP: L\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    modifier onlyFactory() {\\n        require(msg.sender == factory, \\\"authorization\\\");\\n        _;\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function getCollectedFees() public view returns (uint112 _collectedFee0, uint112 _collectedFee1) {\\n        _collectedFee0 = collectedFee0;\\n        _collectedFee1 = collectedFee1;\\n    }\\n\\n    function getTokenWeights() public view returns (uint32 _tokenWeight0, uint32 _tokenWeight1) {\\n        _tokenWeight0 = tokenWeight0;\\n        _tokenWeight1 = tokenWeight1;\\n    }\\n\\n    function getSwapFee() public view returns (uint32 _swapFee) {\\n        _swapFee = swapFee;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"REQLP: TF\\\");\\n    }\\n\\n    constructor() {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(\\n        address _token0,\\n        address _token1,\\n        uint32 _tokenWeight0\\n    ) external {\\n        require(msg.sender == factory, \\\"REQLP: F\\\");\\n        // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n        tokenWeight0 = _tokenWeight0;\\n        tokenWeight1 = 100 - tokenWeight0;\\n        swapFee = 10; // default fee is 10bps\\n        formula = IRequiemWeightedPairFactory(factory).formula();\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        uint32 _tokenWeight0 = tokenWeight0;\\n        require(balance0 * (100 - _tokenWeight0) <= type(uint112).max && balance1 * _tokenWeight0 <= type(uint112).max, \\\"REQLP: O\\\");\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n        // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            uint112 mReserve0 = _reserve0 * (100 - _tokenWeight0);\\n            uint112 mReserve1 = _reserve1 * _tokenWeight0;\\n            price0CumulativeLast += uint256(UQ112x112.encode(mReserve1).uqdiv(mReserve0)) * timeElapsed;\\n            price1CumulativeLast += uint256(UQ112x112.encode(mReserve0).uqdiv(mReserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IRequiemWeightedPairFactory(factory).feeTo();\\n        uint112 protocolFee = uint112(IRequiemWeightedPairFactory(factory).protocolFee());\\n        feeOn = feeTo != address(0);\\n        (uint112 _collectedFee0, uint112 _collectedFee1) = getCollectedFees();\\n        if (protocolFee > 0 && feeOn && (_collectedFee0 > 0 || _collectedFee1 > 0)) {\\n            uint32 _tokenWeight0 = tokenWeight0;\\n            uint256 liquidity = IRequiemFormula(formula).mintLiquidityFee(\\n                totalSupply,\\n                _reserve0,\\n                _reserve1,\\n                _tokenWeight0,\\n                100 - _tokenWeight0,\\n                _collectedFee0 / protocolFee,\\n                _collectedFee1 / protocolFee\\n            );\\n            if (liquidity > 0) _mint(feeTo, liquidity);\\n        }\\n        if (_collectedFee0 > 0) collectedFee0 = 0;\\n        if (_collectedFee1 > 0) collectedFee1 = 0;\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this)) - uint256(collectedAdminFee0);\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this)) - uint256(collectedAdminFee1);\\n        uint256 amount0 = balance0 - _reserve0;\\n        uint256 amount1 = balance1 - _reserve1;\\n        _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply;\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min((amount0 * _totalSupply) / _reserve0, (amount1 * _totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, \\\"REQLP: ILM\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this)) - uint256(collectedAdminFee0);\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this)) - uint256(collectedAdminFee1);\\n        uint256 liquidity = balanceOf[address(this)];\\n        _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = (liquidity * balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = (liquidity * balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, \\\"REQLP: ILB\\\");\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata callData\\n    ) external lock {\\n        _swap(amount0Out, amount1Out, to, callData);\\n    }\\n\\n    //\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address,\\n        uint256 amountIn\\n    ) external view returns (uint256) {\\n        (uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = tokenIn == token0\\n            ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n            : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        return IRequiemFormula(formula).getAmountOut(amountIn, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address,\\n        uint256 amountOut\\n    ) external view returns (uint256) {\\n        (uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = tokenIn == token0\\n            ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n            : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        return IRequiemFormula(formula).getAmountIn(amountOut, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)) - reserve0);\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)) - reserve1);\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n\\n    // calculates output amount for given input and executes the respective trade\\n    // viable for use in multi swaps as it returns the output value\\n    // requires the amount in to be sent to this address beforehand\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address,\\n        uint256 amountIn,\\n        uint256,\\n        address to\\n    ) external override lock returns (uint256) {\\n        bool inToken0 = tokenIn == token0;\\n        (uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = inToken0\\n            ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n            : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        uint256 amountOut = IRequiemFormula(formula).getAmountOut(amountIn, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n        (uint256 amount0Out, uint256 amount1Out) = inToken0 ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n        return _swap(amount0Out, amount1Out, to, new bytes(0));\\n    }\\n\\n    // calculates input amount for given output and executes the respective trade\\n    // calling this one only makes sense if a single trade is supposd to be executed in the tx\\n    // requires the amount in to be sent to this address beforehand\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address,\\n        uint256 amountOut,\\n        uint256,\\n        address to\\n    ) external override lock returns (uint256) {\\n        bool inToken0 = tokenIn == token0;\\n        (uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = tokenIn == token0\\n            ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n            : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        uint256 amountIn = IRequiemFormula(formula).getAmountIn(amountOut, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n        (uint256 amount0Out, uint256 amount1Out) = inToken0 ? (uint256(0), amountIn) : (amountIn, uint256(0));\\n        return _swap(amount0Out, amount1Out, to, new bytes(0));\\n    }\\n\\n    // Wrapps the swap funtion for the Requiem interface whih pre-selects thre respective token amount\\n    function onSwap(\\n        address tokenIn,\\n        address,\\n        uint256,\\n        uint256 amountOut,\\n        address to\\n    ) external override lock {\\n        (uint256 amount0Out, uint256 amount1Out) = token0 == tokenIn ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n        _swap(amount0Out, amount1Out, to, new bytes(0));\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function _swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes memory data\\n    ) internal returns (uint256) {\\n        require(amount0Out > 0 || amount1Out > 0, \\\"REQLP: IOA\\\");\\n        uint112 _reserve0 = reserve0; // gas savings\\n        uint112 _reserve1 = reserve1; // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"REQLP: IL\\\");\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"REQLP: IT\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            if (data.length > 0) IRequiemCallee(to).requiemCall(msg.sender, amount0Out, amount1Out, data); // flash swap\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n\\n        require(amount0In > 0 || amount1In > 0, \\\"REQLP: IIA\\\");\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0 * 10000;\\n            uint256 balance1Adjusted = balance1 * 10000;\\n            {\\n                // avoids stack too deep errors\\n                if (amount0In > 0) {\\n                    uint256 amount0InFee = amount0In * swapFee;\\n                    balance0Adjusted -= amount0InFee;\\n                    collectedAdminFee0 = uint112(uint256(collectedAdminFee0) + (amount0InFee * adminFee) / 1000000);\\n                }\\n                if (amount1In > 0) {\\n                    uint256 amount1InFee = amount1In * swapFee;\\n                    balance1Adjusted -= amount1InFee;\\n                    collectedAdminFee1 = uint112(uint256(collectedAdminFee1) + (amount1InFee * adminFee) / 1000000);\\n                }\\n                uint32 _tokenWeight0 = tokenWeight0; // gas savings\\n                if (_tokenWeight0 == 50) {\\n                    // gas savings for pair 50/50\\n                    require(balance0Adjusted * balance1Adjusted >= uint256(_reserve0) * _reserve1 * (10000**2), \\\"REQLP: K\\\");\\n                } else {\\n                    require(IRequiemFormula(formula).ensureConstantValue(uint256(_reserve0) * 10000, uint256(_reserve1) * 10000, balance0Adjusted, balance1Adjusted, _tokenWeight0), \\\"REQLP: K\\\");\\n                }\\n            }\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n        return amount0Out > 0 ? amount0Out : amount1Out;\\n    }\\n\\n    function withdrawAdminFee(address _to) public onlyFactory returns (uint112 _collectedAdminFee0, uint112 _collectedAdminFee1) {\\n        _safeTransfer(token0, _to, collectedAdminFee0);\\n        _safeTransfer(token1, _to, collectedAdminFee1);\\n        // return fee collected\\n        _collectedAdminFee0 = collectedAdminFee0;\\n        _collectedAdminFee1 = collectedAdminFee1;\\n\\n        // set collected fee to zero\\n        collectedAdminFee0 = 0;\\n        collectedAdminFee1 = 0;\\n    }\\n\\n    function setSwapFee(uint32 _newSwapFee) external onlyFactory {\\n        // 0.01% - 5% fee range\\n        require(_newSwapFee >= 1 && _newSwapFee <= 500, \\\"RLP: ISF\\\");\\n        swapFee = _newSwapFee;\\n    }\\n}\\n\",\"keccak256\":\"0x4955cc7d589c5fb3c5b16f0565797945d46598f57cc6be09560ccdd98142c962\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xab442747ba7fbbe95ce3e26fac7ff53c7ed1f2ddb11ee665905bcd85593ac42e\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemCallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\ninterface IRequiemCallee {\\n    function requiemCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\",\"keccak256\":\"0xe46a6dd4a0f99b7b211a9167c35bb6cd8b1b13d30590f04eb89c0513029f7c5c\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.13;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IRequiemFormula {\\n\\n    function getReserveAndWeights(address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getPairAmountIn(address pair, address tokenIn, uint amountOut) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getPairAmountOut(address pair, address tokenIn, uint amountIn) external view returns (uint amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0xc7458bc341259ccb35735243cf7388f45a5ab841e21107bc708963802e4950b2\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IRequiemPairERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemPairERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0xd26126b87195232c895a1ceccb7f255652a775e948f72c104828178ad0f59ae6\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IRequiemSwap {\\n    // this funtion requires the correctly calculated amounts as input\\n    // the others are supposed to implement that calculation\\n    // no return value required since the amounts are already known\\n    function onSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address to\\n    ) external;\\n\\n    //\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external returns (uint256);\\n\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to\\n    ) external returns (uint256);\\n\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (uint256);\\n\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x63771a8851ddc9a45c2b814e46c5b5491477aefeff7dd3b4043c8ea61dee5dad\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPairFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\ninterface IRequiemWeightedPairFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function protocolFee() external view returns (uint256);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function isPair(address) external view returns (bool);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external returns (address pair);\\n\\n    function getWeightsAndSwapFee(address pair)\\n        external\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        );\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setProtocolFee(uint256) external;\\n}\\n\",\"keccak256\":\"0xde74ee657904b0149e32e6eaa532ec2d45d44ea64e4eb01cc3ad49b51c8a82ce\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPairFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\ninterface IRequiemWeightedPairFactoryV2 {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function protocolFee() external view returns (uint256);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function isPair(address) external view returns (bool);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 initialFee\\n    ) external returns (address pair);\\n\\n    function getWeightsAndSwapFee(address pair)\\n        external\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        );\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setProtocolFee(uint256) external;\\n}\\n\",\"keccak256\":\"0xc1996fdfeaf75a105f350e33074c9de2ee162fedb0e299cb26bb0577426784f7\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPairV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IRequiemPairERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemWeightedPairV2 is IRequiemPairERC20 {\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n    function getSwapFee() external view returns (uint32);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function setSwapFee(uint32) external;\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address,\\n        address,\\n        uint32\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6a7185f2b4bb198e522c89daa7bde0561042e3b945a8fe8b341c807c59b46739\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x1e37be1406d40b13daaba8dd730eab1303311bb780625d791f8d3f724f3153f6\",\"license\":\"MIT\"},\"contracts/libraries/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the EnumerableSet library from OpenZeppelin Contracts, altered to remove the base private functions that\\n// work on bytes32, replacing them with a native implementation for address and bytes32 values, to reduce bytecode \\n// size and runtime costs.\\n// The `unchecked_at` function was also added, which allows for more gas efficient data reads in some scenarios.\\n\\npragma solidity ^0.8.13;\\n\\n// solhint-disable func-name-mixedcase\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // The original OpenZeppelin implementation uses a generic Set type with bytes32 values: this was replaced with\\n    // AddressSet, which uses address keys natively, resulting in more dense bytecode.\\n\\n    struct AddressSet {\\n        // Storage of set values\\n        address[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(address => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // The swap is only necessary if we're not removing the last element\\n            if (toDeleteIndex != lastIndex) {\\n                address lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        require(set._values.length > index, \\\"OUT_OF_BOUNDS\\\");\\n        return unchecked_at(set, index);\\n    }\\n\\n    /**\\n     * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\\n     * than {length}). O(1).\\n     *\\n     * This function performs one less storage read than {at}, but should only be used when `index` is known to be\\n     * within bounds.\\n     */\\n    function unchecked_at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return set._values[index];\\n    }\\n\\n    function rawIndexOf(AddressSet storage set, address value) internal view returns (uint256) {\\n        return set._indexes[value] - 1;\\n    }\\n\\n    struct Bytes32Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0 \\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not \\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // The swap is only necessary if we're not removing the last element\\n            if (toDeleteIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        require(set._values.length > index, \\\"OUT_OF_BOUNDS\\\");\\n        return unchecked_at(set, index);\\n    }\\n\\n    /**\\n     * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\\n     * than {length}). O(1).\\n     *\\n     * This function performs one less storage read than {at}, but should only be used when `index` is known to be\\n     * within bounds.\\n     */\\n    function unchecked_at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    function rawIndexOf(Bytes32Set storage set, bytes32 value) internal view returns (uint256) {\\n        return set._indexes[value] - 1;\\n    }\\n}\\n\",\"keccak256\":\"0x11c4a7b1b239dccee4385b19c7123b76ae3e8a499c49236ba5f61bf619e9758c\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1e62e6a11346932393933efc33d8dcdb4e02eb67b72826766854feb27c374ff1\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xf65378dbd07bb0ad967fa83e97dc41e9bc9e9148aad564c7cd994b81a98fbc2b\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n// solhint-disable avoid-low-level-calls, reason-string\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x429ddbf2e1e8c7be482e806aee97439e670a4466659433e6439b59f9200b4cd4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 private constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x70adb72eff3c8a3809b156001616b8c3c002e05724ddf0eb9c944b398a013ba7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 41306,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 31407,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "feeTo",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 31409,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "formula",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 31411,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "protocolFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 31413,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 31415,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "swapFeeGovernance",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 31430,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "_pairSalts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 31433,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "allPairs",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 31437,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "_pairs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 31446,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "tokenPairs",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_contract(IERC20)33676,t_mapping(t_contract(IERC20)33676,t_struct(AddressSet)40402_storage))"
      },
      {
        "astId": 31448,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "pairGovernance",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)33676": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_contract(IERC20)33676,t_mapping(t_contract(IERC20)33676,t_struct(AddressSet)40402_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)33676",
        "label": "mapping(contract IERC20 => mapping(contract IERC20 => struct EnumerableSet.AddressSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)33676,t_struct(AddressSet)40402_storage)"
      },
      "t_mapping(t_contract(IERC20)33676,t_struct(AddressSet)40402_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)33676",
        "label": "mapping(contract IERC20 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)40402_storage"
      },
      "t_struct(AddressSet)40402_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 40397,
            "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 40401,
            "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}