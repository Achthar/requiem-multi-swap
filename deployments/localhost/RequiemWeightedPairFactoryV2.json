{
  "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_formula",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pairGovernance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INIT_CODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "initialFee",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "initialAmp",
          "type": "uint32"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "getPairs",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_tokenPairs",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getParameters",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "amp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_newSwapFee",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_amp",
          "type": "uint32"
        }
      ],
      "name": "setSwapParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFeeGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2619325928cecae08acde735f1e7842f7cb5ac14958c8a346b345b2b49511ea4",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "transactionIndex": 0,
    "gasUsed": "5394971",
    "logsBloom": "0x
    "blockHash": "0x41a9621d20f02cde50d63272e0fb097f4fbcb0f9ebdd9e3e2fddb5bbc93de7fd",
    "transactionHash": "0x2619325928cecae08acde735f1e7842f7cb5ac14958c8a346b345b2b49511ea4",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11,
        "transactionHash": "0x2619325928cecae08acde735f1e7842f7cb5ac14958c8a346b345b2b49511ea4",
        "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x41a9621d20f02cde50d63272e0fb097f4fbcb0f9ebdd9e3e2fddb5bbc93de7fd"
      }
    ],
    "blockNumber": 11,
    "cumulativeGasUsed": "5394971",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "solcInputHash": "9c15a78ba09b8f1198a45058df526d4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_formula\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairGovernance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"initialFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"initialAmp\",\"type\":\"uint32\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getPairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenPairs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_newSwapFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_amp\",\"type\":\"uint32\"}],\"name\":\"setSwapParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createPair(address,address,uint32,uint32,uint32)\":{\"params\":{\"initialAmp\":\"initial amplification parameter\",\"initialFee\":\"initial swapFee\",\"tokenA\":\"first token\",\"tokenB\":\"second token\",\"tokenWeightA\":\"first token weight\"}},\"getPairs(address,address)\":{\"params\":{\"token0\":\"first token\",\"token1\":\"second token\"},\"returns\":{\"_tokenPairs\":\"array of deployed pairs\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFeeTo(address)\":{\"params\":{\"_feeTo\":\"receiver\"}},\"setFeeToSetter(address)\":{\"params\":{\"_feeToSetter\":\"admin\"}},\"setProtocolFee(uint256)\":{\"params\":{\"_protocolFee\":\"new protocol fee\"}},\"setSwapParams(address,uint32,uint32)\":{\"params\":{\"_amp\":\"new amplification parameter\",\"_newSwapFee\":\"new seleted swap fee\",\"_pair\":\"pair to change\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createPair(address,address,uint32,uint32,uint32)\":{\"notice\":\"Creates a new pair with specified parameters - only one pair for a fixed set of weights cabn exist\"},\"getPairs(address,address)\":{\"notice\":\"Function to get  all deployed configs for a token pair\"},\"setFeeTo(address)\":{\"notice\":\"Sets receiver of fees\"},\"setFeeToSetter(address)\":{\"notice\":\"Sets admin which can determine the address to which fees are sent\"},\"setProtocolFee(uint256)\":{\"notice\":\"Sets the protocol fee\"},\"setSwapParams(address,uint32,uint32)\":{\"notice\":\"sets the crucial swap parameters for the pair\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WeightedPairFactoryV2.sol\":\"RequiemWeightedPairFactoryV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999999},\"remappings\":[]},\"sources\":{\"contracts/WeightedPairERC20V2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./interfaces/IRequiemPairERC20.sol\\\";\\n\\n// solhint-disable not-rely-on-time, no-inline-assembly, var-name-mixedcase, max-line-length\\n\\n abstract contract WeightedPairERC20V2 is IRequiemPairERC20 {\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    bytes32 public override DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    mapping(address => uint256) public nonces;\\n\\n    constructor() {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"), keccak256(bytes(\\\"Requiem Pair Liquidity Provider\\\")), keccak256(bytes(\\\"1\\\")), chainId, address(this))\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply += value;\\n        balanceOf[to] += value;\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] -= value;\\n        totalSupply -= value;\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] -= value;\\n        balanceOf[to] += value;\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] -= value;\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"REQ: EXPIRED\\\");\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"REQ: IS\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x6b746e60786d8c3db00b057dd4600a8022d748c2a11bbd5047c5b403aedb79e6\",\"license\":\"MIT\"},\"contracts/WeightedPairFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./interfaces/IRequiemWeightedPairFactoryV2.sol\\\";\\nimport \\\"./libraries/EnumerableSet.sol\\\";\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./WeightedPairV2.sol\\\";\\n\\n// solhint-disable no-inline-assembly\\n\\ncontract RequiemWeightedPairFactoryV2 is IRequiemWeightedPairFactoryV2, Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address public feeTo;\\n    address public formula;\\n    uint256 public protocolFee;\\n    address public feeToSetter;\\n    address public swapFeeGovernance;\\n    bytes32 public constant INIT_CODE_HASH = keccak256(abi.encodePacked(type(RequiemWeightedPairV2).creationCode));\\n\\n    mapping(bytes32 => address) private _pairSalts;\\n    address[] public allPairs;\\n    mapping(address => bool) private _pairs;\\n\\n    mapping(IERC20 => mapping(IERC20 => EnumerableSet.AddressSet)) internal tokenPairs;\\n\\n    address public pairGovernance;\\n\\n    constructor(\\n        address _feeToSetter,\\n        address _formula,\\n        address _pairGovernance\\n    ) {\\n        feeToSetter = _feeToSetter;\\n        formula = _formula;\\n        pairGovernance = _pairGovernance;\\n    }\\n\\n    // ===== views =====\\n    function isPair(address b) external view returns (bool) {\\n        return _pairs[b];\\n    }\\n\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA\\n    ) external view returns (address pair) {\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0));\\n        pair = _pairSalts[salt];\\n    }\\n\\n    /**\\n     * @notice Creates a new pair with specified parameters - only one pair for a fixed set of weights cabn exist\\n     * @param tokenA first token\\n     * @param tokenB second token\\n     * @param tokenWeightA first token weight\\n     * @param initialFee initial swapFee\\n     * @param initialAmp initial amplification parameter\\n     */\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 initialFee,\\n        uint32 initialAmp\\n    ) external returns (address pair) {\\n        require(tokenA != tokenB, \\\"RLP: IA\\\");\\n        require(tokenWeightA >= 2 && tokenWeightA <= 98 && (tokenWeightA % 2) == 0, \\\"RLP: IW\\\");\\n\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        require(token0 != address(0), \\\"RLP: ZA\\\");\\n        // single check is sufficient\\n        bytes memory bytecode = type(RequiemWeightedPairV2).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0));\\n        require(_pairSalts[salt] == address(0), \\\"RLP: PE\\\");\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IRequiemWeightedPairV2(pair).initialize(token0, token1, tokenWeight0);\\n        IRequiemWeightedPairV2(pair).setSwapParams(initialFee, initialAmp);\\n\\n        tokenPairs[IERC20(token0)][IERC20(token1)].add(pair);\\n        tokenPairs[IERC20(token1)][IERC20(token0)].add(pair);\\n\\n        _pairSalts[salt] = address(pair);\\n        allPairs.push(pair);\\n        _pairs[address(pair)] = true;\\n        emit PairCreated(token0, token1, pair, tokenWeight0, allPairs.length);\\n    }\\n\\n    /**\\n     * @notice Sets receiver of fees\\n     * @param _feeTo receiver\\n     */\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: F\\\");\\n        feeTo = _feeTo;\\n    }\\n\\n    /**\\n     * @notice Sets admin which can determine the address to which fees are sent\\n     * @param _feeToSetter admin\\n     */\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: F\\\");\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    /**\\n     * @notice Sets the protocol fee\\n     * @param _protocolFee new protocol fee\\n     */\\n    function setProtocolFee(uint256 _protocolFee) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: F\\\");\\n        require(_protocolFee == 0 || (_protocolFee >= 10000 && _protocolFee <= 100000), \\\"RLP: IPF\\\");\\n        protocolFee = _protocolFee;\\n    }\\n\\n    function getParameters(address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee,\\n            uint32 amp\\n        )\\n    {\\n        if (_pairs[pair]) {\\n            (tokenWeight0, tokenWeight1, swapFee, amp) = IRequiemWeightedPairV2(pair).getParameters();\\n        } \\n    }\\n\\n    /**\\n     * @notice Function to get  all deployed configs for a token pair\\n     * @param token0 first token\\n     * @param token1 second token\\n     * @return _tokenPairs array of deployed pairs\\n     */\\n    function getPairs(IERC20 token0, IERC20 token1) external view returns (address[] memory _tokenPairs) {\\n        uint256 length = tokenPairs[token0][token1].length();\\n        _tokenPairs = new address[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            _tokenPairs[i] = tokenPairs[token0][token1].at(i);\\n        }\\n    }\\n\\n    /**\\n     * @notice sets the crucial swap parameters for the pair\\n     * @param _pair pair to change\\n     * @param _newSwapFee new seleted swap fee\\n     * @param _amp new amplification parameter\\n     */\\n    function setSwapParams(\\n        address _pair,\\n        uint32 _newSwapFee,\\n        uint32 _amp\\n    ) external {\\n        require(msg.sender == pairGovernance || msg.sender == owner(), \\\"unauthorized\\\");\\n        // 0.01% - 5% fee range for swapFee and amplification parameter has to be >1\\n        require(_newSwapFee >= 0 && _newSwapFee <= 500 && _amp >= 10000, \\\"RLP: ISF\\\");\\n        RequiemWeightedPairV2(_pair).setSwapParams(_newSwapFee, _amp);\\n        RequiemWeightedPairV2(_pair).sync();\\n    }\\n}\\n\",\"keccak256\":\"0xeb3463e041eeddaf9c59473c9c7d4ed62bc46ada2ca808a24e3a2168715eafaa\",\"license\":\"MIT\"},\"contracts/WeightedPairV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./interfaces/IRequiemWeightedPairV2.sol\\\";\\nimport \\\"./interfaces/IRequiemSwap.sol\\\";\\nimport \\\"./interfaces/IWeightedFormulaV2.sol\\\";\\nimport \\\"./WeightedPairERC20V2.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20Metadata.sol\\\";\\nimport \\\"./interfaces/IRequiemWeightedPairFactory.sol\\\";\\nimport \\\"./interfaces/IRequiemCallee.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string, avoid-low-level-calls, max-states-count\\n\\ncontract RequiemWeightedPairV2 is IRequiemSwap, IRequiemWeightedPairV2, WeightedPairERC20V2 {\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n    address public formula;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 internal constant BPS = 10000;\\n\\n    uint112 private collectedFee0; // uses single storage slot, accessible via getReserves\\n    uint112 private collectedFee1; // uses single storage slot, accessible via getReserves\\n    uint32 private tokenWeight0;\\n\\n    // 1 slot\\n    // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    bytes4 private constant SELECTOR = 0xa9059cbb;\\n    uint32 private tokenWeight1;\\n    uint32 private swapFee;\\n    bool private unlocked = true;\\n\\n    // 1 slot\\n    uint112 internal vReserve0;\\n    uint112 internal vReserve1;\\n    uint32 private ampBps; // 10000 is equyivalent to a scale of 1\\n\\n    // ===== modifiers =====\\n\\n    // custom Reentrancy guard mechanism\\n    modifier lock() {\\n        require(unlocked, \\\"REQLP: L\\\");\\n        unlocked = false;\\n        _;\\n        unlocked = true;\\n    }\\n\\n    // ===== views =====\\n\\n    /** @notice gets bot reserves and virtual reserves */\\n    function getReserves() public view returns (ReserveData memory reserveData) {\\n        reserveData.reserve0 = reserve0;\\n        reserveData.reserve1 = reserve1;\\n        reserveData.vReserve0 = vReserve0;\\n        reserveData.vReserve1 = vReserve1;\\n    }\\n\\n    /** @notice Gets fees */\\n    function getCollectedFees() public view returns (uint112 _collectedFee0, uint112 _collectedFee1) {\\n        _collectedFee0 = collectedFee0;\\n        _collectedFee1 = collectedFee1;\\n    }\\n\\n    /** @notice Gets static swap parameters */\\n    function getParameters()\\n        public\\n        view\\n        returns (\\n            uint32 _tokenWeight0,\\n            uint32 _tokenWeight1,\\n            uint32 _swapFee,\\n            uint32 _amp\\n        )\\n    {\\n        _tokenWeight0 = tokenWeight0;\\n        _tokenWeight1 = tokenWeight1;\\n        _swapFee = swapFee;\\n        _amp = ampBps;\\n    }\\n\\n    /** @notice Name of pair */\\n    function name() public view override returns (string memory) {\\n        IERC20Metadata _token0 = IERC20Metadata(address(token0));\\n        IERC20Metadata _token1 = IERC20Metadata(address(token1));\\n        return string(abi.encodePacked(\\\"REQUIEM LP \\\", _token0.symbol(), \\\"-\\\", _token1.symbol()));\\n    }\\n\\n    /** @notice Symbol of pair */\\n    function symbol() public view override returns (string memory) {\\n        IERC20Metadata _token0 = IERC20Metadata(address(token0));\\n        IERC20Metadata _token1 = IERC20Metadata(address(token1));\\n        return string(abi.encodePacked(\\\"REQ-LP \\\", _token0.symbol(), \\\"-\\\", _token1.symbol()));\\n    }\\n\\n    /**\\n     * @notice Simple safeTransfer implementation\\n     * @param token token to send\\n     * @param to receiver\\n     * @param value amount to send\\n     */\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"REQLP: TF\\\");\\n    }\\n\\n    constructor() {\\n        factory = msg.sender;\\n    }\\n\\n    /**\\n     * @notice called once by the factory at time of deployment - sets static parameters\\n     * @param _token0 first token\\n     * @param _token1 second token\\n     * @param _tokenWeight0 first token weight\\n     */\\n    function initialize(\\n        address _token0,\\n        address _token1,\\n        uint32 _tokenWeight0\\n    ) external {\\n        require(msg.sender == factory, \\\"REQLP: F\\\");\\n        // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n        tokenWeight0 = _tokenWeight0;\\n        tokenWeight1 = 100 - tokenWeight0;\\n        swapFee = 10; // default fee is 10bps\\n        formula = IRequiemWeightedPairFactory(factory).formula();\\n    }\\n\\n    /**\\n     * @dev update reserves and, on the first call per block\\n     *  @param data new data to sync with\\n     */\\n    function _update(ReserveData memory data) private {\\n        reserve0 = uint112(data.reserve0);\\n        reserve1 = uint112(data.reserve1);\\n        assert(data.vReserve0 >= data.reserve0 && data.vReserve1 >= data.reserve1); // never happen\\n        vReserve0 = uint112(data.vReserve0);\\n        vReserve1 = uint112(data.vReserve1);\\n        emit Sync(reserve0, reserve1, vReserve0, vReserve1);\\n    }\\n\\n    /**\\n     * @notice Calculator of swap fees sent to feeTo address in LP tokens\\n     * @param reserveData reserve data in uint256\\n     */\\n    function _mintFee(ReserveData memory reserveData) private returns (bool feeOn) {\\n        address feeTo = IRequiemWeightedPairFactory(factory).feeTo();\\n        uint112 protocolFee = uint112(IRequiemWeightedPairFactory(factory).protocolFee());\\n        feeOn = feeTo != address(0);\\n        (uint112 _collectedFee0, uint112 _collectedFee1) = getCollectedFees();\\n        if (protocolFee > 0 && feeOn && (_collectedFee0 > 0 || _collectedFee1 > 0)) {\\n            uint32 _tokenWeight0 = tokenWeight0;\\n            uint256 liquidity;\\n            liquidity = IWeightedFormulaV2(formula).mintLiquidityFee(\\n                totalSupply,\\n                reserveData.vReserve0,\\n                reserveData.vReserve1,\\n                _tokenWeight0,\\n                100 - _tokenWeight0,\\n                _collectedFee0 / protocolFee,\\n                _collectedFee1 / protocolFee\\n            );\\n            if (liquidity > 0) _mint(feeTo, liquidity);\\n        }\\n        if (_collectedFee0 > 0) collectedFee0 = 0;\\n        if (_collectedFee1 > 0) collectedFee1 = 0;\\n    }\\n\\n    /**\\n     * @notice this low-level function should be called from a contract which performs important safety checks\\n     * @param to recipient of LP tokens\\n     */\\n    function mint(address to) external lock returns (uint256 liquidity) {\\n        ReserveData memory reserveData = getReserves(); // gas savings\\n        ReserveData memory _reserveData;\\n        _reserveData.reserve0 = IERC20(token0).balanceOf(address(this));\\n        _reserveData.reserve1 = IERC20(token1).balanceOf(address(this));\\n        uint256 amount0 = _reserveData.reserve0 - reserveData.reserve0;\\n        uint256 amount1 = _reserveData.reserve1 - reserveData.reserve1;\\n        _mintFee(_reserveData);\\n        uint256 _totalSupply = totalSupply;\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            uint32 _ampBps = ampBps;\\n            _reserveData.vReserve0 = (_reserveData.reserve0 * _ampBps) / BPS;\\n            _reserveData.vReserve1 = (_reserveData.reserve1 * _ampBps) / BPS;\\n\\n            liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min((amount0 * _totalSupply) / reserveData.reserve0, (amount1 * _totalSupply) / reserveData.reserve1);\\n            uint256 b = liquidity + _totalSupply;\\n            _reserveData.vReserve0 = Math.max((reserveData.vReserve0 * b) / _totalSupply, _reserveData.reserve0);\\n            _reserveData.vReserve1 = Math.max((reserveData.vReserve1 * b) / _totalSupply, _reserveData.reserve1);\\n        }\\n        require(liquidity > 0, \\\"REQLP: ILM\\\");\\n        _mint(to, liquidity);\\n\\n        _update(_reserveData);\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    /**\\n     * @notice this low-level function should be called from a contract which performs important safety checks\\n     * @param to recipient of withdrawn tokens\\n     */\\n    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\\n        ReserveData memory reserveData = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n        _mintFee(reserveData);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = (liquidity * balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = (liquidity * balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, \\\"REQLP: ILB\\\");\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n\\n        ReserveData memory _reserveData;\\n        _reserveData.reserve0 = IERC20(_token0).balanceOf(address(this));\\n        _reserveData.reserve1 = IERC20(_token1).balanceOf(address(this));\\n\\n        uint256 b = Math.min((_reserveData.reserve0 * _totalSupply) / reserveData.reserve0, (_reserveData.reserve1 * _totalSupply) / reserveData.reserve1);\\n        _reserveData.vReserve0 = Math.max((reserveData.vReserve0 * b) / _totalSupply, _reserveData.reserve0);\\n        _reserveData.vReserve1 = Math.max((reserveData.vReserve1 * b) / _totalSupply, _reserveData.reserve1);\\n\\n        _update(_reserveData);\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    /** @notice this low-level function should be called from a contract which performs important safety checks\\n     * works best with using the calculation methods implemented in this contract\\n     * @param amount0Out token0 amount out\\n     * @param amount1Out token1 amount out\\n     * @param to recipient\\n     * @param callData info for flash swap exeution\\n     */\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata callData\\n    ) external lock {\\n        _swap(amount0Out, amount1Out, to, callData);\\n    }\\n\\n    /**\\n     * @notice Implementation of Requiem Swap interface - Can be used to swap tokens with this pair\\n     * @param tokenIn input token\\n     * @param amountIn input amount\\n     */\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address,\\n        uint256 amountIn\\n    ) external view returns (uint256) {\\n        (uint256 vReserveIn, uint256 vReserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = tokenIn == token0\\n            ? (vReserve0, vReserve1, tokenWeight0, tokenWeight1)\\n            : (vReserve1, vReserve0, tokenWeight1, tokenWeight0);\\n\\n        return IWeightedFormulaV2(formula).getAmountOut(amountIn, vReserveIn, vReserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    /**\\n     * @notice Implementation of Requiem Swap interface - Has to be used to do exact-out swapss\\n     * @param tokenIn input token\\n     * @param amountOut output amount\\n     */\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address,\\n        uint256 amountOut\\n    ) external view returns (uint256) {\\n        (uint256 vReserveIn, uint256 vReserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = tokenIn == token0\\n            ? (vReserve0, vReserve1, tokenWeight0, tokenWeight1)\\n            : (vReserve1, vReserve0, tokenWeight1, tokenWeight0);\\n\\n        return IWeightedFormulaV2(formula).getAmountIn(amountOut, vReserveIn, vReserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    /** @notice force balances to match reserves */\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)) - reserve0);\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)) - reserve1);\\n    }\\n\\n    /** @notice force reserves to match balances */\\n    function sync() external override {\\n        ReserveData memory reserveData = getReserves();\\n        _mintFee(reserveData);\\n        ReserveData memory newReserveData;\\n        newReserveData.reserve0 = IERC20(token0).balanceOf(address(this));\\n        newReserveData.reserve1 = IERC20(token1).balanceOf(address(this));\\n\\n        // update virtual reserves\\n        uint256 _totalSupply = totalSupply;\\n        uint256 b = Math.min((reserve0 * _totalSupply) / reserve0, (reserve1 * _totalSupply) / reserve1);\\n\\n        newReserveData.vReserve0 = Math.max((uint256(vReserve0) * b) / _totalSupply, reserve0);\\n        newReserveData.vReserve1 = Math.max((uint256(vReserve1) * b) / _totalSupply, reserve1);\\n\\n        _update(newReserveData);\\n    }\\n\\n    /**\\n     * @notice calculates output amount for given input and executes the respective trade\\n     * viable for use in multi swaps as it returns the output value\\n     * requires the amount in to be sent to this address beforehand\\n     * @param tokenIn input token\\n     * @param amountIn input amount\\n     * @param to reveiver address\\n     * @return output amount\\n     */\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address,\\n        uint256 amountIn,\\n        uint256,\\n        address to\\n    ) external override lock returns (uint256) {\\n        bool inToken0 = tokenIn == token0;\\n        (uint256 vReserveIn, uint256 vReserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = tokenIn == token0\\n            ? (vReserve0, vReserve1, tokenWeight0, tokenWeight1)\\n            : (vReserve1, vReserve0, tokenWeight1, tokenWeight0);\\n\\n        uint256 amountOut = IWeightedFormulaV2(formula).getAmountOut(amountIn, vReserveIn, vReserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n        (uint256 amount0Out, uint256 amount1Out) = inToken0 ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n        return _swap(amount0Out, amount1Out, to, new bytes(0));\\n    }\\n\\n    /**\\n     * @notice calculates input amount for given output and executes the respective trade\\n     * calling this one only makes sense if a single trade is supposd to be executed in the tx\\n     * requires the amount in to be sent to this address beforehand\\n     * @param tokenIn input token\\n     * @param amountOut output amount\\n     * @param to reveiver address\\n     * @return input amount\\n     */\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address,\\n        uint256 amountOut,\\n        uint256,\\n        address to\\n    ) external override lock returns (uint256) {\\n        bool inToken0 = tokenIn == token0;\\n        (uint256 vReserveIn, uint256 vReserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = tokenIn == token0\\n            ? (vReserve0, vReserve1, tokenWeight0, tokenWeight1)\\n            : (vReserve1, vReserve0, tokenWeight1, tokenWeight0);\\n\\n        uint256 amountIn = IWeightedFormulaV2(formula).getAmountIn(amountOut, vReserveIn, vReserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n        (uint256 amount0Out, uint256 amount1Out) = inToken0 ? (uint256(0), amountIn) : (amountIn, uint256(0));\\n        return _swap(amount0Out, amount1Out, to, new bytes(0));\\n    }\\n\\n    /**\\n     * @notice Wraps the swap funtion for the Requiem interface which pre-selects the respective token amount\\n     * @param tokenIn input token\\n     * @param amountOut output amount\\n     * @param to reveiver address\\n     */\\n    function onSwap(\\n        address tokenIn,\\n        address,\\n        uint256,\\n        uint256 amountOut,\\n        address to\\n    ) external override lock {\\n        (uint256 amount0Out, uint256 amount1Out) = token0 == tokenIn ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n        _swap(amount0Out, amount1Out, to, new bytes(0));\\n    }\\n\\n    /**\\n     * @notice swap function of pair - this low-level function should be called from a contract which performs important safety checks\\n     * - The function assumes that the correct amount (e.g. using calculateSwapGivenIn) has been sent to this pair already\\n     * - Amounts are sent to the user and sanity checks are done afterwards (e.g. to ensure that the invariant is unchanged)\\n     * @param amount0Out token0 output amount\\n     * @param amount1Out token1 output amount\\n     * @param to reveiver address\\n     * @param data flash swap data\\n     */\\n    function _swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes memory data\\n    ) internal returns (uint256) {\\n        require(amount0Out > 0 || amount1Out > 0, \\\"REQLP: IOA\\\");\\n        ReserveData memory reserveData = getReserves(); // gas savings\\n        require(amount0Out < reserveData.reserve0 && amount1Out < reserveData.reserve1, \\\"REQLP: IL\\\");\\n\\n        ReserveData memory newReserveData;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"REQLP: IT\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            if (data.length > 0) IRequiemCallee(to).requiemCall(msg.sender, amount0Out, amount1Out, data); // flash swap\\n            newReserveData.reserve0 = IERC20(_token0).balanceOf(address(this));\\n            newReserveData.reserve1 = IERC20(_token1).balanceOf(address(this));\\n\\n            newReserveData.vReserve0 = reserveData.vReserve0 + newReserveData.reserve0 - reserveData.reserve0;\\n            newReserveData.vReserve1 = reserveData.vReserve1 + newReserveData.reserve1 - reserveData.reserve1;\\n        }\\n        uint256 amount0In = newReserveData.reserve0 > reserveData.reserve0 - amount0Out ? newReserveData.reserve0 - (reserveData.reserve0 - amount0Out) : 0;\\n        uint256 amount1In = newReserveData.reserve1 > reserveData.reserve1 - amount1Out ? newReserveData.reserve1 - (reserveData.reserve1 - amount1Out) : 0;\\n\\n        require(amount0In > 0 || amount1In > 0, \\\"REQLP: IIA\\\");\\n\\n        uint256 balance0Adjusted = newReserveData.vReserve0 * 10000;\\n        uint256 balance1Adjusted = newReserveData.vReserve1 * 10000;\\n\\n        // fee handling\\n        if (amount0In > 0) {\\n            uint256 amount0InFee = amount0In * swapFee;\\n            balance0Adjusted -= amount0InFee;\\n            collectedFee0 = uint112(uint256(collectedFee0) + amount0InFee);\\n        }\\n        if (amount1In > 0) {\\n            uint256 amount1InFee = amount1In * swapFee;\\n            balance1Adjusted -= amount1InFee;\\n            collectedFee1 = uint112(uint256(collectedFee1) + amount1InFee);\\n        }\\n        // invariant check\\n        require(IWeightedFormulaV2(formula).ensureConstantValue(reserveData.vReserve0 * 10000, reserveData.vReserve1 * 10000, balance0Adjusted, balance1Adjusted, tokenWeight0), \\\"REQLP: K\\\");\\n\\n        _update(newReserveData);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n        return amount0Out > 0 ? amount0Out : amount1Out;\\n    }\\n\\n    /**\\n     * @notice Changes curicial parameters - can only be called by factory - virtual reserves will be adjusted here, too\\n     * @param _newSwapFee new swap fee to use\\n     * @param _newAmp new amplification parameter to scale virtual reserves\\n     */\\n    function setSwapParams(uint32 _newSwapFee, uint32 _newAmp) external {\\n        require(msg.sender == factory, \\\"auth\\\");\\n        swapFee = _newSwapFee;\\n        vReserve0 = (vReserve0 * _newAmp) / BPS;\\n        vReserve1 = (vReserve1 * _newAmp) / BPS;\\n        ampBps = _newAmp;\\n    }\\n}\",\"keccak256\":\"0x88913a24554c66d8b1d98a2683931c1fc004b9262a025317a489cb3b0cd7ff20\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xab442747ba7fbbe95ce3e26fac7ff53c7ed1f2ddb11ee665905bcd85593ac42e\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0xec988a6ff5da4cdef6378a3f8320e39027f557912ba73c92004a467d8a6cd5fe\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemCallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\ninterface IRequiemCallee {\\n    function requiemCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\",\"keccak256\":\"0xe46a6dd4a0f99b7b211a9167c35bb6cd8b1b13d30590f04eb89c0513029f7c5c\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemPairERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemPairERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0xd26126b87195232c895a1ceccb7f255652a775e948f72c104828178ad0f59ae6\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IRequiemSwap {\\n    // this funtion requires the correctly calculated amounts as input\\n    // the others are supposed to implement that calculation\\n    // no return value required since the amounts are already known\\n    function onSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address to\\n    ) external;\\n\\n    //\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external returns (uint256);\\n\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to\\n    ) external returns (uint256);\\n\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (uint256);\\n\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x63771a8851ddc9a45c2b814e46c5b5491477aefeff7dd3b4043c8ea61dee5dad\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPairFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\ninterface IRequiemWeightedPairFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function protocolFee() external view returns (uint256);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function isPair(address) external view returns (bool);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external returns (address pair);\\n\\n    function getWeightsAndSwapFee(address pair)\\n        external\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        );\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setProtocolFee(uint256) external;\\n}\\n\",\"keccak256\":\"0xde74ee657904b0149e32e6eaa532ec2d45d44ea64e4eb01cc3ad49b51c8a82ce\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPairFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\ninterface IRequiemWeightedPairFactoryV2 {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function protocolFee() external view returns (uint256);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function isPair(address) external view returns (bool);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 initialFee,\\n        uint32 initialAmp\\n    ) external returns (address pair);\\n\\n    function getParameters(address pair)\\n        external\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee,\\n            uint32 amp\\n        );\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setProtocolFee(uint256) external;\\n}\\n\",\"keccak256\":\"0xa0172ff52b829d3c554e478fcb1afabe4a14b8e8e58a14fdbff59562701e9cb6\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPairV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IRequiemPairERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemWeightedPairV2 is IRequiemPairERC20 {\\n    struct ReserveData {\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 vReserve0;\\n        uint256 vReserve1;\\n    }\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1, uint112 vReserve0, uint112 vReserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (ReserveData calldata reserveData);\\n\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n    function getParameters()\\n        external\\n        view\\n        returns (\\n            uint32 _tokenWeight0,\\n            uint32 _tokenWeight1,\\n            uint32 _swapFee,\\n            uint32 _amp\\n        );\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function setSwapParams(uint32, uint32) external;\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address,\\n        address,\\n        uint32\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa4ccbd955e0cc8e9ddc1053b987c97e8b901389a53ab000268718889a887635d\",\"license\":\"MIT\"},\"contracts/interfaces/IWeightedFormulaV2.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.13;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IWeightedFormulaV2 {\\n    function getPairParameters(address pair, address tokenA)\\n        external\\n        view\\n        returns (\\n            address tokenB,\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint32 tokenWeightA,\\n            uint32 tokenWeightB,\\n            uint32 swapFee\\n        );\\n\\n    function getFactoryParameters(\\n        address factory,\\n        address pair,\\n        address tokenA\\n    )\\n        external\\n        view\\n        returns (\\n            address tokenB,\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint32 tokenWeightA,\\n            uint32 tokenWeightB,\\n            uint32 swapFee\\n        );\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint256 amountIn);\\n\\n    function getPairAmountIn(\\n        address pair,\\n        address tokenIn,\\n        uint256 amountOut\\n    ) external view returns (uint256 amountIn);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint256 amountOut);\\n\\n    function getPairAmountOut(\\n        address pair,\\n        address tokenIn,\\n        uint256 amountIn\\n    ) external view returns (uint256 amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function ensureConstantValue(\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 balance0Adjusted,\\n        uint256 balance1Adjusted,\\n        uint32 tokenWeight0\\n    ) external view returns (bool);\\n\\n    function getReserves(\\n        address pair,\\n        address tokenA,\\n        address tokenB\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint256 vReserveA,\\n            uint256 vReserveB\\n        );\\n\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n\\n    function mintLiquidityFee(\\n        uint256 totalLiquidity,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112 collectedFee0,\\n        uint112 collectedFee1\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xed86f52700af628f484a7142e23f7f435906fe57a6e396045baf43a76e91d60e\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x1e37be1406d40b13daaba8dd730eab1303311bb780625d791f8d3f724f3153f6\",\"license\":\"MIT\"},\"contracts/libraries/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the EnumerableSet library from OpenZeppelin Contracts, altered to remove the base private functions that\\n// work on bytes32, replacing them with a native implementation for address and bytes32 values, to reduce bytecode \\n// size and runtime costs.\\n// The `unchecked_at` function was also added, which allows for more gas efficient data reads in some scenarios.\\n\\npragma solidity ^0.8.13;\\n\\n// solhint-disable func-name-mixedcase\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // The original OpenZeppelin implementation uses a generic Set type with bytes32 values: this was replaced with\\n    // AddressSet, which uses address keys natively, resulting in more dense bytecode.\\n\\n    struct AddressSet {\\n        // Storage of set values\\n        address[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(address => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // The swap is only necessary if we're not removing the last element\\n            if (toDeleteIndex != lastIndex) {\\n                address lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        require(set._values.length > index, \\\"OUT_OF_BOUNDS\\\");\\n        return unchecked_at(set, index);\\n    }\\n\\n    /**\\n     * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\\n     * than {length}). O(1).\\n     *\\n     * This function performs one less storage read than {at}, but should only be used when `index` is known to be\\n     * within bounds.\\n     */\\n    function unchecked_at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return set._values[index];\\n    }\\n\\n    function rawIndexOf(AddressSet storage set, address value) internal view returns (uint256) {\\n        return set._indexes[value] - 1;\\n    }\\n\\n    struct Bytes32Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0 \\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not \\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        if (!contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // The swap is only necessary if we're not removing the last element\\n            if (toDeleteIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        require(set._values.length > index, \\\"OUT_OF_BOUNDS\\\");\\n        return unchecked_at(set, index);\\n    }\\n\\n    /**\\n     * @dev Same as {at}, except this doesn't revert if `index` it outside of the set (i.e. if it is equal or larger\\n     * than {length}). O(1).\\n     *\\n     * This function performs one less storage read than {at}, but should only be used when `index` is known to be\\n     * within bounds.\\n     */\\n    function unchecked_at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    function rawIndexOf(Bytes32Set storage set, bytes32 value) internal view returns (uint256) {\\n        return set._indexes[value] - 1;\\n    }\\n}\\n\",\"keccak256\":\"0x11c4a7b1b239dccee4385b19c7123b76ae3e8a499c49236ba5f61bf619e9758c\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x > y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x93a74b91002edea6c053efc806ec30b8fdd3545705572991cd7b1cedeaafbab0\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xf65378dbd07bb0ad967fa83e97dc41e9bc9e9148aad564c7cd994b81a98fbc2b\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n// solhint-disable avoid-low-level-calls, reason-string\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x429ddbf2e1e8c7be482e806aee97439e670a4466659433e6439b59f9200b4cd4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 private constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0x70adb72eff3c8a3809b156001616b8c3c002e05724ddf0eb9c944b398a013ba7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c806359c96c11116100d8578063a2e74af61161008c578063e5e31b1311610066578063e5e31b131461036a578063f2fde38b146103b3578063f46901ed146103c657600080fd5b8063a2e74af61461033b578063b0e21e8a1461034e578063e32a25011461035757600080fd5b8063715018a6116100bd578063715018a614610300578063787dce3d1461030a5780638da5cb5b1461031d57600080fd5b806359c96c11146102aa5780635e0464ae146102ed57600080fd5b8063257671f51161012f578063493468f511610114578063493468f5146102625780634b75f54f14610282578063574f2ba3146102a257600080fd5b8063257671f51461023957806335a54e061461024f57600080fd5b806316093fad1161016057806316093fad146101e65780631d44d457146102065780631e3dd18b1461022657600080fd5b8063017e7e581461017c578063094b7415146101c6575b600080fd5b60015461019c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b60045461019c9073ffffffffffffffffffffffffffffffffffffffff1681565b6101f96101f4366004611629565b6103d9565b6040516101bd9190611662565b60055461019c9073ffffffffffffffffffffffffffffffffffffffff1681565b61019c6102343660046116bc565b6104ec565b610241610523565b6040519081526020016101bd565b61019c61025d3660046116e7565b61058b565b600a5461019c9073ffffffffffffffffffffffffffffffffffffffff1681565b60025461019c9073ffffffffffffffffffffffffffffffffffffffff1681565b600754610241565b6102bd6102b8366004611732565b6106b2565b6040805163ffffffff958616815293851660208501529184169183019190915290911660608201526080016101bd565b61019c6102fb366004611756565b610767565b610308610db0565b005b6103086103183660046116bc565b610e3d565b60005473ffffffffffffffffffffffffffffffffffffffff1661019c565b610308610349366004611732565b610f46565b61024160035481565b6103086103653660046117c7565b61100e565b6103a3610378366004611732565b73ffffffffffffffffffffffffffffffffffffffff1660009081526008602052604090205460ff1690565b60405190151581526020016101bd565b6103086103c1366004611732565b611229565b6103086103d4366004611732565b611359565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600960209081526040808320938516835292905220546060908067ffffffffffffffff811115610428576104286117f7565b604051908082528060200260200182016040528015610451578160200160208202803683370190505b50915060005b818110156104e45773ffffffffffffffffffffffffffffffffffffffff808616600090815260096020908152604080832093881683529290522061049b9082611421565b8382815181106104ad576104ad611826565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152806104dc81611884565b915050610457565b505092915050565b600781815481106104fc57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b604051610532602082016115fa565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604081905261057291906020016118bc565b6040516020818303038152906040528051906020012081565b6000806000808573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16106105d65785876105d18760646118f7565b6105da565b8686865b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085811b8216602084015284901b1660348201527fffffffff0000000000000000000000000000000000000000000000000000000060e083901b1660488201529295509093509150600090604c01604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000908152600690925290205473ffffffffffffffffffffffffffffffffffffffff1698975050505050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526008602052604081205481908190819060ff1615610760578473ffffffffffffffffffffffffffffffffffffffff1663a5ea11da6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610731573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610755919061191c565b929650909450925090505b9193509193565b60008473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1603610803576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f524c503a2049410000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60028463ffffffff1610158015610821575060628463ffffffff1611155b801561083b575061083360028561197b565b63ffffffff16155b6108a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f524c503a2049570000000000000000000000000000000000000000000000000060448201526064016107fa565b60008060008773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16106108eb5787896108e68960646118f7565b6108ef565b8888885b9194509250905073ffffffffffffffffffffffffffffffffffffffff8316610973576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f524c503a205a410000000000000000000000000000000000000000000000000060448201526064016107fa565b600060405180602001610985906115fa565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f9091011660408190527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087811b8216602084015286901b1660348201527fffffffff0000000000000000000000000000000000000000000000000000000060e085901b166048820152909150600090604c01604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600690935291205490915073ffffffffffffffffffffffffffffffffffffffff1615610ae6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f524c503a2050450000000000000000000000000000000000000000000000000060448201526064016107fa565b808251602084016000f56040517f6ecf2b2200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152868116602483015263ffffffff8616604483015291975090871690636ecf2b2290606401600060405180830381600087803b158015610b7157600080fd5b505af1158015610b85573d6000803e3d6000fd5b50506040517ff7747b4200000000000000000000000000000000000000000000000000000000815263ffffffff808c1660048301528a16602482015273ffffffffffffffffffffffffffffffffffffffff8916925063f7747b429150604401600060405180830381600087803b158015610bfe57600080fd5b505af1158015610c12573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff8087166000908152600960209081526040808320938916835292905220610c529150876114a1565b5073ffffffffffffffffffffffffffffffffffffffff8085166000908152600960209081526040808320938916835292905220610c8f90876114a1565b506000818152600660209081526040808320805473ffffffffffffffffffffffffffffffffffffffff8b81167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316811790935560078054600181810183557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890910180549094168517909355838752600886529584902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169092179091559354825191825263ffffffff88169382019390935290810191909152858216918716907f3541d8fea55be35f686281f975bf8b7ab8fbb500c1c7ddd6c4e714655e9cd4e29060600160405180910390a3505050505095945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107fa565b610e3b6000611545565b565b60045473ffffffffffffffffffffffffffffffffffffffff163314610ebe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f524c503a2046000000000000000000000000000000000000000000000000000060448201526064016107fa565b801580610edb57506127108110158015610edb5750620186a08111155b610f41576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f524c503a2049504600000000000000000000000000000000000000000000000060448201526064016107fa565b600355565b60045473ffffffffffffffffffffffffffffffffffffffff163314610fc7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f524c503a2046000000000000000000000000000000000000000000000000000060448201526064016107fa565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600a5473ffffffffffffffffffffffffffffffffffffffff1633148061104b575060005473ffffffffffffffffffffffffffffffffffffffff1633145b6110b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f756e617574686f72697a6564000000000000000000000000000000000000000060448201526064016107fa565b6101f48263ffffffff16111580156110d157506127108163ffffffff1610155b611137576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f524c503a2049534600000000000000000000000000000000000000000000000060448201526064016107fa565b6040517ff7747b4200000000000000000000000000000000000000000000000000000000815263ffffffff80841660048301528216602482015273ffffffffffffffffffffffffffffffffffffffff84169063f7747b4290604401600060405180830381600087803b1580156111ac57600080fd5b505af11580156111c0573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561120c57600080fd5b505af1158015611220573d6000803e3d6000fd5b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146112aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107fa565b73ffffffffffffffffffffffffffffffffffffffff811661134d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107fa565b61135681611545565b50565b60045473ffffffffffffffffffffffffffffffffffffffff1633146113da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f524c503a2046000000000000000000000000000000000000000000000000000060448201526064016107fa565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b8154600090821061148e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4f55545f4f465f424f554e44530000000000000000000000000000000000000060448201526064016107fa565b61149883836115ba565b90505b92915050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018301602052604081205461153d57508154600180820184556000848152602080822090930180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86169081179091558554908252828601909352604090209190915561149b565b50600061149b565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008260000182815481106115d1576115d1611826565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169392505050565b6145b4806119c683390190565b73ffffffffffffffffffffffffffffffffffffffff8116811461135657600080fd5b6000806040838503121561163c57600080fd5b823561164781611607565b9150602083013561165781611607565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156116b057835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161167e565b50909695505050505050565b6000602082840312156116ce57600080fd5b5035919050565b63ffffffff8116811461135657600080fd5b6000806000606084860312156116fc57600080fd5b833561170781611607565b9250602084013561171781611607565b91506040840135611727816116d5565b809150509250925092565b60006020828403121561174457600080fd5b813561174f81611607565b9392505050565b600080600080600060a0868803121561176e57600080fd5b853561177981611607565b9450602086013561178981611607565b93506040860135611799816116d5565b925060608601356117a9816116d5565b915060808601356117b9816116d5565b809150509295509295909350565b6000806000606084860312156117dc57600080fd5b83356117e781611607565b92506020840135611717816116d5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036118b5576118b5611855565b5060010190565b6000825160005b818110156118dd57602081860181015185830152016118c3565b818111156118ec576000828501525b509190910192915050565b600063ffffffff8381169083168181101561191457611914611855565b039392505050565b6000806000806080858703121561193257600080fd5b845161193d816116d5565b602086015190945061194e816116d5565b604086015190935061195f816116d5565b6060860151909250611970816116d5565b939692955090935050565b600063ffffffff808416806119b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b9216919091069291505056fe6080604052600b805460ff60401b19166801000000000000000017905534801561002857600080fd5b50604080518082018252601f81527f5265717569656d2050616972204c69717569646974792050726f7669646572006020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f4d949f5c4c4f80d7bdbde28a36135fecf440532cf0f2bb46c4801ec3299b1062818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b031916331790556144868061012e6000396000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c806370a082311161012a578063c45a0155116100bd578063d54a8d181161008c578063e9255bae11610071578063e9255bae146105b4578063f7747b42146105c7578063fff6cae9146105da57600080fd5b8063d54a8d181461054d578063dd62ed3e1461058957600080fd5b8063c45a0155146104e7578063cc56fd4314610507578063d21220a71461051a578063d505accf1461053a57600080fd5b8063a5ea11da116100f9578063a5ea11da14610449578063a9059cbb146104b8578063ba9a7a56146104cb578063bc25cf77146104d457600080fd5b806370a08231146103d95780637ecebe00146103f957806389afcb441461041957806395d89b411461044157600080fd5b806330adf81f116101a25780634ac00e03116101715780634ac00e03146103805780634b75f54f146103935780636a627842146103b35780636ecf2b22146103c657600080fd5b806330adf81f14610323578063313ce5671461034a57806332fd5493146103645780633644e5151461037757600080fd5b80630dfe1681116101de5780630dfe1681146102a15780630e6d8bce146102e657806318160ddd1461030757806323b872dd1461031057600080fd5b8063022c0d9f1461021057806306fdde03146102255780630902f1ac14610243578063095ea7b31461027e575b600080fd5b61022361021e366004613c88565b6105e2565b005b61022d610706565b60405161023a9190613d94565b60405180910390f35b61024b61087e565b60405161023a91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b61029161028c366004613da7565b6108fd565b604051901515815260200161023a565b6006546102c19073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161023a565b6102f96102f4366004613dd3565b610913565b60405190815260200161023a565b6102f960005481565b61029161031e366004613e32565b610c2b565b6102f97f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610352601281565b60405160ff909116815260200161023a565b610223610372366004613dd3565b610cdd565b6102f960035481565b6102f961038e366004613dd3565b610dff565b6008546102c19073ffffffffffffffffffffffffffffffffffffffff1681565b6102f96103c1366004613e73565b61103c565b6102236103d4366004613ea4565b6114b4565b6102f96103e7366004613e73565b60016020526000908152604090205481565b6102f9610407366004613e73565b60046020526000908152604090205481565b61042c610427366004613e73565b611707565b6040805192835260208301919091520161023a565b61022d611c4d565b600a54600b54600c54604080517c010000000000000000000000000000000000000000000000000000000090940463ffffffff908116855280841660208601526401000000009093048316908401526e010000000000000000000000000000900416606082015260800161023a565b6102916104c6366004613da7565b611daf565b6102f96103e881565b6102236104e2366004613e73565b611dbc565b6005546102c19073ffffffffffffffffffffffffffffffffffffffff1681565b6102f9610515366004613e32565b611fdb565b6007546102c19073ffffffffffffffffffffffffffffffffffffffff1681565b610223610548366004613eeb565b6121ae565b600a54604080516dffffffffffffffffffffffffffff80841682526e01000000000000000000000000000090930490921660208301520161023a565b6102f9610597366004613f62565b600260209081526000928352604080842090915290825290205481565b6102f96105c2366004613e32565b612499565b6102236105d5366004613f9b565b612623565b6102236127e8565b600b5468010000000000000000900460ff1661065f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204c00000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600b80547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff169055604080516020601f84018190048102820181019092528281526106cb91879187918791908790879081908401838280828437600092019190915250612a7c92505050565b5050600b80547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff166801000000000000000017905550505050565b600654600754604080517f95d89b41000000000000000000000000000000000000000000000000000000008152905160609373ffffffffffffffffffffffffffffffffffffffff90811693169183916395d89b41916004808201926000929091908290030181865afa158015610780573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107c69190810190613ffd565b8173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610811573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526108579190810190613ffd565b6040516020016108689291906140c8565b6040516020818303038152906040529250505090565b6108a96040518060800160405280600081526020016000815260200160008152602001600081525090565b6009546dffffffffffffffffffffffffffff80821683526e01000000000000000000000000000090910481166020830152600b546901000000000000000000900481166040830152600c5416606082015290565b600061090a3384846132c5565b50600192915050565b600b5460009068010000000000000000900460ff1661098e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204c0000000000000000000000000000000000000000000000006044820152606401610656565b600b80547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16905560065473ffffffffffffffffffffffffffffffffffffffff878116911614600080808084610a3857600c54600b54600a546dffffffffffffffffffffffffffff9283169269010000000000000000008304169163ffffffff908116917c0100000000000000000000000000000000000000000000000000000000900416610a8e565b600b54600c54600a546dffffffffffffffffffffffffffff6901000000000000000000840481169392169163ffffffff7c0100000000000000000000000000000000000000000000000000000000909204821691165b600854600b546040517fb19210b00000000000000000000000000000000000000000000000000000000081526dffffffffffffffffffffffffffff9687169a50949095169750919550935060009273ffffffffffffffffffffffffffffffffffffffff9091169163b19210b091610b50918e918a918a918a918a9163ffffffff64010000000090910416906004019586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b602060405180830381865afa158015610b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b919190614149565b905060008087610ba357826000610ba7565b6000835b9092509050610be582828c60005b6040519080825280601f01601f191660200182016040528015610bdf576020820181803683370190505b50612a7c565b98505050505050505050600b80547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff166801000000000000000017905595945050505050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610cc85773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915281208054849290610cc2908490614191565b90915550505b610cd3848484613334565b5060019392505050565b600b5468010000000000000000900460ff16610d55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204c0000000000000000000000000000000000000000000000006044820152606401610656565b600b80547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff169055600654600090819073ffffffffffffffffffffffffffffffffffffffff888116911614610dac57836000610db0565b6000845b9092509050610dc28282856000610bb5565b5050600b80547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff1668010000000000000000179055505050505050565b600b5460009068010000000000000000900460ff16610e7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204c0000000000000000000000000000000000000000000000006044820152606401610656565b600b80547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16905560065473ffffffffffffffffffffffffffffffffffffffff878116911614600080808084610f2457600c54600b54600a546dffffffffffffffffffffffffffff9283169269010000000000000000008304169163ffffffff908116917c0100000000000000000000000000000000000000000000000000000000900416610f7a565b600b54600c54600a546dffffffffffffffffffffffffffff6901000000000000000000840481169392169163ffffffff7c0100000000000000000000000000000000000000000000000000000000909204821691165b600854600b546040517f671a11b50000000000000000000000000000000000000000000000000000000081526dffffffffffffffffffffffffffff9687169a50949095169750919550935060009273ffffffffffffffffffffffffffffffffffffffff9091169163671a11b591610b50918e918a918a918a918a9163ffffffff64010000000090910416906004019586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b600b5460009068010000000000000000900460ff166110b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204c0000000000000000000000000000000000000000000000006044820152606401610656565b600b80547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16905560006110e961087e565b90506111166040518060800160405280600081526020016000815260200160008152602001600081525090565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a89190614149565b81526007546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611218573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123c9190614149565b60208201528151815160009161125191614191565b90506000836020015183602001516112699190614191565b905061127483613409565b50600080549081900361131b57600c5484516e01000000000000000000000000000090910463ffffffff1690612710906112af9083906141a8565b6112b99190614214565b60408601526020850151612710906112d89063ffffffff8416906141a8565b6112e29190614214565b60608601526103e86112fc6112f785876141a8565b6137af565b6113069190614191565b965061131560006103e861381f565b506113be565b84516113539061132b83866141a8565b6113359190614214565b602087015161134484866141a8565b61134e9190614214565b6138c2565b955060006113618288614228565b90506113888282886040015161137791906141a8565b6113819190614214565b86516138da565b604086015260608601516113b79083906113a39084906141a8565b6113ad9190614214565b86602001516138da565b6060860152505b60008611611428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5245514c503a20494c4d000000000000000000000000000000000000000000006044820152606401610656565b611432878761381f565b61143b846138e9565b604080518481526020810184905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a25050600b80547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff166801000000000000000017905550919392505050565b60055473ffffffffffffffffffffffffffffffffffffffff163314611535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a20460000000000000000000000000000000000000000000000006044820152606401610656565b600680547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff8681169190911790925560078054909116918416919091179055600a80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff848116820292909217928390556115eb9204166064614240565b600b805463ffffffff929092167fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090921691909117640a00000000179055600554604080517f4b75f54f000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691634b75f54f916004808201926020929091908290030181865afa158015611699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bd9190614265565b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055505050565b600b54600090819068010000000000000000900460ff16611784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204c0000000000000000000000000000000000000000000000006044820152606401610656565b600b80547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16905560006117b661087e565b6006546007546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015292935073ffffffffffffffffffffffffffffffffffffffff9182169291169060009083906370a0823190602401602060405180830381865afa158015611832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118569190614149565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa1580156118c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ea9190614149565b3060009081526001602052604090205490915061190686613409565b506000548061191585846141a8565b61191f9190614214565b98508061192c84846141a8565b6119369190614214565b97506000891180156119485750600088115b6119ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5245514c503a20494c42000000000000000000000000000000000000000000006044820152606401610656565b6119b83083613a56565b6119c3868b8b613af3565b6119ce858b8a613af3565b6119f96040518060800160405280600081526020016000815260200160008152602001600081525090565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8816906370a0823190602401602060405180830381865afa158015611a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a879190614149565b81526040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8716906370a0823190602401602060405180830381865afa158015611af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b179190614149565b602082015287518151600091611b5191611b329086906141a8565b611b3c9190614214565b8a6020015185856020015161134491906141a8565b9050611b7883828b60400151611b6791906141a8565b611b719190614214565b83516138da565b60408301526060890151611ba7908490611b939084906141a8565b611b9d9190614214565b83602001516138da565b6060830152611bb5826138e9565b604080518c8152602081018c905273ffffffffffffffffffffffffffffffffffffffff8e169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a35050600b80547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16680100000000000000001790555096989597509495505050505050565b600654600754604080517f95d89b41000000000000000000000000000000000000000000000000000000008152905160609373ffffffffffffffffffffffffffffffffffffffff90811693169183916395d89b41916004808201926000929091908290030181865afa158015611cc7573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611d0d9190810190613ffd565b8173ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611d58573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611d9e9190810190613ffd565b604051602001610868929190614282565b600061090a338484613334565b600b5468010000000000000000900460ff16611e34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204c0000000000000000000000000000000000000000000000006044820152606401610656565b600b80547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff1690556006546007546009546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9384169390921691611f2391849186916dffffffffffffffffffffffffffff169083906370a08231906024015b602060405180830381865afa158015611ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f149190614149565b611f1e9190614191565b613af3565b6009546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152611fa391839186916e01000000000000000000000000000090046dffffffffffffffffffffffffffff169073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401611ed3565b5050600b80547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff166801000000000000000017905550565b600654600090819081908190819073ffffffffffffffffffffffffffffffffffffffff89811691161461206257600c54600b54600a546dffffffffffffffffffffffffffff9283169269010000000000000000008304169163ffffffff908116917c01000000000000000000000000000000000000000000000000000000009004166120b8565b600b54600c54600a546dffffffffffffffffffffffffffff6901000000000000000000840481169392169163ffffffff7c0100000000000000000000000000000000000000000000000000000000909204821691165b600854600b546040517fb19210b0000000000000000000000000000000000000000000000000000000008152600481018d90526dffffffffffffffffffffffffffff96871660248201819052959096166044870181905263ffffffff8086166064890152808516608489015264010000000090920490911660a4870152939850929650909450925073ffffffffffffffffffffffffffffffffffffffff169063b19210b09060c4015b602060405180830381865afa15801561217e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a29190614149565b98975050505050505050565b42841015612218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5245513a204558504952454400000000000000000000000000000000000000006044820152606401610656565b60035473ffffffffffffffffffffffffffffffffffffffff8816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b91908761227883614303565b9091555060408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016123199291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156123a2573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061241d57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b612483576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5245513a204953000000000000000000000000000000000000000000000000006044820152606401610656565b61248e8989896132c5565b505050505050505050565b600654600090819081908190819073ffffffffffffffffffffffffffffffffffffffff89811691161461252057600c54600b54600a546dffffffffffffffffffffffffffff9283169269010000000000000000008304169163ffffffff908116917c0100000000000000000000000000000000000000000000000000000000900416612576565b600b54600c54600a546dffffffffffffffffffffffffffff6901000000000000000000840481169392169163ffffffff7c0100000000000000000000000000000000000000000000000000000000909204821691165b600854600b546040517f671a11b5000000000000000000000000000000000000000000000000000000008152600481018d90526dffffffffffffffffffffffffffff96871660248201819052959096166044870181905263ffffffff8086166064890152808516608489015264010000000090920490911660a4870152939850929650909450925073ffffffffffffffffffffffffffffffffffffffff169063671a11b59060c401612161565b60055473ffffffffffffffffffffffffffffffffffffffff1633146126a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106569060208082526004908201527f6175746800000000000000000000000000000000000000000000000000000000604082015260600190565b600b805463ffffffff808516640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff909216919091179182905561271091612713918416906dffffffffffffffffffffffffffff69010000000000000000009091041661433b565b61271d9190614371565b600b80547fffffffffffffffffff0000000000000000000000000000ffffffffffffffffff1669010000000000000000006dffffffffffffffffffffffffffff93841602179055600c546127109161277d9163ffffffff8516911661433b565b6127879190614371565b600c805463ffffffff9093166e010000000000000000000000000000027fffffffffffffffffffffffffffff0000000000000000000000000000000000009093166dffffffffffffffffffffffffffff929092169190911791909117905550565b60006127f261087e565b90506127fd81613409565b506128296040518060800160405280600081526020016000815260200160008152602001600081525090565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128bb9190614149565b81526007546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561292b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294f9190614149565b6020820152600080546009549091906129b5906dffffffffffffffffffffffffffff1661297c84826141a8565b6129869190614214565b6009546e01000000000000000000000000000090046dffffffffffffffffffffffffffff1661134485826141a8565b600b54909150612a0b9083906129e9908490690100000000000000000090046dffffffffffffffffffffffffffff166141a8565b6129f39190614214565b6009546dffffffffffffffffffffffffffff166138da565b6040840152600c54612a68908390612a349084906dffffffffffffffffffffffffffff166141a8565b612a3e9190614214565b6009546e01000000000000000000000000000090046dffffffffffffffffffffffffffff166138da565b6060840152612a76836138e9565b50505050565b600080851180612a8c5750600084115b612af2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5245514c503a20494f41000000000000000000000000000000000000000000006044820152606401610656565b6000612afc61087e565b805190915086108015612b125750806020015185105b612b78576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f5245514c503a20494c00000000000000000000000000000000000000000000006044820152606401610656565b612ba36040518060800160405280600081526020016000815260200160008152602001600081525090565b60065460075473ffffffffffffffffffffffffffffffffffffffff918216919081169087168214801590612c0357508073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614155b612c69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f5245514c503a20495400000000000000000000000000000000000000000000006044820152606401610656565b8815612c7a57612c7a82888b613af3565b8715612c8b57612c8b81888a613af3565b855115612d1d576040517f8492923100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff881690638492923190612cea9033908d908d908c9060040161439e565b600060405180830381600087803b158015612d0457600080fd5b505af1158015612d18573d6000803e3d6000fd5b505050505b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015612d87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dab9190614149565b83526040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8216906370a0823190602401602060405180830381865afa158015612e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3b9190614149565b6020840152835183516040860151612e539190614228565b612e5d9190614191565b6040840152602080850151908401516060860151612e7b9190614228565b612e859190614191565b606084015250508151600090612e9c908990614191565b825111612eaa576000612ec3565b8251612eb7908990614191565b8251612ec39190614191565b90506000878460200151612ed79190614191565b836020015111612ee8576000612f07565b878460200151612ef89190614191565b8360200151612f079190614191565b90506000821180612f185750600081115b612f7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f5245514c503a20494941000000000000000000000000000000000000000000006044820152606401610656565b60008360400151612710612f9291906141a8565b905060008460600151612710612fa891906141a8565b9050831561303c57600b54600090612fce90640100000000900463ffffffff16866141a8565b9050612fda8184614191565b600a54909350612ffb9082906dffffffffffffffffffffffffffff16614228565b600a80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff92909216919091179055505b82156130d557600b5460009061306090640100000000900463ffffffff16856141a8565b905061306c8183614191565b600a5490925061309f9082906e01000000000000000000000000000090046dffffffffffffffffffffffffffff16614228565b600a600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550505b600854604087015173ffffffffffffffffffffffffffffffffffffffff909116906379c91b3790613108906127106141a8565b6060890151613119906127106141a8565b600a5460405160e085901b7fffffffff000000000000000000000000000000000000000000000000000000001681526004810193909352602483019190915260448201869052606482018590527c0100000000000000000000000000000000000000000000000000000000900463ffffffff16608482015260a401602060405180830381865afa1580156131b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d591906143e3565b61323b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f5245514c503a204b0000000000000000000000000000000000000000000000006044820152606401610656565b613244856138e9565b60408051858152602081018590529081018c9052606081018b905273ffffffffffffffffffffffffffffffffffffffff8a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a360008b116132b457896132b6565b8a5b9b9a5050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604081208054839290613369908490614191565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040812080548392906133a3908490614228565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161332791815260200190565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015613479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061349d9190614265565b90506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561350e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135329190614149565b73ffffffffffffffffffffffffffffffffffffffff8316151593509050600080613582600a546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000009092041690565b915091506000836dffffffffffffffffffffffffffff161180156135a35750845b80156135d957506000826dffffffffffffffffffffffffffff1611806135d957506000816dffffffffffffffffffffffffffff16115b1561372857600a546008546000805460408a015160608b01517c010000000000000000000000000000000000000000000000000000000090950463ffffffff1694929373ffffffffffffffffffffffffffffffffffffffff1692639ed45e4792919086613647816064614240565b6136518c8c614371565b61365b8d8c614371565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b16815260048101979097526024870195909552604486019390935263ffffffff91821660648601521660848401526dffffffffffffffffffffffffffff90811660a48401521660c482015260e401602060405180830381865afa1580156136ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137139190614149565b9050801561372557613725868261381f565b50505b6dffffffffffffffffffffffffffff82161561376757600a80547fffffffffffffffffffffffffffffffffffff00000000000000000000000000001690555b6dffffffffffffffffffffffffffff8116156137a657600a80547fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff1690555b50505050919050565b6000600382111561381057508060006137c9600283614214565b6137d4906001614228565b90505b8181101561380a579050806002816137ef8186614214565b6137f99190614228565b6138039190614214565b90506137d7565b50919050565b811561381a575060015b919050565b806000808282546138309190614228565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260408120805483929061386a908490614228565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b60008183106138d157816138d3565b825b9392505050565b60008183116138d157816138d3565b80516009805460208401516dffffffffffffffffffffffffffff9081166e010000000000000000000000000000027fffffffff000000000000000000000000000000000000000000000000000000009092169084161717905560408201511080159061395d57508060200151816060015110155b61396957613969614405565b604081810151600b80547fffffffffffffffffff0000000000000000000000000000ffffffffffffffffff1669010000000000000000006dffffffffffffffffffffffffffff93841681029190911791829055606080860151600c80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000169186169182179055600954865181871681526e010000000000000000000000000000909104861660208201529290930490931693810193909352908201527f90cf11c015dfdfdf83f1b0ed5d27ebcd2839050639a62928e181005c315248d69060800160405180910390a150565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208054839290613a8b908490614191565b9250508190555080600080828254613aa39190614191565b909155505060405181815260009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016138b6565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691613b8a9190614434565b6000604051808303816000865af19150503d8060008114613bc7576040519150601f19603f3d011682016040523d82523d6000602084013e613bcc565b606091505b5091509150818015613bf6575080511580613bf6575080806020019051810190613bf691906143e3565b613c5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f5245514c503a20544600000000000000000000000000000000000000000000006044820152606401610656565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff81168114613c8557600080fd5b50565b600080600080600060808688031215613ca057600080fd5b85359450602086013593506040860135613cb981613c63565b9250606086013567ffffffffffffffff80821115613cd657600080fd5b818801915088601f830112613cea57600080fd5b813581811115613cf957600080fd5b896020828501011115613d0b57600080fd5b9699959850939650602001949392505050565b60005b83811015613d39578181015183820152602001613d21565b83811115612a765750506000910152565b60008151808452613d62816020860160208601613d1e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006138d36020830184613d4a565b60008060408385031215613dba57600080fd5b8235613dc581613c63565b946020939093013593505050565b600080600080600060a08688031215613deb57600080fd5b8535613df681613c63565b94506020860135613e0681613c63565b935060408601359250606086013591506080860135613e2481613c63565b809150509295509295909350565b600080600060608486031215613e4757600080fd5b8335613e5281613c63565b92506020840135613e6281613c63565b929592945050506040919091013590565b600060208284031215613e8557600080fd5b81356138d381613c63565b803563ffffffff8116811461381a57600080fd5b600080600060608486031215613eb957600080fd5b8335613ec481613c63565b92506020840135613ed481613c63565b9150613ee260408501613e90565b90509250925092565b600080600080600080600060e0888a031215613f0657600080fd5b8735613f1181613c63565b96506020880135613f2181613c63565b95506040880135945060608801359350608088013560ff81168114613f4557600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215613f7557600080fd5b8235613f8081613c63565b91506020830135613f9081613c63565b809150509250929050565b60008060408385031215613fae57600080fd5b613fb783613e90565b9150613fc560208401613e90565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561400f57600080fd5b815167ffffffffffffffff8082111561402757600080fd5b818401915084601f83011261403b57600080fd5b81518181111561404d5761404d613fce565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561409357614093613fce565b816040528281528760208487010111156140ac57600080fd5b6140bd836020830160208801613d1e565b979650505050505050565b7f5245515549454d204c502000000000000000000000000000000000000000000081526000835161410081600b850160208801613d1e565b7f2d00000000000000000000000000000000000000000000000000000000000000600b91840191820152835161413d81600c840160208801613d1e565b01600c01949350505050565b60006020828403121561415b57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156141a3576141a3614162565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156141e0576141e0614162565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082614223576142236141e5565b500490565b6000821982111561423b5761423b614162565b500190565b600063ffffffff8381169083168181101561425d5761425d614162565b039392505050565b60006020828403121561427757600080fd5b81516138d381613c63565b7f5245512d4c5020000000000000000000000000000000000000000000000000008152600083516142ba816007850160208801613d1e565b7f2d0000000000000000000000000000000000000000000000000000000000000060079184019182015283516142f7816008840160208801613d1e565b01600801949350505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361433457614334614162565b5060010190565b60006dffffffffffffffffffffffffffff8083168185168183048111821515161561436857614368614162565b02949350505050565b60006dffffffffffffffffffffffffffff80841680614392576143926141e5565b92169190910492915050565b73ffffffffffffffffffffffffffffffffffffffff851681528360208201528260408201526080606082015260006143d96080830184613d4a565b9695505050505050565b6000602082840312156143f557600080fd5b815180151581146138d357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60008251614446818460208701613d1e565b919091019291505056fea2646970667358221220e570d2dc2df2a724aee837c77675b05a45347ebbcff07f2c155e81d0c0173c0a64736f6c634300080d0033a26469706673582212206d1f5863ae401aab10707fd6a7e194b31447a07c60527766402edfebecab1c5b64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createPair(address,address,uint32,uint32,uint32)": {
        "params": {
          "initialAmp": "initial amplification parameter",
          "initialFee": "initial swapFee",
          "tokenA": "first token",
          "tokenB": "second token",
          "tokenWeightA": "first token weight"
        }
      },
      "getPairs(address,address)": {
        "params": {
          "token0": "first token",
          "token1": "second token"
        },
        "returns": {
          "_tokenPairs": "array of deployed pairs"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFeeTo(address)": {
        "params": {
          "_feeTo": "receiver"
        }
      },
      "setFeeToSetter(address)": {
        "params": {
          "_feeToSetter": "admin"
        }
      },
      "setProtocolFee(uint256)": {
        "params": {
          "_protocolFee": "new protocol fee"
        }
      },
      "setSwapParams(address,uint32,uint32)": {
        "params": {
          "_amp": "new amplification parameter",
          "_newSwapFee": "new seleted swap fee",
          "_pair": "pair to change"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createPair(address,address,uint32,uint32,uint32)": {
        "notice": "Creates a new pair with specified parameters - only one pair for a fixed set of weights cabn exist"
      },
      "getPairs(address,address)": {
        "notice": "Function to get  all deployed configs for a token pair"
      },
      "setFeeTo(address)": {
        "notice": "Sets receiver of fees"
      },
      "setFeeToSetter(address)": {
        "notice": "Sets admin which can determine the address to which fees are sent"
      },
      "setProtocolFee(uint256)": {
        "notice": "Sets the protocol fee"
      },
      "setSwapParams(address,uint32,uint32)": {
        "notice": "sets the crucial swap parameters for the pair"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 52655,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 39659,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "feeTo",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 39661,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "formula",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 39663,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "protocolFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 39665,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 39667,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "swapFeeGovernance",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 39682,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "_pairSalts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 39685,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "allPairs",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 39689,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "_pairs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 39698,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "tokenPairs",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_contract(IERC20)44565,t_mapping(t_contract(IERC20)44565,t_struct(AddressSet)51799_storage))"
      },
      {
        "astId": 39700,
        "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
        "label": "pairGovernance",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)44565": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_contract(IERC20)44565,t_mapping(t_contract(IERC20)44565,t_struct(AddressSet)51799_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)44565",
        "label": "mapping(contract IERC20 => mapping(contract IERC20 => struct EnumerableSet.AddressSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)44565,t_struct(AddressSet)51799_storage)"
      },
      "t_mapping(t_contract(IERC20)44565,t_struct(AddressSet)51799_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)44565",
        "label": "mapping(contract IERC20 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)51799_storage"
      },
      "t_struct(AddressSet)51799_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 51794,
            "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 51798,
            "contract": "contracts/WeightedPairFactoryV2.sol:RequiemWeightedPairFactoryV2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}