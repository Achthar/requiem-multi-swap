{
  "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserve0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserve1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance0Adjusted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance1Adjusted",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        }
      ],
      "name": "ensureConstantValue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reserveIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vReserveIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vReserveOut",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "tokenWeightIn",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "tokenWeightOut",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "swapFee",
              "type": "uint32"
            }
          ],
          "internalType": "struct IWeightedFormulaV2.PricingData",
          "name": "pricingData",
          "type": "tuple"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "reserveIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vReserveIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vReserveOut",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "tokenWeightIn",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "tokenWeightOut",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "swapFee",
              "type": "uint32"
            }
          ],
          "internalType": "struct IWeightedFormulaV2.PricingData",
          "name": "pricingData",
          "type": "tuple"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getFactoryWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getOtherToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vReserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vReserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserve0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserve1",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint112",
          "name": "collectedFee0",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "collectedFee1",
          "type": "uint112"
        }
      ],
      "name": "mintLiquidityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "sortTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc1ec29cc3eb3c5ed13ec1b21247842bd096866c1dd9ba7cc76204b46d7b6e1d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
    "transactionIndex": 0,
    "gasUsed": "5041717",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd78bf14c40288f36363fa378c1dd2ab14a87cd81c323de3a66c231f9728fa022",
    "transactionHash": "0xfc1ec29cc3eb3c5ed13ec1b21247842bd096866c1dd9ba7cc76204b46d7b6e1d",
    "logs": [],
    "blockNumber": 10,
    "cumulativeGasUsed": "5041717",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b7fdf3cf6099b2a1f304dfce08fdfa28",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance0Adjusted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance1Adjusted\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"}],\"name\":\"ensureConstantValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vReserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vReserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightIn\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightOut\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"internalType\":\"struct IWeightedFormulaV2.PricingData\",\"name\":\"pricingData\",\"type\":\"tuple\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vReserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vReserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightIn\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightOut\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"internalType\":\"struct IWeightedFormulaV2.PricingData\",\"name\":\"pricingData\",\"type\":\"tuple\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getFactoryWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getOtherToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vReserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vReserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"collectedFee0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"collectedFee1\",\"type\":\"uint112\"}],\"name\":\"mintLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAmountIn(uint256,(uint256,uint256,uint256,uint256,uint32,uint32,uint32))\":{\"details\":\"given an output amount of an asset and pair reserves, returns a required input amount of the other asset Formula: return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\",\"params\":{\"amountOut\":\"target reserve amount  reserveIn    source reserve balance  reserveOut    target reserve balance  tokenWeightIn     source reserve weight, represented in ppm (2-98)  tokenWeightOut     target reserve weight, represented in ppm (2-98)  swapFee                  swap fee of the conversion\"},\"returns\":{\"amountIn\":\"amountIn\"}},\"getAmountOut(uint256,(uint256,uint256,uint256,uint256,uint32,uint32,uint32))\":{\"details\":\"given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset, Formula: return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\",\"params\":{\"amountIn\":\"source reserve amount  reserveIn    source reserve balance  reserveOut    target reserve balance  tokenWeightIn     source reserve weight, represented in ppm (2-98)  tokenWeightOut     target reserve weight, represented in ppm (2-98)  swapFee                  swap fee of the conversion\"},\"returns\":{\"amountOut\":\"amountOut\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WeightedFormulaV2.sol\":\"WeightedFormulaV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999999},\"remappings\":[]},\"sources\":{\"contracts/WeightedFormulaV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./interfaces/IWeightedFormulaV2.sol\\\";\\nimport \\\"./interfaces/IRequiemWeightedPairV2.sol\\\";\\nimport \\\"./interfaces/IRequiemWeightedPairFactoryV2.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string, no-unused-vars\\n\\ncontract WeightedFormulaV2 is IWeightedFormulaV2 {\\n    uint256 private constant ONE = 1;\\n    uint8 private constant MIN_PRECISION = 32;\\n    uint8 private constant MAX_PRECISION = 127;\\n\\n    uint256 private constant FIXED_1 = 0x080000000000000000000000000000000;\\n    uint256 private constant FIXED_2 = 0x100000000000000000000000000000000;\\n    uint256 private constant MAX_NUM = 0x200000000000000000000000000000000;\\n\\n    uint256 private constant LN2_NUMERATOR = 0x3f80fe03f80fe03f80fe03f80fe03f8;\\n    uint256 private constant LN2_DENOMINATOR = 0x5b9de1d10bf4103d647b0955897ba80;\\n\\n    uint256 private constant OPT_LOG_MAX_VAL = 0x15bf0a8b1457695355fb8ac404e7a79e3;\\n    uint256 private constant OPT_EXP_MAX_VAL = 0x800000000000000000000000000000000;\\n\\n    uint256 private constant LAMBERT_CONV_RADIUS = 0x002f16ac6c59de6f8d5d6f63c1482a7c86;\\n    uint256 private constant LAMBERT_POS2_SAMPLE = 0x0003060c183060c183060c183060c18306;\\n    uint256 private constant LAMBERT_POS2_MAXVAL = 0x01af16ac6c59de6f8d5d6f63c1482a7c80;\\n    uint256 private constant LAMBERT_POS3_MAXVAL = 0x6b22d43e72c326539cceeef8bb48f255ff;\\n\\n    uint256 private constant MAX_UNF_WEIGHT = 0x10c6f7a0b5ed8d36b4c7f34938583621fafc8b0079a2834d26fa3fcc9ea9;\\n\\n    uint256[128] private maxExpArray;\\n\\n    function initMaxExpArray() internal {\\n        maxExpArray[32] = 0x1c35fedd14ffffffffffffffffffffffff;\\n        maxExpArray[33] = 0x1b0ce43b323fffffffffffffffffffffff;\\n        maxExpArray[34] = 0x19f0028ec1ffffffffffffffffffffffff;\\n        maxExpArray[35] = 0x18ded91f0e7fffffffffffffffffffffff;\\n        maxExpArray[36] = 0x17d8ec7f0417ffffffffffffffffffffff;\\n        maxExpArray[37] = 0x16ddc6556cdbffffffffffffffffffffff;\\n        maxExpArray[38] = 0x15ecf52776a1ffffffffffffffffffffff;\\n        maxExpArray[39] = 0x15060c256cb2ffffffffffffffffffffff;\\n        maxExpArray[40] = 0x1428a2f98d72ffffffffffffffffffffff;\\n        maxExpArray[41] = 0x13545598e5c23fffffffffffffffffffff;\\n        maxExpArray[42] = 0x1288c4161ce1dfffffffffffffffffffff;\\n        maxExpArray[43] = 0x11c592761c666fffffffffffffffffffff;\\n        maxExpArray[44] = 0x110a688680a757ffffffffffffffffffff;\\n        maxExpArray[45] = 0x1056f1b5bedf77ffffffffffffffffffff;\\n        maxExpArray[46] = 0x0faadceceeff8bffffffffffffffffffff;\\n        maxExpArray[47] = 0x0f05dc6b27edadffffffffffffffffffff;\\n        maxExpArray[48] = 0x0e67a5a25da4107fffffffffffffffffff;\\n        maxExpArray[49] = 0x0dcff115b14eedffffffffffffffffffff;\\n        maxExpArray[50] = 0x0d3e7a392431239fffffffffffffffffff;\\n        maxExpArray[51] = 0x0cb2ff529eb71e4fffffffffffffffffff;\\n        maxExpArray[52] = 0x0c2d415c3db974afffffffffffffffffff;\\n        maxExpArray[53] = 0x0bad03e7d883f69bffffffffffffffffff;\\n        maxExpArray[54] = 0x0b320d03b2c343d5ffffffffffffffffff;\\n        maxExpArray[55] = 0x0abc25204e02828dffffffffffffffffff;\\n        maxExpArray[56] = 0x0a4b16f74ee4bb207fffffffffffffffff;\\n        maxExpArray[57] = 0x09deaf736ac1f569ffffffffffffffffff;\\n        maxExpArray[58] = 0x0976bd9952c7aa957fffffffffffffffff;\\n        maxExpArray[59] = 0x09131271922eaa606fffffffffffffffff;\\n        maxExpArray[60] = 0x08b380f3558668c46fffffffffffffffff;\\n        maxExpArray[61] = 0x0857ddf0117efa215bffffffffffffffff;\\n        maxExpArray[62] = 0x07ffffffffffffffffffffffffffffffff;\\n        maxExpArray[63] = 0x07abbf6f6abb9d087fffffffffffffffff;\\n        maxExpArray[64] = 0x075af62cbac95f7dfa7fffffffffffffff;\\n        maxExpArray[65] = 0x070d7fb7452e187ac13fffffffffffffff;\\n        maxExpArray[66] = 0x06c3390ecc8af379295fffffffffffffff;\\n        maxExpArray[67] = 0x067c00a3b07ffc01fd6fffffffffffffff;\\n        maxExpArray[68] = 0x0637b647c39cbb9d3d27ffffffffffffff;\\n        maxExpArray[69] = 0x05f63b1fc104dbd39587ffffffffffffff;\\n        maxExpArray[70] = 0x05b771955b36e12f7235ffffffffffffff;\\n        maxExpArray[71] = 0x057b3d49dda84556d6f6ffffffffffffff;\\n        maxExpArray[72] = 0x054183095b2c8ececf30ffffffffffffff;\\n        maxExpArray[73] = 0x050a28be635ca2b888f77fffffffffffff;\\n        maxExpArray[74] = 0x04d5156639708c9db33c3fffffffffffff;\\n        maxExpArray[75] = 0x04a23105873875bd52dfdfffffffffffff;\\n        maxExpArray[76] = 0x0471649d87199aa990756fffffffffffff;\\n        maxExpArray[77] = 0x04429a21a029d4c1457cfbffffffffffff;\\n        maxExpArray[78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff;\\n        maxExpArray[79] = 0x03eab73b3bbfe282243ce1ffffffffffff;\\n        maxExpArray[80] = 0x03c1771ac9fb6b4c18e229ffffffffffff;\\n        maxExpArray[81] = 0x0399e96897690418f785257fffffffffff;\\n        maxExpArray[82] = 0x0373fc456c53bb779bf0ea9fffffffffff;\\n        maxExpArray[83] = 0x034f9e8e490c48e67e6ab8bfffffffffff;\\n        maxExpArray[84] = 0x032cbfd4a7adc790560b3337ffffffffff;\\n        maxExpArray[85] = 0x030b50570f6e5d2acca94613ffffffffff;\\n        maxExpArray[86] = 0x02eb40f9f620fda6b56c2861ffffffffff;\\n        maxExpArray[87] = 0x02cc8340ecb0d0f520a6af58ffffffffff;\\n        maxExpArray[88] = 0x02af09481380a0a35cf1ba02ffffffffff;\\n        maxExpArray[89] = 0x0292c5bdd3b92ec810287b1b3fffffffff;\\n        maxExpArray[90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff;\\n        maxExpArray[91] = 0x025daf6654b1eaa55fd64df5efffffffff;\\n        maxExpArray[92] = 0x0244c49c648baa98192dce88b7ffffffff;\\n        maxExpArray[93] = 0x022ce03cd5619a311b2471268bffffffff;\\n        maxExpArray[94] = 0x0215f77c045fbe885654a44a0fffffffff;\\n        maxExpArray[95] = 0x01ffffffffffffffffffffffffffffffff;\\n        maxExpArray[96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff;\\n        maxExpArray[97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff;\\n        maxExpArray[98] = 0x01c35fedd14b861eb0443f7f133fffffff;\\n        maxExpArray[99] = 0x01b0ce43b322bcde4a56e8ada5afffffff;\\n        maxExpArray[100] = 0x019f0028ec1fff007f5a195a39dfffffff;\\n        maxExpArray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff;\\n        maxExpArray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff;\\n        maxExpArray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff;\\n        maxExpArray[104] = 0x015ecf52776a1155b5bd8395814f7fffff;\\n        maxExpArray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff;\\n        maxExpArray[106] = 0x01428a2f98d728ae223ddab715be3fffff;\\n        maxExpArray[107] = 0x013545598e5c23276ccf0ede68034fffff;\\n        maxExpArray[108] = 0x01288c4161ce1d6f54b7f61081194fffff;\\n        maxExpArray[109] = 0x011c592761c666aa641d5a01a40f17ffff;\\n        maxExpArray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff;\\n        maxExpArray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff;\\n        maxExpArray[112] = 0x00faadceceeff8a0890f3875f008277fff;\\n        maxExpArray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff;\\n        maxExpArray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff;\\n        maxExpArray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff;\\n        maxExpArray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff;\\n        maxExpArray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff;\\n        maxExpArray[118] = 0x00c2d415c3db974ab32a51840c0b67edff;\\n        maxExpArray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff;\\n        maxExpArray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff;\\n        maxExpArray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf;\\n        maxExpArray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df;\\n        maxExpArray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f;\\n        maxExpArray[124] = 0x00976bd9952c7aa957f5937d790ef65037;\\n        maxExpArray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf;\\n        maxExpArray[126] = 0x008b380f3558668c46c91c49a2f8e967b9;\\n        maxExpArray[127] = 0x00857ddf0117efa215952912839f6473e6;\\n    }\\n\\n    constructor() {\\n        initMaxExpArray();\\n    }\\n\\n    /**\\n     * @dev General Description:\\n     *     Determine a value of precision.\\n     *     Calculate an integer approximation of (_baseN / _baseD) ^ (_expN / _expD) * 2 ^ precision.\\n     *     Return the result along with the precision used.\\n     *\\n     * Detailed Description:\\n     *     Instead of calculating \\\"base ^ exp\\\", we calculate \\\"e ^ (log(base) * exp)\\\".\\n     *     The value of \\\"log(base)\\\" is represented with an integer slightly smaller than \\\"log(base) * 2 ^ precision\\\".\\n     *     The larger \\\"precision\\\" is, the more accurately this value represents the real value.\\n     *     However, the larger \\\"precision\\\" is, the more bits are required in order to store this value.\\n     *     And the exponentiation function, which takes \\\"x\\\" and calculates \\\"e ^ x\\\", is limited to a maximum exponent (maximum value of \\\"x\\\").\\n     *     This maximum exponent depends on the \\\"precision\\\" used, and it is given by \\\"maxExpArray[precision] >> (MAX_PRECISION - precision)\\\".\\n     *     Hence we need to determine the highest precision which can be used for the given input, before calling the exponentiation function.\\n     *     This allows us to compute \\\"base ^ exp\\\" with maximum accuracy and without exceeding 256 bits in any of the intermediate computations.\\n     *     This functions assumes that \\\"_expN < 2 ^ 256 / log(MAX_NUM - 1)\\\", otherwise the multiplication should be replaced with a \\\"safeMul\\\".\\n     *     Since we rely on unsigned-integer arithmetic and \\\"base < 1\\\" ==> \\\"log(base) < 0\\\", this function does not support \\\"_baseN < _baseD\\\".\\n     */\\n    function power(\\n        uint256 _baseN,\\n        uint256 _baseD,\\n        uint32 _expN,\\n        uint32 _expD\\n    ) internal view returns (uint256, uint8) {\\n        require(_baseN >= _baseD, \\\"not support _baseN < _baseD\\\");\\n        require(_baseN < MAX_NUM);\\n\\n        uint256 baseLog;\\n        uint256 base = (_baseN * FIXED_1) / _baseD;\\n        if (base < OPT_LOG_MAX_VAL) {\\n            baseLog = optimalLog(base);\\n        } else {\\n            baseLog = generalLog(base);\\n        }\\n\\n        uint256 baseLogTimesExp = (baseLog * _expN) / _expD;\\n        if (baseLogTimesExp < OPT_EXP_MAX_VAL) {\\n            return (optimalExp(baseLogTimesExp), MAX_PRECISION);\\n        } else {\\n            uint8 precision = findPositionInMaxExpArray(baseLogTimesExp);\\n            return (generalExp(baseLogTimesExp >> (MAX_PRECISION - precision), precision), precision);\\n        }\\n    }\\n\\n    /**\\n     * @dev computes log(x / FIXED_1) * FIXED_1.\\n     * This functions assumes that \\\"x >= FIXED_1\\\", because the output would be negative otherwise.\\n     */\\n    function generalLog(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\\n        if (x >= FIXED_2) {\\n            uint8 count = floorLog2(x / FIXED_1);\\n            x >>= count;\\n            // now x < 2\\n            res = count * FIXED_1;\\n        }\\n\\n        // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\\n        if (x > FIXED_1) {\\n            for (uint8 i = MAX_PRECISION; i > 0; --i) {\\n                x = (x * x) / FIXED_1;\\n                // now 1 < x < 4\\n                if (x >= FIXED_2) {\\n                    x >>= 1;\\n                    // now 1 < x < 2\\n                    res += ONE << (i - 1);\\n                }\\n            }\\n        }\\n\\n        return (res * LN2_NUMERATOR) / LN2_DENOMINATOR;\\n    }\\n\\n    /**\\n     * @dev computes the largest integer smaller than or equal to the binary logarithm of the input.\\n     */\\n    function floorLog2(uint256 _n) internal pure returns (uint8) {\\n        uint8 res = 0;\\n\\n        if (_n < 256) {\\n            // At most 8 iterations\\n            while (_n > 1) {\\n                _n >>= 1;\\n                res += 1;\\n            }\\n        } else {\\n            // Exactly 8 iterations\\n            for (uint8 s = 128; s > 0; s >>= 1) {\\n                if (_n >= (ONE << s)) {\\n                    _n >>= s;\\n                    res |= s;\\n                }\\n            }\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * @dev the global \\\"maxExpArray\\\" is sorted in descending order, and therefore the following statements are equivalent:\\n     * - This function finds the position of [the smallest value in \\\"maxExpArray\\\" larger than or equal to \\\"x\\\"]\\n     * - This function finds the highest position of [a value in \\\"maxExpArray\\\" larger than or equal to \\\"x\\\"]\\n     */\\n    function findPositionInMaxExpArray(uint256 _x) internal view returns (uint8) {\\n        uint8 lo = MIN_PRECISION;\\n        uint8 hi = MAX_PRECISION;\\n\\n        while (lo + 1 < hi) {\\n            uint8 mid = (lo + hi) / 2;\\n            if (maxExpArray[mid] >= _x) lo = mid;\\n            else hi = mid;\\n        }\\n\\n        if (maxExpArray[hi] >= _x) return hi;\\n        if (maxExpArray[lo] >= _x) return lo;\\n\\n        require(false);\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev this function can be auto-generated by the script \\\"PrintFunctionGeneralExp.py\\\".\\n     * it approximates \\\"e ^ x\\\" via maclaurin summation: \\\"(x^0)/0! + (x^1)/1! + ... + (x^n)/n!\\\".\\n     * it returns \\\"e ^ (x / 2 ^ precision) * 2 ^ precision\\\", that is, the result is upshifted for accuracy.\\n     * the global \\\"maxExpArray\\\" maps each \\\"precision\\\" to \\\"((maximumExponent + 1) << (MAX_PRECISION - precision)) - 1\\\".\\n     * the maximum permitted value for \\\"x\\\" is therefore given by \\\"maxExpArray[precision] >> (MAX_PRECISION - precision)\\\".\\n     */\\n    function generalExp(uint256 _x, uint8 _precision) internal pure returns (uint256) {\\n        uint256 xi = _x;\\n        uint256 res = 0;\\n\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x3442c4e6074a82f1797f72ac0000000;\\n        // add x^02 * (33! / 02!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x116b96f757c380fb287fd0e40000000;\\n        // add x^03 * (33! / 03!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x045ae5bdd5f0e03eca1ff4390000000;\\n        // add x^04 * (33! / 04!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00defabf91302cd95b9ffda50000000;\\n        // add x^05 * (33! / 05!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x002529ca9832b22439efff9b8000000;\\n        // add x^06 * (33! / 06!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00054f1cf12bd04e516b6da88000000;\\n        // add x^07 * (33! / 07!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000a9e39e257a09ca2d6db51000000;\\n        // add x^08 * (33! / 08!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000012e066e7b839fa050c309000000;\\n        // add x^09 * (33! / 09!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000001e33d7d926c329a1ad1a800000;\\n        // add x^10 * (33! / 10!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000002bee513bdb4a6b19b5f800000;\\n        // add x^11 * (33! / 11!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000003a9316fa79b88eccf2a00000;\\n        // add x^12 * (33! / 12!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000048177ebe1fa812375200000;\\n        // add x^13 * (33! / 13!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000005263fe90242dcbacf00000;\\n        // add x^14 * (33! / 14!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000057e22099c030d94100000;\\n        // add x^15 * (33! / 15!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000057e22099c030d9410000;\\n        // add x^16 * (33! / 16!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000052b6b54569976310000;\\n        // add x^17 * (33! / 17!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000004985f67696bf748000;\\n        // add x^18 * (33! / 18!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000003dea12ea99e498000;\\n        // add x^19 * (33! / 19!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000031880f2214b6e000;\\n        // add x^20 * (33! / 20!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000025bcff56eb36000;\\n        // add x^21 * (33! / 21!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000001b722e10ab1000;\\n        // add x^22 * (33! / 22!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000001317c70077000;\\n        // add x^23 * (33! / 23!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000cba84aafa00;\\n        // add x^24 * (33! / 24!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000082573a0a00;\\n        // add x^25 * (33! / 25!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000005035ad900;\\n        // add x^26 * (33! / 26!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000000000002f881b00;\\n        // add x^27 * (33! / 27!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000001b29340;\\n        // add x^28 * (33! / 28!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000000000efc40;\\n        // add x^29 * (33! / 29!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000007fe0;\\n        // add x^30 * (33! / 30!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000420;\\n        // add x^31 * (33! / 31!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000021;\\n        // add x^32 * (33! / 32!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000001;\\n        // add x^33 * (33! / 33!)\\n\\n        return res / 0x688589cc0e9505e2f2fee5580000000 + _x + (ONE << _precision);\\n        // divide by 33! and then add x^1 / 1! + x^0 / 0!\\n    }\\n\\n    /**\\n     * @dev computes log(x / FIXED_1) * FIXED_1\\n     * Input range: FIXED_1 <= x <= OPT_LOG_MAX_VAL - 1\\n     * Auto-generated via \\\"PrintFunctionOptimalLog.py\\\"\\n     * Detailed description:\\n     * - Rewrite the input as a product of natural exponents and a single residual r, such that 1 < r < 2\\n     * - The natural logarithm of each (pre-calculated) exponent is the degree of the exponent\\n     * - The natural logarithm of r is calculated via Taylor series for log(1 + x), where x = r - 1\\n     * - The natural logarithm of the input is calculated by summing up the intermediate results above\\n     * - For example: log(250) = log(e^4 * e^1 * e^0.5 * 1.021692859) = 4 + 1 + 0.5 + log(1 + 0.021692859)\\n     */\\n    function optimalLog(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        uint256 y;\\n        uint256 z;\\n        uint256 w;\\n\\n        if (x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8) {\\n            res += 0x40000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0xd3094c70f034de4b96ff7d5b6f99fcd8;\\n        }\\n        // add 1 / 2^1\\n        if (x >= 0xa45af1e1f40c333b3de1db4dd55f29a7) {\\n            res += 0x20000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0xa45af1e1f40c333b3de1db4dd55f29a7;\\n        }\\n        // add 1 / 2^2\\n        if (x >= 0x910b022db7ae67ce76b441c27035c6a1) {\\n            res += 0x10000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x910b022db7ae67ce76b441c27035c6a1;\\n        }\\n        // add 1 / 2^3\\n        if (x >= 0x88415abbe9a76bead8d00cf112e4d4a8) {\\n            res += 0x08000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x88415abbe9a76bead8d00cf112e4d4a8;\\n        }\\n        // add 1 / 2^4\\n        if (x >= 0x84102b00893f64c705e841d5d4064bd3) {\\n            res += 0x04000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x84102b00893f64c705e841d5d4064bd3;\\n        }\\n        // add 1 / 2^5\\n        if (x >= 0x8204055aaef1c8bd5c3259f4822735a2) {\\n            res += 0x02000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x8204055aaef1c8bd5c3259f4822735a2;\\n        }\\n        // add 1 / 2^6\\n        if (x >= 0x810100ab00222d861931c15e39b44e99) {\\n            res += 0x01000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x810100ab00222d861931c15e39b44e99;\\n        }\\n        // add 1 / 2^7\\n        if (x >= 0x808040155aabbbe9451521693554f733) {\\n            res += 0x00800000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x808040155aabbbe9451521693554f733;\\n        }\\n        // add 1 / 2^8\\n\\n        z = y = x - FIXED_1;\\n        w = (y * y) / FIXED_1;\\n        res += (z * (0x100000000000000000000000000000000 - y)) / 0x100000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^01 / 01 - y^02 / 02\\n        res += (z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y)) / 0x200000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^03 / 03 - y^04 / 04\\n        res += (z * (0x099999999999999999999999999999999 - y)) / 0x300000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^05 / 05 - y^06 / 06\\n        res += (z * (0x092492492492492492492492492492492 - y)) / 0x400000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^07 / 07 - y^08 / 08\\n        res += (z * (0x08e38e38e38e38e38e38e38e38e38e38e - y)) / 0x500000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^09 / 09 - y^10 / 10\\n        res += (z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y)) / 0x600000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^11 / 11 - y^12 / 12\\n        res += (z * (0x089d89d89d89d89d89d89d89d89d89d89 - y)) / 0x700000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^13 / 13 - y^14 / 14\\n        res += (z * (0x088888888888888888888888888888888 - y)) / 0x800000000000000000000000000000000;\\n        // add y^15 / 15 - y^16 / 16\\n\\n        return res;\\n    }\\n\\n    /**\\n     * @dev computes e ^ (x / FIXED_1) * FIXED_1\\n     * input range: 0 <= x <= OPT_EXP_MAX_VAL - 1\\n     * auto-generated via \\\"PrintFunctionOptimalExp.py\\\"\\n     * Detailed description:\\n     * - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\\n     * - The exponentiation of each binary exponent is given (pre-calculated)\\n     * - The exponentiation of r is calculated via Taylor series for e^x, where x = r\\n     * - The exponentiation of the input is calculated by multiplying the intermediate results above\\n     * - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\\n     */\\n    function optimalExp(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        uint256 y;\\n        uint256 z;\\n\\n        z = y = x % 0x10000000000000000000000000000000;\\n        // get the input modulo 2^(-3)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x10e1b3be415a0000;\\n        // add y^02 * (20! / 02!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x05a0913f6b1e0000;\\n        // add y^03 * (20! / 03!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0168244fdac78000;\\n        // add y^04 * (20! / 04!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x004807432bc18000;\\n        // add y^05 * (20! / 05!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000c0135dca04000;\\n        // add y^06 * (20! / 06!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0001b707b1cdc000;\\n        // add y^07 * (20! / 07!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000036e0f639b800;\\n        // add y^08 * (20! / 08!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x00000618fee9f800;\\n        // add y^09 * (20! / 09!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000009c197dcc00;\\n        // add y^10 * (20! / 10!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000e30dce400;\\n        // add y^11 * (20! / 11!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000000012ebd1300;\\n        // add y^12 * (20! / 12!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000017499f00;\\n        // add y^13 * (20! / 13!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000001a9d480;\\n        // add y^14 * (20! / 14!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x00000000001c6380;\\n        // add y^15 * (20! / 15!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000000000001c638;\\n        // add y^16 * (20! / 16!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000000001ab8;\\n        // add y^17 * (20! / 17!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000000000000017c;\\n        // add y^18 * (20! / 18!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000000000014;\\n        // add y^19 * (20! / 19!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000000000001;\\n        // add y^20 * (20! / 20!)\\n        res = res / 0x21c3677c82b40000 + y + FIXED_1;\\n        // divide by 20! and then add y^1 / 1! + y^0 / 0!\\n\\n        if ((x & 0x010000000000000000000000000000000) != 0) res = (res * 0x1c3d6a24ed82218787d624d3e5eba95f9) / 0x18ebef9eac820ae8682b9793ac6d1e776;\\n        // multiply by e^2^(-3)\\n        if ((x & 0x020000000000000000000000000000000) != 0) res = (res * 0x18ebef9eac820ae8682b9793ac6d1e778) / 0x1368b2fc6f9609fe7aceb46aa619baed4;\\n        // multiply by e^2^(-2)\\n        if ((x & 0x040000000000000000000000000000000) != 0) res = (res * 0x1368b2fc6f9609fe7aceb46aa619baed5) / 0x0bc5ab1b16779be3575bd8f0520a9f21f;\\n        // multiply by e^2^(-1)\\n        if ((x & 0x080000000000000000000000000000000) != 0) res = (res * 0x0bc5ab1b16779be3575bd8f0520a9f21e) / 0x0454aaa8efe072e7f6ddbab84b40a55c9;\\n        // multiply by e^2^(+0)\\n        if ((x & 0x100000000000000000000000000000000) != 0) res = (res * 0x0454aaa8efe072e7f6ddbab84b40a55c5) / 0x00960aadc109e7a3bf4578099615711ea;\\n        // multiply by e^2^(+1)\\n        if ((x & 0x200000000000000000000000000000000) != 0) res = (res * 0x00960aadc109e7a3bf4578099615711d7) / 0x0002bf84208204f5977f9a8cf01fdce3d;\\n        // multiply by e^2^(+2)\\n        if ((x & 0x400000000000000000000000000000000) != 0) res = (res * 0x0002bf84208204f5977f9a8cf01fdc307) / 0x0000003c6ab775dd0b95b4cbee7e65d11;\\n        // multiply by e^2^(+3)\\n\\n        return res;\\n    }\\n\\n    // function getReserveAndWeights(address pair, address tokenA)\\n    //     public\\n    //     view\\n    //     override\\n    //     returns (\\n    //         address tokenB,\\n    //         uint256 reserveA,\\n    //         uint256 reserveB,\\n    //         uint256 vReserveA,\\n    //         uint256 vReserveB,\\n    //         uint32 tokenWeightA,\\n    //         uint32 tokenWeightB,\\n    //         uint32 swapFee\\n    //     )\\n    // {\\n    //     (uint256 reserve0, uint256 reserve1, , uint256 vReserve0, uint256 vReserve1) = IRequiemWeightedPairV2(pair).getReserves();\\n    //     uint32 tokenWeight0;\\n    //     uint32 tokenWeight1;\\n    //     (tokenWeight0, tokenWeight1, swapFee) = getWeightsAndSwapFee(pair);\\n\\n    //     if (tokenA == IRequiemWeightedPairV2(pair).token0()) {\\n    //         (tokenB, reserveA, reserveB, vReserveA, vReserveB, tokenWeightA, tokenWeightB) = (\\n    //             IRequiemWeightedPairV2(pair).token1(),\\n    //             reserve0,\\n    //             reserve1,\\n    //             vReserve0,\\n    //             vReserve1,\\n    //             tokenWeight0,\\n    //             tokenWeight1\\n    //         );\\n    //     } else if (tokenA == IRequiemWeightedPairV2(pair).token1()) {\\n    //         (tokenB, reserveA, reserveB, vReserveA, vReserveB, tokenWeightA, tokenWeightB) = (\\n    //             IRequiemWeightedPairV2(pair).token0(),\\n    //             reserve1,\\n    //             reserve0,\\n    //             vReserve1,\\n    //             vReserve0,\\n    //             tokenWeight1,\\n    //             tokenWeight0\\n    //         );\\n    //     } else {\\n    //         revert(\\\"RequiemFormula: Invalid tokenA\\\");\\n    //     }\\n    // }\\n\\n    // function getFactoryReserveAndWeights(\\n    //     address factory,\\n    //     address pair,\\n    //     address tokenA\\n    // )\\n    //     public\\n    //     view\\n    //     override\\n    //     returns (\\n    //         address tokenB,\\n    //         uint256 reserveA,\\n    //         uint256 reserveB,\\n    //         uint256 vReserveA,\\n    //         uint256 vReserveB,\\n    //         uint32 tokenWeightA,\\n    //         uint32 tokenWeightB,\\n    //         uint32 swapFee\\n    //     )\\n    // {\\n    //     (uint256 reserve0, uint256 reserve1, , uint256 vReserve0, uint256 vReserve1) = IRequiemWeightedPairV2(pair).getReserves();\\n    //     uint32 tokenWeight0;\\n    //     uint32 tokenWeight1;\\n    //     (tokenWeight0, tokenWeight1, swapFee) = getFactoryWeightsAndSwapFee(factory, pair);\\n\\n    //     if (tokenA == IRequiemWeightedPairV2(pair).token0()) {\\n    //         (tokenB, reserveA, reserveB, vReserveA, vReserveB, tokenWeightA, tokenWeightB) = (\\n    //             IRequiemWeightedPairV2(pair).token1(),\\n    //             reserve0,\\n    //             reserve1,\\n    //             vReserve0,\\n    //             vReserve1,\\n    //             tokenWeight0,\\n    //             tokenWeight1\\n    //         );\\n    //     } else if (tokenA == IRequiemWeightedPairV2(pair).token1()) {\\n    //         (tokenB, reserveA, reserveB, vReserveA, vReserveB, tokenWeightA, tokenWeightB) = (\\n    //             IRequiemWeightedPairV2(pair).token0(),\\n    //             reserve1,\\n    //             reserve0,\\n    //             vReserve1,\\n    //             vReserve0,\\n    //             tokenWeight1,\\n    //             tokenWeight0\\n    //         );\\n    //     } else {\\n    //         revert(\\\"RequiemFormula: Invalid tokenA\\\");\\n    //     }\\n    // }\\n\\n    /**\\n     * @dev given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset,\\n     *\\n     * Formula:\\n     * return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\\n     *\\n     * @param amountIn                  source reserve amount\\n     *  reserveIn    source reserve balance\\n     *  reserveOut    target reserve balance\\n     *  tokenWeightIn     source reserve weight, represented in ppm (2-98)\\n     *  tokenWeightOut     target reserve weight, represented in ppm (2-98)\\n     *  swapFee                  swap fee of the conversion\\n     *\\n     * @return amountOut\\n     */\\n    function getAmountOut(uint256 amountIn, PricingData calldata pricingData) public view override returns (uint256 amountOut) {\\n        // validate input\\n        require(amountIn > 0, \\\"RequiemFormula: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(pricingData.reserveIn > 0 && pricingData.reserveOut > 0, \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn * (10000 - pricingData.swapFee);\\n        // special case for equal weights\\n        if (pricingData.tokenWeightIn == pricingData.tokenWeightOut) {\\n            return (pricingData.vReserveOut * amountInWithFee) / (pricingData.vReserveIn * 10000 + amountInWithFee);\\n        }\\n\\n        uint256 result;\\n        uint8 precision;\\n        uint256 baseN = pricingData.vReserveIn * 10000 + amountInWithFee;\\n        (result, precision) = power(baseN, pricingData.vReserveIn * 10000, pricingData.tokenWeightIn, pricingData.tokenWeightOut);\\n\\n        uint256 temp1 = pricingData.vReserveOut * result;\\n        uint256 temp2 = pricingData.vReserveOut << precision;\\n        amountOut = (temp1 - temp2) / result;\\n    }\\n\\n    /**\\n     * @dev given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n     *\\n     * Formula:\\n     * return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\\n     *\\n     * @param amountOut     target reserve amount\\n     *  reserveIn    source reserve balance\\n     *  reserveOut    target reserve balance\\n     *  tokenWeightIn     source reserve weight, represented in ppm (2-98)\\n     *  tokenWeightOut     target reserve weight, represented in ppm (2-98)\\n     *  swapFee                  swap fee of the conversion\\n     *\\n     * @return amountIn\\n     */\\n    function getAmountIn(uint256 amountOut, PricingData calldata pricingData) public view override returns (uint256 amountIn) {\\n        // validate input\\n        require(amountOut > 0, \\\"RequiemFormula: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(pricingData.reserveIn > 0 && pricingData.reserveOut > 0, \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\");\\n        // special case for equal weights\\n        if (pricingData.tokenWeightIn == pricingData.tokenWeightOut) {\\n            uint256 numerator = pricingData.vReserveIn * amountOut * 10000;\\n            uint256 denominator = (pricingData.vReserveOut - amountOut) * (10000 - pricingData.swapFee);\\n            return numerator / denominator + 1;\\n        }\\n\\n        uint256 result;\\n        uint8 precision;\\n        uint256 baseD = pricingData.vReserveOut - amountOut;\\n        (result, precision) = power(pricingData.vReserveOut, baseD, pricingData.tokenWeightOut, pricingData.tokenWeightIn);\\n        uint256 baseReserveIn = pricingData.vReserveIn * 10000;\\n        uint256 temp1 = baseReserveIn * result;\\n        uint256 temp2 = baseReserveIn << precision;\\n        amountIn = ((temp1 - temp2) >> precision) / (10000 - pricingData.swapFee) + 1;\\n    }\\n\\n    // // performs chained getAmountOut calculations on any number of pairs\\n    // function getAmountsOut(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountIn,\\n    //     address[] calldata path\\n    // ) external view override returns (uint256[] memory amounts) {\\n    //     require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n    //     amounts = new uint256[](path.length + 1);\\n    //     amounts[0] = amountIn;\\n    //     address currentTokenIn = tokenIn;\\n    //     for (uint256 i = 0; i < path.length; i++) {\\n    //         (\\n    //             address currentTokenOut,\\n    //             uint256 reserveIn,\\n    //             uint256 reserveOut,\\n    //             uint256 vReserveIn,\\n    //             uint256 vReserveOut,\\n    //             uint32 tokenWeightIn,\\n    //             uint32 tokenWeightOut,\\n    //             uint32 swapFee\\n    //         ) = getReserveAndWeights(path[i], currentTokenIn);\\n    //         amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, vReserveIn, vReserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    //         currentTokenIn = currentTokenOut;\\n    //     }\\n    //     require(currentTokenIn == tokenOut, \\\"RequiemFormula: INVALID_TOKEN_OUT_PATH\\\");\\n    // }\\n\\n    // function getFactoryAmountsOut(\\n    //     address factory,\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountIn,\\n    //     address[] calldata path\\n    // ) external view override returns (uint256[] memory amounts) {\\n    //     require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n    //     amounts = new uint256[](path.length + 1);\\n    //     amounts[0] = amountIn;\\n    //     address currentTokenIn = tokenIn;\\n\\n    //     for (uint256 i = 0; i < path.length; i++) {\\n    //         (\\n    //             address currentTokenOut,\\n    //             uint256 reserveIn,\\n    //             uint256 reserveOut,\\n    //             uint256 vReserveIn,\\n    //             uint256 vReserveOut,\\n    //             uint32 tokenWeightIn,\\n    //             uint32 tokenWeightOut,\\n    //             uint32 swapFee\\n    //         ) = getFactoryReserveAndWeights(factory, path[i], currentTokenIn);\\n\\n    //         amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, vReserveIn, vReserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    //         currentTokenIn = currentTokenOut;\\n    //     }\\n    //     require(currentTokenIn == tokenOut, \\\"RequiemFormula: INVALID_TOKEN_OUT_PATH\\\");\\n    // }\\n\\n    // function getPairAmountOut(\\n    //     address pair,\\n    //     address tokenIn,\\n    //     uint256 amountIn\\n    // ) external view override returns (uint256 amountOut) {\\n    //     (, uint256 reserveIn, uint256 reserveOut, uint256 vReserveIn, uint256 vReserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getReserveAndWeights(pair, tokenIn);\\n    //     amountOut = getAmountOut(amountIn, reserveIn, reserveOut, vReserveIn, vReserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    // }\\n\\n    // // performs chained getAmountIn calculations on any number of pairs\\n    // function getAmountsIn(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountOut,\\n    //     address[] calldata path\\n    // ) external view override returns (uint256[] memory amounts) {\\n    //     require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n    //     amounts = new uint256[](path.length + 1);\\n    //     amounts[amounts.length - 1] = amountOut;\\n    //     address currentTokenIn = tokenOut;\\n    //     for (uint256 i = path.length; i > 0; i--) {\\n    //         (\\n    //             address currentTokenOut,\\n    //             uint256 reserveIn,\\n    //             uint256 reserveOut,\\n    //             uint256 vReserveIn,\\n    //             uint256 vReserveOut,\\n    //             uint32 tokenWeightIn,\\n    //             uint32 tokenWeightOut,\\n    //             uint32 swapFee\\n    //         ) = getReserveAndWeights(path[i - 1], currentTokenIn);\\n    //         amounts[i - 1] = getAmountIn(amounts[i], reserveOut, reserveIn, vReserveOut, vReserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n    //         currentTokenIn = currentTokenOut;\\n    //     }\\n    //     require(currentTokenIn == tokenIn, \\\"RequiemFormula: INVALID_TOKEN_IN_PATH\\\");\\n    // }\\n\\n    // function getFactoryAmountsIn(\\n    //     address factory,\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountOut,\\n    //     address[] calldata path\\n    // ) external view override returns (uint256[] memory amounts) {\\n    //     require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n    //     amounts = new uint256[](path.length + 1);\\n    //     amounts[amounts.length - 1] = amountOut;\\n    //     address currentTokenIn = tokenOut;\\n    //     for (uint256 i = path.length; i > 0; i--) {\\n    //         (\\n    //             address currentTokenOut,\\n    //             uint256 reserveIn,\\n    //             uint256 reserveOut,\\n    //             uint256 vReserveIn,\\n    //             uint256 vReserveOut,\\n    //             uint32 tokenWeightIn,\\n    //             uint32 tokenWeightOut,\\n    //             uint32 swapFee\\n    //         ) = getFactoryReserveAndWeights(factory, path[i - 1], currentTokenIn);\\n    //         amounts[i - 1] = getAmountIn(amounts[i], reserveOut, reserveIn, vReserveOut, vReserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n    //         currentTokenIn = currentTokenOut;\\n    //     }\\n    //     require(currentTokenIn == tokenIn, \\\"RequiemFormula: INVALID_TOKEN_IN_PATH\\\");\\n    // }\\n\\n    // function getPairAmountIn(\\n    //     address pair,\\n    //     address tokenIn,\\n    //     uint256 amountOut\\n    // ) external view override returns (uint256 amountIn) {\\n    //     (, uint256 reserveIn, uint256 reserveOut, uint256 vReserveIn, uint256 vReserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getReserveAndWeights(pair, tokenIn);\\n    //     amountIn = getAmountIn(amountOut, reserveOut, reserveIn, vReserveOut, vReserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n    // }\\n\\n    function getWeightsAndSwapFee(address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        )\\n    {\\n        try IRequiemWeightedPairV2(pair).getTokenWeights() returns (uint32 _tokenWeight0, uint32 _tokenWeight1) {\\n            return (_tokenWeight0, _tokenWeight1, IRequiemWeightedPairV2(pair).getSwapFee());\\n        } catch Error(string memory reason) {\\n            revert(reason);\\n        } catch (\\n            bytes memory /*lowLevelData*/\\n        ) {\\n            return (50, 50, 30);\\n        }\\n    }\\n\\n    function getFactoryWeightsAndSwapFee(address factory, address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        )\\n    {\\n        return IRequiemWeightedPairFactoryV2(factory).getWeightsAndSwapFee(pair);\\n    }\\n\\n    // Ensure constant value reserve0^(tokenWeight0/50) * reserve1^((100 - tokenWeight0)/50) <= balance0Adjusted^(tokenWeight0/50) * balance1Adjusted^((100 - tokenWeight0)/50)\\n    //  1 <= (balance0Adjusted / reserve0 )^(tokenWeight0/50) * (balance1Adjusted/reserve1)^((100 - tokenWeight0)/50)\\n    //  (reserve0 / balance0Adjusted) ^ (tokenWeight0/50) <=  (balance1Adjusted / reserve1) ^ ((100 - tokenWeight0)/50)\\n    function ensureConstantValue(\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 balance0Adjusted,\\n        uint256 balance1Adjusted,\\n        uint32 tokenWeight0\\n    ) external view override returns (bool) {\\n        if (tokenWeight0 == 50) {\\n            return balance0Adjusted * balance1Adjusted >= reserve0 * reserve1;\\n        }\\n        if (balance0Adjusted >= reserve0 && balance1Adjusted >= reserve1) {\\n            require(false, \\\"HI1\\\");\\n            return true;\\n        }\\n        if (balance0Adjusted <= reserve0 && balance1Adjusted <= reserve1) {\\n            require(false, \\\"HI2\\\");\\n            return false;\\n        }\\n        uint32 w0 = tokenWeight0;\\n        uint32 w1 = 100 - w0;\\n\\n        uint256 r0;\\n        uint256 p0;\\n        uint256 r1;\\n        uint256 p1;\\n        if (balance0Adjusted >= reserve0) {\\n            (r0, p0) = power(reserve1, balance1Adjusted, w1, 50);\\n            (r1, p1) = power(balance0Adjusted, reserve0, w0, 50);\\n        } else {\\n            (r0, p0) = power(reserve0, balance0Adjusted, w0, 50);\\n            (r1, p1) = power(balance1Adjusted, reserve1, w1, 50);\\n        }\\n        uint256 minP = p0 < p1 ? p0 : p1;\\n        p0 = p0 - minP;\\n        p1 = p1 - minP;\\n        return (r0 >> p0) <= (r1 >> p1);\\n    }\\n\\n    function sortTokens(address tokenA, address tokenB) public pure override returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"RequiemFormula: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"RequiemFormula: ZERO_ADDRESS\\\");\\n    }\\n\\n    function getReserves(\\n        address pair,\\n        address tokenA,\\n        address tokenB\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint256 vReserveA,\\n            uint256 vReserveB\\n        )\\n    {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        IRequiemWeightedPairV2.ReserveData memory data = IRequiemWeightedPairV2(pair).getReserves();\\n        require(token0 == IRequiemWeightedPairV2(pair).token0() && token1 == IRequiemWeightedPairV2(pair).token1(), \\\"RequiemFormula: Invalid token\\\");\\n        (reserveA, reserveB, vReserveA, vReserveB) = tokenA == token0 ? (data.reserve0, data.reserve1, data.vReserve0, data.vReserve1) : (data.reserve1, data.reserve0, data.vReserve1, data.vReserve0);\\n    }\\n\\n    function getOtherToken(address pair, address tokenA) external view override returns (address tokenB) {\\n        address token0 = IRequiemWeightedPairV2(pair).token0();\\n        address token1 = IRequiemWeightedPairV2(pair).token1();\\n        require(token0 == tokenA || token1 == tokenA, \\\"RequiemFormula: Invalid tokenA\\\");\\n        tokenB = token0 == tokenA ? token1 : token0;\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure override returns (uint256 amountB) {\\n        require(amountA > 0, \\\"RequiemFormula: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    function mintLiquidityFee(\\n        uint256 totalLiquidity,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint32 tokenWeight0,\\n        uint112 collectedFee0,\\n        uint112 collectedFee1\\n    ) external view override returns (uint256 amount) {\\n        if (collectedFee0 > 0) {\\n            (uint256 r0, uint256 p0) = power(uint256(collectedFee0) + reserve0, reserve0, tokenWeight0, 100);\\n            amount = amount + ((totalLiquidity * r0) >> p0) - totalLiquidity;\\n        }\\n        if (collectedFee1 > 0) {\\n            (uint256 r1, uint256 p1) = power(uint256(collectedFee1) + reserve1, reserve1, 100 - tokenWeight0, 100);\\n            amount = amount + ((totalLiquidity * r1) >> p1) - totalLiquidity;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d7a1d727e284584c97c4dca53c070a55a2f44af80d0cb21513c020ba9825846\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemPairERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemPairERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0xd26126b87195232c895a1ceccb7f255652a775e948f72c104828178ad0f59ae6\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPairFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\ninterface IRequiemWeightedPairFactoryV2 {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function protocolFee() external view returns (uint256);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function isPair(address) external view returns (bool);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 initialFee,\\n        uint32 initialAmp\\n    ) external returns (address pair);\\n\\n    function getWeightsAndSwapFee(address pair)\\n        external\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        );\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setProtocolFee(uint256) external;\\n}\\n\",\"keccak256\":\"0xcf1e0ec2fced426f12016934acbcd1b7e86dc867f3326e4bfcf03d8e35cb1fb9\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPairV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IRequiemPairERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemWeightedPairV2 is IRequiemPairERC20 {\\n    struct ReserveData {\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 vReserve0;\\n        uint256 vReserve1;\\n    }\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1, uint112 vReserve0, uint112 vReserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (ReserveData calldata reserveData);\\n\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n    function getSwapFee() external view returns (uint32);\\n\\n    // function price0CumulativeLast() external view returns (uint256);\\n\\n    // function price1CumulativeLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function setSwapParams(uint32, uint32) external;\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address,\\n        address,\\n        uint32\\n    ) external;\\n}\\n\",\"keccak256\":\"0x40f28ca3dbf1874e4929c7eb771d4c7cc7a826ff46b401ad59a19fd847b0bede\",\"license\":\"MIT\"},\"contracts/interfaces/IWeightedFormulaV2.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.13;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IWeightedFormulaV2 {\\n    struct PricingData {\\n        uint256 reserveIn;\\n        uint256 reserveOut;\\n        uint256 vReserveIn;\\n        uint256 vReserveOut;\\n        uint32 tokenWeightIn;\\n        uint32 tokenWeightOut;\\n        uint32 swapFee;\\n    }\\n\\n    // function getReserveAndWeights(address pair, address tokenA) external view returns (PricingData calldata);\\n\\n    // function getFactoryReserveAndWeights(\\n    //     address factory,\\n    //     address pair,\\n    //     address tokenA\\n    // ) external view returns (PricingData calldata);\\n\\n    function getAmountIn(uint256 amountOut, PricingData calldata pricingData) external view returns (uint256 amountIn);\\n\\n    // function getPairAmountIn(\\n    //     address pair,\\n    //     address tokenIn,\\n    //     uint256 amountOut\\n    // ) external view returns (uint256 amountIn);\\n\\n    function getAmountOut(uint256 amountIn, PricingData calldata pricingData) external view returns (uint256 amountOut);\\n\\n    // function getPairAmountOut(\\n    //     address pair,\\n    //     address tokenIn,\\n    //     uint256 amountIn\\n    // ) external view returns (uint256 amountOut);\\n\\n    // function getAmountsIn(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountOut,\\n    //     address[] calldata path\\n    // ) external view returns (uint256[] memory amounts);\\n\\n    // function getFactoryAmountsIn(\\n    //     address factory,\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountOut,\\n    //     address[] calldata path\\n    // ) external view returns (uint256[] memory amounts);\\n\\n    // function getAmountsOut(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountIn,\\n    //     address[] calldata path\\n    // ) external view returns (uint256[] memory amounts);\\n\\n    // function getFactoryAmountsOut(\\n    //     address factory,\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountIn,\\n    //     address[] calldata path\\n    // ) external view returns (uint256[] memory amounts);\\n\\n    function ensureConstantValue(\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 balance0Adjusted,\\n        uint256 balance1Adjusted,\\n        uint32 tokenWeight0\\n    ) external view returns (bool);\\n\\n    function getReserves(\\n        address pair,\\n        address tokenA,\\n        address tokenB\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint256 vReserveA,\\n            uint256 vReserveB\\n        );\\n\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n\\n    function mintLiquidityFee(\\n        uint256 totalLiquidity,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint32 tokenWeight0,\\n        uint112 collectedFee0,\\n        uint112 collectedFee1\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xafb5dbffaa59f212c300bc7f1a7504b4bff32f0db12317497bdd9080c06736ad\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80638a91e6dc11610076578063ad615dec1161005b578063ad615dec146101df578063ca222979146101f2578063d69109371461020557600080fd5b80638a91e6dc146101b9578063a56baa91146101cc57600080fd5b8063544caa56116100a7578063544caa561461013557806379c91b37146101755780637ecece031461019857600080fd5b80632bb66e1d146100c35780633274946114610102575b600080fd5b6100d66100d1366004612c8c565b61023d565b6040805163ffffffff948516815292841660208401529216918101919091526060015b60405180910390f35b610115610110366004612cc5565b6102e2565b6040805194855260208501939093529183015260608201526080016100f9565b610148610143366004612c8c565b610588565b6040805173ffffffffffffffffffffffffffffffffffffffff9384168152929091166020830152016100f9565b610188610183366004612d22565b61070c565b60405190151581526020016100f9565b6101ab6101a6366004612d92565b6108e4565b6040519081526020016100f9565b6101ab6101c7366004612df3565b6109d4565b6101ab6101da366004612df3565b610c40565b6101ab6101ed366004612e4a565b610ecd565b6100d6610200366004612e76565b611017565b610218610213366004612c8c565b6111c3565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f9565b6040517fca22297900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152600091829182919086169063ca22297990602401606060405180830381865afa1580156102b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d59190612e93565b9250925092509250925092565b6000806000806000806102f58888610588565b9150915060008973ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036a9190612f47565b90508973ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103db9190612fd4565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480156104ae57508973ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047f9190612fd4565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b610519576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e00000060448201526064015b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614610562576020810151815160608301516040840151610574565b80516020820151604083015160608401515b929d919c509a509098509650505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610646576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5265717569656d466f726d756c613a204944454e544943414c5f41444452455360448201527f53455300000000000000000000000000000000000000000000000000000000006064820152608401610510565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610610680578284610683565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216610705576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5265717569656d466f726d756c613a205a45524f5f41444452455353000000006044820152606401610510565b9250929050565b60008163ffffffff16603203610739576107268587613020565b6107308486613020565b101590506108db565b8584101580156107495750848310155b156107b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f48493100000000000000000000000000000000000000000000000000000000006044820152606401610510565b8584111580156107c05750848311155b15610827576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f48493200000000000000000000000000000000000000000000000000000000006044820152606401610510565b81600061083582606461305d565b90506000806000808b8a10610873576108518b8a8760326113ae565b90945060ff1692506108668a8d8860326113ae565b90925060ff16905061089e565b6108808c8b8860326113ae565b90945060ff169250610895898c8760326113ae565b90925060ff1690505b60008184106108ad57816108af565b835b90506108bb8185613082565b93506108c78183613082565b9290921c9390921c92909211159450505050505b95945050505050565b60006dffffffffffffffffffffffffffff8316156109535760008061092561091c896dffffffffffffffffffffffffffff8816613099565b898860646113ae565b90925060ff16905088816109398483613020565b610944911c85613099565b61094e9190613082565b925050505b6dffffffffffffffffffffffffffff8216156109ca5760008061099c610989886dffffffffffffffffffffffffffff8716613099565b8861099589606461305d565b60646113ae565b90925060ff16905088816109b08483613020565b6109bb911c85613099565b6109c59190613082565b925050505b9695505050505050565b6000808311610a65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f494e5060448201527f55545f414d4f554e5400000000000000000000000000000000000000000000006064820152608401610510565b813515801590610a79575060008260200135115b610b05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201527f55494449545900000000000000000000000000000000000000000000000000006064820152608401610510565b6000610b1760e0840160c085016130b1565b610b239061271061305d565b610b339063ffffffff1685613020565b9050610b4560c0840160a085016130b1565b63ffffffff16610b5b60a08501608086016130b1565b63ffffffff1603610ba15780610b776040850135612710613020565b610b819190613099565b610b8f826060860135613020565b610b9991906130fd565b915050610c3a565b6000808083610bb66040880135612710613020565b610bc09190613099565b9050610bfb81610bd66040890135612710613020565b610be660a08a0160808b016130b1565b610bf660c08b0160a08c016130b1565b6113ae565b90935091506000610c10846060890135613020565b9050606087013560ff84161b84610c278284613082565b610c3191906130fd565b96505050505050505b92915050565b6000808311610cd1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4f555460448201527f5055545f414d4f554e54000000000000000000000000000000000000000000006064820152608401610510565b813515801590610ce5575060008260200135115b610d71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201527f55494449545900000000000000000000000000000000000000000000000000006064820152608401610510565b610d8160c0830160a084016130b1565b63ffffffff16610d9760a08401608085016130b1565b63ffffffff1603610e1c576000610db2846040850135613020565b610dbe90612710613020565b90506000610dd260e0850160c086016130b1565b610dde9061271061305d565b63ffffffff16610df2866060870135613082565b610dfc9190613020565b9050610e0881836130fd565b610e13906001613099565b92505050610c3a565b60008080610e2e866060870135613082565b9050610e59606086013582610e4960c0890160a08a016130b1565b610bf660a08a0160808b016130b1565b90935091506000610e706040870135612710613020565b90506000610e7e8583613020565b905060ff841682901b610e9760e0890160c08a016130b1565b610ea39061271061305d565b63ffffffff1660ff8616610eb78385613082565b610ec292911c6130fd565b610c31906001613099565b6000808411610f5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f414d4f60448201527f554e5400000000000000000000000000000000000000000000000000000000006064820152608401610510565b600083118015610f6e5750600082115b610ffa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201527f55494449545900000000000000000000000000000000000000000000000000006064820152608401610510565b826110058386613020565b61100f91906130fd565b949350505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff166332bfe4696040518163ffffffff1660e01b81526004016040805180830381865afa9250505080156110a0575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261109d91810190613111565b60015b611142576110ac613140565b806308c379a0036110ff57506110c061315c565b806110cb5750611101565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105109190613204565b505b3d80801561112b576040519150601f19603f3d011682016040523d82523d6000602084013e611130565b606091505b50603280601e935093509350506111bc565b81818773ffffffffffffffffffffffffffffffffffffffff1663d4cadf686040518163ffffffff1660e01b8152600401602060405180830381865afa15801561118f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b39190613277565b94509450945050505b9193909250565b6000808373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611211573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112359190612fd4565b905060008473ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a89190612fd4565b90508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061130f57508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e4100006044820152606401610510565b8373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461100f57816108db565b6000808486101561141b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f6e6f7420737570706f7274205f626173654e203c205f626173654400000000006044820152606401610510565b700200000000000000000000000000000000861061143857600080fd5b600080866114566f800000000000000000000000000000008a613020565b61146091906130fd565b905070015bf0a8b1457695355fb8ac404e7a79e381101561148b576114848161152b565b9150611497565b61149481611c2d565b91505b60008563ffffffff168763ffffffff16846114b29190613020565b6114bc91906130fd565b90507008000000000000000000000000000000008110156114ee576114e081611d6c565b607f94509450505050611522565b60006114f9826124ea565b905061151561150982607f613294565b60ff1683901c8261259d565b9550935061152292505050565b94509492505050565b6000808080806fd3094c70f034de4b96ff7d5b6f99fcd8861061159c576115626f4000000000000000000000000000000085613099565b93506fd3094c70f034de4b96ff7d5b6f99fcd861158f6f8000000000000000000000000000000088613020565b61159991906130fd565b95505b6fa45af1e1f40c333b3de1db4dd55f29a78610611607576115cd6f2000000000000000000000000000000085613099565b93506fa45af1e1f40c333b3de1db4dd55f29a76115fa6f8000000000000000000000000000000088613020565b61160491906130fd565b95505b6f910b022db7ae67ce76b441c27035c6a18610611672576116386f1000000000000000000000000000000085613099565b93506f910b022db7ae67ce76b441c27035c6a16116656f8000000000000000000000000000000088613020565b61166f91906130fd565b95505b6f88415abbe9a76bead8d00cf112e4d4a886106116dd576116a36f0800000000000000000000000000000085613099565b93506f88415abbe9a76bead8d00cf112e4d4a86116d06f8000000000000000000000000000000088613020565b6116da91906130fd565b95505b6f84102b00893f64c705e841d5d4064bd386106117485761170e6f0400000000000000000000000000000085613099565b93506f84102b00893f64c705e841d5d4064bd361173b6f8000000000000000000000000000000088613020565b61174591906130fd565b95505b6f8204055aaef1c8bd5c3259f4822735a286106117b3576117796f0200000000000000000000000000000085613099565b93506f8204055aaef1c8bd5c3259f4822735a26117a66f8000000000000000000000000000000088613020565b6117b091906130fd565b95505b6f810100ab00222d861931c15e39b44e99861061181e576117e46f0100000000000000000000000000000085613099565b93506f810100ab00222d861931c15e39b44e996118116f8000000000000000000000000000000088613020565b61181b91906130fd565b95505b6f808040155aabbbe9451521693554f73386106118885761184e6e80000000000000000000000000000085613099565b93506f808040155aabbbe9451521693554f73361187b6f8000000000000000000000000000000088613020565b61188591906130fd565b95505b6118a26f8000000000000000000000000000000087613082565b92508291506f800000000000000000000000000000006118c28380613020565b6118cc91906130fd565b90507001000000000000000000000000000000006118ea8482613082565b6118f49084613020565b6118fe91906130fd565b6119089085613099565b93506f800000000000000000000000000000006119258284613020565b61192f91906130fd565b915070020000000000000000000000000000000061195d846faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa613082565b6119679084613020565b61197191906130fd565b61197b9085613099565b93506f800000000000000000000000000000006119988284613020565b6119a291906130fd565b91507003000000000000000000000000000000006119d0846f99999999999999999999999999999999613082565b6119da9084613020565b6119e491906130fd565b6119ee9085613099565b93506f80000000000000000000000000000000611a0b8284613020565b611a1591906130fd565b9150700400000000000000000000000000000000611a43846f92492492492492492492492492492492613082565b611a4d9084613020565b611a5791906130fd565b611a619085613099565b93506f80000000000000000000000000000000611a7e8284613020565b611a8891906130fd565b9150700500000000000000000000000000000000611ab6846f8e38e38e38e38e38e38e38e38e38e38e613082565b611ac09084613020565b611aca91906130fd565b611ad49085613099565b93506f80000000000000000000000000000000611af18284613020565b611afb91906130fd565b9150700600000000000000000000000000000000611b29846f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b613082565b611b339084613020565b611b3d91906130fd565b611b479085613099565b93506f80000000000000000000000000000000611b648284613020565b611b6e91906130fd565b9150700700000000000000000000000000000000611b9c846f89d89d89d89d89d89d89d89d89d89d89613082565b611ba69084613020565b611bb091906130fd565b611bba9085613099565b93506f80000000000000000000000000000000611bd78284613020565b611be191906130fd565b9150700800000000000000000000000000000000611c0f846f88888888888888888888888888888888613082565b611c199084613020565b611c2391906130fd565b6109ca9085613099565b6000807001000000000000000000000000000000008310611c96576000611c6c611c676f80000000000000000000000000000000866130fd565b612bfb565b60ff811694851c94909150611c92906f8000000000000000000000000000000090613020565b9150505b6f80000000000000000000000000000000831115611d3057607f5b60ff811615611d2e576f80000000000000000000000000000000611cd58580613020565b611cdf91906130fd565b93507001000000000000000000000000000000008410611d1e57600193841c93611d099082613294565b60ff166001901b82611d1b9190613099565b91505b611d27816132b7565b9050611cb1565b505b6f05b9de1d10bf4103d647b0955897ba80611d5b6f03f80fe03f80fe03f80fe03f80fe03f883613020565b611d6591906130fd565b9392505050565b6000808080611d8b6f10000000000000000000000000000000866132f2565b91508190506f80000000000000000000000000000000611dab8280613020565b611db591906130fd565b9050611dc9816710e1b3be415a0000613020565b611dd39084613099565b92506f80000000000000000000000000000000611df08383613020565b611dfa91906130fd565b9050611e0e816705a0913f6b1e0000613020565b611e189084613099565b92506f80000000000000000000000000000000611e358383613020565b611e3f91906130fd565b9050611e5381670168244fdac78000613020565b611e5d9084613099565b92506f80000000000000000000000000000000611e7a8383613020565b611e8491906130fd565b9050611e9781664807432bc18000613020565b611ea19084613099565b92506f80000000000000000000000000000000611ebe8383613020565b611ec891906130fd565b9050611edb81660c0135dca04000613020565b611ee59084613099565b92506f80000000000000000000000000000000611f028383613020565b611f0c91906130fd565b9050611f1f816601b707b1cdc000613020565b611f299084613099565b92506f80000000000000000000000000000000611f468383613020565b611f5091906130fd565b9050611f62816536e0f639b800613020565b611f6c9084613099565b92506f80000000000000000000000000000000611f898383613020565b611f9391906130fd565b9050611fa581650618fee9f800613020565b611faf9084613099565b92506f80000000000000000000000000000000611fcc8383613020565b611fd691906130fd565b9050611fe781649c197dcc00613020565b611ff19084613099565b92506f8000000000000000000000000000000061200e8383613020565b61201891906130fd565b905061202981640e30dce400613020565b6120339084613099565b92506f800000000000000000000000000000006120508383613020565b61205a91906130fd565b905061206b8164012ebd1300613020565b6120759084613099565b92506f800000000000000000000000000000006120928383613020565b61209c91906130fd565b90506120ac816317499f00613020565b6120b69084613099565b92506f800000000000000000000000000000006120d38383613020565b6120dd91906130fd565b90506120ed816301a9d480613020565b6120f79084613099565b92506f800000000000000000000000000000006121148383613020565b61211e91906130fd565b905061212d81621c6380613020565b6121379084613099565b92506f800000000000000000000000000000006121548383613020565b61215e91906130fd565b905061216d816201c638613020565b6121779084613099565b92506f800000000000000000000000000000006121948383613020565b61219e91906130fd565b90506121ac81611ab8613020565b6121b69084613099565b92506f800000000000000000000000000000006121d38383613020565b6121dd91906130fd565b90506121eb8161017c613020565b6121f59084613099565b92506f800000000000000000000000000000006122128383613020565b61221c91906130fd565b9050612229816014613020565b6122339084613099565b92506f800000000000000000000000000000006122508383613020565b61225a91906130fd565b9050612267816001613020565b6122719084613099565b92506f80000000000000000000000000000000826122976721c3677c82b40000866130fd565b6122a19190613099565b6122ab9190613099565b92506f100000000000000000000000000000008516156122ff5770018ebef9eac820ae8682b9793ac6d1e7766122f2847001c3d6a24ed82218787d624d3e5eba95f9613020565b6122fc91906130fd565b92505b6f20000000000000000000000000000000851615612351577001368b2fc6f9609fe7aceb46aa619baed46123448470018ebef9eac820ae8682b9793ac6d1e778613020565b61234e91906130fd565b92505b6f400000000000000000000000000000008516156123a2576fbc5ab1b16779be3575bd8f0520a9f21f612395847001368b2fc6f9609fe7aceb46aa619baed5613020565b61239f91906130fd565b92505b6f800000000000000000000000000000008516156123f2576f454aaa8efe072e7f6ddbab84b40a55c96123e5846fbc5ab1b16779be3575bd8f0520a9f21e613020565b6123ef91906130fd565b92505b700100000000000000000000000000000000851615612443576f0960aadc109e7a3bf4578099615711ea612436846f454aaa8efe072e7f6ddbab84b40a55c5613020565b61244091906130fd565b92505b700200000000000000000000000000000000851615612493576e2bf84208204f5977f9a8cf01fdce3d612486846f0960aadc109e7a3bf4578099615711d7613020565b61249091906130fd565b92505b7004000000000000000000000000000000008516156124e1576d03c6ab775dd0b95b4cbee7e65d116124d4846e2bf84208204f5977f9a8cf01fdc307613020565b6124de91906130fd565b92505b50909392505050565b60006020607f5b60ff8116612500836001613306565b60ff16101561255357600060026125178385613306565b612521919061332b565b90508460008260ff166080811061253a5761253a61334d565b0154106125495780925061254d565b8091505b506124f1565b8360008260ff166080811061256a5761256a61334d565b015410612578579392505050565b8360008360ff166080811061258f5761258f61334d565b0154106100be575092915050565b6000828160ff84166125af8380613020565b901c91506125cd826f03442c4e6074a82f1797f72ac0000000613020565b6125d79082613099565b905060ff84166125e78684613020565b901c9150612605826f0116b96f757c380fb287fd0e40000000613020565b61260f9082613099565b905060ff841661261f8684613020565b901c915061263c826e45ae5bdd5f0e03eca1ff4390000000613020565b6126469082613099565b905060ff84166126568684613020565b901c9150612673826e0defabf91302cd95b9ffda50000000613020565b61267d9082613099565b905060ff841661268d8684613020565b901c91506126aa826e02529ca9832b22439efff9b8000000613020565b6126b49082613099565b905060ff84166126c48684613020565b901c91506126e0826d54f1cf12bd04e516b6da88000000613020565b6126ea9082613099565b905060ff84166126fa8684613020565b901c9150612716826d0a9e39e257a09ca2d6db51000000613020565b6127209082613099565b905060ff84166127308684613020565b901c915061274c826d012e066e7b839fa050c309000000613020565b6127569082613099565b905060ff84166127668684613020565b901c9150612781826c1e33d7d926c329a1ad1a800000613020565b61278b9082613099565b905060ff841661279b8684613020565b901c91506127b6826c02bee513bdb4a6b19b5f800000613020565b6127c09082613099565b905060ff84166127d08684613020565b901c91506127ea826b3a9316fa79b88eccf2a00000613020565b6127f49082613099565b905060ff84166128048684613020565b901c915061281e826b048177ebe1fa812375200000613020565b6128289082613099565b905060ff84166128388684613020565b901c9150612851826a5263fe90242dcbacf00000613020565b61285b9082613099565b905060ff841661286b8684613020565b901c9150612884826a057e22099c030d94100000613020565b61288e9082613099565b905060ff841661289e8684613020565b901c91506128b6826957e22099c030d9410000613020565b6128c09082613099565b905060ff84166128d08684613020565b901c91506128e88269052b6b54569976310000613020565b6128f29082613099565b905060ff84166129028684613020565b901c915061291982684985f67696bf748000613020565b6129239082613099565b905060ff84166129338684613020565b901c915061294a826803dea12ea99e498000613020565b6129549082613099565b905060ff84166129648684613020565b901c915061297a826731880f2214b6e000613020565b6129849082613099565b905060ff84166129948684613020565b901c91506129aa8267025bcff56eb36000613020565b6129b49082613099565b905060ff84166129c48684613020565b901c91506129d982661b722e10ab1000613020565b6129e39082613099565b905060ff84166129f38684613020565b901c9150612a08826601317c70077000613020565b612a129082613099565b905060ff8416612a228684613020565b901c9150612a3682650cba84aafa00613020565b612a409082613099565b905060ff8416612a508684613020565b901c9150612a63826482573a0a00613020565b612a6d9082613099565b905060ff8416612a7d8684613020565b901c9150612a90826405035ad900613020565b612a9a9082613099565b905060ff8416612aaa8684613020565b901c9150612abc82632f881b00613020565b612ac69082613099565b905060ff8416612ad68684613020565b901c9150612ae8826301b29340613020565b612af29082613099565b905060ff8416612b028684613020565b901c9150612b1382620efc40613020565b612b1d9082613099565b905060ff8416612b2d8684613020565b901c9150612b3d82617fe0613020565b612b479082613099565b905060ff8416612b578684613020565b901c9150612b6782610420613020565b612b719082613099565b905060ff8416612b818684613020565b901c9150612b90826021613020565b612b9a9082613099565b905060ff8416612baa8684613020565b901c9150612bb9826001613020565b612bc39082613099565b9050600160ff85161b85612be76f0688589cc0e9505e2f2fee5580000000846130fd565b612bf19190613099565b6108db9190613099565b600080610100831015612c2e575b6001831115612c2957600192831c92612c229082613306565b9050612c09565b610c3a565b60805b60ff811615612c6057600160ff82161b8410612c555760ff81169390931c92908117905b60011c607f16612c31565b5092915050565b73ffffffffffffffffffffffffffffffffffffffff81168114612c8957600080fd5b50565b60008060408385031215612c9f57600080fd5b8235612caa81612c67565b91506020830135612cba81612c67565b809150509250929050565b600080600060608486031215612cda57600080fd5b8335612ce581612c67565b92506020840135612cf581612c67565b91506040840135612d0581612c67565b809150509250925092565b63ffffffff81168114612c8957600080fd5b600080600080600060a08688031215612d3a57600080fd5b853594506020860135935060408601359250606086013591506080860135612d6181612d10565b809150509295509295909350565b80356dffffffffffffffffffffffffffff81168114612d8d57600080fd5b919050565b60008060008060008060c08789031215612dab57600080fd5b8635955060208701359450604087013593506060870135612dcb81612d10565b9250612dd960808801612d6f565b9150612de760a08801612d6f565b90509295509295509295565b600080828403610100811215612e0857600080fd5b8335925060e07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082011215612e3c57600080fd5b506020830190509250929050565b600080600060608486031215612e5f57600080fd5b505081359360208301359350604090920135919050565b600060208284031215612e8857600080fd5b8135611d6581612c67565b600080600060608486031215612ea857600080fd5b8351612eb381612d10565b6020850151909350612ec481612d10565b6040850151909250612d0581612d10565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff82111715612f40577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040525050565b600060808284031215612f5957600080fd5b6040516080810181811067ffffffffffffffff82111715612fa3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b600060208284031215612fe657600080fd5b8151611d6581612c67565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561305857613058612ff1565b500290565b600063ffffffff8381169083168181101561307a5761307a612ff1565b039392505050565b60008282101561309457613094612ff1565b500390565b600082198211156130ac576130ac612ff1565b500190565b6000602082840312156130c357600080fd5b8135611d6581612d10565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261310c5761310c6130ce565b500490565b6000806040838503121561312457600080fd5b825161312f81612d10565b6020840151909250612cba81612d10565b600060033d11156131595760046000803e5060005160e01c5b90565b600060443d101561316a5790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff81602484011181841117156131b857505050505090565b82850191508151818111156131d05750505050505090565b843d87010160208285010111156131ea5750505050505090565b6131f960208286010187612ed5565b509095945050505050565b600060208083528351808285015260005b8181101561323157858101830151858201604001528201613215565b81811115613243576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60006020828403121561328957600080fd5b8151611d6581612d10565b600060ff821660ff8416808210156132ae576132ae612ff1565b90039392505050565b600060ff8216806132ca576132ca612ff1565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600082613301576133016130ce565b500690565b600060ff821660ff84168060ff0382111561332357613323612ff1565b019392505050565b600060ff83168061333e5761333e6130ce565b8060ff84160491505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212206e871f173f457e8b7a69a95d895f606f22e554862c5fec4daa896aa9c367267f64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAmountIn(uint256,(uint256,uint256,uint256,uint256,uint32,uint32,uint32))": {
        "details": "given an output amount of an asset and pair reserves, returns a required input amount of the other asset Formula: return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)",
        "params": {
          "amountOut": "target reserve amount  reserveIn    source reserve balance  reserveOut    target reserve balance  tokenWeightIn     source reserve weight, represented in ppm (2-98)  tokenWeightOut     target reserve weight, represented in ppm (2-98)  swapFee                  swap fee of the conversion"
        },
        "returns": {
          "amountIn": "amountIn"
        }
      },
      "getAmountOut(uint256,(uint256,uint256,uint256,uint256,uint32,uint32,uint32))": {
        "details": "given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset, Formula: return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))",
        "params": {
          "amountIn": "source reserve amount  reserveIn    source reserve balance  reserveOut    target reserve balance  tokenWeightIn     source reserve weight, represented in ppm (2-98)  tokenWeightOut     target reserve weight, represented in ppm (2-98)  swapFee                  swap fee of the conversion"
        },
        "returns": {
          "amountOut": "amountOut"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 28748,
        "contract": "contracts/WeightedFormulaV2.sol:WeightedFormulaV2",
        "label": "maxExpArray",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)128_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)128_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[128]",
        "numberOfBytes": "4096"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}