{
  "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserve0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserve1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance0Adjusted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance1Adjusted",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        }
      ],
      "name": "ensureConstantValue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightIn",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightOut",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightIn",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightOut",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getFactoryAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getFactoryAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getFactoryParameters",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightB",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getFactoryStaticData",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "amp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getOtherToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "getPairAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getPairAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getPairParameters",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightB",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getPairStaticData",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "amp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vReserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vReserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserve0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserve1",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint112",
          "name": "collectedFee0",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "collectedFee1",
          "type": "uint112"
        }
      ],
      "name": "mintLiquidityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "sortTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xc26861c426304722614de79bf0dc91787d1840de8da46cc1d23c027448e44d54",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
    "transactionIndex": 0,
    "gasUsed": "5885184",
    "logsBloom": "0x
    "blockHash": "0x07ce5c6dda1278540a8f94c94d9ca41dc0c3475c7024010e29379881271504f5",
    "transactionHash": "0xc26861c426304722614de79bf0dc91787d1840de8da46cc1d23c027448e44d54",
    "logs": [],
    "blockNumber": 10,
    "cumulativeGasUsed": "5885184",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9c15a78ba09b8f1198a45058df526d4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance0Adjusted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance1Adjusted\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"}],\"name\":\"ensureConstantValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightIn\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightOut\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightIn\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightOut\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getFactoryAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getFactoryAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getFactoryParameters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getFactoryStaticData\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getOtherToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getPairAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getPairAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getPairParameters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getPairStaticData\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vReserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vReserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"collectedFee0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"collectedFee1\",\"type\":\"uint112\"}],\"name\":\"mintLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAmountIn(uint256,uint256,uint256,uint32,uint32,uint32)\":{\"params\":{\"amountOut\":\"target reserve amount    contains the following inputs:  reserveIn       source reserve balance  reserveOut      target reserve balance  tokenWeightIn   source reserve weight, represented in ppm (2-98)  tokenWeightOut  target reserve weight, represented in ppm (2-98)  swapFee         swap fee of the conversion\"},\"returns\":{\"amountIn\":\"amountIn\"}},\"getAmountOut(uint256,uint256,uint256,uint32,uint32,uint32)\":{\"params\":{\"amountIn\":\"source reserve amount    contains the following inputs:  reserveIn       source reserve balance  reserveOut      target reserve balance  tokenWeightIn   source reserve weight, represented in ppm (2-98)  tokenWeightOut  target reserve weight, represented in ppm (2-98)  swapFee         swap fee of the conversion\"},\"returns\":{\"amountOut\":\"amountOut\"}},\"mintLiquidityFee(uint256,uint256,uint256,uint32,uint32,uint112,uint112)\":{\"params\":{\"collectedFee0\":\"fees collected of token0\",\"collectedFee1\":\"fees collected of token1\",\"reserve0\":\"reserve of token0\",\"reserve1\":\"reserve of token1\",\"tokenWeight0\":\"weight of token0\",\"tokenWeight1\":\"weight of token1\",\"totalLiquidity\":\"total LP liquidity\"},\"returns\":{\"amount\":\"fee amount\"}},\"quote(uint256,uint256,uint256)\":{\"params\":{\"amountA\":\"token A amount\",\"reserveA\":\"reserve of token A\",\"reserveB\":\"reserve of token B\"},\"returns\":{\"amountB\":\"amount of token B required to consume all of amount A for LPs\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ensureConstantValue(uint256,uint256,uint256,uint256,uint32)\":{\"notice\":\"Ensure constant value reserve0^(tokenWeight0/50) * reserve1^((100 - tokenWeight0)/50) <= balance0Adjusted^(tokenWeight0/50) * balance1Adjusted^((100 - tokenWeight0)/50) or  1 <= (balance0Adjusted / reserve0 )^(tokenWeight0/50) * (balance1Adjusted/reserve1)^((100 - tokenWeight0)/50) or  (reserve0 / balance0Adjusted) ^ (tokenWeight0/50) <=  (balance1Adjusted / reserve1) ^ ((100 - tokenWeight0)/50)\"},\"getAmountIn(uint256,uint256,uint256,uint32,uint32,uint32)\":{\"notice\":\"given an output amount of an asset and pair reserves, returns a required input amount of the other asset Formula: return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\"},\"getAmountOut(uint256,uint256,uint256,uint32,uint32,uint32)\":{\"notice\":\"given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset, Formula: return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\"},\"mintLiquidityFee(uint256,uint256,uint256,uint32,uint32,uint112,uint112)\":{\"notice\":\"Calculates the fee to be sent to the protocol\"},\"quote(uint256,uint256,uint256)\":{\"notice\":\"Given some amount of an asset and pair reserves, returns an equivalent amount of required amount of the other asset for LP\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WeightedFormulaV2.sol\":\"WeightedFormulaV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999999},\"remappings\":[]},\"sources\":{\"contracts/WeightedFormulaV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./interfaces/IWeightedFormulaV2.sol\\\";\\nimport \\\"./interfaces/IRequiemWeightedPairV2.sol\\\";\\nimport \\\"./interfaces/IRequiemWeightedPairFactoryV2.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string, no-unused-vars\\n\\ncontract WeightedFormulaV2 is IWeightedFormulaV2 {\\n    uint256 private constant ONE = 1;\\n    uint8 private constant MIN_PRECISION = 32;\\n    uint8 private constant MAX_PRECISION = 127;\\n\\n    uint256 private constant FIXED_1 = 0x080000000000000000000000000000000;\\n    uint256 private constant FIXED_2 = 0x100000000000000000000000000000000;\\n    uint256 private constant MAX_NUM = 0x200000000000000000000000000000000;\\n\\n    uint256 private constant LN2_NUMERATOR = 0x3f80fe03f80fe03f80fe03f80fe03f8;\\n    uint256 private constant LN2_DENOMINATOR = 0x5b9de1d10bf4103d647b0955897ba80;\\n\\n    uint256 private constant OPT_LOG_MAX_VAL = 0x15bf0a8b1457695355fb8ac404e7a79e3;\\n    uint256 private constant OPT_EXP_MAX_VAL = 0x800000000000000000000000000000000;\\n\\n    uint256 private constant LAMBERT_CONV_RADIUS = 0x002f16ac6c59de6f8d5d6f63c1482a7c86;\\n    uint256 private constant LAMBERT_POS2_SAMPLE = 0x0003060c183060c183060c183060c18306;\\n    uint256 private constant LAMBERT_POS2_MAXVAL = 0x01af16ac6c59de6f8d5d6f63c1482a7c80;\\n    uint256 private constant LAMBERT_POS3_MAXVAL = 0x6b22d43e72c326539cceeef8bb48f255ff;\\n\\n    uint256 private constant MAX_UNF_WEIGHT = 0x10c6f7a0b5ed8d36b4c7f34938583621fafc8b0079a2834d26fa3fcc9ea9;\\n\\n    uint256[128] private maxExpArray;\\n\\n    function initMaxExpArray() internal {\\n        maxExpArray[32] = 0x1c35fedd14ffffffffffffffffffffffff;\\n        maxExpArray[33] = 0x1b0ce43b323fffffffffffffffffffffff;\\n        maxExpArray[34] = 0x19f0028ec1ffffffffffffffffffffffff;\\n        maxExpArray[35] = 0x18ded91f0e7fffffffffffffffffffffff;\\n        maxExpArray[36] = 0x17d8ec7f0417ffffffffffffffffffffff;\\n        maxExpArray[37] = 0x16ddc6556cdbffffffffffffffffffffff;\\n        maxExpArray[38] = 0x15ecf52776a1ffffffffffffffffffffff;\\n        maxExpArray[39] = 0x15060c256cb2ffffffffffffffffffffff;\\n        maxExpArray[40] = 0x1428a2f98d72ffffffffffffffffffffff;\\n        maxExpArray[41] = 0x13545598e5c23fffffffffffffffffffff;\\n        maxExpArray[42] = 0x1288c4161ce1dfffffffffffffffffffff;\\n        maxExpArray[43] = 0x11c592761c666fffffffffffffffffffff;\\n        maxExpArray[44] = 0x110a688680a757ffffffffffffffffffff;\\n        maxExpArray[45] = 0x1056f1b5bedf77ffffffffffffffffffff;\\n        maxExpArray[46] = 0x0faadceceeff8bffffffffffffffffffff;\\n        maxExpArray[47] = 0x0f05dc6b27edadffffffffffffffffffff;\\n        maxExpArray[48] = 0x0e67a5a25da4107fffffffffffffffffff;\\n        maxExpArray[49] = 0x0dcff115b14eedffffffffffffffffffff;\\n        maxExpArray[50] = 0x0d3e7a392431239fffffffffffffffffff;\\n        maxExpArray[51] = 0x0cb2ff529eb71e4fffffffffffffffffff;\\n        maxExpArray[52] = 0x0c2d415c3db974afffffffffffffffffff;\\n        maxExpArray[53] = 0x0bad03e7d883f69bffffffffffffffffff;\\n        maxExpArray[54] = 0x0b320d03b2c343d5ffffffffffffffffff;\\n        maxExpArray[55] = 0x0abc25204e02828dffffffffffffffffff;\\n        maxExpArray[56] = 0x0a4b16f74ee4bb207fffffffffffffffff;\\n        maxExpArray[57] = 0x09deaf736ac1f569ffffffffffffffffff;\\n        maxExpArray[58] = 0x0976bd9952c7aa957fffffffffffffffff;\\n        maxExpArray[59] = 0x09131271922eaa606fffffffffffffffff;\\n        maxExpArray[60] = 0x08b380f3558668c46fffffffffffffffff;\\n        maxExpArray[61] = 0x0857ddf0117efa215bffffffffffffffff;\\n        maxExpArray[62] = 0x07ffffffffffffffffffffffffffffffff;\\n        maxExpArray[63] = 0x07abbf6f6abb9d087fffffffffffffffff;\\n        maxExpArray[64] = 0x075af62cbac95f7dfa7fffffffffffffff;\\n        maxExpArray[65] = 0x070d7fb7452e187ac13fffffffffffffff;\\n        maxExpArray[66] = 0x06c3390ecc8af379295fffffffffffffff;\\n        maxExpArray[67] = 0x067c00a3b07ffc01fd6fffffffffffffff;\\n        maxExpArray[68] = 0x0637b647c39cbb9d3d27ffffffffffffff;\\n        maxExpArray[69] = 0x05f63b1fc104dbd39587ffffffffffffff;\\n        maxExpArray[70] = 0x05b771955b36e12f7235ffffffffffffff;\\n        maxExpArray[71] = 0x057b3d49dda84556d6f6ffffffffffffff;\\n        maxExpArray[72] = 0x054183095b2c8ececf30ffffffffffffff;\\n        maxExpArray[73] = 0x050a28be635ca2b888f77fffffffffffff;\\n        maxExpArray[74] = 0x04d5156639708c9db33c3fffffffffffff;\\n        maxExpArray[75] = 0x04a23105873875bd52dfdfffffffffffff;\\n        maxExpArray[76] = 0x0471649d87199aa990756fffffffffffff;\\n        maxExpArray[77] = 0x04429a21a029d4c1457cfbffffffffffff;\\n        maxExpArray[78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff;\\n        maxExpArray[79] = 0x03eab73b3bbfe282243ce1ffffffffffff;\\n        maxExpArray[80] = 0x03c1771ac9fb6b4c18e229ffffffffffff;\\n        maxExpArray[81] = 0x0399e96897690418f785257fffffffffff;\\n        maxExpArray[82] = 0x0373fc456c53bb779bf0ea9fffffffffff;\\n        maxExpArray[83] = 0x034f9e8e490c48e67e6ab8bfffffffffff;\\n        maxExpArray[84] = 0x032cbfd4a7adc790560b3337ffffffffff;\\n        maxExpArray[85] = 0x030b50570f6e5d2acca94613ffffffffff;\\n        maxExpArray[86] = 0x02eb40f9f620fda6b56c2861ffffffffff;\\n        maxExpArray[87] = 0x02cc8340ecb0d0f520a6af58ffffffffff;\\n        maxExpArray[88] = 0x02af09481380a0a35cf1ba02ffffffffff;\\n        maxExpArray[89] = 0x0292c5bdd3b92ec810287b1b3fffffffff;\\n        maxExpArray[90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff;\\n        maxExpArray[91] = 0x025daf6654b1eaa55fd64df5efffffffff;\\n        maxExpArray[92] = 0x0244c49c648baa98192dce88b7ffffffff;\\n        maxExpArray[93] = 0x022ce03cd5619a311b2471268bffffffff;\\n        maxExpArray[94] = 0x0215f77c045fbe885654a44a0fffffffff;\\n        maxExpArray[95] = 0x01ffffffffffffffffffffffffffffffff;\\n        maxExpArray[96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff;\\n        maxExpArray[97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff;\\n        maxExpArray[98] = 0x01c35fedd14b861eb0443f7f133fffffff;\\n        maxExpArray[99] = 0x01b0ce43b322bcde4a56e8ada5afffffff;\\n        maxExpArray[100] = 0x019f0028ec1fff007f5a195a39dfffffff;\\n        maxExpArray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff;\\n        maxExpArray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff;\\n        maxExpArray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff;\\n        maxExpArray[104] = 0x015ecf52776a1155b5bd8395814f7fffff;\\n        maxExpArray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff;\\n        maxExpArray[106] = 0x01428a2f98d728ae223ddab715be3fffff;\\n        maxExpArray[107] = 0x013545598e5c23276ccf0ede68034fffff;\\n        maxExpArray[108] = 0x01288c4161ce1d6f54b7f61081194fffff;\\n        maxExpArray[109] = 0x011c592761c666aa641d5a01a40f17ffff;\\n        maxExpArray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff;\\n        maxExpArray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff;\\n        maxExpArray[112] = 0x00faadceceeff8a0890f3875f008277fff;\\n        maxExpArray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff;\\n        maxExpArray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff;\\n        maxExpArray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff;\\n        maxExpArray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff;\\n        maxExpArray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff;\\n        maxExpArray[118] = 0x00c2d415c3db974ab32a51840c0b67edff;\\n        maxExpArray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff;\\n        maxExpArray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff;\\n        maxExpArray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf;\\n        maxExpArray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df;\\n        maxExpArray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f;\\n        maxExpArray[124] = 0x00976bd9952c7aa957f5937d790ef65037;\\n        maxExpArray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf;\\n        maxExpArray[126] = 0x008b380f3558668c46c91c49a2f8e967b9;\\n        maxExpArray[127] = 0x00857ddf0117efa215952912839f6473e6;\\n    }\\n\\n    constructor() {\\n        initMaxExpArray();\\n    }\\n\\n    /**\\n     * @dev General Description:\\n     *     Determine a value of precision.\\n     *     Calculate an integer approximation of (_baseN / _baseD) ^ (_expN / _expD) * 2 ^ precision.\\n     *     Return the result along with the precision used.\\n     *\\n     * Detailed Description:\\n     *     Instead of calculating \\\"base ^ exp\\\", we calculate \\\"e ^ (log(base) * exp)\\\".\\n     *     The value of \\\"log(base)\\\" is represented with an integer slightly smaller than \\\"log(base) * 2 ^ precision\\\".\\n     *     The larger \\\"precision\\\" is, the more accurately this value represents the real value.\\n     *     However, the larger \\\"precision\\\" is, the more bits are required in order to store this value.\\n     *     And the exponentiation function, which takes \\\"x\\\" and calculates \\\"e ^ x\\\", is limited to a maximum exponent (maximum value of \\\"x\\\").\\n     *     This maximum exponent depends on the \\\"precision\\\" used, and it is given by \\\"maxExpArray[precision] >> (MAX_PRECISION - precision)\\\".\\n     *     Hence we need to determine the highest precision which can be used for the given input, before calling the exponentiation function.\\n     *     This allows us to compute \\\"base ^ exp\\\" with maximum accuracy and without exceeding 256 bits in any of the intermediate computations.\\n     *     This functions assumes that \\\"_expN < 2 ^ 256 / log(MAX_NUM - 1)\\\", otherwise the multiplication should be replaced with a \\\"safeMul\\\".\\n     *     Since we rely on unsigned-integer arithmetic and \\\"base < 1\\\" ==> \\\"log(base) < 0\\\", this function does not support \\\"_baseN < _baseD\\\".\\n     */\\n    function power(\\n        uint256 _baseN,\\n        uint256 _baseD,\\n        uint32 _expN,\\n        uint32 _expD\\n    ) internal view returns (uint256, uint8) {\\n        require(_baseN >= _baseD, \\\"_baseN < _baseD\\\");\\n        require(_baseN < MAX_NUM);\\n\\n        uint256 baseLog;\\n        uint256 base = (_baseN * FIXED_1) / _baseD;\\n        if (base < OPT_LOG_MAX_VAL) {\\n            baseLog = optimalLog(base);\\n        } else {\\n            baseLog = generalLog(base);\\n        }\\n\\n        uint256 baseLogTimesExp = (baseLog * _expN) / _expD;\\n        if (baseLogTimesExp < OPT_EXP_MAX_VAL) {\\n            return (optimalExp(baseLogTimesExp), MAX_PRECISION);\\n        } else {\\n            uint8 precision = findPositionInMaxExpArray(baseLogTimesExp);\\n            return (generalExp(baseLogTimesExp >> (MAX_PRECISION - precision), precision), precision);\\n        }\\n    }\\n\\n    /**\\n     * @dev power function using expD = 50\\n     */\\n    function powerD(\\n        uint256 _baseN,\\n        uint256 _baseD,\\n        uint32 _expN\\n    ) internal view returns (uint256, uint8) {\\n        require(_baseN >= _baseD, \\\"_baseN < _baseD\\\");\\n        require(_baseN < MAX_NUM);\\n\\n        uint256 baseLog;\\n        uint256 base = (_baseN * FIXED_1) / _baseD;\\n        if (base < OPT_LOG_MAX_VAL) {\\n            baseLog = optimalLog(base);\\n        } else {\\n            baseLog = generalLog(base);\\n        }\\n\\n        uint256 baseLogTimesExp = (baseLog * _expN) / 50;\\n        if (baseLogTimesExp < OPT_EXP_MAX_VAL) {\\n            return (optimalExp(baseLogTimesExp), MAX_PRECISION);\\n        } else {\\n            uint8 precision = findPositionInMaxExpArray(baseLogTimesExp);\\n            return (generalExp(baseLogTimesExp >> (MAX_PRECISION - precision), precision), precision);\\n        }\\n    }\\n\\n    /**\\n     * @dev computes log(x / FIXED_1) * FIXED_1.\\n     * This functions assumes that \\\"x >= FIXED_1\\\", because the output would be negative otherwise.\\n     */\\n    function generalLog(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\\n        if (x >= FIXED_2) {\\n            uint8 count = floorLog2(x / FIXED_1);\\n            x >>= count;\\n            // now x < 2\\n            res = count * FIXED_1;\\n        }\\n\\n        // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\\n        if (x > FIXED_1) {\\n            for (uint8 i = MAX_PRECISION; i > 0; --i) {\\n                x = (x * x) / FIXED_1;\\n                // now 1 < x < 4\\n                if (x >= FIXED_2) {\\n                    x >>= 1;\\n                    // now 1 < x < 2\\n                    res += ONE << (i - 1);\\n                }\\n            }\\n        }\\n\\n        return (res * LN2_NUMERATOR) / LN2_DENOMINATOR;\\n    }\\n\\n    /**\\n     * @dev computes the largest integer smaller than or equal to the binary logarithm of the input.\\n     */\\n    function floorLog2(uint256 _n) internal pure returns (uint8) {\\n        uint8 res = 0;\\n\\n        if (_n < 256) {\\n            // At most 8 iterations\\n            while (_n > 1) {\\n                _n >>= 1;\\n                res += 1;\\n            }\\n        } else {\\n            // Exactly 8 iterations\\n            for (uint8 s = 128; s > 0; s >>= 1) {\\n                if (_n >= (ONE << s)) {\\n                    _n >>= s;\\n                    res |= s;\\n                }\\n            }\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * @dev the global \\\"maxExpArray\\\" is sorted in descending order, and therefore the following statements are equivalent:\\n     * - This function finds the position of [the smallest value in \\\"maxExpArray\\\" larger than or equal to \\\"x\\\"]\\n     * - This function finds the highest position of [a value in \\\"maxExpArray\\\" larger than or equal to \\\"x\\\"]\\n     */\\n    function findPositionInMaxExpArray(uint256 _x) internal view returns (uint8) {\\n        uint8 lo = MIN_PRECISION;\\n        uint8 hi = MAX_PRECISION;\\n\\n        while (lo + 1 < hi) {\\n            uint8 mid = (lo + hi) / 2;\\n            if (maxExpArray[mid] >= _x) lo = mid;\\n            else hi = mid;\\n        }\\n\\n        if (maxExpArray[hi] >= _x) return hi;\\n        if (maxExpArray[lo] >= _x) return lo;\\n\\n        require(false);\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev this function can be auto-generated by the script \\\"PrintFunctionGeneralExp.py\\\".\\n     * it approximates \\\"e ^ x\\\" via maclaurin summation: \\\"(x^0)/0! + (x^1)/1! + ... + (x^n)/n!\\\".\\n     * it returns \\\"e ^ (x / 2 ^ precision) * 2 ^ precision\\\", that is, the result is upshifted for accuracy.\\n     * the global \\\"maxExpArray\\\" maps each \\\"precision\\\" to \\\"((maximumExponent + 1) << (MAX_PRECISION - precision)) - 1\\\".\\n     * the maximum permitted value for \\\"x\\\" is therefore given by \\\"maxExpArray[precision] >> (MAX_PRECISION - precision)\\\".\\n     */\\n    function generalExp(uint256 _x, uint8 _precision) internal pure returns (uint256) {\\n        uint256 xi = _x;\\n        uint256 res = 0;\\n\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x3442c4e6074a82f1797f72ac0000000;\\n        // add x^02 * (33! / 02!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x116b96f757c380fb287fd0e40000000;\\n        // add x^03 * (33! / 03!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x045ae5bdd5f0e03eca1ff4390000000;\\n        // add x^04 * (33! / 04!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00defabf91302cd95b9ffda50000000;\\n        // add x^05 * (33! / 05!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x002529ca9832b22439efff9b8000000;\\n        // add x^06 * (33! / 06!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00054f1cf12bd04e516b6da88000000;\\n        // add x^07 * (33! / 07!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000a9e39e257a09ca2d6db51000000;\\n        // add x^08 * (33! / 08!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000012e066e7b839fa050c309000000;\\n        // add x^09 * (33! / 09!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000001e33d7d926c329a1ad1a800000;\\n        // add x^10 * (33! / 10!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000002bee513bdb4a6b19b5f800000;\\n        // add x^11 * (33! / 11!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000003a9316fa79b88eccf2a00000;\\n        // add x^12 * (33! / 12!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000048177ebe1fa812375200000;\\n        // add x^13 * (33! / 13!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000005263fe90242dcbacf00000;\\n        // add x^14 * (33! / 14!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000057e22099c030d94100000;\\n        // add x^15 * (33! / 15!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000057e22099c030d9410000;\\n        // add x^16 * (33! / 16!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000052b6b54569976310000;\\n        // add x^17 * (33! / 17!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000004985f67696bf748000;\\n        // add x^18 * (33! / 18!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000003dea12ea99e498000;\\n        // add x^19 * (33! / 19!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000031880f2214b6e000;\\n        // add x^20 * (33! / 20!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000025bcff56eb36000;\\n        // add x^21 * (33! / 21!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000001b722e10ab1000;\\n        // add x^22 * (33! / 22!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000001317c70077000;\\n        // add x^23 * (33! / 23!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000cba84aafa00;\\n        // add x^24 * (33! / 24!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000082573a0a00;\\n        // add x^25 * (33! / 25!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000005035ad900;\\n        // add x^26 * (33! / 26!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000000000002f881b00;\\n        // add x^27 * (33! / 27!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000001b29340;\\n        // add x^28 * (33! / 28!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000000000efc40;\\n        // add x^29 * (33! / 29!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000007fe0;\\n        // add x^30 * (33! / 30!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000420;\\n        // add x^31 * (33! / 31!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000021;\\n        // add x^32 * (33! / 32!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000001;\\n        // add x^33 * (33! / 33!)\\n\\n        return res / 0x688589cc0e9505e2f2fee5580000000 + _x + (ONE << _precision);\\n        // divide by 33! and then add x^1 / 1! + x^0 / 0!\\n    }\\n\\n    /**\\n     * @dev computes log(x / FIXED_1) * FIXED_1\\n     * Input range: FIXED_1 <= x <= OPT_LOG_MAX_VAL - 1\\n     * Auto-generated via \\\"PrintFunctionOptimalLog.py\\\"\\n     * Detailed description:\\n     * - Rewrite the input as a product of natural exponents and a single residual r, such that 1 < r < 2\\n     * - The natural logarithm of each (pre-calculated) exponent is the degree of the exponent\\n     * - The natural logarithm of r is calculated via Taylor series for log(1 + x), where x = r - 1\\n     * - The natural logarithm of the input is calculated by summing up the intermediate results above\\n     * - For example: log(250) = log(e^4 * e^1 * e^0.5 * 1.021692859) = 4 + 1 + 0.5 + log(1 + 0.021692859)\\n     */\\n    function optimalLog(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        uint256 y;\\n        uint256 z;\\n        uint256 w;\\n\\n        if (x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8) {\\n            res += 0x40000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0xd3094c70f034de4b96ff7d5b6f99fcd8;\\n        }\\n        // add 1 / 2^1\\n        if (x >= 0xa45af1e1f40c333b3de1db4dd55f29a7) {\\n            res += 0x20000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0xa45af1e1f40c333b3de1db4dd55f29a7;\\n        }\\n        // add 1 / 2^2\\n        if (x >= 0x910b022db7ae67ce76b441c27035c6a1) {\\n            res += 0x10000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x910b022db7ae67ce76b441c27035c6a1;\\n        }\\n        // add 1 / 2^3\\n        if (x >= 0x88415abbe9a76bead8d00cf112e4d4a8) {\\n            res += 0x08000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x88415abbe9a76bead8d00cf112e4d4a8;\\n        }\\n        // add 1 / 2^4\\n        if (x >= 0x84102b00893f64c705e841d5d4064bd3) {\\n            res += 0x04000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x84102b00893f64c705e841d5d4064bd3;\\n        }\\n        // add 1 / 2^5\\n        if (x >= 0x8204055aaef1c8bd5c3259f4822735a2) {\\n            res += 0x02000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x8204055aaef1c8bd5c3259f4822735a2;\\n        }\\n        // add 1 / 2^6\\n        if (x >= 0x810100ab00222d861931c15e39b44e99) {\\n            res += 0x01000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x810100ab00222d861931c15e39b44e99;\\n        }\\n        // add 1 / 2^7\\n        if (x >= 0x808040155aabbbe9451521693554f733) {\\n            res += 0x00800000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x808040155aabbbe9451521693554f733;\\n        }\\n        // add 1 / 2^8\\n\\n        z = y = x - FIXED_1;\\n        w = (y * y) / FIXED_1;\\n        res += (z * (0x100000000000000000000000000000000 - y)) / 0x100000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^01 / 01 - y^02 / 02\\n        res += (z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y)) / 0x200000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^03 / 03 - y^04 / 04\\n        res += (z * (0x099999999999999999999999999999999 - y)) / 0x300000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^05 / 05 - y^06 / 06\\n        res += (z * (0x092492492492492492492492492492492 - y)) / 0x400000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^07 / 07 - y^08 / 08\\n        res += (z * (0x08e38e38e38e38e38e38e38e38e38e38e - y)) / 0x500000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^09 / 09 - y^10 / 10\\n        res += (z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y)) / 0x600000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^11 / 11 - y^12 / 12\\n        res += (z * (0x089d89d89d89d89d89d89d89d89d89d89 - y)) / 0x700000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^13 / 13 - y^14 / 14\\n        res += (z * (0x088888888888888888888888888888888 - y)) / 0x800000000000000000000000000000000;\\n        // add y^15 / 15 - y^16 / 16\\n\\n        return res;\\n    }\\n\\n    /**\\n     * @dev computes e ^ (x / FIXED_1) * FIXED_1\\n     * input range: 0 <= x <= OPT_EXP_MAX_VAL - 1\\n     * auto-generated via \\\"PrintFunctionOptimalExp.py\\\"\\n     * Detailed description:\\n     * - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\\n     * - The exponentiation of each binary exponent is given (pre-calculated)\\n     * - The exponentiation of r is calculated via Taylor series for e^x, where x = r\\n     * - The exponentiation of the input is calculated by multiplying the intermediate results above\\n     * - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\\n     */\\n    function optimalExp(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        uint256 y;\\n        uint256 z;\\n\\n        z = y = x % 0x10000000000000000000000000000000;\\n        // get the input modulo 2^(-3)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x10e1b3be415a0000;\\n        // add y^02 * (20! / 02!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x05a0913f6b1e0000;\\n        // add y^03 * (20! / 03!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0168244fdac78000;\\n        // add y^04 * (20! / 04!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x004807432bc18000;\\n        // add y^05 * (20! / 05!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000c0135dca04000;\\n        // add y^06 * (20! / 06!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0001b707b1cdc000;\\n        // add y^07 * (20! / 07!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000036e0f639b800;\\n        // add y^08 * (20! / 08!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x00000618fee9f800;\\n        // add y^09 * (20! / 09!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000009c197dcc00;\\n        // add y^10 * (20! / 10!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000e30dce400;\\n        // add y^11 * (20! / 11!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000000012ebd1300;\\n        // add y^12 * (20! / 12!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000017499f00;\\n        // add y^13 * (20! / 13!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000001a9d480;\\n        // add y^14 * (20! / 14!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x00000000001c6380;\\n        // add y^15 * (20! / 15!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000000000001c638;\\n        // add y^16 * (20! / 16!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000000001ab8;\\n        // add y^17 * (20! / 17!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000000000000017c;\\n        // add y^18 * (20! / 18!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000000000014;\\n        // add y^19 * (20! / 19!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000000000001;\\n        // add y^20 * (20! / 20!)\\n        res = res / 0x21c3677c82b40000 + y + FIXED_1;\\n        // divide by 20! and then add y^1 / 1! + y^0 / 0!\\n\\n        if ((x & 0x010000000000000000000000000000000) != 0) res = (res * 0x1c3d6a24ed82218787d624d3e5eba95f9) / 0x18ebef9eac820ae8682b9793ac6d1e776;\\n        // multiply by e^2^(-3)\\n        if ((x & 0x020000000000000000000000000000000) != 0) res = (res * 0x18ebef9eac820ae8682b9793ac6d1e778) / 0x1368b2fc6f9609fe7aceb46aa619baed4;\\n        // multiply by e^2^(-2)\\n        if ((x & 0x040000000000000000000000000000000) != 0) res = (res * 0x1368b2fc6f9609fe7aceb46aa619baed5) / 0x0bc5ab1b16779be3575bd8f0520a9f21f;\\n        // multiply by e^2^(-1)\\n        if ((x & 0x080000000000000000000000000000000) != 0) res = (res * 0x0bc5ab1b16779be3575bd8f0520a9f21e) / 0x0454aaa8efe072e7f6ddbab84b40a55c9;\\n        // multiply by e^2^(+0)\\n        if ((x & 0x100000000000000000000000000000000) != 0) res = (res * 0x0454aaa8efe072e7f6ddbab84b40a55c5) / 0x00960aadc109e7a3bf4578099615711ea;\\n        // multiply by e^2^(+1)\\n        if ((x & 0x200000000000000000000000000000000) != 0) res = (res * 0x00960aadc109e7a3bf4578099615711d7) / 0x0002bf84208204f5977f9a8cf01fdce3d;\\n        // multiply by e^2^(+2)\\n        if ((x & 0x400000000000000000000000000000000) != 0) res = (res * 0x0002bf84208204f5977f9a8cf01fdc307) / 0x0000003c6ab775dd0b95b4cbee7e65d11;\\n        // multiply by e^2^(+3)\\n\\n        return res;\\n    }\\n\\n    function getPairStaticData(address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee,\\n            uint32 amp\\n        )\\n    {\\n        try IRequiemWeightedPairV2(pair).getParameters() returns (uint32 _tokenWeight0, uint32 _tokenWeight1, uint32 _swapFee, uint32 _amp) {\\n            return (_tokenWeight0, _tokenWeight1, _swapFee, _amp);\\n        } catch Error(string memory reason) {\\n            revert(reason);\\n        }\\n    }\\n\\n    function getFactoryStaticData(address factory, address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee,\\n            uint32 amp\\n        )\\n    {\\n        return IRequiemWeightedPairFactoryV2(factory).getParameters(pair);\\n    }\\n\\n    function getPairParameters(address pair, address tokenA)\\n        public\\n        view\\n        override\\n        returns (\\n            address tokenB,\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint32 tokenWeightA,\\n            uint32 tokenWeightB,\\n            uint32 swapFee\\n        )\\n    {\\n        IRequiemWeightedPairV2.ReserveData memory reserveData = IRequiemWeightedPairV2(pair).getReserves();\\n        uint32 tokenWeight0;\\n        uint32 tokenWeight1;\\n        (tokenWeight0, tokenWeight1, swapFee, ) = getPairStaticData(pair);\\n\\n        if (tokenA == IRequiemWeightedPairV2(pair).token0()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemWeightedPairV2(pair).token1(), reserveData.vReserve0, reserveData.vReserve1, tokenWeight0, tokenWeight1);\\n        } else if (tokenA == IRequiemWeightedPairV2(pair).token1()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemWeightedPairV2(pair).token0(), reserveData.vReserve1, reserveData.vReserve0, tokenWeight1, tokenWeight0);\\n        } else {\\n            revert(\\\"REQF: IA\\\");\\n        }\\n    }\\n\\n    function getFactoryParameters(\\n        address factory,\\n        address pair,\\n        address tokenA\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            address tokenB,\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint32 tokenWeightA,\\n            uint32 tokenWeightB,\\n            uint32 swapFee\\n        )\\n    {\\n        IRequiemWeightedPairV2.ReserveData memory reserveData = IRequiemWeightedPairV2(pair).getReserves();\\n        uint32 tokenWeight0;\\n        uint32 tokenWeight1;\\n        (tokenWeight0, tokenWeight1, swapFee, ) = getFactoryStaticData(factory, pair);\\n\\n        if (tokenA == IRequiemWeightedPairV2(pair).token0()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemWeightedPairV2(pair).token1(), reserveData.vReserve0, reserveData.vReserve1, tokenWeight0, tokenWeight1);\\n        } else if (tokenA == IRequiemWeightedPairV2(pair).token1()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemWeightedPairV2(pair).token0(), reserveData.vReserve1, reserveData.vReserve0, tokenWeight1, tokenWeight0);\\n        } else {\\n            revert(\\\"REQF: IA\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset,\\n     *\\n     * Formula:\\n     * return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\\n     *\\n     * @param amountIn      source reserve amount\\n     *    contains the following inputs:\\n     *  reserveIn       source reserve balance\\n     *  reserveOut      target reserve balance\\n     *  tokenWeightIn   source reserve weight, represented in ppm (2-98)\\n     *  tokenWeightOut  target reserve weight, represented in ppm (2-98)\\n     *  swapFee         swap fee of the conversion\\n     *\\n     * @return amountOut\\n     */\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) public view override returns (uint256 amountOut) {\\n        // validate input\\n        uint256 amountInWithFee = amountIn * (10000 - swapFee);\\n        // special case for equal weights\\n        if (tokenWeightIn == tokenWeightOut) {\\n            return (reserveOut * amountInWithFee) / (reserveIn * 10000 + amountInWithFee);\\n        }\\n\\n        uint256 result;\\n        uint8 precision;\\n        uint256 baseN = reserveIn * 10000 + amountInWithFee;\\n        (result, precision) = power(baseN, reserveIn * 10000, tokenWeightIn, tokenWeightOut);\\n\\n        uint256 temp1 = reserveOut * result;\\n        uint256 temp2 = reserveOut << precision;\\n        amountOut = (temp1 - temp2) / result;\\n    }\\n\\n    /**\\n     * @notice given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n     *\\n     * Formula:\\n     * return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\\n     *\\n     * @param amountOut     target reserve amount\\n     *    contains the following inputs:\\n     *  reserveIn       source reserve balance\\n     *  reserveOut      target reserve balance\\n     *  tokenWeightIn   source reserve weight, represented in ppm (2-98)\\n     *  tokenWeightOut  target reserve weight, represented in ppm (2-98)\\n     *  swapFee         swap fee of the conversion\\n     *\\n     * @return amountIn\\n     */\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) public view override returns (uint256 amountIn) {\\n        // validate input\\n        // special case for equal weights\\n        if (tokenWeightIn == tokenWeightOut) {\\n            uint256 numerator = reserveIn * amountOut * 10000;\\n            uint256 denominator = (reserveOut - amountOut) * (10000 - swapFee);\\n            return numerator / denominator + 1;\\n        }\\n\\n        uint256 result;\\n        uint8 precision;\\n        uint256 baseD = reserveOut - amountOut;\\n        (result, precision) = power(reserveOut, baseD, tokenWeightOut, tokenWeightIn);\\n        uint256 baseReserveIn = reserveIn * 10000;\\n        uint256 temp1 = baseReserveIn * result;\\n        uint256 temp2 = baseReserveIn << precision;\\n        amountIn = ((temp1 - temp2) >> precision) / (10000 - swapFee) + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"REQF: IP\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[0] = amountIn;\\n        address currentTokenIn = tokenIn;\\n        for (uint256 i = 0; i < path.length; i++) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getPairParameters(path[i], currentTokenIn);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenOut, \\\"REQF: IOP\\\");\\n    }\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"REQF: IP\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[0] = amountIn;\\n        address currentTokenIn = tokenIn;\\n\\n        for (uint256 i = 0; i < path.length; i++) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getFactoryParameters(factory, path[i], currentTokenIn);\\n\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenOut, \\\"REQF: IOP\\\");\\n    }\\n\\n    function getPairAmountOut(\\n        address pair,\\n        address tokenIn,\\n        uint256 amountIn\\n    ) external view override returns (uint256 amountOut) {\\n        (, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getPairParameters(pair, tokenIn);\\n        amountOut = getAmountOut(amountIn, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"REQF: IP\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[amounts.length - 1] = amountOut;\\n        address currentTokenIn = tokenOut;\\n        for (uint256 i = path.length; i > 0; i--) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getPairParameters(path[i - 1], currentTokenIn);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveOut, reserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenIn, \\\"REQF: IIP\\\");\\n    }\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"REQF: IP\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[amounts.length - 1] = amountOut;\\n        address currentTokenIn = tokenOut;\\n        for (uint256 i = path.length; i > 0; i--) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getFactoryParameters(factory, path[i - 1], currentTokenIn);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveOut, reserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenIn, \\\"REQF: IIP\\\");\\n    }\\n\\n    function getPairAmountIn(\\n        address pair,\\n        address tokenIn,\\n        uint256 amountOut\\n    ) external view override returns (uint256 amountIn) {\\n        (, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getPairParameters(pair, tokenIn);\\n        amountIn = getAmountIn(amountOut, reserveOut, reserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n    }\\n\\n    /**\\n     * @notice Ensure constant value\\n     * reserve0^(tokenWeight0/50) * reserve1^((100 - tokenWeight0)/50) <= balance0Adjusted^(tokenWeight0/50) * balance1Adjusted^((100 - tokenWeight0)/50)\\n     * or\\n     *  1 <= (balance0Adjusted / reserve0 )^(tokenWeight0/50) * (balance1Adjusted/reserve1)^((100 - tokenWeight0)/50)\\n     * or\\n     *  (reserve0 / balance0Adjusted) ^ (tokenWeight0/50) <=  (balance1Adjusted / reserve1) ^ ((100 - tokenWeight0)/50)\\n     */\\n    function ensureConstantValue(\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 balance0Adjusted,\\n        uint256 balance1Adjusted,\\n        uint32 tokenWeight0\\n    ) external view override returns (bool) {\\n        if (tokenWeight0 == 50) {\\n            return balance0Adjusted * balance1Adjusted >= reserve0 * reserve1;\\n        }\\n        if (balance0Adjusted >= reserve0 && balance1Adjusted >= reserve1) {\\n            return true;\\n        }\\n        if (balance0Adjusted <= reserve0 && balance1Adjusted <= reserve1) {\\n            return false;\\n        }\\n        uint32 w0 = tokenWeight0;\\n        uint32 w1 = 100 - w0;\\n\\n        uint256 r0;\\n        uint256 p0;\\n        uint256 r1;\\n        uint256 p1;\\n        if (balance0Adjusted >= reserve0) {\\n            (r0, p0) = powerD(reserve1, balance1Adjusted, w1);\\n            (r1, p1) = powerD(balance0Adjusted, reserve0, w0);\\n        } else {\\n            (r0, p0) = powerD(reserve0, balance0Adjusted, w0);\\n            (r1, p1) = powerD(balance1Adjusted, reserve1, w1);\\n        }\\n        uint256 minP = p0 < p1 ? p0 : p1;\\n        p0 = p0 - minP;\\n        p1 = p1 - minP;\\n        return (r0 >> p0) <= (r1 >> p1);\\n    }\\n\\n    function sortTokens(address tokenA, address tokenB) public pure override returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"REQF: A\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"REQF: ZA\\\");\\n    }\\n\\n    function getReserves(\\n        address pair,\\n        address tokenA,\\n        address tokenB\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint256 vReserveA,\\n            uint256 vReserveB\\n        )\\n    {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        IRequiemWeightedPairV2.ReserveData memory data = IRequiemWeightedPairV2(pair).getReserves();\\n        require(token0 == IRequiemWeightedPairV2(pair).token0() && token1 == IRequiemWeightedPairV2(pair).token1(), \\\"REQF: T\\\");\\n        (reserveA, reserveB, vReserveA, vReserveB) = tokenA == token0 ? (data.reserve0, data.reserve1, data.vReserve0, data.vReserve1) : (data.reserve1, data.reserve0, data.vReserve1, data.vReserve0);\\n    }\\n\\n    function getOtherToken(address pair, address tokenA) external view override returns (address tokenB) {\\n        address token0 = IRequiemWeightedPairV2(pair).token0();\\n        address token1 = IRequiemWeightedPairV2(pair).token1();\\n        require(token0 == tokenA || token1 == tokenA, \\\"REQF: A\\\");\\n        tokenB = token0 == tokenA ? token1 : token0;\\n    }\\n\\n    /**\\n     * @notice Given some amount of an asset and pair reserves, returns an equivalent amount of required amount of the other asset for LP\\n     * @param amountA token A amount\\n     * @param reserveA reserve of token A\\n     * @param reserveB reserve of token B\\n     * @return amountB amount of token B required to consume all of amount A for LPs\\n     */\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure override returns (uint256 amountB) {\\n        require(amountA > 0, \\\"REQD: IA\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"REQD: IL\\\");\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    /**\\n     * @notice Calculates the fee to be sent to the protocol\\n     * @param totalLiquidity total LP liquidity\\n     * @param reserve0 reserve of token0\\n     * @param reserve1 reserve of token1\\n     * @param tokenWeight0 weight of token0\\n     * @param tokenWeight1 weight of token1\\n     * @param collectedFee0 fees collected of token0\\n     * @param collectedFee1 fees collected of token1\\n     * @return amount fee amount\\n     */\\n    function mintLiquidityFee(\\n        uint256 totalLiquidity,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112 collectedFee0,\\n        uint112 collectedFee1\\n    ) external view override returns (uint256 amount) {\\n        if (collectedFee0 > 0) {\\n            (uint256 r0, uint256 p0) = power(uint256(collectedFee0) + reserve0, reserve0, tokenWeight0, 100);\\n            amount = amount + ((totalLiquidity * r0) >> p0) - totalLiquidity;\\n        }\\n        if (collectedFee1 > 0) {\\n            (uint256 r1, uint256 p1) = power(uint256(collectedFee1) + reserve1, reserve1, tokenWeight1, 100);\\n            amount = amount + ((totalLiquidity * r1) >> p1) - totalLiquidity;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x994eb6f9a07c7038de5d6d83ed90614baf94b36a0474dc6a3d90a7745d09448b\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemPairERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemPairERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0xd26126b87195232c895a1ceccb7f255652a775e948f72c104828178ad0f59ae6\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPairFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\ninterface IRequiemWeightedPairFactoryV2 {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function protocolFee() external view returns (uint256);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function isPair(address) external view returns (bool);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 initialFee,\\n        uint32 initialAmp\\n    ) external returns (address pair);\\n\\n    function getParameters(address pair)\\n        external\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee,\\n            uint32 amp\\n        );\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setProtocolFee(uint256) external;\\n}\\n\",\"keccak256\":\"0xa0172ff52b829d3c554e478fcb1afabe4a14b8e8e58a14fdbff59562701e9cb6\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPairV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IRequiemPairERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemWeightedPairV2 is IRequiemPairERC20 {\\n    struct ReserveData {\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 vReserve0;\\n        uint256 vReserve1;\\n    }\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1, uint112 vReserve0, uint112 vReserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (ReserveData calldata reserveData);\\n\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n    function getParameters()\\n        external\\n        view\\n        returns (\\n            uint32 _tokenWeight0,\\n            uint32 _tokenWeight1,\\n            uint32 _swapFee,\\n            uint32 _amp\\n        );\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function setSwapParams(uint32, uint32) external;\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address,\\n        address,\\n        uint32\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa4ccbd955e0cc8e9ddc1053b987c97e8b901389a53ab000268718889a887635d\",\"license\":\"MIT\"},\"contracts/interfaces/IWeightedFormulaV2.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.13;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IWeightedFormulaV2 {\\n    function getPairParameters(address pair, address tokenA)\\n        external\\n        view\\n        returns (\\n            address tokenB,\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint32 tokenWeightA,\\n            uint32 tokenWeightB,\\n            uint32 swapFee\\n        );\\n\\n    function getFactoryParameters(\\n        address factory,\\n        address pair,\\n        address tokenA\\n    )\\n        external\\n        view\\n        returns (\\n            address tokenB,\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint32 tokenWeightA,\\n            uint32 tokenWeightB,\\n            uint32 swapFee\\n        );\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint256 amountIn);\\n\\n    function getPairAmountIn(\\n        address pair,\\n        address tokenIn,\\n        uint256 amountOut\\n    ) external view returns (uint256 amountIn);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint256 amountOut);\\n\\n    function getPairAmountOut(\\n        address pair,\\n        address tokenIn,\\n        uint256 amountIn\\n    ) external view returns (uint256 amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function ensureConstantValue(\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 balance0Adjusted,\\n        uint256 balance1Adjusted,\\n        uint32 tokenWeight0\\n    ) external view returns (bool);\\n\\n    function getReserves(\\n        address pair,\\n        address tokenA,\\n        address tokenB\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint256 vReserveA,\\n            uint256 vReserveB\\n        );\\n\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n\\n    function mintLiquidityFee(\\n        uint256 totalLiquidity,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112 collectedFee0,\\n        uint112 collectedFee1\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xed86f52700af628f484a7142e23f7f435906fe57a6e396045baf43a76e91d60e\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c806379c91b37116100b2578063ad615dec11610081578063b3923a9911610066578063b3923a9914610355578063d691093714610368578063e02764c0146103a057600080fd5b8063ad615dec1461032f578063b19210b01461034257600080fd5b806379c91b37146102d35780638888a737146102f65780638fabd82d146103095780639ed45e471461031c57600080fd5b806344419c1a116101095780636350d774116100ee5780636350d7741461028c578063671a11b5146102ad57806367f84adc146102c057600080fd5b806344419c1a14610239578063544caa561461024c57600080fd5b80630e6431201461013b578063119220a5146101a357806318d1e803146101c35780633274946114610206575b600080fd5b61014e6101493660046139a8565b6103b3565b6040805173ffffffffffffffffffffffffffffffffffffffff909716875260208701959095529385019290925263ffffffff908116606085015290811660808401521660a082015260c0015b60405180910390f35b6101b66101b1366004613a26565b610715565b60405161019a9190613aab565b6101d66101d13660046139a8565b61094a565b6040805163ffffffff9586168152938516602085015291841691830191909152909116606082015260800161019a565b610219610214366004613aef565b6109f3565b60408051948552602085019390935291830152606082015260800161019a565b6101d6610247366004613b3a565b610c94565b61025f61025a3660046139a8565b610d99565b6040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301520161019a565b61029f61029a366004613b57565b610ef7565b60405190815260200161019a565b61029f6102bb366004613baa565b610f30565b6101b66102ce366004613a26565b61100d565b6102e66102e1366004613c11565b61122d565b604051901515815260200161019a565b61029f610304366004613b57565b611349565b6101b6610317366004613c5e565b611375565b61029f61032a366004613cf4565b611596565b61029f61033d366004613d69565b61167d565b61029f610350366004613baa565b61177b565b6101b6610363366004613c5e565b61186e565b61037b6103763660046139a8565b611a7b565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161019a565b61014e6103ae366004613aef565b611c66565b60008060008060008060008873ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042d9190613e36565b905060008061043b8b610c94565b508096508193508294505050508a73ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b79190613ec3565b73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1603610575578a73ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105589190613ec3565b60408401516060850151919a509850965090945092508383610708565b8a73ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e49190613ec3565b73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16036106a1578a73ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190613ec3565b60608401516040850151919a5098509650945092508284610708565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f524551463a20494100000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b5050509295509295509295565b60608161077e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f524551463a20495000000000000000000000000000000000000000000000000060448201526064016106ff565b610789826001613f0f565b67ffffffffffffffff8111156107a1576107a1613d95565b6040519080825280602002602001820160405280156107ca578160200160208202803683370190505b50905083816000815181106107e1576107e1613f27565b60209081029190910101528560005b838110156108a9576000806000806000806108328f8c8c8a81811061081757610817613f27565b905060200201602081019061082c9190613b3a565b8a611c66565b95509550955095509550955061086589888151811061085357610853613f27565b60200260200101518686868686610f30565b89610871896001613f0f565b8151811061088157610881613f27565b60200260200101818152505085975050505050505080806108a190613f56565b9150506107f0565b508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461093f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f524551463a20494f50000000000000000000000000000000000000000000000060448201526064016106ff565b509695505050505050565b6040517f59c96c1100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000918291829182918716906359c96c1190602401608060405180830381865afa1580156109bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e39190613f8e565b9299919850965090945092505050565b600080600080600080610a068888610d99565b9150915060008973ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401608060405180830381865afa158015610a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7b9190613e36565b90508973ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aec9190613ec3565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148015610bbf57508973ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b909190613ec3565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b610c25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f524551463a20540000000000000000000000000000000000000000000000000060448201526064016106ff565b8273ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614610c6e576020810151815160608301516040840151610c80565b80516020820151604083015160608401515b929d919c509a509098509650505050505050565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1663a5ea11da6040518163ffffffff1660e01b8152600401608060405180830381865afa925050508015610d1f575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610d1c91810190613f8e565b60015b610d8a57610d2b613fed565b806308c379a003610d7e5750610d3f614009565b80610d4a5750610d80565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ff91906140b1565b505b3d6000803e3d6000fd5b92989197509550909350915050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610e31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f524551463a20410000000000000000000000000000000000000000000000000060448201526064016106ff565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610610e6b578284610e6e565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216610ef0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f524551463a205a4100000000000000000000000000000000000000000000000060448201526064016106ff565b9250929050565b600080600080600080610f0a89896103b3565b9550955095509550955050610f2387858785878661177b565b9998505050505050505050565b600080610f3f83612710614124565b610f4f9063ffffffff1689614149565b90508363ffffffff168563ffffffff1603610f975780610f7188612710614149565b610f7b9190613f0f565b610f858288614149565b610f8f91906141b5565b915050611003565b6000808083610fa88b612710614149565b610fb29190613f0f565b9050610fcb81610fc48c612710614149565b8a8a611f60565b90935091506000610fdc848b614149565b905060ff83168a901b84610ff082846141c9565b610ffa91906141b5565b96505050505050505b9695505050505050565b606081611076576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f524551463a20495000000000000000000000000000000000000000000000000060448201526064016106ff565b611081826001613f0f565b67ffffffffffffffff81111561109957611099613d95565b6040519080825280602002602001820160405280156110c2578160200160208202803683370190505b5090508381600183516110d591906141c9565b815181106110e5576110e5613f27565b602090810291909101015284825b801561119757600080808080806111208f8c8c61111160018c6141c9565b81811061081757610817613f27565b95509550955095509550955061115389888151811061114157611141613f27565b6020026020010151858785878661177b565b8961115f60018a6141c9565b8151811061116f5761116f613f27565b602002602001018181525050859750505050505050808061118f906141e0565b9150506110f3565b508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461093f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f524551463a20494950000000000000000000000000000000000000000000000060448201526064016106ff565b60008163ffffffff1660320361125a576112478587614149565b6112518486614149565b10159050611340565b85841015801561126a5750848310155b1561127757506001611340565b8584111580156112875750848311155b1561129457506000611340565b8160006112a2826064614124565b90506000806000808b8a106112dc576112bc8b8a876120dd565b90945060ff1692506112cf8a8d886120dd565b90925060ff169050611303565b6112e78c8b886120dd565b90945060ff1692506112fa898c876120dd565b90925060ff1690505b60008184106113125781611314565b835b905061132081856141c9565b935061132c81836141c9565b9290921c9390921c92909211159450505050505b95945050505050565b60008060008060008061135c89896103b3565b9550955095509550955050610f23878686868686610f30565b6060816113de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f524551463a20495000000000000000000000000000000000000000000000000060448201526064016106ff565b6113e9826001613f0f565b67ffffffffffffffff81111561140157611401613d95565b60405190808252806020026020018201604052801561142a578160200160208202803683370190505b509050838160008151811061144157611441613f27565b60209081029190910101528560005b838110156114f6576000806000806000806114918b8b8981811061147657611476613f27565b905060200201602081019061148b9190613b3a565b896103b3565b9550955095509550955095506114b289888151811061085357610853613f27565b896114be896001613f0f565b815181106114ce576114ce613f27565b60200260200101818152505085975050505050505080806114ee90613f56565b915050611450565b508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461158c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f524551463a20494f50000000000000000000000000000000000000000000000060448201526064016106ff565b5095945050505050565b60006dffffffffffffffffffffffffffff831615611605576000806115d76115ce8a6dffffffffffffffffffffffffffff8816613f0f565b8a896064611f60565b90925060ff16905089816115eb8483614149565b6115f6911c85613f0f565b61160091906141c9565b925050505b6dffffffffffffffffffffffffffff8216156116725760008061164461163b896dffffffffffffffffffffffffffff8716613f0f565b89886064611f60565b90925060ff16905089816116588483614149565b611663911c85613f0f565b61166d91906141c9565b925050505b979650505050505050565b60008084116116e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f524551443a20494100000000000000000000000000000000000000000000000060448201526064016106ff565b6000831180156116f85750600082115b61175e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f524551443a20494c00000000000000000000000000000000000000000000000060448201526064016106ff565b826117698386614149565b61177391906141b5565b949350505050565b60008263ffffffff168463ffffffff16036117f257600061179c8888614149565b6117a890612710614149565b905060006117b884612710614124565b63ffffffff166117c88a896141c9565b6117d29190614149565b90506117de81836141b5565b6117e9906001613f0f565b92505050611003565b600080806118008a896141c9565b905061180e8882888a611f60565b909350915060006118218a612710614149565b9050600061182f8583614149565b905060ff841682901b61184488612710614124565b63ffffffff1660ff861661185883856141c9565b61186392911c6141b5565b610ffa906001613f0f565b6060816118d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f524551463a20495000000000000000000000000000000000000000000000000060448201526064016106ff565b6118e2826001613f0f565b67ffffffffffffffff8111156118fa576118fa613d95565b604051908082528060200260200182016040528015611923578160200160208202803683370190505b50905083816001835161193691906141c9565b8151811061194657611946613f27565b602090810291909101015284825b80156119e557600080808080806119808b8b61197160018b6141c9565b81811061147657611476613f27565b9550955095509550955095506119a189888151811061114157611141613f27565b896119ad60018a6141c9565b815181106119bd576119bd613f27565b60200260200101818152505085975050505050505080806119dd906141e0565b915050611954565b508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461158c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f524551463a20494950000000000000000000000000000000000000000000000060448201526064016106ff565b6000808373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aed9190613ec3565b905060008473ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b609190613ec3565b90508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480611bc757508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611c2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f524551463a20410000000000000000000000000000000000000000000000000060448201526064016106ff565b8373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146117735781611340565b60008060008060008060008873ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401608060405180830381865afa158015611cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce09190613e36565b9050600080611cef8c8c61094a565b508096508193508294505050508a73ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6b9190613ec3565b73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1603611e29578a73ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611de8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0c9190613ec3565b60408401516060850151919a509850965090945092508383611f51565b8a73ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e989190613ec3565b73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16036106a1578a73ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f399190613ec3565b60608401516040850151919a50985096509450925082845b50505093975093979195509350565b60008084861015611fcd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5f626173654e203c205f6261736544000000000000000000000000000000000060448201526064016106ff565b7002000000000000000000000000000000008610611fea57600080fd5b600080866120086f800000000000000000000000000000008a614149565b61201291906141b5565b905070015bf0a8b1457695355fb8ac404e7a79e381101561203d5761203681612246565b9150612049565b61204681612948565b91505b60008563ffffffff168763ffffffff16846120649190614149565b61206e91906141b5565b90507008000000000000000000000000000000008110156120a05761209281612a87565b607f945094505050506120d4565b60006120ab82613205565b90506120c76120bb82607f614215565b60ff1683901c826132b8565b955093506120d492505050565b94509492505050565b6000808385101561214a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5f626173654e203c205f6261736544000000000000000000000000000000000060448201526064016106ff565b700200000000000000000000000000000000851061216757600080fd5b600080856121856f8000000000000000000000000000000089614149565b61218f91906141b5565b905070015bf0a8b1457695355fb8ac404e7a79e38110156121ba576121b381612246565b91506121c6565b6121c381612948565b91505b600060326121da63ffffffff881685614149565b6121e491906141b5565b90507008000000000000000000000000000000008110156122165761220881612a87565b607f9450945050505061223e565b600061222182613205565b90506122316120bb82607f614215565b9550935061223e92505050565b935093915050565b6000808080806fd3094c70f034de4b96ff7d5b6f99fcd886106122b75761227d6f4000000000000000000000000000000085613f0f565b93506fd3094c70f034de4b96ff7d5b6f99fcd86122aa6f8000000000000000000000000000000088614149565b6122b491906141b5565b95505b6fa45af1e1f40c333b3de1db4dd55f29a78610612322576122e86f2000000000000000000000000000000085613f0f565b93506fa45af1e1f40c333b3de1db4dd55f29a76123156f8000000000000000000000000000000088614149565b61231f91906141b5565b95505b6f910b022db7ae67ce76b441c27035c6a1861061238d576123536f1000000000000000000000000000000085613f0f565b93506f910b022db7ae67ce76b441c27035c6a16123806f8000000000000000000000000000000088614149565b61238a91906141b5565b95505b6f88415abbe9a76bead8d00cf112e4d4a886106123f8576123be6f0800000000000000000000000000000085613f0f565b93506f88415abbe9a76bead8d00cf112e4d4a86123eb6f8000000000000000000000000000000088614149565b6123f591906141b5565b95505b6f84102b00893f64c705e841d5d4064bd38610612463576124296f0400000000000000000000000000000085613f0f565b93506f84102b00893f64c705e841d5d4064bd36124566f8000000000000000000000000000000088614149565b61246091906141b5565b95505b6f8204055aaef1c8bd5c3259f4822735a286106124ce576124946f0200000000000000000000000000000085613f0f565b93506f8204055aaef1c8bd5c3259f4822735a26124c16f8000000000000000000000000000000088614149565b6124cb91906141b5565b95505b6f810100ab00222d861931c15e39b44e998610612539576124ff6f0100000000000000000000000000000085613f0f565b93506f810100ab00222d861931c15e39b44e9961252c6f8000000000000000000000000000000088614149565b61253691906141b5565b95505b6f808040155aabbbe9451521693554f73386106125a3576125696e80000000000000000000000000000085613f0f565b93506f808040155aabbbe9451521693554f7336125966f8000000000000000000000000000000088614149565b6125a091906141b5565b95505b6125bd6f80000000000000000000000000000000876141c9565b92508291506f800000000000000000000000000000006125dd8380614149565b6125e791906141b5565b905070010000000000000000000000000000000061260584826141c9565b61260f9084614149565b61261991906141b5565b6126239085613f0f565b93506f800000000000000000000000000000006126408284614149565b61264a91906141b5565b9150700200000000000000000000000000000000612678846faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa6141c9565b6126829084614149565b61268c91906141b5565b6126969085613f0f565b93506f800000000000000000000000000000006126b38284614149565b6126bd91906141b5565b91507003000000000000000000000000000000006126eb846f999999999999999999999999999999996141c9565b6126f59084614149565b6126ff91906141b5565b6127099085613f0f565b93506f800000000000000000000000000000006127268284614149565b61273091906141b5565b915070040000000000000000000000000000000061275e846f924924924924924924924924924924926141c9565b6127689084614149565b61277291906141b5565b61277c9085613f0f565b93506f800000000000000000000000000000006127998284614149565b6127a391906141b5565b91507005000000000000000000000000000000006127d1846f8e38e38e38e38e38e38e38e38e38e38e6141c9565b6127db9084614149565b6127e591906141b5565b6127ef9085613f0f565b93506f8000000000000000000000000000000061280c8284614149565b61281691906141b5565b9150700600000000000000000000000000000000612844846f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b6141c9565b61284e9084614149565b61285891906141b5565b6128629085613f0f565b93506f8000000000000000000000000000000061287f8284614149565b61288991906141b5565b91507007000000000000000000000000000000006128b7846f89d89d89d89d89d89d89d89d89d89d896141c9565b6128c19084614149565b6128cb91906141b5565b6128d59085613f0f565b93506f800000000000000000000000000000006128f28284614149565b6128fc91906141b5565b915070080000000000000000000000000000000061292a846f888888888888888888888888888888886141c9565b6129349084614149565b61293e91906141b5565b6110039085613f0f565b60008070010000000000000000000000000000000083106129b15760006129876129826f80000000000000000000000000000000866141b5565b613916565b60ff811694851c949091506129ad906f8000000000000000000000000000000090614149565b9150505b6f80000000000000000000000000000000831115612a4b57607f5b60ff811615612a49576f800000000000000000000000000000006129f08580614149565b6129fa91906141b5565b93507001000000000000000000000000000000008410612a3957600193841c93612a249082614215565b60ff166001901b82612a369190613f0f565b91505b612a4281614238565b90506129cc565b505b6f05b9de1d10bf4103d647b0955897ba80612a766f03f80fe03f80fe03f80fe03f80fe03f883614149565b612a8091906141b5565b9392505050565b6000808080612aa66f1000000000000000000000000000000086614273565b91508190506f80000000000000000000000000000000612ac68280614149565b612ad091906141b5565b9050612ae4816710e1b3be415a0000614149565b612aee9084613f0f565b92506f80000000000000000000000000000000612b0b8383614149565b612b1591906141b5565b9050612b29816705a0913f6b1e0000614149565b612b339084613f0f565b92506f80000000000000000000000000000000612b508383614149565b612b5a91906141b5565b9050612b6e81670168244fdac78000614149565b612b789084613f0f565b92506f80000000000000000000000000000000612b958383614149565b612b9f91906141b5565b9050612bb281664807432bc18000614149565b612bbc9084613f0f565b92506f80000000000000000000000000000000612bd98383614149565b612be391906141b5565b9050612bf681660c0135dca04000614149565b612c009084613f0f565b92506f80000000000000000000000000000000612c1d8383614149565b612c2791906141b5565b9050612c3a816601b707b1cdc000614149565b612c449084613f0f565b92506f80000000000000000000000000000000612c618383614149565b612c6b91906141b5565b9050612c7d816536e0f639b800614149565b612c879084613f0f565b92506f80000000000000000000000000000000612ca48383614149565b612cae91906141b5565b9050612cc081650618fee9f800614149565b612cca9084613f0f565b92506f80000000000000000000000000000000612ce78383614149565b612cf191906141b5565b9050612d0281649c197dcc00614149565b612d0c9084613f0f565b92506f80000000000000000000000000000000612d298383614149565b612d3391906141b5565b9050612d4481640e30dce400614149565b612d4e9084613f0f565b92506f80000000000000000000000000000000612d6b8383614149565b612d7591906141b5565b9050612d868164012ebd1300614149565b612d909084613f0f565b92506f80000000000000000000000000000000612dad8383614149565b612db791906141b5565b9050612dc7816317499f00614149565b612dd19084613f0f565b92506f80000000000000000000000000000000612dee8383614149565b612df891906141b5565b9050612e08816301a9d480614149565b612e129084613f0f565b92506f80000000000000000000000000000000612e2f8383614149565b612e3991906141b5565b9050612e4881621c6380614149565b612e529084613f0f565b92506f80000000000000000000000000000000612e6f8383614149565b612e7991906141b5565b9050612e88816201c638614149565b612e929084613f0f565b92506f80000000000000000000000000000000612eaf8383614149565b612eb991906141b5565b9050612ec781611ab8614149565b612ed19084613f0f565b92506f80000000000000000000000000000000612eee8383614149565b612ef891906141b5565b9050612f068161017c614149565b612f109084613f0f565b92506f80000000000000000000000000000000612f2d8383614149565b612f3791906141b5565b9050612f44816014614149565b612f4e9084613f0f565b92506f80000000000000000000000000000000612f6b8383614149565b612f7591906141b5565b9050612f82816001614149565b612f8c9084613f0f565b92506f8000000000000000000000000000000082612fb26721c3677c82b40000866141b5565b612fbc9190613f0f565b612fc69190613f0f565b92506f1000000000000000000000000000000085161561301a5770018ebef9eac820ae8682b9793ac6d1e77661300d847001c3d6a24ed82218787d624d3e5eba95f9614149565b61301791906141b5565b92505b6f2000000000000000000000000000000085161561306c577001368b2fc6f9609fe7aceb46aa619baed461305f8470018ebef9eac820ae8682b9793ac6d1e778614149565b61306991906141b5565b92505b6f400000000000000000000000000000008516156130bd576fbc5ab1b16779be3575bd8f0520a9f21f6130b0847001368b2fc6f9609fe7aceb46aa619baed5614149565b6130ba91906141b5565b92505b6f8000000000000000000000000000000085161561310d576f454aaa8efe072e7f6ddbab84b40a55c9613100846fbc5ab1b16779be3575bd8f0520a9f21e614149565b61310a91906141b5565b92505b70010000000000000000000000000000000085161561315e576f0960aadc109e7a3bf4578099615711ea613151846f454aaa8efe072e7f6ddbab84b40a55c5614149565b61315b91906141b5565b92505b7002000000000000000000000000000000008516156131ae576e2bf84208204f5977f9a8cf01fdce3d6131a1846f0960aadc109e7a3bf4578099615711d7614149565b6131ab91906141b5565b92505b7004000000000000000000000000000000008516156131fc576d03c6ab775dd0b95b4cbee7e65d116131ef846e2bf84208204f5977f9a8cf01fdc307614149565b6131f991906141b5565b92505b50909392505050565b60006020607f5b60ff811661321b836001614287565b60ff16101561326e57600060026132328385614287565b61323c91906142ac565b90508460008260ff166080811061325557613255613f27565b01541061326457809250613268565b8091505b5061320c565b8360008260ff166080811061328557613285613f27565b015410613293579392505050565b8360008360ff16608081106132aa576132aa613f27565b015410610136575092915050565b6000828160ff84166132ca8380614149565b901c91506132e8826f03442c4e6074a82f1797f72ac0000000614149565b6132f29082613f0f565b905060ff84166133028684614149565b901c9150613320826f0116b96f757c380fb287fd0e40000000614149565b61332a9082613f0f565b905060ff841661333a8684614149565b901c9150613357826e45ae5bdd5f0e03eca1ff4390000000614149565b6133619082613f0f565b905060ff84166133718684614149565b901c915061338e826e0defabf91302cd95b9ffda50000000614149565b6133989082613f0f565b905060ff84166133a88684614149565b901c91506133c5826e02529ca9832b22439efff9b8000000614149565b6133cf9082613f0f565b905060ff84166133df8684614149565b901c91506133fb826d54f1cf12bd04e516b6da88000000614149565b6134059082613f0f565b905060ff84166134158684614149565b901c9150613431826d0a9e39e257a09ca2d6db51000000614149565b61343b9082613f0f565b905060ff841661344b8684614149565b901c9150613467826d012e066e7b839fa050c309000000614149565b6134719082613f0f565b905060ff84166134818684614149565b901c915061349c826c1e33d7d926c329a1ad1a800000614149565b6134a69082613f0f565b905060ff84166134b68684614149565b901c91506134d1826c02bee513bdb4a6b19b5f800000614149565b6134db9082613f0f565b905060ff84166134eb8684614149565b901c9150613505826b3a9316fa79b88eccf2a00000614149565b61350f9082613f0f565b905060ff841661351f8684614149565b901c9150613539826b048177ebe1fa812375200000614149565b6135439082613f0f565b905060ff84166135538684614149565b901c915061356c826a5263fe90242dcbacf00000614149565b6135769082613f0f565b905060ff84166135868684614149565b901c915061359f826a057e22099c030d94100000614149565b6135a99082613f0f565b905060ff84166135b98684614149565b901c91506135d1826957e22099c030d9410000614149565b6135db9082613f0f565b905060ff84166135eb8684614149565b901c91506136038269052b6b54569976310000614149565b61360d9082613f0f565b905060ff841661361d8684614149565b901c915061363482684985f67696bf748000614149565b61363e9082613f0f565b905060ff841661364e8684614149565b901c9150613665826803dea12ea99e498000614149565b61366f9082613f0f565b905060ff841661367f8684614149565b901c9150613695826731880f2214b6e000614149565b61369f9082613f0f565b905060ff84166136af8684614149565b901c91506136c58267025bcff56eb36000614149565b6136cf9082613f0f565b905060ff84166136df8684614149565b901c91506136f482661b722e10ab1000614149565b6136fe9082613f0f565b905060ff841661370e8684614149565b901c9150613723826601317c70077000614149565b61372d9082613f0f565b905060ff841661373d8684614149565b901c915061375182650cba84aafa00614149565b61375b9082613f0f565b905060ff841661376b8684614149565b901c915061377e826482573a0a00614149565b6137889082613f0f565b905060ff84166137988684614149565b901c91506137ab826405035ad900614149565b6137b59082613f0f565b905060ff84166137c58684614149565b901c91506137d782632f881b00614149565b6137e19082613f0f565b905060ff84166137f18684614149565b901c9150613803826301b29340614149565b61380d9082613f0f565b905060ff841661381d8684614149565b901c915061382e82620efc40614149565b6138389082613f0f565b905060ff84166138488684614149565b901c915061385882617fe0614149565b6138629082613f0f565b905060ff84166138728684614149565b901c915061388282610420614149565b61388c9082613f0f565b905060ff841661389c8684614149565b901c91506138ab826021614149565b6138b59082613f0f565b905060ff84166138c58684614149565b901c91506138d4826001614149565b6138de9082613f0f565b9050600160ff85161b856139026f0688589cc0e9505e2f2fee5580000000846141b5565b61390c9190613f0f565b6113409190613f0f565b600080610100831015613949575b600183111561394457600192831c9261393d9082614287565b9050613924565b61397d565b60805b60ff81161561397b57600160ff82161b84106139705760ff81169390931c92908117905b60011c607f1661394c565b505b92915050565b73ffffffffffffffffffffffffffffffffffffffff811681146139a557600080fd5b50565b600080604083850312156139bb57600080fd5b82356139c681613983565b915060208301356139d681613983565b809150509250929050565b60008083601f8401126139f357600080fd5b50813567ffffffffffffffff811115613a0b57600080fd5b6020830191508360208260051b8501011115610ef057600080fd5b60008060008060008060a08789031215613a3f57600080fd5b8635613a4a81613983565b95506020870135613a5a81613983565b94506040870135613a6a81613983565b935060608701359250608087013567ffffffffffffffff811115613a8d57600080fd5b613a9989828a016139e1565b979a9699509497509295939492505050565b6020808252825182820181905260009190848201906040850190845b81811015613ae357835183529284019291840191600101613ac7565b50909695505050505050565b600080600060608486031215613b0457600080fd5b8335613b0f81613983565b92506020840135613b1f81613983565b91506040840135613b2f81613983565b809150509250925092565b600060208284031215613b4c57600080fd5b8135612a8081613983565b600080600060608486031215613b6c57600080fd5b8335613b7781613983565b92506020840135613b8781613983565b929592945050506040919091013590565b63ffffffff811681146139a557600080fd5b60008060008060008060c08789031215613bc357600080fd5b8635955060208701359450604087013593506060870135613be381613b98565b92506080870135613bf381613b98565b915060a0870135613c0381613b98565b809150509295509295509295565b600080600080600060a08688031215613c2957600080fd5b853594506020860135935060408601359250606086013591506080860135613c5081613b98565b809150509295509295909350565b600080600080600060808688031215613c7657600080fd5b8535613c8181613983565b94506020860135613c9181613983565b935060408601359250606086013567ffffffffffffffff811115613cb457600080fd5b613cc0888289016139e1565b969995985093965092949392505050565b80356dffffffffffffffffffffffffffff81168114613cef57600080fd5b919050565b600080600080600080600060e0888a031215613d0f57600080fd5b8735965060208801359550604088013594506060880135613d2f81613b98565b93506080880135613d3f81613b98565b9250613d4d60a08901613cd1565b9150613d5b60c08901613cd1565b905092959891949750929550565b600080600060608486031215613d7e57600080fd5b505081359360208301359350604090920135919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff82111715613e2f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040525050565b600060808284031215613e4857600080fd5b6040516080810181811067ffffffffffffffff82111715613e92577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b600060208284031215613ed557600080fd5b8151612a8081613983565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115613f2257613f22613ee0565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613f8757613f87613ee0565b5060010190565b60008060008060808587031215613fa457600080fd5b8451613faf81613b98565b6020860151909450613fc081613b98565b6040860151909350613fd181613b98565b6060860151909250613fe281613b98565b939692955090935050565b600060033d11156140065760046000803e5060005160e01c5b90565b600060443d10156140175790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff816024840111818411171561406557505050505090565b828501915081518181111561407d5750505050505090565b843d87010160208285010111156140975750505050505090565b6140a660208286010187613dc4565b509095945050505050565b600060208083528351808285015260005b818110156140de578581018301518582016040015282016140c2565b818111156140f0576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600063ffffffff8381169083168181101561414157614141613ee0565b039392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561418157614181613ee0565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826141c4576141c4614186565b500490565b6000828210156141db576141db613ee0565b500390565b6000816141ef576141ef613ee0565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600060ff821660ff84168082101561422f5761422f613ee0565b90039392505050565b600060ff82168061424b5761424b613ee0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b60008261428257614282614186565b500690565b600060ff821660ff84168060ff038211156142a4576142a4613ee0565b019392505050565b600060ff8316806142bf576142bf614186565b8060ff8416049150509291505056fea264697066735822122052842a6b29fbbcdad323ce94ebe93b9739e50f4e22e320c10a804cae624c649664736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAmountIn(uint256,uint256,uint256,uint32,uint32,uint32)": {
        "params": {
          "amountOut": "target reserve amount    contains the following inputs:  reserveIn       source reserve balance  reserveOut      target reserve balance  tokenWeightIn   source reserve weight, represented in ppm (2-98)  tokenWeightOut  target reserve weight, represented in ppm (2-98)  swapFee         swap fee of the conversion"
        },
        "returns": {
          "amountIn": "amountIn"
        }
      },
      "getAmountOut(uint256,uint256,uint256,uint32,uint32,uint32)": {
        "params": {
          "amountIn": "source reserve amount    contains the following inputs:  reserveIn       source reserve balance  reserveOut      target reserve balance  tokenWeightIn   source reserve weight, represented in ppm (2-98)  tokenWeightOut  target reserve weight, represented in ppm (2-98)  swapFee         swap fee of the conversion"
        },
        "returns": {
          "amountOut": "amountOut"
        }
      },
      "mintLiquidityFee(uint256,uint256,uint256,uint32,uint32,uint112,uint112)": {
        "params": {
          "collectedFee0": "fees collected of token0",
          "collectedFee1": "fees collected of token1",
          "reserve0": "reserve of token0",
          "reserve1": "reserve of token1",
          "tokenWeight0": "weight of token0",
          "tokenWeight1": "weight of token1",
          "totalLiquidity": "total LP liquidity"
        },
        "returns": {
          "amount": "fee amount"
        }
      },
      "quote(uint256,uint256,uint256)": {
        "params": {
          "amountA": "token A amount",
          "reserveA": "reserve of token A",
          "reserveB": "reserve of token B"
        },
        "returns": {
          "amountB": "amount of token B required to consume all of amount A for LPs"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ensureConstantValue(uint256,uint256,uint256,uint256,uint32)": {
        "notice": "Ensure constant value reserve0^(tokenWeight0/50) * reserve1^((100 - tokenWeight0)/50) <= balance0Adjusted^(tokenWeight0/50) * balance1Adjusted^((100 - tokenWeight0)/50) or  1 <= (balance0Adjusted / reserve0 )^(tokenWeight0/50) * (balance1Adjusted/reserve1)^((100 - tokenWeight0)/50) or  (reserve0 / balance0Adjusted) ^ (tokenWeight0/50) <=  (balance1Adjusted / reserve1) ^ ((100 - tokenWeight0)/50)"
      },
      "getAmountIn(uint256,uint256,uint256,uint32,uint32,uint32)": {
        "notice": "given an output amount of an asset and pair reserves, returns a required input amount of the other asset Formula: return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)"
      },
      "getAmountOut(uint256,uint256,uint256,uint32,uint32,uint32)": {
        "notice": "given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset, Formula: return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))"
      },
      "mintLiquidityFee(uint256,uint256,uint256,uint32,uint32,uint112,uint112)": {
        "notice": "Calculates the fee to be sent to the protocol"
      },
      "quote(uint256,uint256,uint256)": {
        "notice": "Given some amount of an asset and pair reserves, returns an equivalent amount of required amount of the other asset for LP"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35537,
        "contract": "contracts/WeightedFormulaV2.sol:WeightedFormulaV2",
        "label": "maxExpArray",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)128_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)128_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[128]",
        "numberOfBytes": "4096"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}