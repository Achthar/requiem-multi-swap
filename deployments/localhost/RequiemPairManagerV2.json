{
  "address": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "vReserveRatioBounds",
          "type": "uint256[2]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "vReserveRatioBounds",
          "type": "uint256[2]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "amplification",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "amplification",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "createPairETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETHSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe4bb0567045a2f3a5cb68dd69e367a7bc5c6d988735a17d63c9d58ec4712c4b8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
    "transactionIndex": 0,
    "gasUsed": "2165775",
    "logsBloom": "0x
    "blockHash": "0xd4f42b7b93ba7d77e4f79cc74f862e5eeb9d61c853cdfabc3406426e72628f64",
    "transactionHash": "0xe4bb0567045a2f3a5cb68dd69e367a7bc5c6d988735a17d63c9d58ec4712c4b8",
    "logs": [],
    "blockNumber": 14,
    "cumulativeGasUsed": "2165775",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9"
  ],
  "solcInputHash": "9c15a78ba09b8f1198a45058df526d4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"vReserveRatioBounds\",\"type\":\"uint256[2]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"vReserveRatioBounds\",\"type\":\"uint256[2]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amplification\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"amplification\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"createPairETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETHSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WeightedPairManagerV2.sol\":\"RequiemPairManagerV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999999},\"remappings\":[]},\"sources\":{\"contracts/WeightedPairManagerV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./interfaces/IRequiemWeightedPairFactoryV2.sol\\\";\\nimport \\\"./interfaces/IWeightedFormulaV2.sol\\\";\\nimport \\\"./interfaces/IRequiemWeightedPairV2.sol\\\";\\nimport \\\"./interfaces/IRequiemSwap.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IRequiemWeightedPairManagerV2.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\ncontract RequiemPairManagerV2 is IWeightedPairManagerV2 {\\n    address public immutable override factory;\\n    uint256 internal constant Q112 = 2**112;\\n    uint256 internal constant MIN_VRESERVE_RATIO = 0;\\n    uint256 internal constant MAX_VRESERVE_RATIO = 2**256 - 1;\\n    address public immutable override formula;\\n    address public immutable override WETH;\\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"Router: EXPIRED\\\");\\n        _;\\n    }\\n\\n    constructor(address _factory, address _WETH) {\\n        factory = _factory;\\n        formula = IRequiemWeightedPairFactoryV2(_factory).formula();\\n        WETH = _WETH;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH);\\n        // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    // **** ADD LIQUIDITY ****\\n    function _addLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256[2] memory vReserveRatioBounds\\n    ) internal virtual returns (uint256 amountA, uint256 amountB) {\\n        (uint256 reserveA, uint256 reserveB, uint256 vReserveA, uint256 vReserveB) = IWeightedFormulaV2(formula).getReserves(pair, tokenA, tokenB);\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n        } else {\\n            uint256 amountBOptimal = IWeightedFormulaV2(formula).quote(amountADesired, reserveA, reserveB);\\n            if (amountBOptimal <= amountBDesired) {\\n                require(amountBOptimal >= amountBMin, \\\"Router: INSUFFICIENT_B_AMOUNT\\\");\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n            } else {\\n                uint256 amountAOptimal = IWeightedFormulaV2(formula).quote(amountBDesired, reserveB, reserveA);\\n                assert(amountAOptimal <= amountADesired);\\n                require(amountAOptimal >= amountAMin, \\\"Router: INSUFFICIENT_A_AMOUNT\\\");\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n            }\\n            uint256 currentRate = (vReserveB * Q112) / vReserveA;\\n            require(currentRate >= vReserveRatioBounds[0] && currentRate <= vReserveRatioBounds[1], \\\"Router: OUT_OF_BOUNDS_VRESERVE\\\");\\n        }\\n    }\\n\\n    function _addLiquidityToken(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256[2] memory vReserveRatioBounds\\n    ) internal returns (uint256 amountA, uint256 amountB) {\\n        (amountA, amountB) = _addLiquidity(pair, tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, vReserveRatioBounds);\\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\n    }\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee,\\n        uint32 amplification,\\n        address to\\n    ) public virtual override returns (uint256 liquidity) {\\n        address pair = IRequiemWeightedPairFactoryV2(factory).createPair(tokenA, tokenB, tokenWeightA, swapFee, amplification);\\n        uint256[2] memory vReserveRatioBounds = [MIN_VRESERVE_RATIO, MAX_VRESERVE_RATIO];\\n        _addLiquidityToken(pair, tokenA, tokenB, amountA, amountB, 0, 0, vReserveRatioBounds);\\n        liquidity = IRequiemWeightedPairV2(pair).mint(to);\\n    }\\n\\n    function addLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256[2] memory vReserveRatioBounds,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        virtual\\n        override\\n        ensure(deadline)\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        )\\n    {\\n        (amountA, amountB) = _addLiquidityToken(pair, tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, vReserveRatioBounds);\\n        liquidity = IRequiemWeightedPairV2(pair).mint(to);\\n    }\\n\\n    function _addLiquidityETH(\\n        address pair,\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256[2] memory vReserveRatioBounds,\\n        address to\\n    )\\n        internal\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        )\\n    {\\n        (amountToken, amountETH) = _addLiquidity(pair, token, WETH, amountTokenDesired, msg.value, amountTokenMin, amountETHMin, vReserveRatioBounds);\\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\\n        transferETHTo(amountETH, pair);\\n        liquidity = IRequiemWeightedPairV2(pair).mint(to);\\n        // refund dust eth, if any\\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\\n    }\\n\\n    function createPairETH(\\n        address token,\\n        uint256 amountToken,\\n        uint32 tokenWeight,\\n        uint32 swapFee,\\n        uint32 amplification,\\n        address to\\n    ) public payable virtual override returns (uint256 liquidity) {\\n        address pair = IRequiemWeightedPairFactoryV2(factory).createPair(token, WETH, tokenWeight, swapFee, amplification);\\n        uint256[2] memory vReserveRatioBounds = [MIN_VRESERVE_RATIO, MAX_VRESERVE_RATIO];\\n        (, , liquidity) = _addLiquidityETH(pair, token, amountToken, 0, 0, vReserveRatioBounds, to);\\n    }\\n\\n    function addLiquidityETH(\\n        address pair,\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256[2] memory vReserveRatioBounds,\\n        address to,\\n        uint256 deadline\\n    )\\n        public\\n        payable\\n        virtual\\n        override\\n        ensure(deadline)\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        )\\n    {\\n        (amountToken, amountETH, liquidity) = _addLiquidityETH(pair, token, amountTokenDesired, amountTokenMin, amountETHMin, vReserveRatioBounds, to);\\n    }\\n\\n    // **** REMOVE LIQUIDITY ****\\n    function _removeLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to\\n    ) internal returns (uint256 amountA, uint256 amountB) {\\n        require(IRequiemWeightedPairFactoryV2(factory).isPair(pair), \\\"Router: Invalid pair\\\");\\n        IRequiemWeightedPairV2(pair).transferFrom(msg.sender, pair, liquidity);\\n        // send liquidity to pair\\n        (uint256 amount0, uint256 amount1) = IRequiemWeightedPairV2(pair).burn(to);\\n        (address token0, ) = IWeightedFormulaV2(formula).sortTokens(tokenA, tokenB);\\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\n        require(amountA >= amountAMin, \\\"Router: INSUFFICIENT_A_AMOUNT\\\");\\n        require(amountB >= amountBMin, \\\"Router: INSUFFICIENT_B_AMOUNT\\\");\\n    }\\n\\n    function removeLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) public virtual override ensure(deadline) returns (uint256 amountA, uint256 amountB) {\\n        (amountA, amountB) = _removeLiquidity(pair, tokenA, tokenB, liquidity, amountAMin, amountBMin, to);\\n    }\\n\\n    function removeLiquidityETH(\\n        address pair,\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) public virtual override ensure(deadline) returns (uint256 amountToken, uint256 amountETH) {\\n        (amountToken, amountETH) = _removeLiquidity(pair, token, WETH, liquidity, amountTokenMin, amountETHMin, address(this));\\n        TransferHelper.safeTransfer(token, to, amountToken);\\n        transferAll(ETH_ADDRESS, to, amountETH);\\n    }\\n\\n    function removeLiquidityWithPermit(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual override ensure(deadline) returns (uint256 amountA, uint256 amountB) {\\n        {\\n            uint256 value = approveMax ? type(uint256).max : liquidity;\\n            IRequiemWeightedPairV2(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        }\\n        (amountA, amountB) = _removeLiquidity(pair, tokenA, tokenB, liquidity, amountAMin, amountBMin, to);\\n    }\\n\\n    function removeLiquidityETHWithPermit(\\n        address pair,\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual override returns (uint256 amountToken, uint256 amountETH) {\\n        uint256 value = approveMax ? type(uint256).max : liquidity;\\n        IRequiemWeightedPairV2(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        (amountToken, amountETH) = removeLiquidityETH(pair, token, liquidity, amountTokenMin, amountETHMin, to, deadline);\\n    }\\n\\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address pair,\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) public virtual override ensure(deadline) returns (uint256 amountETH) {\\n        (, amountETH) = removeLiquidity(pair, token, WETH, liquidity, amountTokenMin, amountETHMin, address(this), deadline);\\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\\n        transferAll(ETH_ADDRESS, to, amountETH);\\n    }\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address pair,\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual override returns (uint256 amountETH) {\\n        uint256 value = approveMax ? type(uint256).max : liquidity;\\n        IRequiemWeightedPairV2(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(pair, token, liquidity, amountTokenMin, amountETHMin, to, deadline);\\n    }\\n\\n    function transferETHTo(uint256 amount, address to) internal {\\n        IWETH(WETH).deposit{value: amount}();\\n        assert(IWETH(WETH).transfer(to, amount));\\n    }\\n\\n    function transferAll(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n\\n        if (isETH(token)) {\\n            IWETH(WETH).withdraw(amount);\\n            TransferHelper.safeTransferETH(to, amount);\\n        } else {\\n            TransferHelper.safeTransfer(token, to, amount);\\n        }\\n        return true;\\n    }\\n\\n    function isETH(address token) internal pure returns (bool) {\\n        return (token == ETH_ADDRESS);\\n    }\\n}\\n\",\"keccak256\":\"0x5d24b578870a8b8be99bf7552c93eb49c115dbad72539ebd18f0ad1243acbd67\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xab442747ba7fbbe95ce3e26fac7ff53c7ed1f2ddb11ee665905bcd85593ac42e\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemPairERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemPairERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0xd26126b87195232c895a1ceccb7f255652a775e948f72c104828178ad0f59ae6\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IRequiemSwap {\\n    // this funtion requires the correctly calculated amounts as input\\n    // the others are supposed to implement that calculation\\n    // no return value required since the amounts are already known\\n    function onSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address to\\n    ) external;\\n\\n    //\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external returns (uint256);\\n\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to\\n    ) external returns (uint256);\\n\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (uint256);\\n\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x63771a8851ddc9a45c2b814e46c5b5491477aefeff7dd3b4043c8ea61dee5dad\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPairFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\ninterface IRequiemWeightedPairFactoryV2 {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function protocolFee() external view returns (uint256);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function isPair(address) external view returns (bool);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 initialFee,\\n        uint32 initialAmp\\n    ) external returns (address pair);\\n\\n    function getParameters(address pair)\\n        external\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee,\\n            uint32 amp\\n        );\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setProtocolFee(uint256) external;\\n}\\n\",\"keccak256\":\"0xa0172ff52b829d3c554e478fcb1afabe4a14b8e8e58a14fdbff59562701e9cb6\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPairManagerV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IWeightedPairManagerV2 {\\n\\n    function factory() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee,\\n        uint32 amplification,\\n        address to\\n    ) external returns (uint256 liquidity);\\n\\n    function createPairETH(\\n        address token,\\n        uint256 amountToken,\\n        uint32 tokenWeight,\\n        uint32 swapFee,\\n        uint32 amplification,\\n        address to\\n    ) external payable returns (uint256 liquidity);\\n\\n    function addLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        uint256[2] memory vReserveRatioBounds,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address pair,\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        uint256[2] memory vReserveRatioBounds,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address pair,\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address pair,\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address pair,\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address pair,\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n}\\n\",\"keccak256\":\"0xb3b93a883cb87474143c89ef3a42b8f55d8b1d3e1caf2c7f3daa6fd99a631bc6\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPairV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IRequiemPairERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemWeightedPairV2 is IRequiemPairERC20 {\\n    struct ReserveData {\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 vReserve0;\\n        uint256 vReserve1;\\n    }\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1, uint112 vReserve0, uint112 vReserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (ReserveData calldata reserveData);\\n\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n    function getParameters()\\n        external\\n        view\\n        returns (\\n            uint32 _tokenWeight0,\\n            uint32 _tokenWeight1,\\n            uint32 _swapFee,\\n            uint32 _amp\\n        );\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function setSwapParams(uint32, uint32) external;\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address,\\n        address,\\n        uint32\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa4ccbd955e0cc8e9ddc1053b987c97e8b901389a53ab000268718889a887635d\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for WETH9.\\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x600e2568f99be94742a908a8fd69ce6c956b3c995a85ba7feb7809326fe19f1f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IWeightedFormulaV2.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.13;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IWeightedFormulaV2 {\\n    function getPairParameters(address pair, address tokenA)\\n        external\\n        view\\n        returns (\\n            address tokenB,\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint32 tokenWeightA,\\n            uint32 tokenWeightB,\\n            uint32 swapFee\\n        );\\n\\n    function getFactoryParameters(\\n        address factory,\\n        address pair,\\n        address tokenA\\n    )\\n        external\\n        view\\n        returns (\\n            address tokenB,\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint32 tokenWeightA,\\n            uint32 tokenWeightB,\\n            uint32 swapFee\\n        );\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint256 amountIn);\\n\\n    function getPairAmountIn(\\n        address pair,\\n        address tokenIn,\\n        uint256 amountOut\\n    ) external view returns (uint256 amountIn);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint256 amountOut);\\n\\n    function getPairAmountOut(\\n        address pair,\\n        address tokenIn,\\n        uint256 amountIn\\n    ) external view returns (uint256 amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function ensureConstantValue(\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 balance0Adjusted,\\n        uint256 balance1Adjusted,\\n        uint32 tokenWeight0\\n    ) external view returns (bool);\\n\\n    function getReserves(\\n        address pair,\\n        address tokenA,\\n        address tokenB\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint256 vReserveA,\\n            uint256 vReserveB\\n        );\\n\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n\\n    function mintLiquidityFee(\\n        uint256 totalLiquidity,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112 collectedFee0,\\n        uint112 collectedFee1\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xed86f52700af628f484a7142e23f7f435906fe57a6e396045baf43a76e91d60e\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n// solhint-disable avoid-low-level-calls, reason-string\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x429ddbf2e1e8c7be482e806aee97439e670a4466659433e6439b59f9200b4cd4\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200282f3803806200282f8339810160408190526200003491620000db565b6001600160a01b038216608081905260408051634b75f54f60e01b81529051634b75f54f916004808201926020929091908290030181865afa1580156200007f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a5919062000113565b6001600160a01b0390811660a0521660c0525062000138565b80516001600160a01b0381168114620000d657600080fd5b919050565b60008060408385031215620000ef57600080fd5b620000fa83620000be565b91506200010a60208401620000be565b90509250929050565b6000602082840312156200012657600080fd5b6200013182620000be565b9392505050565b60805160a05160c05161265f620001d06000396000818160f3015281816102680152818161074d015281816109d601528181610bd201528181611303015281816115e501528181611c460152611d0e0152600081816101a701528181611165015281816116dd015281816117ae01526118ec0152600081816102bc0152818161079601528181610d340152610f09015261265f6000f3fe6080604052600436106100d65760003560e01c8063ad5c46481161007f578063d72c144711610059578063d72c1447146102de578063e1f4a784146102f1578063ebb5d2e914610311578063f56914da1461033157600080fd5b8063ad5c464814610256578063b56b681d1461028a578063c45a0155146102aa57600080fd5b80634c17fd7c116100b05780634c17fd7c146101ee5780636aaf6a2514610223578063a4aabb081461023657600080fd5b80630e2f024c14610127578063243419341461015a5780634b75f54f1461019557600080fd5b36610122573373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461012057610120611e9e565b005b600080fd5b34801561013357600080fd5b50610147610142366004611f16565b610351565b6040519081526020015b60405180910390f35b34801561016657600080fd5b5061017a610175366004612057565b61044e565b60408051938452602084019290925290820152606001610151565b3480156101a157600080fd5b506101c97f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610151565b3480156101fa57600080fd5b5061020e6102093660046120f9565b61057f565b60408051928352602083019190915201610151565b6101476102313660046121c9565b610708565b34801561024257600080fd5b5061020e610251366004611f16565b61085e565b34801561026257600080fd5b506101c97f000000000000000000000000000000000000000000000000000000000000000081565b34801561029657600080fd5b5061020e6102a536600461223c565b610961565b3480156102b657600080fd5b506101c97f000000000000000000000000000000000000000000000000000000000000000081565b61017a6102ec3660046122ae565b610a3b565b3480156102fd57600080fd5b5061020e61030c366004612333565b610acf565b34801561031d57600080fd5b5061014761032c36600461223c565b610b5e565b34801561033d57600080fd5b5061014761034c3660046123b8565b610cc6565b6000808561035f578a610381565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290526064810189905260ff8716608482015260a4810186905260c4810185905290915073ffffffffffffffffffffffffffffffffffffffff8e169063d505accf9060e401600060405180830381600087803b15801561041657600080fd5b505af115801561042a573d6000803e3d6000fd5b5050505061043d8d8d8d8d8d8d8d610b5e565b9d9c50505050505050505050505050565b600080600083428110156104c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064015b60405180910390fd5b6104d38e8e8e8e8e8e8e8e610e82565b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152929650909450908f1690636a627842906024016020604051808303816000875af1158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c9190612449565b9150509a509a509a975050505050505050565b60008086428110156105ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016104ba565b6000876105fa578c61061c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b90508f73ffffffffffffffffffffffffffffffffffffffff1663d505accf3330848d8c8c8c6040518863ffffffff1660e01b81526004016106ac979695949392919073ffffffffffffffffffffffffffffffffffffffff97881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b600060405180830381600087803b1580156106c657600080fd5b505af11580156106da573d6000803e3d6000fd5b50505050506106ee8f8f8f8f8f8f8f610ebf565b8093508194505050509c509c9a5050505050505050505050565b6040517f5e0464ae00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015263ffffffff808716604484015280861660648401528416608483015260009182917f00000000000000000000000000000000000000000000000000000000000000001690635e0464ae9060a4016020604051808303816000875af11580156107df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108039190612462565b905060006040518060400160405280600081526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff815250905061084f828a8a600080868a6112f7565b9b9a5050505050505050505050565b60008060008661086e578b610890565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b6040517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101829052606481018a905260ff8816608482015260a4810187905260c4810186905290915073ffffffffffffffffffffffffffffffffffffffff8f169063d505accf9060e401600060405180830381600087803b15801561092557600080fd5b505af1158015610939573d6000803e3d6000fd5b5050505061094c8e8e8e8e8e8e8e610961565b909f909e509c50505050505050505050505050565b60008082428110156109cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016104ba565b6109fe8a8a7f00000000000000000000000000000000000000000000000000000000000000008b8b8b30610ebf565b9093509150610a0e898685611403565b610a2d73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8684611573565b505097509795505050505050565b60008060008342811015610aab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016104ba565b610aba8c8c8c8c8c8c8c6112f7565b919e909d50909b509950505050505050505050565b6000808242811015610b3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016104ba565b610b4c8b8b8b8b8b8b8b610ebf565b909c909b509950505050505050505050565b60008142811015610bcb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016104ba565b610bfb89897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a610acf565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152909350610c9a91508990869073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c959190612449565b611403565b610cb973eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8584611573565b5050979650505050505050565b6040517f5e0464ae00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152888116602483015263ffffffff808716604484015280861660648401528416608483015260009182917f00000000000000000000000000000000000000000000000000000000000000001690635e0464ae9060a4016020604051808303816000875af1158015610d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da19190612462565b905060006040518060400160405280600081526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8152509050610dee828c8c8c8c60008088610e82565b50506040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152831690636a627842906024016020604051808303816000875af1158015610e5e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084f9190612449565b600080610e958a8a8a8a8a8a8a8a61167b565b9092509050610ea689338c85611aa6565b610eb288338c84611aa6565b9850989650505050505050565b6040517fe5e31b1300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063e5e31b1390602401602060405180830381865afa158015610f50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f74919061247f565b610fda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f526f757465723a20496e76616c6964207061697200000000000000000000000060448201526064016104ba565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8a166024820181905260448201889052906323b872dd906064016020604051808303816000875af1158015611054573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611078919061247f565b506040517f89afcb4400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260009182918c16906389afcb449060240160408051808303816000875af11580156110eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110f919061249c565b6040517f544caa5600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d811660048301528c811660248301529294509092506000917f0000000000000000000000000000000000000000000000000000000000000000169063544caa56906044016040805180830381865afa1580156111ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cf91906124c0565b5090508073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff161461120c57818361120f565b82825b90955093508785101561127e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f415f414d4f554e5400000060448201526064016104ba565b868410156112e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f425f414d4f554e5400000060448201526064016104ba565b50505097509795505050505050565b600080600061132c8a8a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c8c61167b565b909350915061133d89338c86611aa6565b611347828b611c44565b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528b1690636a627842906024016020604051808303816000875af11580156113b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d99190612449565b9050813411156113f6576113f6336113f18434612529565b611d8f565b9750975097945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283929087169161149a9190612540565b6000604051808303816000865af19150503d80600081146114d7576040519150601f19603f3d011682016040523d82523d6000602084013e6114dc565b606091505b5091509150818015611506575080511580611506575080806020019051810190611506919061247f565b61156c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016104ba565b5050505050565b60008160000361158557506001611674565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff851603611665576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b15801561163e57600080fd5b505af1158015611652573d6000803e3d6000fd5b505050506116608383611d8f565b611670565b611670848484611403565b5060015b9392505050565b6040517f3274946100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015288811660248301528781166044830152600091829182918291829182917f00000000000000000000000000000000000000000000000000000000000000001690633274946190606401608060405180830381865afa158015611724573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611748919061257b565b935093509350935083600014801561175e575082155b1561176e578a9550899450611a95565b6040517fad615dec000000000000000000000000000000000000000000000000000000008152600481018c905260248101859052604481018490526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063ad615dec90606401602060405180830381865afa15801561180a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182e9190612449565b90508a81116118ac57888110156118a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f425f414d4f554e5400000060448201526064016104ba565b8b96509450846119ee565b6040517fad615dec000000000000000000000000000000000000000000000000000000008152600481018c905260248101859052604481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063ad615dec90606401602060405180830381865afa158015611948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196c9190612449565b90508c81111561197e5761197e611e9e565b8a8110156119e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f415f414d4f554e5400000060448201526064016104ba565b96508a95505b600083611a0a6e010000000000000000000000000000856125b1565b611a1491906125ee565b89519091508110801590611a2c575060208901518111155b611a92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f526f757465723a204f55545f4f465f424f554e44535f5652455345525645000060448201526064016104ba565b50505b505050509850989650505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790529151600092839290881691611b459190612540565b6000604051808303816000865af19150503d8060008114611b82576040519150601f19603f3d011682016040523d82523d6000602084013e611b87565b606091505b5091509150818015611bb1575080511580611bb1575080806020019051810190611bb1919061247f565b611c3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f464160448201527f494c45440000000000000000000000000000000000000000000000000000000060648201526084016104ba565b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015611cac57600080fd5b505af1158015611cc0573d6000803e3d6000fd5b50506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018790527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af1158015611d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7f919061247f565b611d8b57611d8b611e9e565b5050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff8416908390604051611dc69190612540565b60006040518083038185875af1925050503d8060008114611e03576040519150601f19603f3d011682016040523d82523d6000602084013e611e08565b606091505b5050905080611e99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201527f4c4544000000000000000000000000000000000000000000000000000000000060648201526084016104ba565b505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114611eef57600080fd5b50565b8015158114611eef57600080fd5b803560ff81168114611f1157600080fd5b919050565b60008060008060008060008060008060006101608c8e031215611f3857600080fd5b8b35611f4381611ecd565b9a5060208c0135611f5381611ecd565b995060408c0135985060608c0135975060808c0135965060a08c0135611f7881611ecd565b955060c08c0135945060e08c0135611f8f81611ef2565b9350611f9e6101008d01611f00565b92506101208c013591506101408c013590509295989b509295989b9093969950565b600082601f830112611fd157600080fd5b6040516040810181811067ffffffffffffffff8211171561201b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b806040525080604084018581111561203257600080fd5b845b8181101561204c578035835260209283019201612034565b509195945050505050565b6000806000806000806000806000806101608b8d03121561207757600080fd5b8a3561208281611ecd565b995060208b013561209281611ecd565b985060408b01356120a281611ecd565b975060608b0135965060808b0135955060a08b0135945060c08b013593506120cd8c60e08d01611fc0565b92506101208b01356120de81611ecd565b809250506101408b013590509295989b9194979a5092959850565b6000806000806000806000806000806000806101808d8f03121561211c57600080fd5b8c3561212781611ecd565b9b5060208d013561213781611ecd565b9a5060408d013561214781611ecd565b995060608d0135985060808d0135975060a08d0135965060c08d013561216c81611ecd565b955060e08d013594506101008d013561218481611ef2565b93506121936101208e01611f00565b92506101408d013591506101608d013590509295989b509295989b509295989b565b803563ffffffff81168114611f1157600080fd5b60008060008060008060c087890312156121e257600080fd5b86356121ed81611ecd565b955060208701359450612202604088016121b5565b9350612210606088016121b5565b925061221e608088016121b5565b915060a087013561222e81611ecd565b809150509295509295509295565b600080600080600080600060e0888a03121561225757600080fd5b873561226281611ecd565b9650602088013561227281611ecd565b955060408801359450606088013593506080880135925060a088013561229781611ecd565b8092505060c0880135905092959891949750929550565b600080600080600080600080610120898b0312156122cb57600080fd5b88356122d681611ecd565b975060208901356122e681611ecd565b965060408901359550606089013594506080890135935061230a8a60a08b01611fc0565b925060e089013561231a81611ecd565b8092505061010089013590509295985092959890939650565b600080600080600080600080610100898b03121561235057600080fd5b883561235b81611ecd565b9750602089013561236b81611ecd565b9650604089013561237b81611ecd565b9550606089013594506080890135935060a0890135925060c08901356123a081611ecd565b8092505060e089013590509295985092959890939650565b600080600080600080600080610100898b0312156123d557600080fd5b88356123e081611ecd565b975060208901356123f081611ecd565b9650604089013595506060890135945061240c60808a016121b5565b935061241a60a08a016121b5565b925061242860c08a016121b5565b915060e089013561243881611ecd565b809150509295985092959890939650565b60006020828403121561245b57600080fd5b5051919050565b60006020828403121561247457600080fd5b815161167481611ecd565b60006020828403121561249157600080fd5b815161167481611ef2565b600080604083850312156124af57600080fd5b505080516020909101519092909150565b600080604083850312156124d357600080fd5b82516124de81611ecd565b60208401519092506124ef81611ecd565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561253b5761253b6124fa565b500390565b6000825160005b818110156125615760208186018101518583015201612547565b81811115612570576000828501525b509190910192915050565b6000806000806080858703121561259157600080fd5b505082516020840151604085015160609095015191969095509092509050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156125e9576125e96124fa565b500290565b600082612624577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212208609d56410814a5ba9f1ec2201a6e9e83285b2eb2a0e1bd7ab6c910190b155d164736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100d65760003560e01c8063ad5c46481161007f578063d72c144711610059578063d72c1447146102de578063e1f4a784146102f1578063ebb5d2e914610311578063f56914da1461033157600080fd5b8063ad5c464814610256578063b56b681d1461028a578063c45a0155146102aa57600080fd5b80634c17fd7c116100b05780634c17fd7c146101ee5780636aaf6a2514610223578063a4aabb081461023657600080fd5b80630e2f024c14610127578063243419341461015a5780634b75f54f1461019557600080fd5b36610122573373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461012057610120611e9e565b005b600080fd5b34801561013357600080fd5b50610147610142366004611f16565b610351565b6040519081526020015b60405180910390f35b34801561016657600080fd5b5061017a610175366004612057565b61044e565b60408051938452602084019290925290820152606001610151565b3480156101a157600080fd5b506101c97f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610151565b3480156101fa57600080fd5b5061020e6102093660046120f9565b61057f565b60408051928352602083019190915201610151565b6101476102313660046121c9565b610708565b34801561024257600080fd5b5061020e610251366004611f16565b61085e565b34801561026257600080fd5b506101c97f000000000000000000000000000000000000000000000000000000000000000081565b34801561029657600080fd5b5061020e6102a536600461223c565b610961565b3480156102b657600080fd5b506101c97f000000000000000000000000000000000000000000000000000000000000000081565b61017a6102ec3660046122ae565b610a3b565b3480156102fd57600080fd5b5061020e61030c366004612333565b610acf565b34801561031d57600080fd5b5061014761032c36600461223c565b610b5e565b34801561033d57600080fd5b5061014761034c3660046123b8565b610cc6565b6000808561035f578a610381565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290526064810189905260ff8716608482015260a4810186905260c4810185905290915073ffffffffffffffffffffffffffffffffffffffff8e169063d505accf9060e401600060405180830381600087803b15801561041657600080fd5b505af115801561042a573d6000803e3d6000fd5b5050505061043d8d8d8d8d8d8d8d610b5e565b9d9c50505050505050505050505050565b600080600083428110156104c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064015b60405180910390fd5b6104d38e8e8e8e8e8e8e8e610e82565b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152929650909450908f1690636a627842906024016020604051808303816000875af1158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c9190612449565b9150509a509a509a975050505050505050565b60008086428110156105ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016104ba565b6000876105fa578c61061c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b90508f73ffffffffffffffffffffffffffffffffffffffff1663d505accf3330848d8c8c8c6040518863ffffffff1660e01b81526004016106ac979695949392919073ffffffffffffffffffffffffffffffffffffffff97881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b600060405180830381600087803b1580156106c657600080fd5b505af11580156106da573d6000803e3d6000fd5b50505050506106ee8f8f8f8f8f8f8f610ebf565b8093508194505050509c509c9a5050505050505050505050565b6040517f5e0464ae00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015263ffffffff808716604484015280861660648401528416608483015260009182917f00000000000000000000000000000000000000000000000000000000000000001690635e0464ae9060a4016020604051808303816000875af11580156107df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108039190612462565b905060006040518060400160405280600081526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff815250905061084f828a8a600080868a6112f7565b9b9a5050505050505050505050565b60008060008661086e578b610890565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b6040517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101829052606481018a905260ff8816608482015260a4810187905260c4810186905290915073ffffffffffffffffffffffffffffffffffffffff8f169063d505accf9060e401600060405180830381600087803b15801561092557600080fd5b505af1158015610939573d6000803e3d6000fd5b5050505061094c8e8e8e8e8e8e8e610961565b909f909e509c50505050505050505050505050565b60008082428110156109cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016104ba565b6109fe8a8a7f00000000000000000000000000000000000000000000000000000000000000008b8b8b30610ebf565b9093509150610a0e898685611403565b610a2d73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8684611573565b505097509795505050505050565b60008060008342811015610aab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016104ba565b610aba8c8c8c8c8c8c8c6112f7565b919e909d50909b509950505050505050505050565b6000808242811015610b3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016104ba565b610b4c8b8b8b8b8b8b8b610ebf565b909c909b509950505050505050505050565b60008142811015610bcb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016104ba565b610bfb89897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a610acf565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152909350610c9a91508990869073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c959190612449565b611403565b610cb973eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8584611573565b5050979650505050505050565b6040517f5e0464ae00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152888116602483015263ffffffff808716604484015280861660648401528416608483015260009182917f00000000000000000000000000000000000000000000000000000000000000001690635e0464ae9060a4016020604051808303816000875af1158015610d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da19190612462565b905060006040518060400160405280600081526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8152509050610dee828c8c8c8c60008088610e82565b50506040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152831690636a627842906024016020604051808303816000875af1158015610e5e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084f9190612449565b600080610e958a8a8a8a8a8a8a8a61167b565b9092509050610ea689338c85611aa6565b610eb288338c84611aa6565b9850989650505050505050565b6040517fe5e31b1300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063e5e31b1390602401602060405180830381865afa158015610f50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f74919061247f565b610fda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f526f757465723a20496e76616c6964207061697200000000000000000000000060448201526064016104ba565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8a166024820181905260448201889052906323b872dd906064016020604051808303816000875af1158015611054573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611078919061247f565b506040517f89afcb4400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260009182918c16906389afcb449060240160408051808303816000875af11580156110eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110f919061249c565b6040517f544caa5600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d811660048301528c811660248301529294509092506000917f0000000000000000000000000000000000000000000000000000000000000000169063544caa56906044016040805180830381865afa1580156111ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cf91906124c0565b5090508073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff161461120c57818361120f565b82825b90955093508785101561127e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f415f414d4f554e5400000060448201526064016104ba565b868410156112e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f425f414d4f554e5400000060448201526064016104ba565b50505097509795505050505050565b600080600061132c8a8a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c8c61167b565b909350915061133d89338c86611aa6565b611347828b611c44565b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528b1690636a627842906024016020604051808303816000875af11580156113b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d99190612449565b9050813411156113f6576113f6336113f18434612529565b611d8f565b9750975097945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283929087169161149a9190612540565b6000604051808303816000865af19150503d80600081146114d7576040519150601f19603f3d011682016040523d82523d6000602084013e6114dc565b606091505b5091509150818015611506575080511580611506575080806020019051810190611506919061247f565b61156c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016104ba565b5050505050565b60008160000361158557506001611674565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff851603611665576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b15801561163e57600080fd5b505af1158015611652573d6000803e3d6000fd5b505050506116608383611d8f565b611670565b611670848484611403565b5060015b9392505050565b6040517f3274946100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015288811660248301528781166044830152600091829182918291829182917f00000000000000000000000000000000000000000000000000000000000000001690633274946190606401608060405180830381865afa158015611724573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611748919061257b565b935093509350935083600014801561175e575082155b1561176e578a9550899450611a95565b6040517fad615dec000000000000000000000000000000000000000000000000000000008152600481018c905260248101859052604481018490526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063ad615dec90606401602060405180830381865afa15801561180a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182e9190612449565b90508a81116118ac57888110156118a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f425f414d4f554e5400000060448201526064016104ba565b8b96509450846119ee565b6040517fad615dec000000000000000000000000000000000000000000000000000000008152600481018c905260248101859052604481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063ad615dec90606401602060405180830381865afa158015611948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196c9190612449565b90508c81111561197e5761197e611e9e565b8a8110156119e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f526f757465723a20494e53554646494349454e545f415f414d4f554e5400000060448201526064016104ba565b96508a95505b600083611a0a6e010000000000000000000000000000856125b1565b611a1491906125ee565b89519091508110801590611a2c575060208901518111155b611a92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f526f757465723a204f55545f4f465f424f554e44535f5652455345525645000060448201526064016104ba565b50505b505050509850989650505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790529151600092839290881691611b459190612540565b6000604051808303816000865af19150503d8060008114611b82576040519150601f19603f3d011682016040523d82523d6000602084013e611b87565b606091505b5091509150818015611bb1575080511580611bb1575080806020019051810190611bb1919061247f565b611c3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f464160448201527f494c45440000000000000000000000000000000000000000000000000000000060648201526084016104ba565b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015611cac57600080fd5b505af1158015611cc0573d6000803e3d6000fd5b50506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018790527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af1158015611d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7f919061247f565b611d8b57611d8b611e9e565b5050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff8416908390604051611dc69190612540565b60006040518083038185875af1925050503d8060008114611e03576040519150601f19603f3d011682016040523d82523d6000602084013e611e08565b606091505b5050905080611e99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201527f4c4544000000000000000000000000000000000000000000000000000000000060648201526084016104ba565b505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114611eef57600080fd5b50565b8015158114611eef57600080fd5b803560ff81168114611f1157600080fd5b919050565b60008060008060008060008060008060006101608c8e031215611f3857600080fd5b8b35611f4381611ecd565b9a5060208c0135611f5381611ecd565b995060408c0135985060608c0135975060808c0135965060a08c0135611f7881611ecd565b955060c08c0135945060e08c0135611f8f81611ef2565b9350611f9e6101008d01611f00565b92506101208c013591506101408c013590509295989b509295989b9093969950565b600082601f830112611fd157600080fd5b6040516040810181811067ffffffffffffffff8211171561201b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b806040525080604084018581111561203257600080fd5b845b8181101561204c578035835260209283019201612034565b509195945050505050565b6000806000806000806000806000806101608b8d03121561207757600080fd5b8a3561208281611ecd565b995060208b013561209281611ecd565b985060408b01356120a281611ecd565b975060608b0135965060808b0135955060a08b0135945060c08b013593506120cd8c60e08d01611fc0565b92506101208b01356120de81611ecd565b809250506101408b013590509295989b9194979a5092959850565b6000806000806000806000806000806000806101808d8f03121561211c57600080fd5b8c3561212781611ecd565b9b5060208d013561213781611ecd565b9a5060408d013561214781611ecd565b995060608d0135985060808d0135975060a08d0135965060c08d013561216c81611ecd565b955060e08d013594506101008d013561218481611ef2565b93506121936101208e01611f00565b92506101408d013591506101608d013590509295989b509295989b509295989b565b803563ffffffff81168114611f1157600080fd5b60008060008060008060c087890312156121e257600080fd5b86356121ed81611ecd565b955060208701359450612202604088016121b5565b9350612210606088016121b5565b925061221e608088016121b5565b915060a087013561222e81611ecd565b809150509295509295509295565b600080600080600080600060e0888a03121561225757600080fd5b873561226281611ecd565b9650602088013561227281611ecd565b955060408801359450606088013593506080880135925060a088013561229781611ecd565b8092505060c0880135905092959891949750929550565b600080600080600080600080610120898b0312156122cb57600080fd5b88356122d681611ecd565b975060208901356122e681611ecd565b965060408901359550606089013594506080890135935061230a8a60a08b01611fc0565b925060e089013561231a81611ecd565b8092505061010089013590509295985092959890939650565b600080600080600080600080610100898b03121561235057600080fd5b883561235b81611ecd565b9750602089013561236b81611ecd565b9650604089013561237b81611ecd565b9550606089013594506080890135935060a0890135925060c08901356123a081611ecd565b8092505060e089013590509295985092959890939650565b600080600080600080600080610100898b0312156123d557600080fd5b88356123e081611ecd565b975060208901356123f081611ecd565b9650604089013595506060890135945061240c60808a016121b5565b935061241a60a08a016121b5565b925061242860c08a016121b5565b915060e089013561243881611ecd565b809150509295985092959890939650565b60006020828403121561245b57600080fd5b5051919050565b60006020828403121561247457600080fd5b815161167481611ecd565b60006020828403121561249157600080fd5b815161167481611ef2565b600080604083850312156124af57600080fd5b505080516020909101519092909150565b600080604083850312156124d357600080fd5b82516124de81611ecd565b60208401519092506124ef81611ecd565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561253b5761253b6124fa565b500390565b6000825160005b818110156125615760208186018101518583015201612547565b81811115612570576000828501525b509190910192915050565b6000806000806080858703121561259157600080fd5b505082516020840151604085015160609095015191969095509092509050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156125e9576125e96124fa565b500290565b600082612624577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212208609d56410814a5ba9f1ec2201a6e9e83285b2eb2a0e1bd7ab6c910190b155d164736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}