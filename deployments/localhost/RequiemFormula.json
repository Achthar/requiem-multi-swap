{
  "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserve0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserve1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance0Adjusted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance1Adjusted",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        }
      ],
      "name": "ensureConstantValue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightIn",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightOut",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightIn",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightOut",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getFactoryAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getFactoryAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getFactoryReserveAndWeights",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightB",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getFactoryWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getOtherToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "getPairAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getPairAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getReserveAndWeights",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightB",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint112",
          "name": "reserve0",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "reserve1",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint112",
          "name": "collectedFee0",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "collectedFee1",
          "type": "uint112"
        }
      ],
      "name": "mintLiquidityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "sortTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x96de2d6608d05ba14459a96989ad4c0056caf994334944e75215dfd01fdbb526",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
    "transactionIndex": 0,
    "gasUsed": "5675819",
    "logsBloom": "0x
    "blockHash": "0x0ee0beda5191e96984890f7104ad4c9d23b4d152e95e3cc4d28938bf2c45983f",
    "transactionHash": "0x96de2d6608d05ba14459a96989ad4c0056caf994334944e75215dfd01fdbb526",
    "logs": [],
    "blockNumber": 10,
    "cumulativeGasUsed": "5675819",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1c81cdd9661afd91397c984310138aac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance0Adjusted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance1Adjusted\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"}],\"name\":\"ensureConstantValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightIn\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightOut\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightIn\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightOut\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getFactoryAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getFactoryAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getFactoryReserveAndWeights\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getFactoryWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getOtherToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getPairAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getPairAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getReserveAndWeights\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"collectedFee0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"collectedFee1\",\"type\":\"uint112\"}],\"name\":\"mintLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAmountIn(uint256,uint256,uint256,uint32,uint32,uint32)\":{\"details\":\"given an output amount of an asset and pair reserves, returns a required input amount of the other asset Formula: return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\",\"params\":{\"amountOut\":\"target reserve amount\",\"reserveIn\":\"source reserve balance\",\"reserveOut\":\"target reserve balance\",\"swapFee\":\"swap fee of the conversion\",\"tokenWeightIn\":\"source reserve weight, represented in ppm (2-98)\",\"tokenWeightOut\":\"target reserve weight, represented in ppm (2-98)\"},\"returns\":{\"amountIn\":\"amountIn\"}},\"getAmountOut(uint256,uint256,uint256,uint32,uint32,uint32)\":{\"details\":\"given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset, Formula: return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\",\"params\":{\"amountIn\":\"source reserve amount\",\"reserveIn\":\"source reserve balance\",\"reserveOut\":\"target reserve balance\",\"swapFee\":\"swap fee of the conversion\",\"tokenWeightIn\":\"source reserve weight, represented in ppm (2-98)\",\"tokenWeightOut\":\"target reserve weight, represented in ppm (2-98)\"},\"returns\":{\"amountOut\":\"amountOut\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemFormula.sol\":\"RequiemFormula\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/RequiemFormula.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.10;\\n\\nimport \\\"./interfaces/IRequiemFormula.sol\\\";\\nimport \\\"./interfaces/IRequiemPair.sol\\\";\\nimport \\\"./interfaces/IRequiemFactory.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string, no-unused-vars\\n\\ncontract RequiemFormula is IRequiemFormula {\\n\\n    uint256 private constant ONE = 1;\\n    uint8 private constant MIN_PRECISION = 32;\\n    uint8 private constant MAX_PRECISION = 127;\\n\\n    uint256 private constant FIXED_1 = 0x080000000000000000000000000000000;\\n    uint256 private constant FIXED_2 = 0x100000000000000000000000000000000;\\n    uint256 private constant MAX_NUM = 0x200000000000000000000000000000000;\\n\\n    uint256 private constant LN2_NUMERATOR = 0x3f80fe03f80fe03f80fe03f80fe03f8;\\n    uint256 private constant LN2_DENOMINATOR = 0x5b9de1d10bf4103d647b0955897ba80;\\n\\n    uint256 private constant OPT_LOG_MAX_VAL = 0x15bf0a8b1457695355fb8ac404e7a79e3;\\n    uint256 private constant OPT_EXP_MAX_VAL = 0x800000000000000000000000000000000;\\n\\n    uint256 private constant LAMBERT_CONV_RADIUS = 0x002f16ac6c59de6f8d5d6f63c1482a7c86;\\n    uint256 private constant LAMBERT_POS2_SAMPLE = 0x0003060c183060c183060c183060c18306;\\n    uint256 private constant LAMBERT_POS2_MAXVAL = 0x01af16ac6c59de6f8d5d6f63c1482a7c80;\\n    uint256 private constant LAMBERT_POS3_MAXVAL = 0x6b22d43e72c326539cceeef8bb48f255ff;\\n\\n    uint256 private constant MAX_UNF_WEIGHT = 0x10c6f7a0b5ed8d36b4c7f34938583621fafc8b0079a2834d26fa3fcc9ea9;\\n\\n    uint256[128] private maxExpArray;\\n\\n    function initMaxExpArray() internal {\\n        maxExpArray[32] = 0x1c35fedd14ffffffffffffffffffffffff;\\n        maxExpArray[33] = 0x1b0ce43b323fffffffffffffffffffffff;\\n        maxExpArray[34] = 0x19f0028ec1ffffffffffffffffffffffff;\\n        maxExpArray[35] = 0x18ded91f0e7fffffffffffffffffffffff;\\n        maxExpArray[36] = 0x17d8ec7f0417ffffffffffffffffffffff;\\n        maxExpArray[37] = 0x16ddc6556cdbffffffffffffffffffffff;\\n        maxExpArray[38] = 0x15ecf52776a1ffffffffffffffffffffff;\\n        maxExpArray[39] = 0x15060c256cb2ffffffffffffffffffffff;\\n        maxExpArray[40] = 0x1428a2f98d72ffffffffffffffffffffff;\\n        maxExpArray[41] = 0x13545598e5c23fffffffffffffffffffff;\\n        maxExpArray[42] = 0x1288c4161ce1dfffffffffffffffffffff;\\n        maxExpArray[43] = 0x11c592761c666fffffffffffffffffffff;\\n        maxExpArray[44] = 0x110a688680a757ffffffffffffffffffff;\\n        maxExpArray[45] = 0x1056f1b5bedf77ffffffffffffffffffff;\\n        maxExpArray[46] = 0x0faadceceeff8bffffffffffffffffffff;\\n        maxExpArray[47] = 0x0f05dc6b27edadffffffffffffffffffff;\\n        maxExpArray[48] = 0x0e67a5a25da4107fffffffffffffffffff;\\n        maxExpArray[49] = 0x0dcff115b14eedffffffffffffffffffff;\\n        maxExpArray[50] = 0x0d3e7a392431239fffffffffffffffffff;\\n        maxExpArray[51] = 0x0cb2ff529eb71e4fffffffffffffffffff;\\n        maxExpArray[52] = 0x0c2d415c3db974afffffffffffffffffff;\\n        maxExpArray[53] = 0x0bad03e7d883f69bffffffffffffffffff;\\n        maxExpArray[54] = 0x0b320d03b2c343d5ffffffffffffffffff;\\n        maxExpArray[55] = 0x0abc25204e02828dffffffffffffffffff;\\n        maxExpArray[56] = 0x0a4b16f74ee4bb207fffffffffffffffff;\\n        maxExpArray[57] = 0x09deaf736ac1f569ffffffffffffffffff;\\n        maxExpArray[58] = 0x0976bd9952c7aa957fffffffffffffffff;\\n        maxExpArray[59] = 0x09131271922eaa606fffffffffffffffff;\\n        maxExpArray[60] = 0x08b380f3558668c46fffffffffffffffff;\\n        maxExpArray[61] = 0x0857ddf0117efa215bffffffffffffffff;\\n        maxExpArray[62] = 0x07ffffffffffffffffffffffffffffffff;\\n        maxExpArray[63] = 0x07abbf6f6abb9d087fffffffffffffffff;\\n        maxExpArray[64] = 0x075af62cbac95f7dfa7fffffffffffffff;\\n        maxExpArray[65] = 0x070d7fb7452e187ac13fffffffffffffff;\\n        maxExpArray[66] = 0x06c3390ecc8af379295fffffffffffffff;\\n        maxExpArray[67] = 0x067c00a3b07ffc01fd6fffffffffffffff;\\n        maxExpArray[68] = 0x0637b647c39cbb9d3d27ffffffffffffff;\\n        maxExpArray[69] = 0x05f63b1fc104dbd39587ffffffffffffff;\\n        maxExpArray[70] = 0x05b771955b36e12f7235ffffffffffffff;\\n        maxExpArray[71] = 0x057b3d49dda84556d6f6ffffffffffffff;\\n        maxExpArray[72] = 0x054183095b2c8ececf30ffffffffffffff;\\n        maxExpArray[73] = 0x050a28be635ca2b888f77fffffffffffff;\\n        maxExpArray[74] = 0x04d5156639708c9db33c3fffffffffffff;\\n        maxExpArray[75] = 0x04a23105873875bd52dfdfffffffffffff;\\n        maxExpArray[76] = 0x0471649d87199aa990756fffffffffffff;\\n        maxExpArray[77] = 0x04429a21a029d4c1457cfbffffffffffff;\\n        maxExpArray[78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff;\\n        maxExpArray[79] = 0x03eab73b3bbfe282243ce1ffffffffffff;\\n        maxExpArray[80] = 0x03c1771ac9fb6b4c18e229ffffffffffff;\\n        maxExpArray[81] = 0x0399e96897690418f785257fffffffffff;\\n        maxExpArray[82] = 0x0373fc456c53bb779bf0ea9fffffffffff;\\n        maxExpArray[83] = 0x034f9e8e490c48e67e6ab8bfffffffffff;\\n        maxExpArray[84] = 0x032cbfd4a7adc790560b3337ffffffffff;\\n        maxExpArray[85] = 0x030b50570f6e5d2acca94613ffffffffff;\\n        maxExpArray[86] = 0x02eb40f9f620fda6b56c2861ffffffffff;\\n        maxExpArray[87] = 0x02cc8340ecb0d0f520a6af58ffffffffff;\\n        maxExpArray[88] = 0x02af09481380a0a35cf1ba02ffffffffff;\\n        maxExpArray[89] = 0x0292c5bdd3b92ec810287b1b3fffffffff;\\n        maxExpArray[90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff;\\n        maxExpArray[91] = 0x025daf6654b1eaa55fd64df5efffffffff;\\n        maxExpArray[92] = 0x0244c49c648baa98192dce88b7ffffffff;\\n        maxExpArray[93] = 0x022ce03cd5619a311b2471268bffffffff;\\n        maxExpArray[94] = 0x0215f77c045fbe885654a44a0fffffffff;\\n        maxExpArray[95] = 0x01ffffffffffffffffffffffffffffffff;\\n        maxExpArray[96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff;\\n        maxExpArray[97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff;\\n        maxExpArray[98] = 0x01c35fedd14b861eb0443f7f133fffffff;\\n        maxExpArray[99] = 0x01b0ce43b322bcde4a56e8ada5afffffff;\\n        maxExpArray[100] = 0x019f0028ec1fff007f5a195a39dfffffff;\\n        maxExpArray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff;\\n        maxExpArray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff;\\n        maxExpArray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff;\\n        maxExpArray[104] = 0x015ecf52776a1155b5bd8395814f7fffff;\\n        maxExpArray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff;\\n        maxExpArray[106] = 0x01428a2f98d728ae223ddab715be3fffff;\\n        maxExpArray[107] = 0x013545598e5c23276ccf0ede68034fffff;\\n        maxExpArray[108] = 0x01288c4161ce1d6f54b7f61081194fffff;\\n        maxExpArray[109] = 0x011c592761c666aa641d5a01a40f17ffff;\\n        maxExpArray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff;\\n        maxExpArray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff;\\n        maxExpArray[112] = 0x00faadceceeff8a0890f3875f008277fff;\\n        maxExpArray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff;\\n        maxExpArray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff;\\n        maxExpArray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff;\\n        maxExpArray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff;\\n        maxExpArray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff;\\n        maxExpArray[118] = 0x00c2d415c3db974ab32a51840c0b67edff;\\n        maxExpArray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff;\\n        maxExpArray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff;\\n        maxExpArray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf;\\n        maxExpArray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df;\\n        maxExpArray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f;\\n        maxExpArray[124] = 0x00976bd9952c7aa957f5937d790ef65037;\\n        maxExpArray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf;\\n        maxExpArray[126] = 0x008b380f3558668c46c91c49a2f8e967b9;\\n        maxExpArray[127] = 0x00857ddf0117efa215952912839f6473e6;\\n    }\\n\\n    constructor() {\\n        initMaxExpArray();\\n    }\\n\\n    /**\\n     * @dev General Description:\\n     *     Determine a value of precision.\\n     *     Calculate an integer approximation of (_baseN / _baseD) ^ (_expN / _expD) * 2 ^ precision.\\n     *     Return the result along with the precision used.\\n     *\\n     * Detailed Description:\\n     *     Instead of calculating \\\"base ^ exp\\\", we calculate \\\"e ^ (log(base) * exp)\\\".\\n     *     The value of \\\"log(base)\\\" is represented with an integer slightly smaller than \\\"log(base) * 2 ^ precision\\\".\\n     *     The larger \\\"precision\\\" is, the more accurately this value represents the real value.\\n     *     However, the larger \\\"precision\\\" is, the more bits are required in order to store this value.\\n     *     And the exponentiation function, which takes \\\"x\\\" and calculates \\\"e ^ x\\\", is limited to a maximum exponent (maximum value of \\\"x\\\").\\n     *     This maximum exponent depends on the \\\"precision\\\" used, and it is given by \\\"maxExpArray[precision] >> (MAX_PRECISION - precision)\\\".\\n     *     Hence we need to determine the highest precision which can be used for the given input, before calling the exponentiation function.\\n     *     This allows us to compute \\\"base ^ exp\\\" with maximum accuracy and without exceeding 256 bits in any of the intermediate computations.\\n     *     This functions assumes that \\\"_expN < 2 ^ 256 / log(MAX_NUM - 1)\\\", otherwise the multiplication should be replaced with a \\\"safeMul\\\".\\n     *     Since we rely on unsigned-integer arithmetic and \\\"base < 1\\\" ==> \\\"log(base) < 0\\\", this function does not support \\\"_baseN < _baseD\\\".\\n     */\\n    function power(\\n        uint256 _baseN,\\n        uint256 _baseD,\\n        uint32 _expN,\\n        uint32 _expD\\n    ) internal view returns (uint256, uint8) {\\n        require(_baseN >= _baseD, \\\"not support _baseN < _baseD\\\");\\n        require(_baseN < MAX_NUM);\\n\\n        uint256 baseLog;\\n        uint256 base = (_baseN * FIXED_1) / _baseD;\\n        if (base < OPT_LOG_MAX_VAL) {\\n            baseLog = optimalLog(base);\\n        } else {\\n            baseLog = generalLog(base);\\n        }\\n\\n        uint256 baseLogTimesExp = (baseLog * _expN) / _expD;\\n        if (baseLogTimesExp < OPT_EXP_MAX_VAL) {\\n            return (optimalExp(baseLogTimesExp), MAX_PRECISION);\\n        } else {\\n            uint8 precision = findPositionInMaxExpArray(baseLogTimesExp);\\n            return (generalExp(baseLogTimesExp >> (MAX_PRECISION - precision), precision), precision);\\n        }\\n    }\\n\\n    /**\\n     * @dev computes log(x / FIXED_1) * FIXED_1.\\n     * This functions assumes that \\\"x >= FIXED_1\\\", because the output would be negative otherwise.\\n     */\\n    function generalLog(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\\n        if (x >= FIXED_2) {\\n            uint8 count = floorLog2(x / FIXED_1);\\n            x >>= count;\\n            // now x < 2\\n            res = count * FIXED_1;\\n        }\\n\\n        // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\\n        if (x > FIXED_1) {\\n            for (uint8 i = MAX_PRECISION; i > 0; --i) {\\n                x = (x * x) / FIXED_1;\\n                // now 1 < x < 4\\n                if (x >= FIXED_2) {\\n                    x >>= 1;\\n                    // now 1 < x < 2\\n                    res += ONE << (i - 1);\\n                }\\n            }\\n        }\\n\\n        return (res * LN2_NUMERATOR) / LN2_DENOMINATOR;\\n    }\\n\\n    /**\\n     * @dev computes the largest integer smaller than or equal to the binary logarithm of the input.\\n     */\\n    function floorLog2(uint256 _n) internal pure returns (uint8) {\\n        uint8 res = 0;\\n\\n        if (_n < 256) {\\n            // At most 8 iterations\\n            while (_n > 1) {\\n                _n >>= 1;\\n                res += 1;\\n            }\\n        } else {\\n            // Exactly 8 iterations\\n            for (uint8 s = 128; s > 0; s >>= 1) {\\n                if (_n >= (ONE << s)) {\\n                    _n >>= s;\\n                    res |= s;\\n                }\\n            }\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * @dev the global \\\"maxExpArray\\\" is sorted in descending order, and therefore the following statements are equivalent:\\n     * - This function finds the position of [the smallest value in \\\"maxExpArray\\\" larger than or equal to \\\"x\\\"]\\n     * - This function finds the highest position of [a value in \\\"maxExpArray\\\" larger than or equal to \\\"x\\\"]\\n     */\\n    function findPositionInMaxExpArray(uint256 _x) internal view returns (uint8) {\\n        uint8 lo = MIN_PRECISION;\\n        uint8 hi = MAX_PRECISION;\\n\\n        while (lo + 1 < hi) {\\n            uint8 mid = (lo + hi) / 2;\\n            if (maxExpArray[mid] >= _x) lo = mid;\\n            else hi = mid;\\n        }\\n\\n        if (maxExpArray[hi] >= _x) return hi;\\n        if (maxExpArray[lo] >= _x) return lo;\\n\\n        require(false);\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev this function can be auto-generated by the script \\\"PrintFunctionGeneralExp.py\\\".\\n     * it approximates \\\"e ^ x\\\" via maclaurin summation: \\\"(x^0)/0! + (x^1)/1! + ... + (x^n)/n!\\\".\\n     * it returns \\\"e ^ (x / 2 ^ precision) * 2 ^ precision\\\", that is, the result is upshifted for accuracy.\\n     * the global \\\"maxExpArray\\\" maps each \\\"precision\\\" to \\\"((maximumExponent + 1) << (MAX_PRECISION - precision)) - 1\\\".\\n     * the maximum permitted value for \\\"x\\\" is therefore given by \\\"maxExpArray[precision] >> (MAX_PRECISION - precision)\\\".\\n     */\\n    function generalExp(uint256 _x, uint8 _precision) internal pure returns (uint256) {\\n        uint256 xi = _x;\\n        uint256 res = 0;\\n\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x3442c4e6074a82f1797f72ac0000000;\\n        // add x^02 * (33! / 02!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x116b96f757c380fb287fd0e40000000;\\n        // add x^03 * (33! / 03!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x045ae5bdd5f0e03eca1ff4390000000;\\n        // add x^04 * (33! / 04!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00defabf91302cd95b9ffda50000000;\\n        // add x^05 * (33! / 05!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x002529ca9832b22439efff9b8000000;\\n        // add x^06 * (33! / 06!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00054f1cf12bd04e516b6da88000000;\\n        // add x^07 * (33! / 07!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000a9e39e257a09ca2d6db51000000;\\n        // add x^08 * (33! / 08!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000012e066e7b839fa050c309000000;\\n        // add x^09 * (33! / 09!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000001e33d7d926c329a1ad1a800000;\\n        // add x^10 * (33! / 10!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000002bee513bdb4a6b19b5f800000;\\n        // add x^11 * (33! / 11!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000003a9316fa79b88eccf2a00000;\\n        // add x^12 * (33! / 12!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000048177ebe1fa812375200000;\\n        // add x^13 * (33! / 13!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000005263fe90242dcbacf00000;\\n        // add x^14 * (33! / 14!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000057e22099c030d94100000;\\n        // add x^15 * (33! / 15!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000057e22099c030d9410000;\\n        // add x^16 * (33! / 16!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000052b6b54569976310000;\\n        // add x^17 * (33! / 17!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000004985f67696bf748000;\\n        // add x^18 * (33! / 18!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000003dea12ea99e498000;\\n        // add x^19 * (33! / 19!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000031880f2214b6e000;\\n        // add x^20 * (33! / 20!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000025bcff56eb36000;\\n        // add x^21 * (33! / 21!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000001b722e10ab1000;\\n        // add x^22 * (33! / 22!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000001317c70077000;\\n        // add x^23 * (33! / 23!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000cba84aafa00;\\n        // add x^24 * (33! / 24!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000082573a0a00;\\n        // add x^25 * (33! / 25!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000005035ad900;\\n        // add x^26 * (33! / 26!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000000000002f881b00;\\n        // add x^27 * (33! / 27!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000001b29340;\\n        // add x^28 * (33! / 28!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000000000efc40;\\n        // add x^29 * (33! / 29!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000007fe0;\\n        // add x^30 * (33! / 30!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000420;\\n        // add x^31 * (33! / 31!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000021;\\n        // add x^32 * (33! / 32!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000001;\\n        // add x^33 * (33! / 33!)\\n\\n        return res / 0x688589cc0e9505e2f2fee5580000000 + _x + (ONE << _precision);\\n        // divide by 33! and then add x^1 / 1! + x^0 / 0!\\n    }\\n\\n    /**\\n     * @dev computes log(x / FIXED_1) * FIXED_1\\n     * Input range: FIXED_1 <= x <= OPT_LOG_MAX_VAL - 1\\n     * Auto-generated via \\\"PrintFunctionOptimalLog.py\\\"\\n     * Detailed description:\\n     * - Rewrite the input as a product of natural exponents and a single residual r, such that 1 < r < 2\\n     * - The natural logarithm of each (pre-calculated) exponent is the degree of the exponent\\n     * - The natural logarithm of r is calculated via Taylor series for log(1 + x), where x = r - 1\\n     * - The natural logarithm of the input is calculated by summing up the intermediate results above\\n     * - For example: log(250) = log(e^4 * e^1 * e^0.5 * 1.021692859) = 4 + 1 + 0.5 + log(1 + 0.021692859)\\n     */\\n    function optimalLog(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        uint256 y;\\n        uint256 z;\\n        uint256 w;\\n\\n        if (x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8) {\\n            res += 0x40000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0xd3094c70f034de4b96ff7d5b6f99fcd8;\\n        }\\n        // add 1 / 2^1\\n        if (x >= 0xa45af1e1f40c333b3de1db4dd55f29a7) {\\n            res += 0x20000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0xa45af1e1f40c333b3de1db4dd55f29a7;\\n        }\\n        // add 1 / 2^2\\n        if (x >= 0x910b022db7ae67ce76b441c27035c6a1) {\\n            res += 0x10000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x910b022db7ae67ce76b441c27035c6a1;\\n        }\\n        // add 1 / 2^3\\n        if (x >= 0x88415abbe9a76bead8d00cf112e4d4a8) {\\n            res += 0x08000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x88415abbe9a76bead8d00cf112e4d4a8;\\n        }\\n        // add 1 / 2^4\\n        if (x >= 0x84102b00893f64c705e841d5d4064bd3) {\\n            res += 0x04000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x84102b00893f64c705e841d5d4064bd3;\\n        }\\n        // add 1 / 2^5\\n        if (x >= 0x8204055aaef1c8bd5c3259f4822735a2) {\\n            res += 0x02000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x8204055aaef1c8bd5c3259f4822735a2;\\n        }\\n        // add 1 / 2^6\\n        if (x >= 0x810100ab00222d861931c15e39b44e99) {\\n            res += 0x01000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x810100ab00222d861931c15e39b44e99;\\n        }\\n        // add 1 / 2^7\\n        if (x >= 0x808040155aabbbe9451521693554f733) {\\n            res += 0x00800000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x808040155aabbbe9451521693554f733;\\n        }\\n        // add 1 / 2^8\\n\\n        z = y = x - FIXED_1;\\n        w = (y * y) / FIXED_1;\\n        res += (z * (0x100000000000000000000000000000000 - y)) / 0x100000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^01 / 01 - y^02 / 02\\n        res += (z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y)) / 0x200000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^03 / 03 - y^04 / 04\\n        res += (z * (0x099999999999999999999999999999999 - y)) / 0x300000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^05 / 05 - y^06 / 06\\n        res += (z * (0x092492492492492492492492492492492 - y)) / 0x400000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^07 / 07 - y^08 / 08\\n        res += (z * (0x08e38e38e38e38e38e38e38e38e38e38e - y)) / 0x500000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^09 / 09 - y^10 / 10\\n        res += (z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y)) / 0x600000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^11 / 11 - y^12 / 12\\n        res += (z * (0x089d89d89d89d89d89d89d89d89d89d89 - y)) / 0x700000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^13 / 13 - y^14 / 14\\n        res += (z * (0x088888888888888888888888888888888 - y)) / 0x800000000000000000000000000000000;\\n        // add y^15 / 15 - y^16 / 16\\n\\n        return res;\\n    }\\n\\n    /**\\n     * @dev computes e ^ (x / FIXED_1) * FIXED_1\\n     * input range: 0 <= x <= OPT_EXP_MAX_VAL - 1\\n     * auto-generated via \\\"PrintFunctionOptimalExp.py\\\"\\n     * Detailed description:\\n     * - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\\n     * - The exponentiation of each binary exponent is given (pre-calculated)\\n     * - The exponentiation of r is calculated via Taylor series for e^x, where x = r\\n     * - The exponentiation of the input is calculated by multiplying the intermediate results above\\n     * - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\\n     */\\n    function optimalExp(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        uint256 y;\\n        uint256 z;\\n\\n        z = y = x % 0x10000000000000000000000000000000;\\n        // get the input modulo 2^(-3)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x10e1b3be415a0000;\\n        // add y^02 * (20! / 02!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x05a0913f6b1e0000;\\n        // add y^03 * (20! / 03!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0168244fdac78000;\\n        // add y^04 * (20! / 04!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x004807432bc18000;\\n        // add y^05 * (20! / 05!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000c0135dca04000;\\n        // add y^06 * (20! / 06!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0001b707b1cdc000;\\n        // add y^07 * (20! / 07!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000036e0f639b800;\\n        // add y^08 * (20! / 08!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x00000618fee9f800;\\n        // add y^09 * (20! / 09!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000009c197dcc00;\\n        // add y^10 * (20! / 10!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000e30dce400;\\n        // add y^11 * (20! / 11!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000000012ebd1300;\\n        // add y^12 * (20! / 12!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000017499f00;\\n        // add y^13 * (20! / 13!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000001a9d480;\\n        // add y^14 * (20! / 14!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x00000000001c6380;\\n        // add y^15 * (20! / 15!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000000000001c638;\\n        // add y^16 * (20! / 16!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000000001ab8;\\n        // add y^17 * (20! / 17!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000000000000017c;\\n        // add y^18 * (20! / 18!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000000000014;\\n        // add y^19 * (20! / 19!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000000000001;\\n        // add y^20 * (20! / 20!)\\n        res = res / 0x21c3677c82b40000 + y + FIXED_1;\\n        // divide by 20! and then add y^1 / 1! + y^0 / 0!\\n\\n        if ((x & 0x010000000000000000000000000000000) != 0) res = (res * 0x1c3d6a24ed82218787d624d3e5eba95f9) / 0x18ebef9eac820ae8682b9793ac6d1e776;\\n        // multiply by e^2^(-3)\\n        if ((x & 0x020000000000000000000000000000000) != 0) res = (res * 0x18ebef9eac820ae8682b9793ac6d1e778) / 0x1368b2fc6f9609fe7aceb46aa619baed4;\\n        // multiply by e^2^(-2)\\n        if ((x & 0x040000000000000000000000000000000) != 0) res = (res * 0x1368b2fc6f9609fe7aceb46aa619baed5) / 0x0bc5ab1b16779be3575bd8f0520a9f21f;\\n        // multiply by e^2^(-1)\\n        if ((x & 0x080000000000000000000000000000000) != 0) res = (res * 0x0bc5ab1b16779be3575bd8f0520a9f21e) / 0x0454aaa8efe072e7f6ddbab84b40a55c9;\\n        // multiply by e^2^(+0)\\n        if ((x & 0x100000000000000000000000000000000) != 0) res = (res * 0x0454aaa8efe072e7f6ddbab84b40a55c5) / 0x00960aadc109e7a3bf4578099615711ea;\\n        // multiply by e^2^(+1)\\n        if ((x & 0x200000000000000000000000000000000) != 0) res = (res * 0x00960aadc109e7a3bf4578099615711d7) / 0x0002bf84208204f5977f9a8cf01fdce3d;\\n        // multiply by e^2^(+2)\\n        if ((x & 0x400000000000000000000000000000000) != 0) res = (res * 0x0002bf84208204f5977f9a8cf01fdc307) / 0x0000003c6ab775dd0b95b4cbee7e65d11;\\n        // multiply by e^2^(+3)\\n\\n        return res;\\n    }\\n\\n    function getReserveAndWeights(address pair, address tokenA)\\n        public\\n        view\\n        override\\n        returns (\\n            address tokenB,\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint32 tokenWeightA,\\n            uint32 tokenWeightB,\\n            uint32 swapFee\\n        )\\n    {\\n        (uint256 reserve0, uint256 reserve1, ) = IRequiemPair(pair).getReserves();\\n        uint32 tokenWeight0;\\n        uint32 tokenWeight1;\\n        (tokenWeight0, tokenWeight1, swapFee) = getWeightsAndSwapFee(pair);\\n\\n        if (tokenA == IRequiemPair(pair).token0()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemPair(pair).token1(), reserve0, reserve1, tokenWeight0, tokenWeight1);\\n        } else if (tokenA == IRequiemPair(pair).token1()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemPair(pair).token0(), reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        } else {\\n            revert(\\\"RequiemFormula: Invalid tokenA\\\");\\n        }\\n    }\\n\\n    function getFactoryReserveAndWeights(\\n        address factory,\\n        address pair,\\n        address tokenA\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            address tokenB,\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint32 tokenWeightA,\\n            uint32 tokenWeightB,\\n            uint32 swapFee\\n        )\\n    {\\n        (uint256 reserve0, uint256 reserve1, ) = IRequiemPair(pair).getReserves();\\n        uint32 tokenWeight0;\\n        uint32 tokenWeight1;\\n        (tokenWeight0, tokenWeight1, swapFee) = getFactoryWeightsAndSwapFee(factory, pair);\\n\\n        if (tokenA == IRequiemPair(pair).token0()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemPair(pair).token1(), reserve0, reserve1, tokenWeight0, tokenWeight1);\\n        } else if (tokenA == IRequiemPair(pair).token1()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemPair(pair).token0(), reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        } else {\\n            revert(\\\"RequiemFormula: Invalid tokenA\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset,\\n     *\\n     * Formula:\\n     * return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\\n     *\\n     * @param amountIn                  source reserve amount\\n     * @param reserveIn    source reserve balance\\n     * @param reserveOut    target reserve balance\\n     * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\\n     * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\\n     * @param swapFee                  swap fee of the conversion\\n     *\\n     * @return amountOut\\n     */\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) public view override returns (uint256 amountOut) {\\n        // validate input\\n        require(amountIn > 0, \\\"RequiemFormula: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn * (10000 - swapFee);\\n        // special case for equal weights\\n        if (tokenWeightIn == tokenWeightOut) {\\n            return reserveOut * amountInWithFee / (reserveIn * 10000 + amountInWithFee);\\n        }\\n\\n        uint256 result;\\n        uint8 precision;\\n        uint256 baseN = reserveIn * 10000 + amountInWithFee;\\n        (result, precision) = power(baseN, reserveIn * 10000, tokenWeightIn, tokenWeightOut);\\n\\n        uint256 temp1 = reserveOut * result;\\n        uint256 temp2 = reserveOut << precision;\\n        amountOut = (temp1 - temp2) / result;\\n    }\\n\\n    /**\\n     * @dev given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n     *\\n     * Formula:\\n     * return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\\n     *\\n     * @param amountOut     target reserve amount\\n     * @param reserveIn    source reserve balance\\n     * @param reserveOut    target reserve balance\\n     * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\\n     * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\\n     * @param swapFee                  swap fee of the conversion\\n     *\\n     * @return amountIn\\n     */\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) public view override returns (uint256 amountIn) {\\n        // validate input\\n        require(amountOut > 0, \\\"RequiemFormula: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\");\\n        // special case for equal weights\\n        if (tokenWeightIn == tokenWeightOut) {\\n            uint256 numerator = reserveIn * amountOut * 10000;\\n            uint256 denominator = (reserveOut - amountOut) * (10000 - swapFee);\\n            return numerator / denominator + 1;\\n        }\\n\\n        uint256 result;\\n        uint8 precision;\\n        uint256 baseD = reserveOut - amountOut;\\n        (result, precision) = power(reserveOut, baseD, tokenWeightOut, tokenWeightIn);\\n        uint256 baseReserveIn = reserveIn - 10000;\\n        uint256 temp1 = baseReserveIn - result;\\n        uint256 temp2 = baseReserveIn << precision;\\n        amountIn = ((temp1 - temp2) >> precision) / (10000 - swapFee) + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[0] = amountIn;\\n        address currentTokenIn = tokenIn;\\n        for (uint256 i = 0; i < path.length; i++) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getReserveAndWeights(path[i], currentTokenIn);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenOut, \\\"RequiemFormula: INVALID_TOKEN_OUT_PATH\\\");\\n    }\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[0] = amountIn;\\n        address currentTokenIn = tokenIn;\\n\\n        for (uint256 i = 0; i < path.length; i++) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getFactoryReserveAndWeights(\\n                factory,\\n                path[i],\\n                currentTokenIn\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenOut, \\\"RequiemFormula: INVALID_TOKEN_OUT_PATH\\\");\\n    }\\n\\n    function getPairAmountOut(\\n        address pair,\\n        address tokenIn,\\n        uint256 amountIn\\n    ) external view override returns (uint256 amountOut) {\\n        (, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getReserveAndWeights(pair, tokenIn);\\n        amountOut = getAmountOut(amountIn, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[amounts.length - 1] = amountOut;\\n        address currentTokenIn = tokenOut;\\n        for (uint256 i = path.length; i > 0; i--) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getReserveAndWeights(path[i - 1], currentTokenIn);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveOut, reserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenIn, \\\"RequiemFormula: INVALID_TOKEN_IN_PATH\\\");\\n    }\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[amounts.length - 1] = amountOut;\\n        address currentTokenIn = tokenOut;\\n        for (uint256 i = path.length; i > 0; i--) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getFactoryReserveAndWeights(\\n                factory,\\n                path[i - 1],\\n                currentTokenIn\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveOut, reserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenIn, \\\"RequiemFormula: INVALID_TOKEN_IN_PATH\\\");\\n    }\\n\\n    function getPairAmountIn(\\n        address pair,\\n        address tokenIn,\\n        uint256 amountOut\\n    ) external view override returns (uint256 amountIn) {\\n        (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getReserveAndWeights(pair, tokenIn);\\n        amountIn = getAmountIn(amountOut, reserveOut, reserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n    }\\n\\n    function getWeightsAndSwapFee(address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        )\\n    {\\n        try IRequiemPair(pair).getTokenWeights() returns (uint32 _tokenWeight0, uint32 _tokenWeight1) {\\n            return (_tokenWeight0, _tokenWeight1, IRequiemPair(pair).getSwapFee());\\n        } catch Error(string memory reason) {\\n            revert(reason);\\n        } catch (\\n            bytes memory /*lowLevelData*/\\n        ) {\\n            return (50, 50, 30);\\n        }\\n    }\\n\\n    function getFactoryWeightsAndSwapFee(address factory, address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        )\\n    {\\n        return IRequiemFactory(factory).getWeightsAndSwapFee(pair);\\n    }\\n\\n    // Ensure constant value reserve0^(tokenWeight0/50) * reserve1^((100 - tokenWeight0)/50) <= balance0Adjusted^(tokenWeight0/50) * balance1Adjusted^((100 - tokenWeight0)/50)\\n    //  1 <= (balance0Adjusted / reserve0 )^(tokenWeight0/50) * (balance1Adjusted/reserve1)^((100 - tokenWeight0)/50)\\n    //  (reserve0 / balance0Adjusted) ^ (tokenWeight0/50) <=  (balance1Adjusted / reserve1) ^ ((100 - tokenWeight0)/50)\\n    function ensureConstantValue(\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 balance0Adjusted,\\n        uint256 balance1Adjusted,\\n        uint32 tokenWeight0\\n    ) external view override returns (bool) {\\n        if (tokenWeight0 == 50) {\\n            return balance0Adjusted*balance1Adjusted >= reserve0*reserve1;\\n        }\\n        if (balance0Adjusted >= reserve0 && balance1Adjusted >= reserve1) {\\n            return true;\\n        }\\n        if (balance0Adjusted <= reserve0 && balance1Adjusted <= reserve1) {\\n            return false;\\n        }\\n        uint32 w0 = tokenWeight0;\\n        uint32 w1 = 100 - w0;\\n\\n        uint256 r0;\\n        uint256 p0;\\n        uint256 r1;\\n        uint256 p1;\\n        if (balance0Adjusted >= reserve0) {\\n            (r0, p0) = power(reserve1, balance1Adjusted, w1, 50);\\n            (r1, p1) = power(balance0Adjusted, reserve0, w0, 50);\\n        } else {\\n            (r0, p0) = power(reserve0, balance0Adjusted, w0, 50);\\n            (r1, p1) = power(balance1Adjusted, reserve1, w1, 50);\\n        }\\n        uint256 minP = p0 < p1 ? p0 : p1;\\n        p0 = p0 - minP;\\n        p1 = p1 - minP;\\n        return (r0 >> p0) <= (r1 >> p1);\\n    }\\n\\n    function sortTokens(address tokenA, address tokenB) public pure override returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"RequiemFormula: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"RequiemFormula: ZERO_ADDRESS\\\");\\n    }\\n\\n    function getReserves(\\n        address pair,\\n        address tokenA,\\n        address tokenB\\n    ) external view override returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IRequiemPair(pair).getReserves();\\n        require(token0 == IRequiemPair(pair).token0() && token1 == IRequiemPair(pair).token1(), \\\"RequiemFormula: Invalid token\\\");\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    function getOtherToken(address pair, address tokenA) external view override returns (address tokenB) {\\n        address token0 = IRequiemPair(pair).token0();\\n        address token1 = IRequiemPair(pair).token1();\\n        require(token0 == tokenA || token1 == tokenA, \\\"RequiemFormula: Invalid tokenA\\\");\\n        tokenB = token0 == tokenA ? token1 : token0;\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure override returns (uint256 amountB) {\\n        require(amountA > 0, \\\"RequiemFormula: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA * reserveB / reserveA;\\n    }\\n\\n    function mintLiquidityFee(\\n        uint256 totalLiquidity,\\n        uint112 reserve0,\\n        uint112 reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112 collectedFee0,\\n        uint112 collectedFee1\\n    ) external view override returns (uint256 amount) {\\n        if (collectedFee0 > 0) {\\n            (uint256 r0, uint256 p0) = power(uint256(collectedFee0) + reserve0, reserve0, tokenWeight0, 100);\\n            amount = amount + ((totalLiquidity * r0) >> p0) - totalLiquidity;\\n        }\\n        if (collectedFee1 > 0) {\\n            (uint256 r1, uint256 p1) = power(uint256(collectedFee1) + reserve1, reserve1, tokenWeight1, 100);\\n            amount = amount + ((totalLiquidity  * r1) >> p1) - totalLiquidity;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7a470c55dea3e8a3c94cc8e24956019988a8a7b6f1f5908fc3e48e01341f8b40\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x59ca041c7f003069ae1fc9ede79694b1fa0b11e6eebf4eb765a044a27030687c\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\ninterface IRequiemFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint);\\n    function feeTo() external view returns (address);\\n    function formula() external view returns (address);\\n    function protocolFee() external view returns (uint);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function isPair(address) external view returns (bool);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external returns (address pair);\\n    function getWeightsAndSwapFee(address pair) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setProtocolFee(uint) external;\\n}\\n\",\"keccak256\":\"0x500ff0062150432105415e938dcaa0d64b666c224764c4cb901137ce45204b5d\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.5.16;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IRequiemFormula {\\n\\n    function getReserveAndWeights(address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getPairAmountIn(address pair, address tokenIn, uint amountOut) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getPairAmountOut(address pair, address tokenIn, uint amountIn) external view returns (uint amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x8a32e1c404f6a93f17cf6151173ff21fedb58abe50a6635cb10f47780f044c98\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IRequiemPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IRequiemERC20.sol\\\";\\n\\ninterface IRequiemPair is IRequiemERC20 {\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n    function getSwapFee() external view returns (uint32);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address,\\n        address,\\n        uint32,\\n        uint32\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1924a077618cc54dd9f8755e2ad9f2f36f51372ea68c9b8d39b5927f7a1e1137\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061073f6001641c35fedd1560601b036020556001646c3390ecc9605e1b036021556001640cf801476160611b0360225560016431bdb23e1d605f1b0360235560016502fb1d8fe083605b1b0360245560016505b771955b37605a1b036025556001650af67a93bb5160591b0360265560016515060c256cb360581b036027556001651428a2f98d7360581b036028556001654d515663970960561b03602955600165944620b0e70f60551b03602a55600166011c592761c66760541b03602b5560016602214d10d014eb60531b03602c55600166020ade36b7dbef60531b03602d5560016603eab73b3bbfe360521b03602e556001660782ee3593f6d760511b03602f556001661ccf4b44bb4821604f1b0360305560016606e7f88ad8a77760511b0360315560016669f3d1c921891d604d1b03603255600166cb2ff529eb71e5604c1b03603355600166c2d415c3db974b604c1b0360345560016702eb40f9f620fda7604a1b0360355560016705990681d961a1eb60491b03603655600167055e12902701414760491b0360375560016714962dee9dc9764160471b0360385560016704ef57b9b560fab560491b0360395560016712ed7b32a58f552b60471b03603a556001679131271922eaa60760441b03603b556001678b380f3558668c4760441b03603c556001680215f77c045fbe885760421b03603d556001600160831b03603e556001670f577eded5773a1160471b03603f556001680eb5ec597592befbf5603f1b036040556001681c35fedd14b861eb05603e1b036041556001683619c87664579bc94b603d1b0360425560016867c00a3b07ffc01fd7603c1b03604355600168c6f6c8f8739773a7a5603b1b03604455600168bec763f8209b7a72b1603b1b0360455560016902dbb8caad9b7097b91b60391b03604655600169057b3d49dda84556d6f760381b03604755600169054183095b2c8ececf3160381b036048556001690a14517cc6b9457111ef60371b0360495560016913545598e5c23276ccf160361b03604a556001692511882c39c3adea96ff60351b03604b55600169471649d87199aa99075760341b03604c557004429a21a029d4c1457cfbffffffffffff604d55700415bc6d6fb7dd71af2cb3ffffffffffff604e557003eab73b3bbfe282243ce1ffffffffffff604f557003c1771ac9fb6b4c18e229ffffffffffff605055700399e96897690418f785257fffffffffff605155700373fc456c53bb779bf0ea9fffffffffff60525570034f9e8e490c48e67e6ab8bfffffffffff60535570032cbfd4a7adc790560b3337ffffffffff60545570030b50570f6e5d2acca94613ffffffffff6055557002eb40f9f620fda6b56c2861ffffffffff6056557002cc8340ecb0d0f520a6af58ffffffffff6057557002af09481380a0a35cf1ba02ffffffffff605855700292c5bdd3b92ec810287b1b3fffffffff605955700277abdcdab07d5a77ac6d6b9fffffffff605a5570025daf6654b1eaa55fd64df5efffffffff605b55700244c49c648baa98192dce88b7ffffffff605c5570022ce03cd5619a311b2471268bffffffff605d55700215f77c045fbe885654a44a0fffffffff605e556001600160811b03605f557001eaefdbdaaee7421fc4d3ede5ffffffff6060557001d6bd8b2eb257df7e8ca57b09bfffffff6061557001c35fedd14b861eb0443f7f133fffffff6062557001b0ce43b322bcde4a56e8ada5afffffff60635570019f0028ec1fff007f5a195a39dfffffff60645570018ded91f0e72ee74f49b15ba527ffffff60655570017d8ec7f04136f4e5615fd41a63ffffff60665570016ddc6556cdb84bdc8d12d22e6fffffff60675570015ecf52776a1155b5bd8395814f7fffff60685570015060c256cb23b3b3cc3754cf40ffffff6069557001428a2f98d728ae223ddab715be3fffff606a5570013545598e5c23276ccf0ede68034fffff606b557001288c4161ce1d6f54b7f61081194fffff606c5570011c592761c666aa641d5a01a40f17ffff606d55700110a688680a7530515f3e6e6cfdcdffff606e557001056f1b5bedf75c6bcb2ce8aed428ffff606f556ffaadceceeff8a0890f3875f008277fff6070556ff05dc6b27edad306388a600f6ba0bfff6071556fe67a5a25da41063de1495d5b18cdbfff6072556fdcff115b14eedde6fc3aa5353f2e4fff6073556fd3e7a3924312399f9aae2e0f868f8fff6074556fcb2ff529eb71e41582cccd5a1ee26fff6075556fc2d415c3db974ab32a51840c0b67edff6076556fbad03e7d883f69ad5b0a186184e06bff6077556fb320d03b2c343d4829abd6075f0cc5ff6078556fabc25204e02828d73c6e80bcdb1a95bf6079556fa4b16f74ee4bb2040a1ec6c15fbbf2df607a556f9deaf736ac1f569deb1b5ae3f36c130f607b556f976bd9952c7aa957f5937d790ef65037607c556f9131271922eaa6064b73a22d0bd4f2bf607d556f8b380f3558668c46c91c49a2f8e967b9607e556f857ddf0117efa215952912839f6473e6607f55565b613ef4806200074f6000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80638888a737116100b2578063b19210b011610081578063b3923a9911610066578063b3923a991461032b578063ca2229791461033e578063d69109371461035157600080fd5b8063b19210b014610305578063b33d96b01461031857600080fd5b80638888a737146102b95780638fabd82d146102cc57806392aec23c146102df578063ad615dec146102f257600080fd5b80635bff1d9211610109578063671a11b5116100ee578063671a11b51461027057806367f84adc1461028357806379c91b371461029657600080fd5b80635bff1d92146101f95780636350d7741461024f57600080fd5b8063119220a51461013b5780632bb66e1d14610164578063327494611461019e578063544caa56146101c6575b600080fd5b61014e6101493660046135f8565b61037c565b60405161015b919061367d565b60405180910390f35b6101776101723660046136c1565b61058e565b6040805163ffffffff9485168152928416602084015292169181019190915260600161015b565b6101b16101ac3660046136fa565b610626565b6040805192835260208301919091520161015b565b6101d96101d43660046136c1565b610837565b604080516001600160a01b0393841681529290911660208301520161015b565b61020c6102073660046136c1565b610947565b604080516001600160a01b03909716875260208701959095529385019290925263ffffffff908116606085015290811660808401521660a082015260c00161015b565b61026261025d366004613745565b610c2c565b60405190815260200161015b565b61026261027e366004613798565b610c69565b61014e6102913660046135f8565b610e3f565b6102a96102a43660046137ff565b611037565b604051901515815260200161015b565b6102626102c7366004613745565b61115c565b61014e6102da36600461384c565b611195565b6102626102ed3660046138db565b61138e565b610262610300366004613968565b61149b565b610262610313366004613798565b6115b1565b61020c6103263660046136fa565b61179c565b61014e61033936600461384c565b611a38565b61017761034c366004613994565b611c1d565b61036461035f3660046136c1565b611d96565b6040516001600160a01b03909116815260200161015b565b6060816103d05760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064015b60405180910390fd5b6103db8260016139e0565b67ffffffffffffffff8111156103f3576103f36139f8565b60405190808252806020026020018201604052801561041c578160200160208202803683370190505b509050838160008151811061043357610433613a27565b60209081029190910101528560005b838110156104fb576000806000806000806104848f8c8c8a81811061046957610469613a27565b905060200201602081019061047e9190613994565b8a61179c565b9550955095509550955095506104b78988815181106104a5576104a5613a27565b60200260200101518686868686610c69565b896104c38960016139e0565b815181106104d3576104d3613a27565b60200260200101818152505085975050505050505080806104f390613a56565b915050610442565b50856001600160a01b0316816001600160a01b0316146105835760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f4f5560448201527f545f50415448000000000000000000000000000000000000000000000000000060648201526084016103c7565b509695505050505050565b6040517fca2229790000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152600091829182919086169063ca22297990602401606060405180830381865afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106199190613a8f565b9250925092509250925092565b6000806000806106368686610837565b91509150600080886001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561067b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069f9190613ad1565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150886001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190613b02565b6001600160a01b0316846001600160a01b03161480156107b85750886001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561077f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a39190613b02565b6001600160a01b0316836001600160a01b0316145b6108045760405162461bcd60e51b815260206004820152601d60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e00000060448201526064016103c7565b836001600160a01b0316886001600160a01b031614610824578082610827565b81815b909a909950975050505050505050565b600080826001600160a01b0316846001600160a01b031614156108c25760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a204944454e544943414c5f41444452455360448201527f534553000000000000000000000000000000000000000000000000000000000060648201526084016103c7565b826001600160a01b0316846001600160a01b0316106108e25782846108e5565b83835b90925090506001600160a01b0382166109405760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a205a45524f5f414444524553530000000060448201526064016103c7565b9250929050565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190613ad1565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000806109e68c611c1d565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a549190613b02565b6001600160a01b03168b6001600160a01b03161415610ae4578b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acf9190613b02565b99509297509095509350915084848484610c1e565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b469190613b02565b6001600160a01b03168b6001600160a01b03161415610bd6578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc19190613b02565b99509197509195509350915083858385610c1e565b60405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e41000060448201526064016103c7565b505050509295509295509295565b6000806000806000806000610c418a8a610947565b955095509550955095509550610c5b8885878587866115b1565b9a9950505050505050505050565b6000808711610ce05760405162461bcd60e51b815260206004820152602960248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f494e5060448201527f55545f414d4f554e54000000000000000000000000000000000000000000000060648201526084016103c7565b600086118015610cf05750600085115b610d625760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201527f554944495459000000000000000000000000000000000000000000000000000060648201526084016103c7565b6000610d7083612710613b1f565b610d809063ffffffff1689613b44565b90508363ffffffff168563ffffffff161415610dc95780610da388612710613b44565b610dad91906139e0565b610db78288613b44565b610dc19190613bb0565b915050610e35565b6000808083610dda8b612710613b44565b610de491906139e0565b9050610dfd81610df68c612710613b44565b8a8a611eff565b90935091506000610e0e848b613b44565b905060ff83168a901b84610e228284613bc4565b610e2c9190613bb0565b96505050505050505b9695505050505050565b606081610e8e5760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103c7565b610e998260016139e0565b67ffffffffffffffff811115610eb157610eb16139f8565b604051908082528060200260200182016040528015610eda578160200160208202803683370190505b509050838160018351610eed9190613bc4565b81518110610efd57610efd613a27565b602090810291909101015284825b8015610faf5760008080808080610f388f8c8c610f2960018c613bc4565b81811061046957610469613a27565b955095509550955095509550610f6b898881518110610f5957610f59613a27565b602002602001015185878587866115b1565b89610f7760018a613bc4565b81518110610f8757610f87613a27565b6020026020010181815250508597505050505050508080610fa790613bdb565b915050610f0b565b50866001600160a01b0316816001600160a01b0316146105835760405162461bcd60e51b815260206004820152602560248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f494e60448201527f5f5041544800000000000000000000000000000000000000000000000000000060648201526084016103c7565b60008163ffffffff1660321415611065576110528587613b44565b61105c8486613b44565b10159050611153565b8584101580156110755750848310155b1561108257506001611153565b8584111580156110925750848311155b1561109f57506000611153565b8160006110ad826064613b1f565b90506000806000808b8a106110eb576110c98b8a876032611eff565b90945060ff1692506110de8a8d886032611eff565b90925060ff169050611116565b6110f88c8b886032611eff565b90945060ff16925061110d898c876032611eff565b90925060ff1690505b60008184106111255781611127565b835b90506111338185613bc4565b935061113f8183613bc4565b9290921c9390921c92909211159450505050505b95945050505050565b60008060008060008061116f8989610947565b9550955095509550955050611188878686868686610c69565b9998505050505050505050565b6060816111e45760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103c7565b6111ef8260016139e0565b67ffffffffffffffff811115611207576112076139f8565b604051908082528060200260200182016040528015611230578160200160208202803683370190505b509050838160008151811061124757611247613a27565b60209081029190910101528560005b838110156112fc576000806000806000806112978b8b8981811061127c5761127c613a27565b90506020020160208101906112919190613994565b89610947565b9550955095509550955095506112b88988815181106104a5576104a5613a27565b896112c48960016139e0565b815181106112d4576112d4613a27565b60200260200101818152505085975050505050505080806112f490613a56565b915050611256565b50856001600160a01b0316816001600160a01b0316146113845760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f4f5560448201527f545f50415448000000000000000000000000000000000000000000000000000060648201526084016103c7565b5095945050505050565b60006dffffffffffffffffffffffffffff831615611410576000806113e26113c96dffffffffffffffffffffffffffff808c169088166139e0565b8a6dffffffffffffffffffffffffffff16896064611eff565b90925060ff16905089816113f68483613b44565b611401911c856139e0565b61140b9190613bc4565b925050505b6dffffffffffffffffffffffffffff821615611490576000806114626114496dffffffffffffffffffffffffffff808b169087166139e0565b896dffffffffffffffffffffffffffff16886064611eff565b90925060ff16905089816114768483613b44565b611481911c856139e0565b61148b9190613bc4565b925050505b979650505050505050565b60008084116115125760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f414d4f60448201527f554e54000000000000000000000000000000000000000000000000000000000060648201526084016103c7565b6000831180156115225750600082115b6115945760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201527f554944495459000000000000000000000000000000000000000000000000000060648201526084016103c7565b8261159f8386613b44565b6115a99190613bb0565b949350505050565b60008087116116285760405162461bcd60e51b815260206004820152602a60248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4f555460448201527f5055545f414d4f554e540000000000000000000000000000000000000000000060648201526084016103c7565b6000861180156116385750600085115b6116aa5760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201527f554944495459000000000000000000000000000000000000000000000000000060648201526084016103c7565b8263ffffffff168463ffffffff1614156117205760006116ca8888613b44565b6116d690612710613b44565b905060006116e684612710613b1f565b63ffffffff166116f68a89613bc4565b6117009190613b44565b905061170c8183613bb0565b6117179060016139e0565b92505050610e35565b6000808061172e8a89613bc4565b905061173c8882888a611eff565b9093509150600061174f6127108b613bc4565b9050600061175d8583613bc4565b905060ff841682901b61177288612710613b1f565b63ffffffff1660ff86166117868385613bc4565b61179192911c613bb0565b610e2c9060016139e0565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156117e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180a9190613ad1565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060008061183c8d8d61058e565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118aa9190613b02565b6001600160a01b03168b6001600160a01b0316141561193a578b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119259190613b02565b99509297509095509350915084848484611a28565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199c9190613b02565b6001600160a01b03168b6001600160a01b03161415610bd6578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a179190613b02565b995091975091955093509150838583855b5050505093975093979195509350565b606081611a875760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103c7565b611a928260016139e0565b67ffffffffffffffff811115611aaa57611aaa6139f8565b604051908082528060200260200182016040528015611ad3578160200160208202803683370190505b509050838160018351611ae69190613bc4565b81518110611af657611af6613a27565b602090810291909101015284825b8015611b955760008080808080611b308b8b611b2160018b613bc4565b81811061127c5761127c613a27565b955095509550955095509550611b51898881518110610f5957610f59613a27565b89611b5d60018a613bc4565b81518110611b6d57611b6d613a27565b6020026020010181815250508597505050505050508080611b8d90613bdb565b915050611b04565b50866001600160a01b0316816001600160a01b0316146113845760405162461bcd60e51b815260206004820152602560248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f494e60448201527f5f5041544800000000000000000000000000000000000000000000000000000060648201526084016103c7565b6000806000836001600160a01b03166332bfe4696040518163ffffffff1660e01b81526004016040805180830381865afa925050508015611c99575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611c9691810190613c10565b60015b611d2257611ca5613c3f565b806308c379a01415611cdf5750611cba613ccd565b80611cc55750611ce1565b8060405162461bcd60e51b81526004016103c79190613d75565b505b3d808015611d0b576040519150601f19603f3d011682016040523d82523d6000602084013e611d10565b606091505b50603280601e93509350935050611d8f565b8181876001600160a01b031663d4cadf686040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d869190613de8565b94509450945050505b9193909250565b600080836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfb9190613b02565b90506000846001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e619190613b02565b9050836001600160a01b0316826001600160a01b03161480611e945750836001600160a01b0316816001600160a01b0316145b611ee05760405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e41000060448201526064016103c7565b836001600160a01b0316826001600160a01b0316146115a95781611153565b60008084861015611f525760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420737570706f7274205f626173654e203c205f6261736544000000000060448201526064016103c7565b7002000000000000000000000000000000008610611f6f57600080fd5b60008086611f816001607f1b8a613b44565b611f8b9190613bb0565b905070015bf0a8b1457695355fb8ac404e7a79e3811015611fb657611faf81612056565b9150611fc2565b611fbf8161268c565b91505b60008563ffffffff168763ffffffff1684611fdd9190613b44565b611fe79190613bb0565b90507008000000000000000000000000000000008110156120195761200b8161279b565b607f9450945050505061204d565b600061202482612e1d565b905061204061203482607f613e05565b60ff1683901c82612ed0565b9550935061204d92505050565b94509492505050565b6000808080806fd3094c70f034de4b96ff7d5b6f99fcd886106120bb5761208d6f40000000000000000000000000000000856139e0565b93506fd3094c70f034de4b96ff7d5b6f99fcd86120ae6001607f1b88613b44565b6120b89190613bb0565b95505b6fa45af1e1f40c333b3de1db4dd55f29a7861061211a576120ec6f20000000000000000000000000000000856139e0565b93506fa45af1e1f40c333b3de1db4dd55f29a761210d6001607f1b88613b44565b6121179190613bb0565b95505b6f910b022db7ae67ce76b441c27035c6a186106121795761214b6f10000000000000000000000000000000856139e0565b93506f910b022db7ae67ce76b441c27035c6a161216c6001607f1b88613b44565b6121769190613bb0565b95505b6f88415abbe9a76bead8d00cf112e4d4a886106121d8576121aa6f08000000000000000000000000000000856139e0565b93506f88415abbe9a76bead8d00cf112e4d4a86121cb6001607f1b88613b44565b6121d59190613bb0565b95505b6f84102b00893f64c705e841d5d4064bd38610612237576122096f04000000000000000000000000000000856139e0565b93506f84102b00893f64c705e841d5d4064bd361222a6001607f1b88613b44565b6122349190613bb0565b95505b6f8204055aaef1c8bd5c3259f4822735a28610612296576122686f02000000000000000000000000000000856139e0565b93506f8204055aaef1c8bd5c3259f4822735a26122896001607f1b88613b44565b6122939190613bb0565b95505b6f810100ab00222d861931c15e39b44e9986106122f5576122c76f01000000000000000000000000000000856139e0565b93506f810100ab00222d861931c15e39b44e996122e86001607f1b88613b44565b6122f29190613bb0565b95505b6f808040155aabbbe9451521693554f7338610612353576123256e800000000000000000000000000000856139e0565b93506f808040155aabbbe9451521693554f7336123466001607f1b88613b44565b6123509190613bb0565b95505b6123616001607f1b87613bc4565b92508291506001607f1b6123758380613b44565b61237f9190613bb0565b905070010000000000000000000000000000000061239d8482613bc4565b6123a79084613b44565b6123b19190613bb0565b6123bb90856139e0565b93506001607f1b6123cc8284613b44565b6123d69190613bb0565b9150700200000000000000000000000000000000612404846faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa613bc4565b61240e9084613b44565b6124189190613bb0565b61242290856139e0565b93506001607f1b6124338284613b44565b61243d9190613bb0565b915070030000000000000000000000000000000061246b846f99999999999999999999999999999999613bc4565b6124759084613b44565b61247f9190613bb0565b61248990856139e0565b93506001607f1b61249a8284613b44565b6124a49190613bb0565b91507004000000000000000000000000000000006124d2846f92492492492492492492492492492492613bc4565b6124dc9084613b44565b6124e69190613bb0565b6124f090856139e0565b93506001607f1b6125018284613b44565b61250b9190613bb0565b9150700500000000000000000000000000000000612539846f8e38e38e38e38e38e38e38e38e38e38e613bc4565b6125439084613b44565b61254d9190613bb0565b61255790856139e0565b93506001607f1b6125688284613b44565b6125729190613bb0565b91507006000000000000000000000000000000006125a0846f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b613bc4565b6125aa9084613b44565b6125b49190613bb0565b6125be90856139e0565b93506001607f1b6125cf8284613b44565b6125d99190613bb0565b9150700700000000000000000000000000000000612607846f89d89d89d89d89d89d89d89d89d89d89613bc4565b6126119084613b44565b61261b9190613bb0565b61262590856139e0565b93506001607f1b6126368284613b44565b6126409190613bb0565b915070080000000000000000000000000000000061266e846f88888888888888888888888888888888613bc4565b6126789084613b44565b6126829190613bb0565b610e3590856139e0565b60008070010000000000000000000000000000000083106126dd5760006126bf6126ba6001607f1b86613bb0565b61352e565b60ff811694851c949091506126d9906001607f1b90613b44565b9150505b6001607f1b83111561275f57607f5b60ff81161561275d576001607f1b6127048580613b44565b61270e9190613bb0565b9350700100000000000000000000000000000000841061274d57600193841c936127389082613e05565b60ff166001901b8261274a91906139e0565b91505b61275681613e28565b90506126ec565b505b6f05b9de1d10bf4103d647b0955897ba8061278a6f03f80fe03f80fe03f80fe03f80fe03f883613b44565b6127949190613bb0565b9392505050565b60008080806127ba6f1000000000000000000000000000000086613e63565b91508190506001607f1b6127ce8280613b44565b6127d89190613bb0565b90506127ec816710e1b3be415a0000613b44565b6127f690846139e0565b92506001607f1b6128078383613b44565b6128119190613bb0565b9050612825816705a0913f6b1e0000613b44565b61282f90846139e0565b92506001607f1b6128408383613b44565b61284a9190613bb0565b905061285e81670168244fdac78000613b44565b61286890846139e0565b92506001607f1b6128798383613b44565b6128839190613bb0565b905061289681664807432bc18000613b44565b6128a090846139e0565b92506001607f1b6128b18383613b44565b6128bb9190613bb0565b90506128ce81660c0135dca04000613b44565b6128d890846139e0565b92506001607f1b6128e98383613b44565b6128f39190613bb0565b9050612906816601b707b1cdc000613b44565b61291090846139e0565b92506001607f1b6129218383613b44565b61292b9190613bb0565b905061293d816536e0f639b800613b44565b61294790846139e0565b92506001607f1b6129588383613b44565b6129629190613bb0565b905061297481650618fee9f800613b44565b61297e90846139e0565b92506001607f1b61298f8383613b44565b6129999190613bb0565b90506129aa81649c197dcc00613b44565b6129b490846139e0565b92506001607f1b6129c58383613b44565b6129cf9190613bb0565b90506129e081640e30dce400613b44565b6129ea90846139e0565b92506001607f1b6129fb8383613b44565b612a059190613bb0565b9050612a168164012ebd1300613b44565b612a2090846139e0565b92506001607f1b612a318383613b44565b612a3b9190613bb0565b9050612a4b816317499f00613b44565b612a5590846139e0565b92506001607f1b612a668383613b44565b612a709190613bb0565b9050612a80816301a9d480613b44565b612a8a90846139e0565b92506001607f1b612a9b8383613b44565b612aa59190613bb0565b9050612ab481621c6380613b44565b612abe90846139e0565b92506001607f1b612acf8383613b44565b612ad99190613bb0565b9050612ae8816201c638613b44565b612af290846139e0565b92506001607f1b612b038383613b44565b612b0d9190613bb0565b9050612b1b81611ab8613b44565b612b2590846139e0565b92506001607f1b612b368383613b44565b612b409190613bb0565b9050612b4e8161017c613b44565b612b5890846139e0565b92506001607f1b612b698383613b44565b612b739190613bb0565b9050612b80816014613b44565b612b8a90846139e0565b92506001607f1b612b9b8383613b44565b612ba59190613bb0565b9050612bb2816001613b44565b612bbc90846139e0565b92506001607f1b82612bd66721c3677c82b4000086613bb0565b612be091906139e0565b612bea91906139e0565b92506f10000000000000000000000000000000851615612c3e5770018ebef9eac820ae8682b9793ac6d1e776612c31847001c3d6a24ed82218787d624d3e5eba95f9613b44565b612c3b9190613bb0565b92505b6f20000000000000000000000000000000851615612c90577001368b2fc6f9609fe7aceb46aa619baed4612c838470018ebef9eac820ae8682b9793ac6d1e778613b44565b612c8d9190613bb0565b92505b6f40000000000000000000000000000000851615612ce1576fbc5ab1b16779be3575bd8f0520a9f21f612cd4847001368b2fc6f9609fe7aceb46aa619baed5613b44565b612cde9190613bb0565b92505b6001607f1b851615612d25576f454aaa8efe072e7f6ddbab84b40a55c9612d18846fbc5ab1b16779be3575bd8f0520a9f21e613b44565b612d229190613bb0565b92505b700100000000000000000000000000000000851615612d76576f0960aadc109e7a3bf4578099615711ea612d69846f454aaa8efe072e7f6ddbab84b40a55c5613b44565b612d739190613bb0565b92505b700200000000000000000000000000000000851615612dc6576e2bf84208204f5977f9a8cf01fdce3d612db9846f0960aadc109e7a3bf4578099615711d7613b44565b612dc39190613bb0565b92505b700400000000000000000000000000000000851615612e14576d03c6ab775dd0b95b4cbee7e65d11612e07846e2bf84208204f5977f9a8cf01fdc307613b44565b612e119190613bb0565b92505b50909392505050565b60006020607f5b60ff8116612e33836001613e77565b60ff161015612e865760006002612e4a8385613e77565b612e549190613e9c565b90508460008260ff1660808110612e6d57612e6d613a27565b015410612e7c57809250612e80565b8091505b50612e24565b8360008260ff1660808110612e9d57612e9d613a27565b015410612eab579392505050565b8360008360ff1660808110612ec257612ec2613a27565b015410610136575092915050565b6000828160ff8416612ee28380613b44565b901c9150612f00826f03442c4e6074a82f1797f72ac0000000613b44565b612f0a90826139e0565b905060ff8416612f1a8684613b44565b901c9150612f38826f0116b96f757c380fb287fd0e40000000613b44565b612f4290826139e0565b905060ff8416612f528684613b44565b901c9150612f6f826e45ae5bdd5f0e03eca1ff4390000000613b44565b612f7990826139e0565b905060ff8416612f898684613b44565b901c9150612fa6826e0defabf91302cd95b9ffda50000000613b44565b612fb090826139e0565b905060ff8416612fc08684613b44565b901c9150612fdd826e02529ca9832b22439efff9b8000000613b44565b612fe790826139e0565b905060ff8416612ff78684613b44565b901c9150613013826d54f1cf12bd04e516b6da88000000613b44565b61301d90826139e0565b905060ff841661302d8684613b44565b901c9150613049826d0a9e39e257a09ca2d6db51000000613b44565b61305390826139e0565b905060ff84166130638684613b44565b901c915061307f826d012e066e7b839fa050c309000000613b44565b61308990826139e0565b905060ff84166130998684613b44565b901c91506130b4826c1e33d7d926c329a1ad1a800000613b44565b6130be90826139e0565b905060ff84166130ce8684613b44565b901c91506130e9826c02bee513bdb4a6b19b5f800000613b44565b6130f390826139e0565b905060ff84166131038684613b44565b901c915061311d826b3a9316fa79b88eccf2a00000613b44565b61312790826139e0565b905060ff84166131378684613b44565b901c9150613151826b048177ebe1fa812375200000613b44565b61315b90826139e0565b905060ff841661316b8684613b44565b901c9150613184826a5263fe90242dcbacf00000613b44565b61318e90826139e0565b905060ff841661319e8684613b44565b901c91506131b7826a057e22099c030d94100000613b44565b6131c190826139e0565b905060ff84166131d18684613b44565b901c91506131e9826957e22099c030d9410000613b44565b6131f390826139e0565b905060ff84166132038684613b44565b901c915061321b8269052b6b54569976310000613b44565b61322590826139e0565b905060ff84166132358684613b44565b901c915061324c82684985f67696bf748000613b44565b61325690826139e0565b905060ff84166132668684613b44565b901c915061327d826803dea12ea99e498000613b44565b61328790826139e0565b905060ff84166132978684613b44565b901c91506132ad826731880f2214b6e000613b44565b6132b790826139e0565b905060ff84166132c78684613b44565b901c91506132dd8267025bcff56eb36000613b44565b6132e790826139e0565b905060ff84166132f78684613b44565b901c915061330c82661b722e10ab1000613b44565b61331690826139e0565b905060ff84166133268684613b44565b901c915061333b826601317c70077000613b44565b61334590826139e0565b905060ff84166133558684613b44565b901c915061336982650cba84aafa00613b44565b61337390826139e0565b905060ff84166133838684613b44565b901c9150613396826482573a0a00613b44565b6133a090826139e0565b905060ff84166133b08684613b44565b901c91506133c3826405035ad900613b44565b6133cd90826139e0565b905060ff84166133dd8684613b44565b901c91506133ef82632f881b00613b44565b6133f990826139e0565b905060ff84166134098684613b44565b901c915061341b826301b29340613b44565b61342590826139e0565b905060ff84166134358684613b44565b901c915061344682620efc40613b44565b61345090826139e0565b905060ff84166134608684613b44565b901c915061347082617fe0613b44565b61347a90826139e0565b905060ff841661348a8684613b44565b901c915061349a82610420613b44565b6134a490826139e0565b905060ff84166134b48684613b44565b901c91506134c3826021613b44565b6134cd90826139e0565b905060ff84166134dd8684613b44565b901c91506134ec826001613b44565b6134f690826139e0565b9050600160ff85161b8561351a6f0688589cc0e9505e2f2fee558000000084613bb0565b61352491906139e0565b61115391906139e0565b600080610100831015613561575b600183111561355c57600192831c926135559082613e77565b905061353c565b613595565b60805b60ff81161561359357600160ff82161b84106135885760ff81169390931c92908117905b60011c607f16613564565b505b92915050565b6001600160a01b03811681146135b057600080fd5b50565b60008083601f8401126135c557600080fd5b50813567ffffffffffffffff8111156135dd57600080fd5b6020830191508360208260051b850101111561094057600080fd5b60008060008060008060a0878903121561361157600080fd5b863561361c8161359b565b9550602087013561362c8161359b565b9450604087013561363c8161359b565b935060608701359250608087013567ffffffffffffffff81111561365f57600080fd5b61366b89828a016135b3565b979a9699509497509295939492505050565b6020808252825182820181905260009190848201906040850190845b818110156136b557835183529284019291840191600101613699565b50909695505050505050565b600080604083850312156136d457600080fd5b82356136df8161359b565b915060208301356136ef8161359b565b809150509250929050565b60008060006060848603121561370f57600080fd5b833561371a8161359b565b9250602084013561372a8161359b565b9150604084013561373a8161359b565b809150509250925092565b60008060006060848603121561375a57600080fd5b83356137658161359b565b925060208401356137758161359b565b929592945050506040919091013590565b63ffffffff811681146135b057600080fd5b60008060008060008060c087890312156137b157600080fd5b86359550602087013594506040870135935060608701356137d181613786565b925060808701356137e181613786565b915060a08701356137f181613786565b809150509295509295509295565b600080600080600060a0868803121561381757600080fd5b85359450602086013593506040860135925060608601359150608086013561383e81613786565b809150509295509295909350565b60008060008060006080868803121561386457600080fd5b853561386f8161359b565b9450602086013561387f8161359b565b935060408601359250606086013567ffffffffffffffff8111156138a257600080fd5b6138ae888289016135b3565b969995985093965092949392505050565b6dffffffffffffffffffffffffffff811681146135b057600080fd5b600080600080600080600060e0888a0312156138f657600080fd5b873596506020880135613908816138bf565b95506040880135613918816138bf565b9450606088013561392881613786565b9350608088013561393881613786565b925060a0880135613948816138bf565b915060c0880135613958816138bf565b8091505092959891949750929550565b60008060006060848603121561397d57600080fd5b505081359360208301359350604090920135919050565b6000602082840312156139a657600080fd5b81356127948161359b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156139f3576139f36139b1565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613a8857613a886139b1565b5060010190565b600080600060608486031215613aa457600080fd5b8351613aaf81613786565b6020850151909350613ac081613786565b604085015190925061373a81613786565b600080600060608486031215613ae657600080fd5b8351613af1816138bf565b6020850151909350613ac0816138bf565b600060208284031215613b1457600080fd5b81516127948161359b565b600063ffffffff83811690831681811015613b3c57613b3c6139b1565b039392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b7c57613b7c6139b1565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082613bbf57613bbf613b81565b500490565b600082821015613bd657613bd66139b1565b500390565b600081613bea57613bea6139b1565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60008060408385031215613c2357600080fd5b8251613c2e81613786565b60208401519092506136ef81613786565b600060033d1115613c585760046000803e5060005160e01c5b90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff82111715613cc6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040525050565b600060443d1015613cdb5790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff8160248401118184111715613d2957505050505090565b8285019150815181811115613d415750505050505090565b843d8701016020828501011115613d5b5750505050505090565b613d6a60208286010187613c5b565b509095945050505050565b600060208083528351808285015260005b81811015613da257858101830151858201604001528201613d86565b81811115613db4576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600060208284031215613dfa57600080fd5b815161279481613786565b600060ff821660ff841680821015613e1f57613e1f6139b1565b90039392505050565b600060ff821680613e3b57613e3b6139b1565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600082613e7257613e72613b81565b500690565b600060ff821660ff84168060ff03821115613e9457613e946139b1565b019392505050565b600060ff831680613eaf57613eaf613b81565b8060ff8416049150509291505056fea264697066735822122021cc76adb03f81ed7d313b3e3cf0964edd857f14ef7bda3bddf6a87e05bea1d964736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80638888a737116100b2578063b19210b011610081578063b3923a9911610066578063b3923a991461032b578063ca2229791461033e578063d69109371461035157600080fd5b8063b19210b014610305578063b33d96b01461031857600080fd5b80638888a737146102b95780638fabd82d146102cc57806392aec23c146102df578063ad615dec146102f257600080fd5b80635bff1d9211610109578063671a11b5116100ee578063671a11b51461027057806367f84adc1461028357806379c91b371461029657600080fd5b80635bff1d92146101f95780636350d7741461024f57600080fd5b8063119220a51461013b5780632bb66e1d14610164578063327494611461019e578063544caa56146101c6575b600080fd5b61014e6101493660046135f8565b61037c565b60405161015b919061367d565b60405180910390f35b6101776101723660046136c1565b61058e565b6040805163ffffffff9485168152928416602084015292169181019190915260600161015b565b6101b16101ac3660046136fa565b610626565b6040805192835260208301919091520161015b565b6101d96101d43660046136c1565b610837565b604080516001600160a01b0393841681529290911660208301520161015b565b61020c6102073660046136c1565b610947565b604080516001600160a01b03909716875260208701959095529385019290925263ffffffff908116606085015290811660808401521660a082015260c00161015b565b61026261025d366004613745565b610c2c565b60405190815260200161015b565b61026261027e366004613798565b610c69565b61014e6102913660046135f8565b610e3f565b6102a96102a43660046137ff565b611037565b604051901515815260200161015b565b6102626102c7366004613745565b61115c565b61014e6102da36600461384c565b611195565b6102626102ed3660046138db565b61138e565b610262610300366004613968565b61149b565b610262610313366004613798565b6115b1565b61020c6103263660046136fa565b61179c565b61014e61033936600461384c565b611a38565b61017761034c366004613994565b611c1d565b61036461035f3660046136c1565b611d96565b6040516001600160a01b03909116815260200161015b565b6060816103d05760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064015b60405180910390fd5b6103db8260016139e0565b67ffffffffffffffff8111156103f3576103f36139f8565b60405190808252806020026020018201604052801561041c578160200160208202803683370190505b509050838160008151811061043357610433613a27565b60209081029190910101528560005b838110156104fb576000806000806000806104848f8c8c8a81811061046957610469613a27565b905060200201602081019061047e9190613994565b8a61179c565b9550955095509550955095506104b78988815181106104a5576104a5613a27565b60200260200101518686868686610c69565b896104c38960016139e0565b815181106104d3576104d3613a27565b60200260200101818152505085975050505050505080806104f390613a56565b915050610442565b50856001600160a01b0316816001600160a01b0316146105835760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f4f5560448201527f545f50415448000000000000000000000000000000000000000000000000000060648201526084016103c7565b509695505050505050565b6040517fca2229790000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152600091829182919086169063ca22297990602401606060405180830381865afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106199190613a8f565b9250925092509250925092565b6000806000806106368686610837565b91509150600080886001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561067b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069f9190613ad1565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150886001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190613b02565b6001600160a01b0316846001600160a01b03161480156107b85750886001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561077f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a39190613b02565b6001600160a01b0316836001600160a01b0316145b6108045760405162461bcd60e51b815260206004820152601d60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e00000060448201526064016103c7565b836001600160a01b0316886001600160a01b031614610824578082610827565b81815b909a909950975050505050505050565b600080826001600160a01b0316846001600160a01b031614156108c25760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a204944454e544943414c5f41444452455360448201527f534553000000000000000000000000000000000000000000000000000000000060648201526084016103c7565b826001600160a01b0316846001600160a01b0316106108e25782846108e5565b83835b90925090506001600160a01b0382166109405760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a205a45524f5f414444524553530000000060448201526064016103c7565b9250929050565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190613ad1565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000806109e68c611c1d565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a549190613b02565b6001600160a01b03168b6001600160a01b03161415610ae4578b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acf9190613b02565b99509297509095509350915084848484610c1e565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b469190613b02565b6001600160a01b03168b6001600160a01b03161415610bd6578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc19190613b02565b99509197509195509350915083858385610c1e565b60405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e41000060448201526064016103c7565b505050509295509295509295565b6000806000806000806000610c418a8a610947565b955095509550955095509550610c5b8885878587866115b1565b9a9950505050505050505050565b6000808711610ce05760405162461bcd60e51b815260206004820152602960248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f494e5060448201527f55545f414d4f554e54000000000000000000000000000000000000000000000060648201526084016103c7565b600086118015610cf05750600085115b610d625760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201527f554944495459000000000000000000000000000000000000000000000000000060648201526084016103c7565b6000610d7083612710613b1f565b610d809063ffffffff1689613b44565b90508363ffffffff168563ffffffff161415610dc95780610da388612710613b44565b610dad91906139e0565b610db78288613b44565b610dc19190613bb0565b915050610e35565b6000808083610dda8b612710613b44565b610de491906139e0565b9050610dfd81610df68c612710613b44565b8a8a611eff565b90935091506000610e0e848b613b44565b905060ff83168a901b84610e228284613bc4565b610e2c9190613bb0565b96505050505050505b9695505050505050565b606081610e8e5760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103c7565b610e998260016139e0565b67ffffffffffffffff811115610eb157610eb16139f8565b604051908082528060200260200182016040528015610eda578160200160208202803683370190505b509050838160018351610eed9190613bc4565b81518110610efd57610efd613a27565b602090810291909101015284825b8015610faf5760008080808080610f388f8c8c610f2960018c613bc4565b81811061046957610469613a27565b955095509550955095509550610f6b898881518110610f5957610f59613a27565b602002602001015185878587866115b1565b89610f7760018a613bc4565b81518110610f8757610f87613a27565b6020026020010181815250508597505050505050508080610fa790613bdb565b915050610f0b565b50866001600160a01b0316816001600160a01b0316146105835760405162461bcd60e51b815260206004820152602560248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f494e60448201527f5f5041544800000000000000000000000000000000000000000000000000000060648201526084016103c7565b60008163ffffffff1660321415611065576110528587613b44565b61105c8486613b44565b10159050611153565b8584101580156110755750848310155b1561108257506001611153565b8584111580156110925750848311155b1561109f57506000611153565b8160006110ad826064613b1f565b90506000806000808b8a106110eb576110c98b8a876032611eff565b90945060ff1692506110de8a8d886032611eff565b90925060ff169050611116565b6110f88c8b886032611eff565b90945060ff16925061110d898c876032611eff565b90925060ff1690505b60008184106111255781611127565b835b90506111338185613bc4565b935061113f8183613bc4565b9290921c9390921c92909211159450505050505b95945050505050565b60008060008060008061116f8989610947565b9550955095509550955050611188878686868686610c69565b9998505050505050505050565b6060816111e45760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103c7565b6111ef8260016139e0565b67ffffffffffffffff811115611207576112076139f8565b604051908082528060200260200182016040528015611230578160200160208202803683370190505b509050838160008151811061124757611247613a27565b60209081029190910101528560005b838110156112fc576000806000806000806112978b8b8981811061127c5761127c613a27565b90506020020160208101906112919190613994565b89610947565b9550955095509550955095506112b88988815181106104a5576104a5613a27565b896112c48960016139e0565b815181106112d4576112d4613a27565b60200260200101818152505085975050505050505080806112f490613a56565b915050611256565b50856001600160a01b0316816001600160a01b0316146113845760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f4f5560448201527f545f50415448000000000000000000000000000000000000000000000000000060648201526084016103c7565b5095945050505050565b60006dffffffffffffffffffffffffffff831615611410576000806113e26113c96dffffffffffffffffffffffffffff808c169088166139e0565b8a6dffffffffffffffffffffffffffff16896064611eff565b90925060ff16905089816113f68483613b44565b611401911c856139e0565b61140b9190613bc4565b925050505b6dffffffffffffffffffffffffffff821615611490576000806114626114496dffffffffffffffffffffffffffff808b169087166139e0565b896dffffffffffffffffffffffffffff16886064611eff565b90925060ff16905089816114768483613b44565b611481911c856139e0565b61148b9190613bc4565b925050505b979650505050505050565b60008084116115125760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f414d4f60448201527f554e54000000000000000000000000000000000000000000000000000000000060648201526084016103c7565b6000831180156115225750600082115b6115945760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201527f554944495459000000000000000000000000000000000000000000000000000060648201526084016103c7565b8261159f8386613b44565b6115a99190613bb0565b949350505050565b60008087116116285760405162461bcd60e51b815260206004820152602a60248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4f555460448201527f5055545f414d4f554e540000000000000000000000000000000000000000000060648201526084016103c7565b6000861180156116385750600085115b6116aa5760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201527f554944495459000000000000000000000000000000000000000000000000000060648201526084016103c7565b8263ffffffff168463ffffffff1614156117205760006116ca8888613b44565b6116d690612710613b44565b905060006116e684612710613b1f565b63ffffffff166116f68a89613bc4565b6117009190613b44565b905061170c8183613bb0565b6117179060016139e0565b92505050610e35565b6000808061172e8a89613bc4565b905061173c8882888a611eff565b9093509150600061174f6127108b613bc4565b9050600061175d8583613bc4565b905060ff841682901b61177288612710613b1f565b63ffffffff1660ff86166117868385613bc4565b61179192911c613bb0565b610e2c9060016139e0565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156117e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180a9190613ad1565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060008061183c8d8d61058e565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118aa9190613b02565b6001600160a01b03168b6001600160a01b0316141561193a578b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119259190613b02565b99509297509095509350915084848484611a28565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199c9190613b02565b6001600160a01b03168b6001600160a01b03161415610bd6578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a179190613b02565b995091975091955093509150838583855b5050505093975093979195509350565b606081611a875760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103c7565b611a928260016139e0565b67ffffffffffffffff811115611aaa57611aaa6139f8565b604051908082528060200260200182016040528015611ad3578160200160208202803683370190505b509050838160018351611ae69190613bc4565b81518110611af657611af6613a27565b602090810291909101015284825b8015611b955760008080808080611b308b8b611b2160018b613bc4565b81811061127c5761127c613a27565b955095509550955095509550611b51898881518110610f5957610f59613a27565b89611b5d60018a613bc4565b81518110611b6d57611b6d613a27565b6020026020010181815250508597505050505050508080611b8d90613bdb565b915050611b04565b50866001600160a01b0316816001600160a01b0316146113845760405162461bcd60e51b815260206004820152602560248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f494e60448201527f5f5041544800000000000000000000000000000000000000000000000000000060648201526084016103c7565b6000806000836001600160a01b03166332bfe4696040518163ffffffff1660e01b81526004016040805180830381865afa925050508015611c99575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611c9691810190613c10565b60015b611d2257611ca5613c3f565b806308c379a01415611cdf5750611cba613ccd565b80611cc55750611ce1565b8060405162461bcd60e51b81526004016103c79190613d75565b505b3d808015611d0b576040519150601f19603f3d011682016040523d82523d6000602084013e611d10565b606091505b50603280601e93509350935050611d8f565b8181876001600160a01b031663d4cadf686040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d869190613de8565b94509450945050505b9193909250565b600080836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfb9190613b02565b90506000846001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e619190613b02565b9050836001600160a01b0316826001600160a01b03161480611e945750836001600160a01b0316816001600160a01b0316145b611ee05760405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e41000060448201526064016103c7565b836001600160a01b0316826001600160a01b0316146115a95781611153565b60008084861015611f525760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420737570706f7274205f626173654e203c205f6261736544000000000060448201526064016103c7565b7002000000000000000000000000000000008610611f6f57600080fd5b60008086611f816001607f1b8a613b44565b611f8b9190613bb0565b905070015bf0a8b1457695355fb8ac404e7a79e3811015611fb657611faf81612056565b9150611fc2565b611fbf8161268c565b91505b60008563ffffffff168763ffffffff1684611fdd9190613b44565b611fe79190613bb0565b90507008000000000000000000000000000000008110156120195761200b8161279b565b607f9450945050505061204d565b600061202482612e1d565b905061204061203482607f613e05565b60ff1683901c82612ed0565b9550935061204d92505050565b94509492505050565b6000808080806fd3094c70f034de4b96ff7d5b6f99fcd886106120bb5761208d6f40000000000000000000000000000000856139e0565b93506fd3094c70f034de4b96ff7d5b6f99fcd86120ae6001607f1b88613b44565b6120b89190613bb0565b95505b6fa45af1e1f40c333b3de1db4dd55f29a7861061211a576120ec6f20000000000000000000000000000000856139e0565b93506fa45af1e1f40c333b3de1db4dd55f29a761210d6001607f1b88613b44565b6121179190613bb0565b95505b6f910b022db7ae67ce76b441c27035c6a186106121795761214b6f10000000000000000000000000000000856139e0565b93506f910b022db7ae67ce76b441c27035c6a161216c6001607f1b88613b44565b6121769190613bb0565b95505b6f88415abbe9a76bead8d00cf112e4d4a886106121d8576121aa6f08000000000000000000000000000000856139e0565b93506f88415abbe9a76bead8d00cf112e4d4a86121cb6001607f1b88613b44565b6121d59190613bb0565b95505b6f84102b00893f64c705e841d5d4064bd38610612237576122096f04000000000000000000000000000000856139e0565b93506f84102b00893f64c705e841d5d4064bd361222a6001607f1b88613b44565b6122349190613bb0565b95505b6f8204055aaef1c8bd5c3259f4822735a28610612296576122686f02000000000000000000000000000000856139e0565b93506f8204055aaef1c8bd5c3259f4822735a26122896001607f1b88613b44565b6122939190613bb0565b95505b6f810100ab00222d861931c15e39b44e9986106122f5576122c76f01000000000000000000000000000000856139e0565b93506f810100ab00222d861931c15e39b44e996122e86001607f1b88613b44565b6122f29190613bb0565b95505b6f808040155aabbbe9451521693554f7338610612353576123256e800000000000000000000000000000856139e0565b93506f808040155aabbbe9451521693554f7336123466001607f1b88613b44565b6123509190613bb0565b95505b6123616001607f1b87613bc4565b92508291506001607f1b6123758380613b44565b61237f9190613bb0565b905070010000000000000000000000000000000061239d8482613bc4565b6123a79084613b44565b6123b19190613bb0565b6123bb90856139e0565b93506001607f1b6123cc8284613b44565b6123d69190613bb0565b9150700200000000000000000000000000000000612404846faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa613bc4565b61240e9084613b44565b6124189190613bb0565b61242290856139e0565b93506001607f1b6124338284613b44565b61243d9190613bb0565b915070030000000000000000000000000000000061246b846f99999999999999999999999999999999613bc4565b6124759084613b44565b61247f9190613bb0565b61248990856139e0565b93506001607f1b61249a8284613b44565b6124a49190613bb0565b91507004000000000000000000000000000000006124d2846f92492492492492492492492492492492613bc4565b6124dc9084613b44565b6124e69190613bb0565b6124f090856139e0565b93506001607f1b6125018284613b44565b61250b9190613bb0565b9150700500000000000000000000000000000000612539846f8e38e38e38e38e38e38e38e38e38e38e613bc4565b6125439084613b44565b61254d9190613bb0565b61255790856139e0565b93506001607f1b6125688284613b44565b6125729190613bb0565b91507006000000000000000000000000000000006125a0846f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b613bc4565b6125aa9084613b44565b6125b49190613bb0565b6125be90856139e0565b93506001607f1b6125cf8284613b44565b6125d99190613bb0565b9150700700000000000000000000000000000000612607846f89d89d89d89d89d89d89d89d89d89d89613bc4565b6126119084613b44565b61261b9190613bb0565b61262590856139e0565b93506001607f1b6126368284613b44565b6126409190613bb0565b915070080000000000000000000000000000000061266e846f88888888888888888888888888888888613bc4565b6126789084613b44565b6126829190613bb0565b610e3590856139e0565b60008070010000000000000000000000000000000083106126dd5760006126bf6126ba6001607f1b86613bb0565b61352e565b60ff811694851c949091506126d9906001607f1b90613b44565b9150505b6001607f1b83111561275f57607f5b60ff81161561275d576001607f1b6127048580613b44565b61270e9190613bb0565b9350700100000000000000000000000000000000841061274d57600193841c936127389082613e05565b60ff166001901b8261274a91906139e0565b91505b61275681613e28565b90506126ec565b505b6f05b9de1d10bf4103d647b0955897ba8061278a6f03f80fe03f80fe03f80fe03f80fe03f883613b44565b6127949190613bb0565b9392505050565b60008080806127ba6f1000000000000000000000000000000086613e63565b91508190506001607f1b6127ce8280613b44565b6127d89190613bb0565b90506127ec816710e1b3be415a0000613b44565b6127f690846139e0565b92506001607f1b6128078383613b44565b6128119190613bb0565b9050612825816705a0913f6b1e0000613b44565b61282f90846139e0565b92506001607f1b6128408383613b44565b61284a9190613bb0565b905061285e81670168244fdac78000613b44565b61286890846139e0565b92506001607f1b6128798383613b44565b6128839190613bb0565b905061289681664807432bc18000613b44565b6128a090846139e0565b92506001607f1b6128b18383613b44565b6128bb9190613bb0565b90506128ce81660c0135dca04000613b44565b6128d890846139e0565b92506001607f1b6128e98383613b44565b6128f39190613bb0565b9050612906816601b707b1cdc000613b44565b61291090846139e0565b92506001607f1b6129218383613b44565b61292b9190613bb0565b905061293d816536e0f639b800613b44565b61294790846139e0565b92506001607f1b6129588383613b44565b6129629190613bb0565b905061297481650618fee9f800613b44565b61297e90846139e0565b92506001607f1b61298f8383613b44565b6129999190613bb0565b90506129aa81649c197dcc00613b44565b6129b490846139e0565b92506001607f1b6129c58383613b44565b6129cf9190613bb0565b90506129e081640e30dce400613b44565b6129ea90846139e0565b92506001607f1b6129fb8383613b44565b612a059190613bb0565b9050612a168164012ebd1300613b44565b612a2090846139e0565b92506001607f1b612a318383613b44565b612a3b9190613bb0565b9050612a4b816317499f00613b44565b612a5590846139e0565b92506001607f1b612a668383613b44565b612a709190613bb0565b9050612a80816301a9d480613b44565b612a8a90846139e0565b92506001607f1b612a9b8383613b44565b612aa59190613bb0565b9050612ab481621c6380613b44565b612abe90846139e0565b92506001607f1b612acf8383613b44565b612ad99190613bb0565b9050612ae8816201c638613b44565b612af290846139e0565b92506001607f1b612b038383613b44565b612b0d9190613bb0565b9050612b1b81611ab8613b44565b612b2590846139e0565b92506001607f1b612b368383613b44565b612b409190613bb0565b9050612b4e8161017c613b44565b612b5890846139e0565b92506001607f1b612b698383613b44565b612b739190613bb0565b9050612b80816014613b44565b612b8a90846139e0565b92506001607f1b612b9b8383613b44565b612ba59190613bb0565b9050612bb2816001613b44565b612bbc90846139e0565b92506001607f1b82612bd66721c3677c82b4000086613bb0565b612be091906139e0565b612bea91906139e0565b92506f10000000000000000000000000000000851615612c3e5770018ebef9eac820ae8682b9793ac6d1e776612c31847001c3d6a24ed82218787d624d3e5eba95f9613b44565b612c3b9190613bb0565b92505b6f20000000000000000000000000000000851615612c90577001368b2fc6f9609fe7aceb46aa619baed4612c838470018ebef9eac820ae8682b9793ac6d1e778613b44565b612c8d9190613bb0565b92505b6f40000000000000000000000000000000851615612ce1576fbc5ab1b16779be3575bd8f0520a9f21f612cd4847001368b2fc6f9609fe7aceb46aa619baed5613b44565b612cde9190613bb0565b92505b6001607f1b851615612d25576f454aaa8efe072e7f6ddbab84b40a55c9612d18846fbc5ab1b16779be3575bd8f0520a9f21e613b44565b612d229190613bb0565b92505b700100000000000000000000000000000000851615612d76576f0960aadc109e7a3bf4578099615711ea612d69846f454aaa8efe072e7f6ddbab84b40a55c5613b44565b612d739190613bb0565b92505b700200000000000000000000000000000000851615612dc6576e2bf84208204f5977f9a8cf01fdce3d612db9846f0960aadc109e7a3bf4578099615711d7613b44565b612dc39190613bb0565b92505b700400000000000000000000000000000000851615612e14576d03c6ab775dd0b95b4cbee7e65d11612e07846e2bf84208204f5977f9a8cf01fdc307613b44565b612e119190613bb0565b92505b50909392505050565b60006020607f5b60ff8116612e33836001613e77565b60ff161015612e865760006002612e4a8385613e77565b612e549190613e9c565b90508460008260ff1660808110612e6d57612e6d613a27565b015410612e7c57809250612e80565b8091505b50612e24565b8360008260ff1660808110612e9d57612e9d613a27565b015410612eab579392505050565b8360008360ff1660808110612ec257612ec2613a27565b015410610136575092915050565b6000828160ff8416612ee28380613b44565b901c9150612f00826f03442c4e6074a82f1797f72ac0000000613b44565b612f0a90826139e0565b905060ff8416612f1a8684613b44565b901c9150612f38826f0116b96f757c380fb287fd0e40000000613b44565b612f4290826139e0565b905060ff8416612f528684613b44565b901c9150612f6f826e45ae5bdd5f0e03eca1ff4390000000613b44565b612f7990826139e0565b905060ff8416612f898684613b44565b901c9150612fa6826e0defabf91302cd95b9ffda50000000613b44565b612fb090826139e0565b905060ff8416612fc08684613b44565b901c9150612fdd826e02529ca9832b22439efff9b8000000613b44565b612fe790826139e0565b905060ff8416612ff78684613b44565b901c9150613013826d54f1cf12bd04e516b6da88000000613b44565b61301d90826139e0565b905060ff841661302d8684613b44565b901c9150613049826d0a9e39e257a09ca2d6db51000000613b44565b61305390826139e0565b905060ff84166130638684613b44565b901c915061307f826d012e066e7b839fa050c309000000613b44565b61308990826139e0565b905060ff84166130998684613b44565b901c91506130b4826c1e33d7d926c329a1ad1a800000613b44565b6130be90826139e0565b905060ff84166130ce8684613b44565b901c91506130e9826c02bee513bdb4a6b19b5f800000613b44565b6130f390826139e0565b905060ff84166131038684613b44565b901c915061311d826b3a9316fa79b88eccf2a00000613b44565b61312790826139e0565b905060ff84166131378684613b44565b901c9150613151826b048177ebe1fa812375200000613b44565b61315b90826139e0565b905060ff841661316b8684613b44565b901c9150613184826a5263fe90242dcbacf00000613b44565b61318e90826139e0565b905060ff841661319e8684613b44565b901c91506131b7826a057e22099c030d94100000613b44565b6131c190826139e0565b905060ff84166131d18684613b44565b901c91506131e9826957e22099c030d9410000613b44565b6131f390826139e0565b905060ff84166132038684613b44565b901c915061321b8269052b6b54569976310000613b44565b61322590826139e0565b905060ff84166132358684613b44565b901c915061324c82684985f67696bf748000613b44565b61325690826139e0565b905060ff84166132668684613b44565b901c915061327d826803dea12ea99e498000613b44565b61328790826139e0565b905060ff84166132978684613b44565b901c91506132ad826731880f2214b6e000613b44565b6132b790826139e0565b905060ff84166132c78684613b44565b901c91506132dd8267025bcff56eb36000613b44565b6132e790826139e0565b905060ff84166132f78684613b44565b901c915061330c82661b722e10ab1000613b44565b61331690826139e0565b905060ff84166133268684613b44565b901c915061333b826601317c70077000613b44565b61334590826139e0565b905060ff84166133558684613b44565b901c915061336982650cba84aafa00613b44565b61337390826139e0565b905060ff84166133838684613b44565b901c9150613396826482573a0a00613b44565b6133a090826139e0565b905060ff84166133b08684613b44565b901c91506133c3826405035ad900613b44565b6133cd90826139e0565b905060ff84166133dd8684613b44565b901c91506133ef82632f881b00613b44565b6133f990826139e0565b905060ff84166134098684613b44565b901c915061341b826301b29340613b44565b61342590826139e0565b905060ff84166134358684613b44565b901c915061344682620efc40613b44565b61345090826139e0565b905060ff84166134608684613b44565b901c915061347082617fe0613b44565b61347a90826139e0565b905060ff841661348a8684613b44565b901c915061349a82610420613b44565b6134a490826139e0565b905060ff84166134b48684613b44565b901c91506134c3826021613b44565b6134cd90826139e0565b905060ff84166134dd8684613b44565b901c91506134ec826001613b44565b6134f690826139e0565b9050600160ff85161b8561351a6f0688589cc0e9505e2f2fee558000000084613bb0565b61352491906139e0565b61115391906139e0565b600080610100831015613561575b600183111561355c57600192831c926135559082613e77565b905061353c565b613595565b60805b60ff81161561359357600160ff82161b84106135885760ff81169390931c92908117905b60011c607f16613564565b505b92915050565b6001600160a01b03811681146135b057600080fd5b50565b60008083601f8401126135c557600080fd5b50813567ffffffffffffffff8111156135dd57600080fd5b6020830191508360208260051b850101111561094057600080fd5b60008060008060008060a0878903121561361157600080fd5b863561361c8161359b565b9550602087013561362c8161359b565b9450604087013561363c8161359b565b935060608701359250608087013567ffffffffffffffff81111561365f57600080fd5b61366b89828a016135b3565b979a9699509497509295939492505050565b6020808252825182820181905260009190848201906040850190845b818110156136b557835183529284019291840191600101613699565b50909695505050505050565b600080604083850312156136d457600080fd5b82356136df8161359b565b915060208301356136ef8161359b565b809150509250929050565b60008060006060848603121561370f57600080fd5b833561371a8161359b565b9250602084013561372a8161359b565b9150604084013561373a8161359b565b809150509250925092565b60008060006060848603121561375a57600080fd5b83356137658161359b565b925060208401356137758161359b565b929592945050506040919091013590565b63ffffffff811681146135b057600080fd5b60008060008060008060c087890312156137b157600080fd5b86359550602087013594506040870135935060608701356137d181613786565b925060808701356137e181613786565b915060a08701356137f181613786565b809150509295509295509295565b600080600080600060a0868803121561381757600080fd5b85359450602086013593506040860135925060608601359150608086013561383e81613786565b809150509295509295909350565b60008060008060006080868803121561386457600080fd5b853561386f8161359b565b9450602086013561387f8161359b565b935060408601359250606086013567ffffffffffffffff8111156138a257600080fd5b6138ae888289016135b3565b969995985093965092949392505050565b6dffffffffffffffffffffffffffff811681146135b057600080fd5b600080600080600080600060e0888a0312156138f657600080fd5b873596506020880135613908816138bf565b95506040880135613918816138bf565b9450606088013561392881613786565b9350608088013561393881613786565b925060a0880135613948816138bf565b915060c0880135613958816138bf565b8091505092959891949750929550565b60008060006060848603121561397d57600080fd5b505081359360208301359350604090920135919050565b6000602082840312156139a657600080fd5b81356127948161359b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156139f3576139f36139b1565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613a8857613a886139b1565b5060010190565b600080600060608486031215613aa457600080fd5b8351613aaf81613786565b6020850151909350613ac081613786565b604085015190925061373a81613786565b600080600060608486031215613ae657600080fd5b8351613af1816138bf565b6020850151909350613ac0816138bf565b600060208284031215613b1457600080fd5b81516127948161359b565b600063ffffffff83811690831681811015613b3c57613b3c6139b1565b039392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b7c57613b7c6139b1565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082613bbf57613bbf613b81565b500490565b600082821015613bd657613bd66139b1565b500390565b600081613bea57613bea6139b1565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60008060408385031215613c2357600080fd5b8251613c2e81613786565b60208401519092506136ef81613786565b600060033d1115613c585760046000803e5060005160e01c5b90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff82111715613cc6577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040525050565b600060443d1015613cdb5790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff8160248401118184111715613d2957505050505090565b8285019150815181811115613d415750505050505090565b843d8701016020828501011115613d5b5750505050505090565b613d6a60208286010187613c5b565b509095945050505050565b600060208083528351808285015260005b81811015613da257858101830151858201604001528201613d86565b81811115613db4576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600060208284031215613dfa57600080fd5b815161279481613786565b600060ff821660ff841680821015613e1f57613e1f6139b1565b90039392505050565b600060ff821680613e3b57613e3b6139b1565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600082613e7257613e72613b81565b500690565b600060ff821660ff84168060ff03821115613e9457613e946139b1565b019392505050565b600060ff831680613eaf57613eaf613b81565b8060ff8416049150509291505056fea264697066735822122021cc76adb03f81ed7d313b3e3cf0964edd857f14ef7bda3bddf6a87e05bea1d964736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAmountIn(uint256,uint256,uint256,uint32,uint32,uint32)": {
        "details": "given an output amount of an asset and pair reserves, returns a required input amount of the other asset Formula: return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)",
        "params": {
          "amountOut": "target reserve amount",
          "reserveIn": "source reserve balance",
          "reserveOut": "target reserve balance",
          "swapFee": "swap fee of the conversion",
          "tokenWeightIn": "source reserve weight, represented in ppm (2-98)",
          "tokenWeightOut": "target reserve weight, represented in ppm (2-98)"
        },
        "returns": {
          "amountIn": "amountIn"
        }
      },
      "getAmountOut(uint256,uint256,uint256,uint32,uint32,uint32)": {
        "details": "given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset, Formula: return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))",
        "params": {
          "amountIn": "source reserve amount",
          "reserveIn": "source reserve balance",
          "reserveOut": "target reserve balance",
          "swapFee": "swap fee of the conversion",
          "tokenWeightIn": "source reserve weight, represented in ppm (2-98)",
          "tokenWeightOut": "target reserve weight, represented in ppm (2-98)"
        },
        "returns": {
          "amountOut": "amountOut"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3430,
        "contract": "contracts/RequiemFormula.sol:RequiemFormula",
        "label": "maxExpArray",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)128_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)128_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[128]",
        "numberOfBytes": "4096"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}