{
  "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserve0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserve1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance0Adjusted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance1Adjusted",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        }
      ],
      "name": "ensureConstantValue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightIn",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightOut",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightIn",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightOut",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getFactoryAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getFactoryAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getFactoryReserveAndWeights",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightB",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getFactoryWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getOtherToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "getPairAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getPairAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getReserveAndWeights",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightB",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint112",
          "name": "reserve0",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "reserve1",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint112",
          "name": "collectedFee0",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "collectedFee1",
          "type": "uint112"
        }
      ],
      "name": "mintLiquidityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "sortTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xa18b4e2ce302f1b9649a977527291d322c1bbdd9b00192a6e06a6e335498d206",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
    "transactionIndex": 0,
    "gasUsed": "5728587",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x8576718c543cf499831d7e3e223900947d96e7a0c87a9edabd74ff36eee6bd1e",
    "transactionHash": "0xa18b4e2ce302f1b9649a977527291d322c1bbdd9b00192a6e06a6e335498d206",
    "logs": [],
    "blockNumber": 10,
    "cumulativeGasUsed": "5728587",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "550e4d753b3429079c3ff672185b4b19",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance0Adjusted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance1Adjusted\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"}],\"name\":\"ensureConstantValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightIn\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightOut\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightIn\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightOut\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getFactoryAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getFactoryAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getFactoryReserveAndWeights\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getFactoryWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getOtherToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getPairAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getPairAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getReserveAndWeights\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"collectedFee0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"collectedFee1\",\"type\":\"uint112\"}],\"name\":\"mintLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAmountIn(uint256,uint256,uint256,uint32,uint32,uint32)\":{\"details\":\"given an output amount of an asset and pair reserves, returns a required input amount of the other asset Formula: return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\",\"params\":{\"amountOut\":\"target reserve amount\",\"reserveIn\":\"source reserve balance\",\"reserveOut\":\"target reserve balance\",\"swapFee\":\"swap fee of the conversion\",\"tokenWeightIn\":\"source reserve weight, represented in ppm (2-98)\",\"tokenWeightOut\":\"target reserve weight, represented in ppm (2-98)\"},\"returns\":{\"amountIn\":\"amountIn\"}},\"getAmountOut(uint256,uint256,uint256,uint32,uint32,uint32)\":{\"details\":\"given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset, Formula: return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\",\"params\":{\"amountIn\":\"source reserve amount\",\"reserveIn\":\"source reserve balance\",\"reserveOut\":\"target reserve balance\",\"swapFee\":\"swap fee of the conversion\",\"tokenWeightIn\":\"source reserve weight, represented in ppm (2-98)\",\"tokenWeightOut\":\"target reserve weight, represented in ppm (2-98)\"},\"returns\":{\"amountOut\":\"amountOut\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemFormula.sol\":\"RequiemFormula\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/RequiemFormula.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.6;\\n\\nimport \\\"./interfaces/IRequiemFormula.sol\\\";\\nimport \\\"./interfaces/IRequiemPair.sol\\\";\\nimport \\\"./interfaces/IRequiemFactory.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\n\\ncontract RequiemFormula is IRequiemFormula {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant ONE = 1;\\n    uint8 private constant MIN_PRECISION = 32;\\n    uint8 private constant MAX_PRECISION = 127;\\n\\n    uint256 private constant FIXED_1 = 0x080000000000000000000000000000000;\\n    uint256 private constant FIXED_2 = 0x100000000000000000000000000000000;\\n    uint256 private constant MAX_NUM = 0x200000000000000000000000000000000;\\n\\n    uint256 private constant LN2_NUMERATOR = 0x3f80fe03f80fe03f80fe03f80fe03f8;\\n    uint256 private constant LN2_DENOMINATOR = 0x5b9de1d10bf4103d647b0955897ba80;\\n\\n    uint256 private constant OPT_LOG_MAX_VAL = 0x15bf0a8b1457695355fb8ac404e7a79e3;\\n    uint256 private constant OPT_EXP_MAX_VAL = 0x800000000000000000000000000000000;\\n\\n    uint256 private constant LAMBERT_CONV_RADIUS = 0x002f16ac6c59de6f8d5d6f63c1482a7c86;\\n    uint256 private constant LAMBERT_POS2_SAMPLE = 0x0003060c183060c183060c183060c18306;\\n    uint256 private constant LAMBERT_POS2_MAXVAL = 0x01af16ac6c59de6f8d5d6f63c1482a7c80;\\n    uint256 private constant LAMBERT_POS3_MAXVAL = 0x6b22d43e72c326539cceeef8bb48f255ff;\\n\\n    uint256 private constant MAX_UNF_WEIGHT = 0x10c6f7a0b5ed8d36b4c7f34938583621fafc8b0079a2834d26fa3fcc9ea9;\\n\\n    uint256[128] private maxExpArray;\\n\\n    function initMaxExpArray() internal {\\n        maxExpArray[32] = 0x1c35fedd14ffffffffffffffffffffffff;\\n        maxExpArray[33] = 0x1b0ce43b323fffffffffffffffffffffff;\\n        maxExpArray[34] = 0x19f0028ec1ffffffffffffffffffffffff;\\n        maxExpArray[35] = 0x18ded91f0e7fffffffffffffffffffffff;\\n        maxExpArray[36] = 0x17d8ec7f0417ffffffffffffffffffffff;\\n        maxExpArray[37] = 0x16ddc6556cdbffffffffffffffffffffff;\\n        maxExpArray[38] = 0x15ecf52776a1ffffffffffffffffffffff;\\n        maxExpArray[39] = 0x15060c256cb2ffffffffffffffffffffff;\\n        maxExpArray[40] = 0x1428a2f98d72ffffffffffffffffffffff;\\n        maxExpArray[41] = 0x13545598e5c23fffffffffffffffffffff;\\n        maxExpArray[42] = 0x1288c4161ce1dfffffffffffffffffffff;\\n        maxExpArray[43] = 0x11c592761c666fffffffffffffffffffff;\\n        maxExpArray[44] = 0x110a688680a757ffffffffffffffffffff;\\n        maxExpArray[45] = 0x1056f1b5bedf77ffffffffffffffffffff;\\n        maxExpArray[46] = 0x0faadceceeff8bffffffffffffffffffff;\\n        maxExpArray[47] = 0x0f05dc6b27edadffffffffffffffffffff;\\n        maxExpArray[48] = 0x0e67a5a25da4107fffffffffffffffffff;\\n        maxExpArray[49] = 0x0dcff115b14eedffffffffffffffffffff;\\n        maxExpArray[50] = 0x0d3e7a392431239fffffffffffffffffff;\\n        maxExpArray[51] = 0x0cb2ff529eb71e4fffffffffffffffffff;\\n        maxExpArray[52] = 0x0c2d415c3db974afffffffffffffffffff;\\n        maxExpArray[53] = 0x0bad03e7d883f69bffffffffffffffffff;\\n        maxExpArray[54] = 0x0b320d03b2c343d5ffffffffffffffffff;\\n        maxExpArray[55] = 0x0abc25204e02828dffffffffffffffffff;\\n        maxExpArray[56] = 0x0a4b16f74ee4bb207fffffffffffffffff;\\n        maxExpArray[57] = 0x09deaf736ac1f569ffffffffffffffffff;\\n        maxExpArray[58] = 0x0976bd9952c7aa957fffffffffffffffff;\\n        maxExpArray[59] = 0x09131271922eaa606fffffffffffffffff;\\n        maxExpArray[60] = 0x08b380f3558668c46fffffffffffffffff;\\n        maxExpArray[61] = 0x0857ddf0117efa215bffffffffffffffff;\\n        maxExpArray[62] = 0x07ffffffffffffffffffffffffffffffff;\\n        maxExpArray[63] = 0x07abbf6f6abb9d087fffffffffffffffff;\\n        maxExpArray[64] = 0x075af62cbac95f7dfa7fffffffffffffff;\\n        maxExpArray[65] = 0x070d7fb7452e187ac13fffffffffffffff;\\n        maxExpArray[66] = 0x06c3390ecc8af379295fffffffffffffff;\\n        maxExpArray[67] = 0x067c00a3b07ffc01fd6fffffffffffffff;\\n        maxExpArray[68] = 0x0637b647c39cbb9d3d27ffffffffffffff;\\n        maxExpArray[69] = 0x05f63b1fc104dbd39587ffffffffffffff;\\n        maxExpArray[70] = 0x05b771955b36e12f7235ffffffffffffff;\\n        maxExpArray[71] = 0x057b3d49dda84556d6f6ffffffffffffff;\\n        maxExpArray[72] = 0x054183095b2c8ececf30ffffffffffffff;\\n        maxExpArray[73] = 0x050a28be635ca2b888f77fffffffffffff;\\n        maxExpArray[74] = 0x04d5156639708c9db33c3fffffffffffff;\\n        maxExpArray[75] = 0x04a23105873875bd52dfdfffffffffffff;\\n        maxExpArray[76] = 0x0471649d87199aa990756fffffffffffff;\\n        maxExpArray[77] = 0x04429a21a029d4c1457cfbffffffffffff;\\n        maxExpArray[78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff;\\n        maxExpArray[79] = 0x03eab73b3bbfe282243ce1ffffffffffff;\\n        maxExpArray[80] = 0x03c1771ac9fb6b4c18e229ffffffffffff;\\n        maxExpArray[81] = 0x0399e96897690418f785257fffffffffff;\\n        maxExpArray[82] = 0x0373fc456c53bb779bf0ea9fffffffffff;\\n        maxExpArray[83] = 0x034f9e8e490c48e67e6ab8bfffffffffff;\\n        maxExpArray[84] = 0x032cbfd4a7adc790560b3337ffffffffff;\\n        maxExpArray[85] = 0x030b50570f6e5d2acca94613ffffffffff;\\n        maxExpArray[86] = 0x02eb40f9f620fda6b56c2861ffffffffff;\\n        maxExpArray[87] = 0x02cc8340ecb0d0f520a6af58ffffffffff;\\n        maxExpArray[88] = 0x02af09481380a0a35cf1ba02ffffffffff;\\n        maxExpArray[89] = 0x0292c5bdd3b92ec810287b1b3fffffffff;\\n        maxExpArray[90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff;\\n        maxExpArray[91] = 0x025daf6654b1eaa55fd64df5efffffffff;\\n        maxExpArray[92] = 0x0244c49c648baa98192dce88b7ffffffff;\\n        maxExpArray[93] = 0x022ce03cd5619a311b2471268bffffffff;\\n        maxExpArray[94] = 0x0215f77c045fbe885654a44a0fffffffff;\\n        maxExpArray[95] = 0x01ffffffffffffffffffffffffffffffff;\\n        maxExpArray[96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff;\\n        maxExpArray[97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff;\\n        maxExpArray[98] = 0x01c35fedd14b861eb0443f7f133fffffff;\\n        maxExpArray[99] = 0x01b0ce43b322bcde4a56e8ada5afffffff;\\n        maxExpArray[100] = 0x019f0028ec1fff007f5a195a39dfffffff;\\n        maxExpArray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff;\\n        maxExpArray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff;\\n        maxExpArray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff;\\n        maxExpArray[104] = 0x015ecf52776a1155b5bd8395814f7fffff;\\n        maxExpArray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff;\\n        maxExpArray[106] = 0x01428a2f98d728ae223ddab715be3fffff;\\n        maxExpArray[107] = 0x013545598e5c23276ccf0ede68034fffff;\\n        maxExpArray[108] = 0x01288c4161ce1d6f54b7f61081194fffff;\\n        maxExpArray[109] = 0x011c592761c666aa641d5a01a40f17ffff;\\n        maxExpArray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff;\\n        maxExpArray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff;\\n        maxExpArray[112] = 0x00faadceceeff8a0890f3875f008277fff;\\n        maxExpArray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff;\\n        maxExpArray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff;\\n        maxExpArray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff;\\n        maxExpArray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff;\\n        maxExpArray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff;\\n        maxExpArray[118] = 0x00c2d415c3db974ab32a51840c0b67edff;\\n        maxExpArray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff;\\n        maxExpArray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff;\\n        maxExpArray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf;\\n        maxExpArray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df;\\n        maxExpArray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f;\\n        maxExpArray[124] = 0x00976bd9952c7aa957f5937d790ef65037;\\n        maxExpArray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf;\\n        maxExpArray[126] = 0x008b380f3558668c46c91c49a2f8e967b9;\\n        maxExpArray[127] = 0x00857ddf0117efa215952912839f6473e6;\\n    }\\n\\n    constructor() {\\n        initMaxExpArray();\\n    }\\n\\n    /**\\n     * @dev General Description:\\n     *     Determine a value of precision.\\n     *     Calculate an integer approximation of (_baseN / _baseD) ^ (_expN / _expD) * 2 ^ precision.\\n     *     Return the result along with the precision used.\\n     *\\n     * Detailed Description:\\n     *     Instead of calculating \\\"base ^ exp\\\", we calculate \\\"e ^ (log(base) * exp)\\\".\\n     *     The value of \\\"log(base)\\\" is represented with an integer slightly smaller than \\\"log(base) * 2 ^ precision\\\".\\n     *     The larger \\\"precision\\\" is, the more accurately this value represents the real value.\\n     *     However, the larger \\\"precision\\\" is, the more bits are required in order to store this value.\\n     *     And the exponentiation function, which takes \\\"x\\\" and calculates \\\"e ^ x\\\", is limited to a maximum exponent (maximum value of \\\"x\\\").\\n     *     This maximum exponent depends on the \\\"precision\\\" used, and it is given by \\\"maxExpArray[precision] >> (MAX_PRECISION - precision)\\\".\\n     *     Hence we need to determine the highest precision which can be used for the given input, before calling the exponentiation function.\\n     *     This allows us to compute \\\"base ^ exp\\\" with maximum accuracy and without exceeding 256 bits in any of the intermediate computations.\\n     *     This functions assumes that \\\"_expN < 2 ^ 256 / log(MAX_NUM - 1)\\\", otherwise the multiplication should be replaced with a \\\"safeMul\\\".\\n     *     Since we rely on unsigned-integer arithmetic and \\\"base < 1\\\" ==> \\\"log(base) < 0\\\", this function does not support \\\"_baseN < _baseD\\\".\\n     */\\n    function power(\\n        uint256 _baseN,\\n        uint256 _baseD,\\n        uint32 _expN,\\n        uint32 _expD\\n    ) internal view returns (uint256, uint8) {\\n        require(_baseN >= _baseD, \\\"not support _baseN < _baseD\\\");\\n        require(_baseN < MAX_NUM);\\n\\n        uint256 baseLog;\\n        uint256 base = (_baseN * FIXED_1) / _baseD;\\n        if (base < OPT_LOG_MAX_VAL) {\\n            baseLog = optimalLog(base);\\n        } else {\\n            baseLog = generalLog(base);\\n        }\\n\\n        uint256 baseLogTimesExp = (baseLog * _expN) / _expD;\\n        if (baseLogTimesExp < OPT_EXP_MAX_VAL) {\\n            return (optimalExp(baseLogTimesExp), MAX_PRECISION);\\n        } else {\\n            uint8 precision = findPositionInMaxExpArray(baseLogTimesExp);\\n            return (generalExp(baseLogTimesExp >> (MAX_PRECISION - precision), precision), precision);\\n        }\\n    }\\n\\n    /**\\n     * @dev computes log(x / FIXED_1) * FIXED_1.\\n     * This functions assumes that \\\"x >= FIXED_1\\\", because the output would be negative otherwise.\\n     */\\n    function generalLog(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\\n        if (x >= FIXED_2) {\\n            uint8 count = floorLog2(x / FIXED_1);\\n            x >>= count;\\n            // now x < 2\\n            res = count * FIXED_1;\\n        }\\n\\n        // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\\n        if (x > FIXED_1) {\\n            for (uint8 i = MAX_PRECISION; i > 0; --i) {\\n                x = (x * x) / FIXED_1;\\n                // now 1 < x < 4\\n                if (x >= FIXED_2) {\\n                    x >>= 1;\\n                    // now 1 < x < 2\\n                    res += ONE << (i - 1);\\n                }\\n            }\\n        }\\n\\n        return (res * LN2_NUMERATOR) / LN2_DENOMINATOR;\\n    }\\n\\n    /**\\n     * @dev computes the largest integer smaller than or equal to the binary logarithm of the input.\\n     */\\n    function floorLog2(uint256 _n) internal pure returns (uint8) {\\n        uint8 res = 0;\\n\\n        if (_n < 256) {\\n            // At most 8 iterations\\n            while (_n > 1) {\\n                _n >>= 1;\\n                res += 1;\\n            }\\n        } else {\\n            // Exactly 8 iterations\\n            for (uint8 s = 128; s > 0; s >>= 1) {\\n                if (_n >= (ONE << s)) {\\n                    _n >>= s;\\n                    res |= s;\\n                }\\n            }\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * @dev the global \\\"maxExpArray\\\" is sorted in descending order, and therefore the following statements are equivalent:\\n     * - This function finds the position of [the smallest value in \\\"maxExpArray\\\" larger than or equal to \\\"x\\\"]\\n     * - This function finds the highest position of [a value in \\\"maxExpArray\\\" larger than or equal to \\\"x\\\"]\\n     */\\n    function findPositionInMaxExpArray(uint256 _x) internal view returns (uint8) {\\n        uint8 lo = MIN_PRECISION;\\n        uint8 hi = MAX_PRECISION;\\n\\n        while (lo + 1 < hi) {\\n            uint8 mid = (lo + hi) / 2;\\n            if (maxExpArray[mid] >= _x) lo = mid;\\n            else hi = mid;\\n        }\\n\\n        if (maxExpArray[hi] >= _x) return hi;\\n        if (maxExpArray[lo] >= _x) return lo;\\n\\n        require(false);\\n    }\\n\\n    /**\\n     * @dev this function can be auto-generated by the script \\\"PrintFunctionGeneralExp.py\\\".\\n     * it approximates \\\"e ^ x\\\" via maclaurin summation: \\\"(x^0)/0! + (x^1)/1! + ... + (x^n)/n!\\\".\\n     * it returns \\\"e ^ (x / 2 ^ precision) * 2 ^ precision\\\", that is, the result is upshifted for accuracy.\\n     * the global \\\"maxExpArray\\\" maps each \\\"precision\\\" to \\\"((maximumExponent + 1) << (MAX_PRECISION - precision)) - 1\\\".\\n     * the maximum permitted value for \\\"x\\\" is therefore given by \\\"maxExpArray[precision] >> (MAX_PRECISION - precision)\\\".\\n     */\\n    function generalExp(uint256 _x, uint8 _precision) internal pure returns (uint256) {\\n        uint256 xi = _x;\\n        uint256 res = 0;\\n\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x3442c4e6074a82f1797f72ac0000000;\\n        // add x^02 * (33! / 02!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x116b96f757c380fb287fd0e40000000;\\n        // add x^03 * (33! / 03!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x045ae5bdd5f0e03eca1ff4390000000;\\n        // add x^04 * (33! / 04!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00defabf91302cd95b9ffda50000000;\\n        // add x^05 * (33! / 05!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x002529ca9832b22439efff9b8000000;\\n        // add x^06 * (33! / 06!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00054f1cf12bd04e516b6da88000000;\\n        // add x^07 * (33! / 07!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000a9e39e257a09ca2d6db51000000;\\n        // add x^08 * (33! / 08!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000012e066e7b839fa050c309000000;\\n        // add x^09 * (33! / 09!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000001e33d7d926c329a1ad1a800000;\\n        // add x^10 * (33! / 10!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000002bee513bdb4a6b19b5f800000;\\n        // add x^11 * (33! / 11!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000003a9316fa79b88eccf2a00000;\\n        // add x^12 * (33! / 12!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000048177ebe1fa812375200000;\\n        // add x^13 * (33! / 13!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000005263fe90242dcbacf00000;\\n        // add x^14 * (33! / 14!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000057e22099c030d94100000;\\n        // add x^15 * (33! / 15!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000057e22099c030d9410000;\\n        // add x^16 * (33! / 16!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000052b6b54569976310000;\\n        // add x^17 * (33! / 17!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000004985f67696bf748000;\\n        // add x^18 * (33! / 18!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000003dea12ea99e498000;\\n        // add x^19 * (33! / 19!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000031880f2214b6e000;\\n        // add x^20 * (33! / 20!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000025bcff56eb36000;\\n        // add x^21 * (33! / 21!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000001b722e10ab1000;\\n        // add x^22 * (33! / 22!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000001317c70077000;\\n        // add x^23 * (33! / 23!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000cba84aafa00;\\n        // add x^24 * (33! / 24!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000082573a0a00;\\n        // add x^25 * (33! / 25!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000005035ad900;\\n        // add x^26 * (33! / 26!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000000000002f881b00;\\n        // add x^27 * (33! / 27!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000001b29340;\\n        // add x^28 * (33! / 28!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000000000efc40;\\n        // add x^29 * (33! / 29!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000007fe0;\\n        // add x^30 * (33! / 30!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000420;\\n        // add x^31 * (33! / 31!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000021;\\n        // add x^32 * (33! / 32!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000001;\\n        // add x^33 * (33! / 33!)\\n\\n        return res / 0x688589cc0e9505e2f2fee5580000000 + _x + (ONE << _precision);\\n        // divide by 33! and then add x^1 / 1! + x^0 / 0!\\n    }\\n\\n    /**\\n     * @dev computes log(x / FIXED_1) * FIXED_1\\n     * Input range: FIXED_1 <= x <= OPT_LOG_MAX_VAL - 1\\n     * Auto-generated via \\\"PrintFunctionOptimalLog.py\\\"\\n     * Detailed description:\\n     * - Rewrite the input as a product of natural exponents and a single residual r, such that 1 < r < 2\\n     * - The natural logarithm of each (pre-calculated) exponent is the degree of the exponent\\n     * - The natural logarithm of r is calculated via Taylor series for log(1 + x), where x = r - 1\\n     * - The natural logarithm of the input is calculated by summing up the intermediate results above\\n     * - For example: log(250) = log(e^4 * e^1 * e^0.5 * 1.021692859) = 4 + 1 + 0.5 + log(1 + 0.021692859)\\n     */\\n    function optimalLog(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        uint256 y;\\n        uint256 z;\\n        uint256 w;\\n\\n        if (x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8) {\\n            res += 0x40000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0xd3094c70f034de4b96ff7d5b6f99fcd8;\\n        }\\n        // add 1 / 2^1\\n        if (x >= 0xa45af1e1f40c333b3de1db4dd55f29a7) {\\n            res += 0x20000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0xa45af1e1f40c333b3de1db4dd55f29a7;\\n        }\\n        // add 1 / 2^2\\n        if (x >= 0x910b022db7ae67ce76b441c27035c6a1) {\\n            res += 0x10000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x910b022db7ae67ce76b441c27035c6a1;\\n        }\\n        // add 1 / 2^3\\n        if (x >= 0x88415abbe9a76bead8d00cf112e4d4a8) {\\n            res += 0x08000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x88415abbe9a76bead8d00cf112e4d4a8;\\n        }\\n        // add 1 / 2^4\\n        if (x >= 0x84102b00893f64c705e841d5d4064bd3) {\\n            res += 0x04000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x84102b00893f64c705e841d5d4064bd3;\\n        }\\n        // add 1 / 2^5\\n        if (x >= 0x8204055aaef1c8bd5c3259f4822735a2) {\\n            res += 0x02000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x8204055aaef1c8bd5c3259f4822735a2;\\n        }\\n        // add 1 / 2^6\\n        if (x >= 0x810100ab00222d861931c15e39b44e99) {\\n            res += 0x01000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x810100ab00222d861931c15e39b44e99;\\n        }\\n        // add 1 / 2^7\\n        if (x >= 0x808040155aabbbe9451521693554f733) {\\n            res += 0x00800000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x808040155aabbbe9451521693554f733;\\n        }\\n        // add 1 / 2^8\\n\\n        z = y = x - FIXED_1;\\n        w = (y * y) / FIXED_1;\\n        res += (z * (0x100000000000000000000000000000000 - y)) / 0x100000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^01 / 01 - y^02 / 02\\n        res += (z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y)) / 0x200000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^03 / 03 - y^04 / 04\\n        res += (z * (0x099999999999999999999999999999999 - y)) / 0x300000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^05 / 05 - y^06 / 06\\n        res += (z * (0x092492492492492492492492492492492 - y)) / 0x400000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^07 / 07 - y^08 / 08\\n        res += (z * (0x08e38e38e38e38e38e38e38e38e38e38e - y)) / 0x500000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^09 / 09 - y^10 / 10\\n        res += (z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y)) / 0x600000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^11 / 11 - y^12 / 12\\n        res += (z * (0x089d89d89d89d89d89d89d89d89d89d89 - y)) / 0x700000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^13 / 13 - y^14 / 14\\n        res += (z * (0x088888888888888888888888888888888 - y)) / 0x800000000000000000000000000000000;\\n        // add y^15 / 15 - y^16 / 16\\n\\n        return res;\\n    }\\n\\n    /**\\n     * @dev computes e ^ (x / FIXED_1) * FIXED_1\\n     * input range: 0 <= x <= OPT_EXP_MAX_VAL - 1\\n     * auto-generated via \\\"PrintFunctionOptimalExp.py\\\"\\n     * Detailed description:\\n     * - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\\n     * - The exponentiation of each binary exponent is given (pre-calculated)\\n     * - The exponentiation of r is calculated via Taylor series for e^x, where x = r\\n     * - The exponentiation of the input is calculated by multiplying the intermediate results above\\n     * - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\\n     */\\n    function optimalExp(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        uint256 y;\\n        uint256 z;\\n\\n        z = y = x % 0x10000000000000000000000000000000;\\n        // get the input modulo 2^(-3)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x10e1b3be415a0000;\\n        // add y^02 * (20! / 02!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x05a0913f6b1e0000;\\n        // add y^03 * (20! / 03!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0168244fdac78000;\\n        // add y^04 * (20! / 04!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x004807432bc18000;\\n        // add y^05 * (20! / 05!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000c0135dca04000;\\n        // add y^06 * (20! / 06!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0001b707b1cdc000;\\n        // add y^07 * (20! / 07!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000036e0f639b800;\\n        // add y^08 * (20! / 08!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x00000618fee9f800;\\n        // add y^09 * (20! / 09!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000009c197dcc00;\\n        // add y^10 * (20! / 10!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000e30dce400;\\n        // add y^11 * (20! / 11!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000000012ebd1300;\\n        // add y^12 * (20! / 12!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000017499f00;\\n        // add y^13 * (20! / 13!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000001a9d480;\\n        // add y^14 * (20! / 14!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x00000000001c6380;\\n        // add y^15 * (20! / 15!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000000000001c638;\\n        // add y^16 * (20! / 16!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000000001ab8;\\n        // add y^17 * (20! / 17!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000000000000017c;\\n        // add y^18 * (20! / 18!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000000000014;\\n        // add y^19 * (20! / 19!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000000000001;\\n        // add y^20 * (20! / 20!)\\n        res = res / 0x21c3677c82b40000 + y + FIXED_1;\\n        // divide by 20! and then add y^1 / 1! + y^0 / 0!\\n\\n        if ((x & 0x010000000000000000000000000000000) != 0) res = (res * 0x1c3d6a24ed82218787d624d3e5eba95f9) / 0x18ebef9eac820ae8682b9793ac6d1e776;\\n        // multiply by e^2^(-3)\\n        if ((x & 0x020000000000000000000000000000000) != 0) res = (res * 0x18ebef9eac820ae8682b9793ac6d1e778) / 0x1368b2fc6f9609fe7aceb46aa619baed4;\\n        // multiply by e^2^(-2)\\n        if ((x & 0x040000000000000000000000000000000) != 0) res = (res * 0x1368b2fc6f9609fe7aceb46aa619baed5) / 0x0bc5ab1b16779be3575bd8f0520a9f21f;\\n        // multiply by e^2^(-1)\\n        if ((x & 0x080000000000000000000000000000000) != 0) res = (res * 0x0bc5ab1b16779be3575bd8f0520a9f21e) / 0x0454aaa8efe072e7f6ddbab84b40a55c9;\\n        // multiply by e^2^(+0)\\n        if ((x & 0x100000000000000000000000000000000) != 0) res = (res * 0x0454aaa8efe072e7f6ddbab84b40a55c5) / 0x00960aadc109e7a3bf4578099615711ea;\\n        // multiply by e^2^(+1)\\n        if ((x & 0x200000000000000000000000000000000) != 0) res = (res * 0x00960aadc109e7a3bf4578099615711d7) / 0x0002bf84208204f5977f9a8cf01fdce3d;\\n        // multiply by e^2^(+2)\\n        if ((x & 0x400000000000000000000000000000000) != 0) res = (res * 0x0002bf84208204f5977f9a8cf01fdc307) / 0x0000003c6ab775dd0b95b4cbee7e65d11;\\n        // multiply by e^2^(+3)\\n\\n        return res;\\n    }\\n\\n    function getReserveAndWeights(address pair, address tokenA)\\n        public\\n        view\\n        override\\n        returns (\\n            address tokenB,\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint32 tokenWeightA,\\n            uint32 tokenWeightB,\\n            uint32 swapFee\\n        )\\n    {\\n        (uint256 reserve0, uint256 reserve1, ) = IRequiemPair(pair).getReserves();\\n        uint32 tokenWeight0;\\n        uint32 tokenWeight1;\\n        (tokenWeight0, tokenWeight1, swapFee) = getWeightsAndSwapFee(pair);\\n\\n        if (tokenA == IRequiemPair(pair).token0()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemPair(pair).token1(), reserve0, reserve1, tokenWeight0, tokenWeight1);\\n        } else if (tokenA == IRequiemPair(pair).token1()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemPair(pair).token0(), reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        } else {\\n            revert(\\\"RequiemFormula: Invalid tokenA\\\");\\n        }\\n    }\\n\\n    function getFactoryReserveAndWeights(\\n        address factory,\\n        address pair,\\n        address tokenA\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            address tokenB,\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint32 tokenWeightA,\\n            uint32 tokenWeightB,\\n            uint32 swapFee\\n        )\\n    {\\n        (uint256 reserve0, uint256 reserve1, ) = IRequiemPair(pair).getReserves();\\n        uint32 tokenWeight0;\\n        uint32 tokenWeight1;\\n        (tokenWeight0, tokenWeight1, swapFee) = getFactoryWeightsAndSwapFee(factory, pair);\\n\\n        if (tokenA == IRequiemPair(pair).token0()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemPair(pair).token1(), reserve0, reserve1, tokenWeight0, tokenWeight1);\\n        } else if (tokenA == IRequiemPair(pair).token1()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemPair(pair).token0(), reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        } else {\\n            revert(\\\"RequiemFormula: Invalid tokenA\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset,\\n     *\\n     * Formula:\\n     * return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\\n     *\\n     * @param amountIn                  source reserve amount\\n     * @param reserveIn    source reserve balance\\n     * @param reserveOut    target reserve balance\\n     * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\\n     * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\\n     * @param swapFee                  swap fee of the conversion\\n     *\\n     * @return amountOut\\n     */\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) public view override returns (uint256 amountOut) {\\n        // validate input\\n        require(amountIn > 0, \\\"RequiemFormula: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn.mul(10000 - swapFee);\\n        // special case for equal weights\\n        if (tokenWeightIn == tokenWeightOut) {\\n            return reserveOut.mul(amountInWithFee) / (reserveIn.mul(10000).add(amountInWithFee));\\n        }\\n\\n        uint256 result;\\n        uint8 precision;\\n        uint256 baseN = reserveIn.mul(10000).add(amountInWithFee);\\n        (result, precision) = power(baseN, reserveIn.mul(10000), tokenWeightIn, tokenWeightOut);\\n\\n        uint256 temp1 = reserveOut.mul(result);\\n        uint256 temp2 = reserveOut << precision;\\n        require((temp1 - temp2) > 0, \\\"HIHIH\\\");\\n        amountOut = (temp1 - temp2) / result;\\n    }\\n\\n    /**\\n     * @dev given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n     *\\n     * Formula:\\n     * return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\\n     *\\n     * @param amountOut     target reserve amount\\n     * @param reserveIn    source reserve balance\\n     * @param reserveOut    target reserve balance\\n     * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\\n     * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\\n     * @param swapFee                  swap fee of the conversion\\n     *\\n     * @return amountIn\\n     */\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) public view override returns (uint256 amountIn) {\\n        // validate input\\n        require(amountOut > 0, \\\"RequiemFormula: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\");\\n        // special case for equal weights\\n        if (tokenWeightIn == tokenWeightOut) {\\n            uint256 numerator = reserveIn.mul(amountOut).mul(10000);\\n            uint256 denominator = reserveOut.sub(amountOut).mul(10000 - swapFee);\\n            return (numerator / denominator).add(1);\\n        }\\n\\n        uint256 result;\\n        uint8 precision;\\n        uint256 baseD = reserveOut.sub(amountOut);\\n        (result, precision) = power(reserveOut, baseD, tokenWeightOut, tokenWeightIn);\\n        uint256 baseReserveIn = reserveIn.mul(10000);\\n        uint256 temp1 = baseReserveIn.mul(result);\\n        uint256 temp2 = baseReserveIn << precision;\\n        amountIn = (((temp1 - temp2) >> precision) / (10000 - swapFee)).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[0] = amountIn;\\n        address currentTokenIn = tokenIn;\\n        for (uint256 i = 0; i < path.length; i++) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getReserveAndWeights(path[i], currentTokenIn);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenOut, \\\"RequiemFormula: INVALID_TOKEN_OUT_PATH\\\");\\n    }\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[0] = amountIn;\\n        address currentTokenIn = tokenIn;\\n\\n        for (uint256 i = 0; i < path.length; i++) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getFactoryReserveAndWeights(\\n                factory,\\n                path[i],\\n                currentTokenIn\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenOut, \\\"RequiemFormula: INVALID_TOKEN_OUT_PATH\\\");\\n    }\\n\\n    function getPairAmountOut(\\n        address pair,\\n        address tokenIn,\\n        uint256 amountIn\\n    ) external view override returns (uint256 amountOut) {\\n        (, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getReserveAndWeights(pair, tokenIn);\\n        amountOut = getAmountOut(amountIn, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[amounts.length - 1] = amountOut;\\n        address currentTokenIn = tokenOut;\\n        for (uint256 i = path.length; i > 0; i--) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getReserveAndWeights(path[i - 1], currentTokenIn);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveOut, reserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenIn, \\\"RequiemFormula: INVALID_TOKEN_IN_PATH\\\");\\n    }\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[amounts.length - 1] = amountOut;\\n        address currentTokenIn = tokenOut;\\n        for (uint256 i = path.length; i > 0; i--) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getFactoryReserveAndWeights(\\n                factory,\\n                path[i - 1],\\n                currentTokenIn\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveOut, reserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenIn, \\\"RequiemFormula: INVALID_TOKEN_IN_PATH\\\");\\n    }\\n\\n    function getPairAmountIn(\\n        address pair,\\n        address tokenIn,\\n        uint256 amountOut\\n    ) external view override returns (uint256 amountIn) {\\n        (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getReserveAndWeights(pair, tokenIn);\\n        amountIn = getAmountIn(amountOut, reserveOut, reserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n    }\\n\\n    function getWeightsAndSwapFee(address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        )\\n    {\\n        try IRequiemPair(pair).getTokenWeights() returns (uint32 _tokenWeight0, uint32 _tokenWeight1) {\\n            return (_tokenWeight0, _tokenWeight1, IRequiemPair(pair).getSwapFee());\\n        } catch Error(string memory reason) {\\n            revert(reason);\\n        } catch (\\n            bytes memory /*lowLevelData*/\\n        ) {\\n            return (50, 50, 30);\\n        }\\n    }\\n\\n    function getFactoryWeightsAndSwapFee(address factory, address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        )\\n    {\\n        return IRequiemFactory(factory).getWeightsAndSwapFee(pair);\\n    }\\n\\n    // Ensure constant value reserve0^(tokenWeight0/50) * reserve1^((100 - tokenWeight0)/50) <= balance0Adjusted^(tokenWeight0/50) * balance1Adjusted^((100 - tokenWeight0)/50)\\n    //  1 <= (balance0Adjusted / reserve0 )^(tokenWeight0/50) * (balance1Adjusted/reserve1)^((100 - tokenWeight0)/50)\\n    //  (reserve0 / balance0Adjusted) ^ (tokenWeight0/50) <=  (balance1Adjusted / reserve1) ^ ((100 - tokenWeight0)/50)\\n    function ensureConstantValue(\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 balance0Adjusted,\\n        uint256 balance1Adjusted,\\n        uint32 tokenWeight0\\n    ) external view override returns (bool) {\\n        if (tokenWeight0 == 50) {\\n            return balance0Adjusted.mul(balance1Adjusted) >= reserve0.mul(reserve1);\\n        }\\n        if (balance0Adjusted >= reserve0 && balance1Adjusted >= reserve1) {\\n            return true;\\n        }\\n        if (balance0Adjusted <= reserve0 && balance1Adjusted <= reserve1) {\\n            return false;\\n        }\\n        uint32 w0 = tokenWeight0;\\n        uint32 w1 = 100 - w0;\\n\\n        uint256 r0;\\n        uint256 p0;\\n        uint256 r1;\\n        uint256 p1;\\n        if (balance0Adjusted >= reserve0) {\\n            (r0, p0) = power(reserve1, balance1Adjusted, w1, 50);\\n            (r1, p1) = power(balance0Adjusted, reserve0, w0, 50);\\n        } else {\\n            (r0, p0) = power(reserve0, balance0Adjusted, w0, 50);\\n            (r1, p1) = power(balance1Adjusted, reserve1, w1, 50);\\n        }\\n        uint256 minP = p0 < p1 ? p0 : p1;\\n        p0 = p0 - minP;\\n        p1 = p1 - minP;\\n        return (r0 >> p0) <= (r1 >> p1);\\n    }\\n\\n    function sortTokens(address tokenA, address tokenB) public pure override returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"RequiemFormula: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"RequiemFormula: ZERO_ADDRESS\\\");\\n    }\\n\\n    function getReserves(\\n        address pair,\\n        address tokenA,\\n        address tokenB\\n    ) external view override returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IRequiemPair(pair).getReserves();\\n        require(token0 == IRequiemPair(pair).token0() && token1 == IRequiemPair(pair).token1(), \\\"RequiemFormula: Invalid token\\\");\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    function getOtherToken(address pair, address tokenA) external view override returns (address tokenB) {\\n        address token0 = IRequiemPair(pair).token0();\\n        address token1 = IRequiemPair(pair).token1();\\n        require(token0 == tokenA || token1 == tokenA, \\\"RequiemFormula: Invalid tokenA\\\");\\n        tokenB = token0 == tokenA ? token1 : token0;\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure override returns (uint256 amountB) {\\n        require(amountA > 0, \\\"RequiemFormula: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    function mintLiquidityFee(\\n        uint256 totalLiquidity,\\n        uint112 reserve0,\\n        uint112 reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112 collectedFee0,\\n        uint112 collectedFee1\\n    ) external view override returns (uint256 amount) {\\n        if (collectedFee0 > 0) {\\n            (uint256 r0, uint256 p0) = power(uint256(collectedFee0).add(reserve0), reserve0, tokenWeight0, 100);\\n            amount = amount.add(totalLiquidity.mul(r0) >> p0).sub(totalLiquidity);\\n        }\\n        if (collectedFee1 > 0) {\\n            (uint256 r1, uint256 p1) = power(uint256(collectedFee1).add(reserve1), reserve1, tokenWeight1, 100);\\n            amount = amount.add(totalLiquidity.mul(r1) >> p1).sub(totalLiquidity);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x747fac41df087986d0874767296dd3a0f35168841a12d1105f0a6dfc15f730e6\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x59ca041c7f003069ae1fc9ede79694b1fa0b11e6eebf4eb765a044a27030687c\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\ninterface IRequiemFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint);\\n    function feeTo() external view returns (address);\\n    function formula() external view returns (address);\\n    function protocolFee() external view returns (uint);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function isPair(address) external view returns (bool);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external returns (address pair);\\n    function getWeightsAndSwapFee(address pair) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setProtocolFee(uint) external;\\n}\\n\",\"keccak256\":\"0x500ff0062150432105415e938dcaa0d64b666c224764c4cb901137ce45204b5d\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.5.16;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IRequiemFormula {\\n\\n    function getReserveAndWeights(address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getPairAmountIn(address pair, address tokenIn, uint amountOut) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getPairAmountOut(address pair, address tokenIn, uint amountIn) external view returns (uint amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x8a32e1c404f6a93f17cf6151173ff21fedb58abe50a6635cb10f47780f044c98\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IRequiemPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IRequiemERC20.sol\\\";\\n\\ninterface IRequiemPair is IRequiemERC20 {\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n    function getSwapFee() external view returns (uint32);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address,\\n        address,\\n        uint32,\\n        uint32\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1924a077618cc54dd9f8755e2ad9f2f36f51372ea68c9b8d39b5927f7a1e1137\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        RequiemErrors._require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        uint256 errorCode\\n    ) internal pure returns (uint256) {\\n        RequiemErrors._require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc82c3356797b0e56c4ac77d5554343f66b3b436a18537bdb146e10921605d729\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x37ebaca1c58a9daf307229c45122f12d603a95d1d92c1a8e7648b1910755bfa0\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061073f6001641c35fedd1560601b036020556001646c3390ecc9605e1b036021556001640cf801476160611b0360225560016431bdb23e1d605f1b0360235560016502fb1d8fe083605b1b0360245560016505b771955b37605a1b036025556001650af67a93bb5160591b0360265560016515060c256cb360581b036027556001651428a2f98d7360581b036028556001654d515663970960561b03602955600165944620b0e70f60551b03602a55600166011c592761c66760541b03602b5560016602214d10d014eb60531b03602c55600166020ade36b7dbef60531b03602d5560016603eab73b3bbfe360521b03602e556001660782ee3593f6d760511b03602f556001661ccf4b44bb4821604f1b0360305560016606e7f88ad8a77760511b0360315560016669f3d1c921891d604d1b03603255600166cb2ff529eb71e5604c1b03603355600166c2d415c3db974b604c1b0360345560016702eb40f9f620fda7604a1b0360355560016705990681d961a1eb60491b03603655600167055e12902701414760491b0360375560016714962dee9dc9764160471b0360385560016704ef57b9b560fab560491b0360395560016712ed7b32a58f552b60471b03603a556001679131271922eaa60760441b03603b556001678b380f3558668c4760441b03603c556001680215f77c045fbe885760421b03603d556001600160831b03603e556001670f577eded5773a1160471b03603f556001680eb5ec597592befbf5603f1b036040556001681c35fedd14b861eb05603e1b036041556001683619c87664579bc94b603d1b0360425560016867c00a3b07ffc01fd7603c1b03604355600168c6f6c8f8739773a7a5603b1b03604455600168bec763f8209b7a72b1603b1b0360455560016902dbb8caad9b7097b91b60391b03604655600169057b3d49dda84556d6f760381b03604755600169054183095b2c8ececf3160381b036048556001690a14517cc6b9457111ef60371b0360495560016913545598e5c23276ccf160361b03604a556001692511882c39c3adea96ff60351b03604b55600169471649d87199aa99075760341b03604c557004429a21a029d4c1457cfbffffffffffff604d55700415bc6d6fb7dd71af2cb3ffffffffffff604e557003eab73b3bbfe282243ce1ffffffffffff604f557003c1771ac9fb6b4c18e229ffffffffffff605055700399e96897690418f785257fffffffffff605155700373fc456c53bb779bf0ea9fffffffffff60525570034f9e8e490c48e67e6ab8bfffffffffff60535570032cbfd4a7adc790560b3337ffffffffff60545570030b50570f6e5d2acca94613ffffffffff6055557002eb40f9f620fda6b56c2861ffffffffff6056557002cc8340ecb0d0f520a6af58ffffffffff6057557002af09481380a0a35cf1ba02ffffffffff605855700292c5bdd3b92ec810287b1b3fffffffff605955700277abdcdab07d5a77ac6d6b9fffffffff605a5570025daf6654b1eaa55fd64df5efffffffff605b55700244c49c648baa98192dce88b7ffffffff605c5570022ce03cd5619a311b2471268bffffffff605d55700215f77c045fbe885654a44a0fffffffff605e556001600160811b03605f557001eaefdbdaaee7421fc4d3ede5ffffffff6060557001d6bd8b2eb257df7e8ca57b09bfffffff6061557001c35fedd14b861eb0443f7f133fffffff6062557001b0ce43b322bcde4a56e8ada5afffffff60635570019f0028ec1fff007f5a195a39dfffffff60645570018ded91f0e72ee74f49b15ba527ffffff60655570017d8ec7f04136f4e5615fd41a63ffffff60665570016ddc6556cdb84bdc8d12d22e6fffffff60675570015ecf52776a1155b5bd8395814f7fffff60685570015060c256cb23b3b3cc3754cf40ffffff6069557001428a2f98d728ae223ddab715be3fffff606a5570013545598e5c23276ccf0ede68034fffff606b557001288c4161ce1d6f54b7f61081194fffff606c5570011c592761c666aa641d5a01a40f17ffff606d55700110a688680a7530515f3e6e6cfdcdffff606e557001056f1b5bedf75c6bcb2ce8aed428ffff606f556ffaadceceeff8a0890f3875f008277fff6070556ff05dc6b27edad306388a600f6ba0bfff6071556fe67a5a25da41063de1495d5b18cdbfff6072556fdcff115b14eedde6fc3aa5353f2e4fff6073556fd3e7a3924312399f9aae2e0f868f8fff6074556fcb2ff529eb71e41582cccd5a1ee26fff6075556fc2d415c3db974ab32a51840c0b67edff6076556fbad03e7d883f69ad5b0a186184e06bff6077556fb320d03b2c343d4829abd6075f0cc5ff6078556fabc25204e02828d73c6e80bcdb1a95bf6079556fa4b16f74ee4bb2040a1ec6c15fbbf2df607a556f9deaf736ac1f569deb1b5ae3f36c130f607b556f976bd9952c7aa957f5937d790ef65037607c556f9131271922eaa6064b73a22d0bd4f2bf607d556f8b380f3558668c46c91c49a2f8e967b9607e556f857ddf0117efa215952912839f6473e6607f55565b613fea806200074f6000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80638888a737116100b2578063b19210b011610081578063b3923a9911610066578063b3923a991461032b578063ca2229791461033e578063d69109371461035157600080fd5b8063b19210b014610305578063b33d96b01461031857600080fd5b80638888a737146102b95780638fabd82d146102cc57806392aec23c146102df578063ad615dec146102f257600080fd5b80635bff1d9211610109578063671a11b5116100ee578063671a11b51461027057806367f84adc1461028357806379c91b371461029657600080fd5b80635bff1d92146101f95780636350d7741461024f57600080fd5b8063119220a51461013b5780632bb66e1d14610164578063327494611461019e578063544caa56146101c6575b600080fd5b61014e6101493660046136ee565b61037c565b60405161015b9190613773565b60405180910390f35b6101776101723660046137b7565b61058e565b6040805163ffffffff9485168152928416602084015292169181019190915260600161015b565b6101b16101ac3660046137f0565b610626565b6040805192835260208301919091520161015b565b6101d96101d43660046137b7565b610837565b604080516001600160a01b0393841681529290911660208301520161015b565b61020c6102073660046137b7565b610947565b604080516001600160a01b03909716875260208701959095529385019290925263ffffffff908116606085015290811660808401521660a082015260c00161015b565b61026261025d36600461383b565b610c2c565b60405190815260200161015b565b61026261027e36600461388e565b610c69565b61014e6102913660046136ee565b610e98565b6102a96102a43660046138f5565b611090565b604051901515815260200161015b565b6102626102c736600461383b565b6111b5565b61014e6102da366004613942565b6111ee565b6102626102ed3660046139d1565b6113e7565b610262610300366004613a5e565b6114e4565b61026261031336600461388e565b6115fa565b61020c6103263660046137f0565b6117db565b61014e610339366004613942565b611a77565b61017761034c366004613a8a565b611c5c565b61036461035f3660046137b7565b611dd5565b6040516001600160a01b03909116815260200161015b565b6060816103d05760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064015b60405180910390fd5b6103db826001613ad6565b67ffffffffffffffff8111156103f3576103f3613aee565b60405190808252806020026020018201604052801561041c578160200160208202803683370190505b509050838160008151811061043357610433613b1d565b60209081029190910101528560005b838110156104fb576000806000806000806104848f8c8c8a81811061046957610469613b1d565b905060200201602081019061047e9190613a8a565b8a6117db565b9550955095509550955095506104b78988815181106104a5576104a5613b1d565b60200260200101518686868686610c69565b896104c3896001613ad6565b815181106104d3576104d3613b1d565b60200260200101818152505085975050505050505080806104f390613b4c565b915050610442565b50856001600160a01b0316816001600160a01b0316146105835760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f4f5560448201527f545f50415448000000000000000000000000000000000000000000000000000060648201526084016103c7565b509695505050505050565b6040517fca2229790000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152600091829182919086169063ca22297990602401606060405180830381865afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106199190613b85565b9250925092509250925092565b6000806000806106368686610837565b91509150600080886001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561067b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069f9190613bc7565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150886001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190613bf8565b6001600160a01b0316846001600160a01b03161480156107b85750886001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561077f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a39190613bf8565b6001600160a01b0316836001600160a01b0316145b6108045760405162461bcd60e51b815260206004820152601d60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e00000060448201526064016103c7565b836001600160a01b0316886001600160a01b031614610824578082610827565b81815b909a909950975050505050505050565b600080826001600160a01b0316846001600160a01b031614156108c25760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a204944454e544943414c5f41444452455360448201527f534553000000000000000000000000000000000000000000000000000000000060648201526084016103c7565b826001600160a01b0316846001600160a01b0316106108e25782846108e5565b83835b90925090506001600160a01b0382166109405760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a205a45524f5f414444524553530000000060448201526064016103c7565b9250929050565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190613bc7565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000806109e68c611c5c565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a549190613bf8565b6001600160a01b03168b6001600160a01b03161415610ae4578b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acf9190613bf8565b99509297509095509350915084848484610c1e565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b469190613bf8565b6001600160a01b03168b6001600160a01b03161415610bd6578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc19190613bf8565b99509197509195509350915083858385610c1e565b60405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e41000060448201526064016103c7565b505050509295509295509295565b6000806000806000806000610c418a8a610947565b955095509550955095509550610c5b8885878587866115fa565b9a9950505050505050505050565b6000808711610ce05760405162461bcd60e51b815260206004820152602960248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f494e5060448201527f55545f414d4f554e54000000000000000000000000000000000000000000000060648201526084016103c7565b600086118015610cf05750600085115b610d625760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201527f554944495459000000000000000000000000000000000000000000000000000060648201526084016103c7565b6000610d88610d7384612710613c15565b63ffffffff1689611f3e90919063ffffffff16565b90508363ffffffff168563ffffffff161415610dd057610db481610dae89612710611f3e565b90611f51565b610dbe8783611f3e565b610dc89190613c69565b915050610e8e565b60008080610de484610dae8c612710611f3e565b9050610dfd81610df68c612710611f3e565b8a8a611f6e565b90935091506000610e0e8a85611f3e565b905060ff83168a901b6000610e238284613c7d565b11610e705760405162461bcd60e51b815260206004820152600560248201527f484948494800000000000000000000000000000000000000000000000000000060448201526064016103c7565b84610e7b8284613c7d565b610e859190613c69565b96505050505050505b9695505050505050565b606081610ee75760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103c7565b610ef2826001613ad6565b67ffffffffffffffff811115610f0a57610f0a613aee565b604051908082528060200260200182016040528015610f33578160200160208202803683370190505b509050838160018351610f469190613c7d565b81518110610f5657610f56613b1d565b602090810291909101015284825b80156110085760008080808080610f918f8c8c610f8260018c613c7d565b81811061046957610469613b1d565b955095509550955095509550610fc4898881518110610fb257610fb2613b1d565b602002602001015185878587866115fa565b89610fd060018a613c7d565b81518110610fe057610fe0613b1d565b602002602001018181525050859750505050505050808061100090613c94565b915050610f64565b50866001600160a01b0316816001600160a01b0316146105835760405162461bcd60e51b815260206004820152602560248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f494e60448201527f5f5041544800000000000000000000000000000000000000000000000000000060648201526084016103c7565b60008163ffffffff16603214156110be576110ab8686611f3e565b6110b58585611f3e565b101590506111ac565b8584101580156110ce5750848310155b156110db575060016111ac565b8584111580156110eb5750848311155b156110f8575060006111ac565b816000611106826064613c15565b90506000806000808b8a10611144576111228b8a876032611f6e565b90945060ff1692506111378a8d886032611f6e565b90925060ff16905061116f565b6111518c8b886032611f6e565b90945060ff169250611166898c876032611f6e565b90925060ff1690505b600081841061117e5781611180565b835b905061118c8185613c7d565b93506111988183613c7d565b9290921c9390921c92909211159450505050505b95945050505050565b6000806000806000806111c88989610947565b95509550955095509550506111e1878686868686610c69565b9998505050505050505050565b60608161123d5760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103c7565b611248826001613ad6565b67ffffffffffffffff81111561126057611260613aee565b604051908082528060200260200182016040528015611289578160200160208202803683370190505b50905083816000815181106112a0576112a0613b1d565b60209081029190910101528560005b83811015611355576000806000806000806112f08b8b898181106112d5576112d5613b1d565b90506020020160208101906112ea9190613a8a565b89610947565b9550955095509550955095506113118988815181106104a5576104a5613b1d565b8961131d896001613ad6565b8151811061132d5761132d613b1d565b602002602001018181525050859750505050505050808061134d90613b4c565b9150506112af565b50856001600160a01b0316816001600160a01b0316146113dd5760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f4f5560448201527f545f50415448000000000000000000000000000000000000000000000000000060648201526084016103c7565b5095945050505050565b60006dffffffffffffffffffffffffffff8316156114685760008061143b6114226dffffffffffffffffffffffffffff878116908c16611f51565b8a6dffffffffffffffffffffffffffff16896064611f6e565b90925060ff1690506114638a61145d836114558387611f3e565b87911c611f51565b906120c5565b925050505b6dffffffffffffffffffffffffffff8216156114d9576000806114ba6114a16dffffffffffffffffffffffffffff868116908b16611f51565b896dffffffffffffffffffffffffffff16886064611f6e565b90925060ff1690506114d48a61145d836114558387611f3e565b925050505b979650505050505050565b600080841161155b5760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f414d4f60448201527f554e54000000000000000000000000000000000000000000000000000000000060648201526084016103c7565b60008311801561156b5750600082115b6115dd5760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201527f554944495459000000000000000000000000000000000000000000000000000060648201526084016103c7565b826115e88584611f3e565b6115f29190613c69565b949350505050565b60008087116116715760405162461bcd60e51b815260206004820152602a60248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4f555460448201527f5055545f414d4f554e540000000000000000000000000000000000000000000060648201526084016103c7565b6000861180156116815750600085115b6116f35760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201527f554944495459000000000000000000000000000000000000000000000000000060648201526084016103c7565b8263ffffffff168463ffffffff16141561176557600061171f612710611719898b611f3e565b90611f3e565b9050600061174b61173285612710613c15565b63ffffffff166117198b8a6120c590919063ffffffff16565b905061175c6001610dae8385613c69565b92505050610e8e565b60008080611773888b6120c5565b90506117818882888a611f6e565b909350915060006117948a612710611f3e565b905060006117a28286611f3e565b905060ff841682901b610e8560016117bc8a612710613c15565b63ffffffff1660ff88166117d08587613c7d565b610dae92911c613c69565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611825573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118499190613bc7565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060008061187b8d8d61058e565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e99190613bf8565b6001600160a01b03168b6001600160a01b03161415611979578b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119649190613bf8565b99509297509095509350915084848484611a67565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119db9190613bf8565b6001600160a01b03168b6001600160a01b03161415610bd6578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a569190613bf8565b995091975091955093509150838583855b5050505093975093979195509350565b606081611ac65760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103c7565b611ad1826001613ad6565b67ffffffffffffffff811115611ae957611ae9613aee565b604051908082528060200260200182016040528015611b12578160200160208202803683370190505b509050838160018351611b259190613c7d565b81518110611b3557611b35613b1d565b602090810291909101015284825b8015611bd45760008080808080611b6f8b8b611b6060018b613c7d565b8181106112d5576112d5613b1d565b955095509550955095509550611b90898881518110610fb257610fb2613b1d565b89611b9c60018a613c7d565b81518110611bac57611bac613b1d565b6020026020010181815250508597505050505050508080611bcc90613c94565b915050611b43565b50866001600160a01b0316816001600160a01b0316146113dd5760405162461bcd60e51b815260206004820152602560248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f494e60448201527f5f5041544800000000000000000000000000000000000000000000000000000060648201526084016103c7565b6000806000836001600160a01b03166332bfe4696040518163ffffffff1660e01b81526004016040805180830381865afa925050508015611cd8575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611cd591810190613cc9565b60015b611d6157611ce4613cf8565b806308c379a01415611d1e5750611cf9613d86565b80611d045750611d20565b8060405162461bcd60e51b81526004016103c79190613e2e565b505b3d808015611d4a576040519150601f19603f3d011682016040523d82523d6000602084013e611d4f565b606091505b50603280601e93509350935050611dce565b8181876001600160a01b031663d4cadf686040518163ffffffff1660e01b8152600401602060405180830381865afa158015611da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc59190613ea1565b94509450945050505b9193909250565b600080836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3a9190613bf8565b90506000846001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea09190613bf8565b9050836001600160a01b0316826001600160a01b03161480611ed35750836001600160a01b0316816001600160a01b0316145b611f1f5760405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e41000060448201526064016103c7565b836001600160a01b0316826001600160a01b0316146115f257816111ac565b6000611f4a8284613ebe565b9392505050565b600080611f5e8385613ad6565b9050611f4a8482101560006120d3565b60008084861015611fc15760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420737570706f7274205f626173654e203c205f6261736544000000000060448201526064016103c7565b7002000000000000000000000000000000008610611fde57600080fd5b60008086611ff06001607f1b8a613ebe565b611ffa9190613c69565b905070015bf0a8b1457695355fb8ac404e7a79e38110156120255761201e816120e5565b9150612031565b61202e8161271b565b91505b60008563ffffffff168763ffffffff168461204c9190613ebe565b6120569190613c69565b90507008000000000000000000000000000000008110156120885761207a81612823565b607f945094505050506120bc565b600061209382612ea5565b90506120af6120a382607f613efb565b60ff1683901c82612f58565b955093506120bc92505050565b94509492505050565b6000611f4a838360016135b6565b816120e1576120e1816135d1565b5050565b6000808080806fd3094c70f034de4b96ff7d5b6f99fcd8861061214a5761211c6f4000000000000000000000000000000085613ad6565b93506fd3094c70f034de4b96ff7d5b6f99fcd861213d6001607f1b88613ebe565b6121479190613c69565b95505b6fa45af1e1f40c333b3de1db4dd55f29a786106121a95761217b6f2000000000000000000000000000000085613ad6565b93506fa45af1e1f40c333b3de1db4dd55f29a761219c6001607f1b88613ebe565b6121a69190613c69565b95505b6f910b022db7ae67ce76b441c27035c6a18610612208576121da6f1000000000000000000000000000000085613ad6565b93506f910b022db7ae67ce76b441c27035c6a16121fb6001607f1b88613ebe565b6122059190613c69565b95505b6f88415abbe9a76bead8d00cf112e4d4a88610612267576122396f0800000000000000000000000000000085613ad6565b93506f88415abbe9a76bead8d00cf112e4d4a861225a6001607f1b88613ebe565b6122649190613c69565b95505b6f84102b00893f64c705e841d5d4064bd386106122c6576122986f0400000000000000000000000000000085613ad6565b93506f84102b00893f64c705e841d5d4064bd36122b96001607f1b88613ebe565b6122c39190613c69565b95505b6f8204055aaef1c8bd5c3259f4822735a28610612325576122f76f0200000000000000000000000000000085613ad6565b93506f8204055aaef1c8bd5c3259f4822735a26123186001607f1b88613ebe565b6123229190613c69565b95505b6f810100ab00222d861931c15e39b44e998610612384576123566f0100000000000000000000000000000085613ad6565b93506f810100ab00222d861931c15e39b44e996123776001607f1b88613ebe565b6123819190613c69565b95505b6f808040155aabbbe9451521693554f73386106123e2576123b46e80000000000000000000000000000085613ad6565b93506f808040155aabbbe9451521693554f7336123d56001607f1b88613ebe565b6123df9190613c69565b95505b6123f06001607f1b87613c7d565b92508291506001607f1b6124048380613ebe565b61240e9190613c69565b905070010000000000000000000000000000000061242c8482613c7d565b6124369084613ebe565b6124409190613c69565b61244a9085613ad6565b93506001607f1b61245b8284613ebe565b6124659190613c69565b9150700200000000000000000000000000000000612493846faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa613c7d565b61249d9084613ebe565b6124a79190613c69565b6124b19085613ad6565b93506001607f1b6124c28284613ebe565b6124cc9190613c69565b91507003000000000000000000000000000000006124fa846f99999999999999999999999999999999613c7d565b6125049084613ebe565b61250e9190613c69565b6125189085613ad6565b93506001607f1b6125298284613ebe565b6125339190613c69565b9150700400000000000000000000000000000000612561846f92492492492492492492492492492492613c7d565b61256b9084613ebe565b6125759190613c69565b61257f9085613ad6565b93506001607f1b6125908284613ebe565b61259a9190613c69565b91507005000000000000000000000000000000006125c8846f8e38e38e38e38e38e38e38e38e38e38e613c7d565b6125d29084613ebe565b6125dc9190613c69565b6125e69085613ad6565b93506001607f1b6125f78284613ebe565b6126019190613c69565b915070060000000000000000000000000000000061262f846f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b613c7d565b6126399084613ebe565b6126439190613c69565b61264d9085613ad6565b93506001607f1b61265e8284613ebe565b6126689190613c69565b9150700700000000000000000000000000000000612696846f89d89d89d89d89d89d89d89d89d89d89613c7d565b6126a09084613ebe565b6126aa9190613c69565b6126b49085613ad6565b93506001607f1b6126c58284613ebe565b6126cf9190613c69565b91507008000000000000000000000000000000006126fd846f88888888888888888888888888888888613c7d565b6127079084613ebe565b6127119190613c69565b610e8e9085613ad6565b600080700100000000000000000000000000000000831061276c57600061274e6127496001607f1b86613c69565b613624565b60ff811694851c94909150612768906001607f1b90613ebe565b9150505b6001607f1b8311156127ee57607f5b60ff8116156127ec576001607f1b6127938580613ebe565b61279d9190613c69565b935070010000000000000000000000000000000084106127dc57600193841c936127c79082613efb565b60ff166001901b826127d99190613ad6565b91505b6127e581613f1e565b905061277b565b505b6f05b9de1d10bf4103d647b0955897ba806128196f03f80fe03f80fe03f80fe03f80fe03f883613ebe565b611f4a9190613c69565b60008080806128426f1000000000000000000000000000000086613f59565b91508190506001607f1b6128568280613ebe565b6128609190613c69565b9050612874816710e1b3be415a0000613ebe565b61287e9084613ad6565b92506001607f1b61288f8383613ebe565b6128999190613c69565b90506128ad816705a0913f6b1e0000613ebe565b6128b79084613ad6565b92506001607f1b6128c88383613ebe565b6128d29190613c69565b90506128e681670168244fdac78000613ebe565b6128f09084613ad6565b92506001607f1b6129018383613ebe565b61290b9190613c69565b905061291e81664807432bc18000613ebe565b6129289084613ad6565b92506001607f1b6129398383613ebe565b6129439190613c69565b905061295681660c0135dca04000613ebe565b6129609084613ad6565b92506001607f1b6129718383613ebe565b61297b9190613c69565b905061298e816601b707b1cdc000613ebe565b6129989084613ad6565b92506001607f1b6129a98383613ebe565b6129b39190613c69565b90506129c5816536e0f639b800613ebe565b6129cf9084613ad6565b92506001607f1b6129e08383613ebe565b6129ea9190613c69565b90506129fc81650618fee9f800613ebe565b612a069084613ad6565b92506001607f1b612a178383613ebe565b612a219190613c69565b9050612a3281649c197dcc00613ebe565b612a3c9084613ad6565b92506001607f1b612a4d8383613ebe565b612a579190613c69565b9050612a6881640e30dce400613ebe565b612a729084613ad6565b92506001607f1b612a838383613ebe565b612a8d9190613c69565b9050612a9e8164012ebd1300613ebe565b612aa89084613ad6565b92506001607f1b612ab98383613ebe565b612ac39190613c69565b9050612ad3816317499f00613ebe565b612add9084613ad6565b92506001607f1b612aee8383613ebe565b612af89190613c69565b9050612b08816301a9d480613ebe565b612b129084613ad6565b92506001607f1b612b238383613ebe565b612b2d9190613c69565b9050612b3c81621c6380613ebe565b612b469084613ad6565b92506001607f1b612b578383613ebe565b612b619190613c69565b9050612b70816201c638613ebe565b612b7a9084613ad6565b92506001607f1b612b8b8383613ebe565b612b959190613c69565b9050612ba381611ab8613ebe565b612bad9084613ad6565b92506001607f1b612bbe8383613ebe565b612bc89190613c69565b9050612bd68161017c613ebe565b612be09084613ad6565b92506001607f1b612bf18383613ebe565b612bfb9190613c69565b9050612c08816014613ebe565b612c129084613ad6565b92506001607f1b612c238383613ebe565b612c2d9190613c69565b9050612c3a816001613ebe565b612c449084613ad6565b92506001607f1b82612c5e6721c3677c82b4000086613c69565b612c689190613ad6565b612c729190613ad6565b92506f10000000000000000000000000000000851615612cc65770018ebef9eac820ae8682b9793ac6d1e776612cb9847001c3d6a24ed82218787d624d3e5eba95f9613ebe565b612cc39190613c69565b92505b6f20000000000000000000000000000000851615612d18577001368b2fc6f9609fe7aceb46aa619baed4612d0b8470018ebef9eac820ae8682b9793ac6d1e778613ebe565b612d159190613c69565b92505b6f40000000000000000000000000000000851615612d69576fbc5ab1b16779be3575bd8f0520a9f21f612d5c847001368b2fc6f9609fe7aceb46aa619baed5613ebe565b612d669190613c69565b92505b6001607f1b851615612dad576f454aaa8efe072e7f6ddbab84b40a55c9612da0846fbc5ab1b16779be3575bd8f0520a9f21e613ebe565b612daa9190613c69565b92505b700100000000000000000000000000000000851615612dfe576f0960aadc109e7a3bf4578099615711ea612df1846f454aaa8efe072e7f6ddbab84b40a55c5613ebe565b612dfb9190613c69565b92505b700200000000000000000000000000000000851615612e4e576e2bf84208204f5977f9a8cf01fdce3d612e41846f0960aadc109e7a3bf4578099615711d7613ebe565b612e4b9190613c69565b92505b700400000000000000000000000000000000851615612e9c576d03c6ab775dd0b95b4cbee7e65d11612e8f846e2bf84208204f5977f9a8cf01fdc307613ebe565b612e999190613c69565b92505b50909392505050565b60006020607f5b60ff8116612ebb836001613f6d565b60ff161015612f0e5760006002612ed28385613f6d565b612edc9190613f92565b90508460008260ff1660808110612ef557612ef5613b1d565b015410612f0457809250612f08565b8091505b50612eac565b8360008260ff1660808110612f2557612f25613b1d565b015410612f33579392505050565b8360008360ff1660808110612f4a57612f4a613b1d565b015410610136575092915050565b6000828160ff8416612f6a8380613ebe565b901c9150612f88826f03442c4e6074a82f1797f72ac0000000613ebe565b612f929082613ad6565b905060ff8416612fa28684613ebe565b901c9150612fc0826f0116b96f757c380fb287fd0e40000000613ebe565b612fca9082613ad6565b905060ff8416612fda8684613ebe565b901c9150612ff7826e45ae5bdd5f0e03eca1ff4390000000613ebe565b6130019082613ad6565b905060ff84166130118684613ebe565b901c915061302e826e0defabf91302cd95b9ffda50000000613ebe565b6130389082613ad6565b905060ff84166130488684613ebe565b901c9150613065826e02529ca9832b22439efff9b8000000613ebe565b61306f9082613ad6565b905060ff841661307f8684613ebe565b901c915061309b826d54f1cf12bd04e516b6da88000000613ebe565b6130a59082613ad6565b905060ff84166130b58684613ebe565b901c91506130d1826d0a9e39e257a09ca2d6db51000000613ebe565b6130db9082613ad6565b905060ff84166130eb8684613ebe565b901c9150613107826d012e066e7b839fa050c309000000613ebe565b6131119082613ad6565b905060ff84166131218684613ebe565b901c915061313c826c1e33d7d926c329a1ad1a800000613ebe565b6131469082613ad6565b905060ff84166131568684613ebe565b901c9150613171826c02bee513bdb4a6b19b5f800000613ebe565b61317b9082613ad6565b905060ff841661318b8684613ebe565b901c91506131a5826b3a9316fa79b88eccf2a00000613ebe565b6131af9082613ad6565b905060ff84166131bf8684613ebe565b901c91506131d9826b048177ebe1fa812375200000613ebe565b6131e39082613ad6565b905060ff84166131f38684613ebe565b901c915061320c826a5263fe90242dcbacf00000613ebe565b6132169082613ad6565b905060ff84166132268684613ebe565b901c915061323f826a057e22099c030d94100000613ebe565b6132499082613ad6565b905060ff84166132598684613ebe565b901c9150613271826957e22099c030d9410000613ebe565b61327b9082613ad6565b905060ff841661328b8684613ebe565b901c91506132a38269052b6b54569976310000613ebe565b6132ad9082613ad6565b905060ff84166132bd8684613ebe565b901c91506132d482684985f67696bf748000613ebe565b6132de9082613ad6565b905060ff84166132ee8684613ebe565b901c9150613305826803dea12ea99e498000613ebe565b61330f9082613ad6565b905060ff841661331f8684613ebe565b901c9150613335826731880f2214b6e000613ebe565b61333f9082613ad6565b905060ff841661334f8684613ebe565b901c91506133658267025bcff56eb36000613ebe565b61336f9082613ad6565b905060ff841661337f8684613ebe565b901c915061339482661b722e10ab1000613ebe565b61339e9082613ad6565b905060ff84166133ae8684613ebe565b901c91506133c3826601317c70077000613ebe565b6133cd9082613ad6565b905060ff84166133dd8684613ebe565b901c91506133f182650cba84aafa00613ebe565b6133fb9082613ad6565b905060ff841661340b8684613ebe565b901c915061341e826482573a0a00613ebe565b6134289082613ad6565b905060ff84166134388684613ebe565b901c915061344b826405035ad900613ebe565b6134559082613ad6565b905060ff84166134658684613ebe565b901c915061347782632f881b00613ebe565b6134819082613ad6565b905060ff84166134918684613ebe565b901c91506134a3826301b29340613ebe565b6134ad9082613ad6565b905060ff84166134bd8684613ebe565b901c91506134ce82620efc40613ebe565b6134d89082613ad6565b905060ff84166134e88684613ebe565b901c91506134f882617fe0613ebe565b6135029082613ad6565b905060ff84166135128684613ebe565b901c915061352282610420613ebe565b61352c9082613ad6565b905060ff841661353c8684613ebe565b901c915061354b826021613ebe565b6135559082613ad6565b905060ff84166135658684613ebe565b901c9150613574826001613ebe565b61357e9082613ad6565b9050600160ff85161b856135a26f0688589cc0e9505e2f2fee558000000084613c69565b6135ac9190613ad6565b6111ac9190613ad6565b60006135c584841115836120d3565b60006111ac8486613c7d565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b600080610100831015613657575b600183111561365257600192831c9261364b9082613f6d565b9050613632565b61368b565b60805b60ff81161561368957600160ff82161b841061367e5760ff81169390931c92908117905b60011c607f1661365a565b505b92915050565b6001600160a01b03811681146136a657600080fd5b50565b60008083601f8401126136bb57600080fd5b50813567ffffffffffffffff8111156136d357600080fd5b6020830191508360208260051b850101111561094057600080fd5b60008060008060008060a0878903121561370757600080fd5b863561371281613691565b9550602087013561372281613691565b9450604087013561373281613691565b935060608701359250608087013567ffffffffffffffff81111561375557600080fd5b61376189828a016136a9565b979a9699509497509295939492505050565b6020808252825182820181905260009190848201906040850190845b818110156137ab5783518352928401929184019160010161378f565b50909695505050505050565b600080604083850312156137ca57600080fd5b82356137d581613691565b915060208301356137e581613691565b809150509250929050565b60008060006060848603121561380557600080fd5b833561381081613691565b9250602084013561382081613691565b9150604084013561383081613691565b809150509250925092565b60008060006060848603121561385057600080fd5b833561385b81613691565b9250602084013561386b81613691565b929592945050506040919091013590565b63ffffffff811681146136a657600080fd5b60008060008060008060c087890312156138a757600080fd5b86359550602087013594506040870135935060608701356138c78161387c565b925060808701356138d78161387c565b915060a08701356138e78161387c565b809150509295509295509295565b600080600080600060a0868803121561390d57600080fd5b8535945060208601359350604086013592506060860135915060808601356139348161387c565b809150509295509295909350565b60008060008060006080868803121561395a57600080fd5b853561396581613691565b9450602086013561397581613691565b935060408601359250606086013567ffffffffffffffff81111561399857600080fd5b6139a4888289016136a9565b969995985093965092949392505050565b6dffffffffffffffffffffffffffff811681146136a657600080fd5b600080600080600080600060e0888a0312156139ec57600080fd5b8735965060208801356139fe816139b5565b95506040880135613a0e816139b5565b94506060880135613a1e8161387c565b93506080880135613a2e8161387c565b925060a0880135613a3e816139b5565b915060c0880135613a4e816139b5565b8091505092959891949750929550565b600080600060608486031215613a7357600080fd5b505081359360208301359350604090920135919050565b600060208284031215613a9c57600080fd5b8135611f4a81613691565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115613ae957613ae9613aa7565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b7e57613b7e613aa7565b5060010190565b600080600060608486031215613b9a57600080fd5b8351613ba58161387c565b6020850151909350613bb68161387c565b60408501519092506138308161387c565b600080600060608486031215613bdc57600080fd5b8351613be7816139b5565b6020850151909350613bb6816139b5565b600060208284031215613c0a57600080fd5b8151611f4a81613691565b600063ffffffff83811690831681811015613c3257613c32613aa7565b039392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082613c7857613c78613c3a565b500490565b600082821015613c8f57613c8f613aa7565b500390565b600081613ca357613ca3613aa7565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60008060408385031215613cdc57600080fd5b8251613ce78161387c565b60208401519092506137e58161387c565b600060033d1115613d115760046000803e5060005160e01c5b90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff82111715613d7f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040525050565b600060443d1015613d945790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff8160248401118184111715613de257505050505090565b8285019150815181811115613dfa5750505050505090565b843d8701016020828501011115613e145750505050505090565b613e2360208286010187613d14565b509095945050505050565b600060208083528351808285015260005b81811015613e5b57858101830151858201604001528201613e3f565b81811115613e6d576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600060208284031215613eb357600080fd5b8151611f4a8161387c565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613ef657613ef6613aa7565b500290565b600060ff821660ff841680821015613f1557613f15613aa7565b90039392505050565b600060ff821680613f3157613f31613aa7565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600082613f6857613f68613c3a565b500690565b600060ff821660ff84168060ff03821115613f8a57613f8a613aa7565b019392505050565b600060ff831680613fa557613fa5613c3a565b8060ff8416049150509291505056fea2646970667358221220dfbdab3a2fa6e2b889ced1e3ac5cb06467cbdf48fe331642b5f5a72edc49b78664736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80638888a737116100b2578063b19210b011610081578063b3923a9911610066578063b3923a991461032b578063ca2229791461033e578063d69109371461035157600080fd5b8063b19210b014610305578063b33d96b01461031857600080fd5b80638888a737146102b95780638fabd82d146102cc57806392aec23c146102df578063ad615dec146102f257600080fd5b80635bff1d9211610109578063671a11b5116100ee578063671a11b51461027057806367f84adc1461028357806379c91b371461029657600080fd5b80635bff1d92146101f95780636350d7741461024f57600080fd5b8063119220a51461013b5780632bb66e1d14610164578063327494611461019e578063544caa56146101c6575b600080fd5b61014e6101493660046136ee565b61037c565b60405161015b9190613773565b60405180910390f35b6101776101723660046137b7565b61058e565b6040805163ffffffff9485168152928416602084015292169181019190915260600161015b565b6101b16101ac3660046137f0565b610626565b6040805192835260208301919091520161015b565b6101d96101d43660046137b7565b610837565b604080516001600160a01b0393841681529290911660208301520161015b565b61020c6102073660046137b7565b610947565b604080516001600160a01b03909716875260208701959095529385019290925263ffffffff908116606085015290811660808401521660a082015260c00161015b565b61026261025d36600461383b565b610c2c565b60405190815260200161015b565b61026261027e36600461388e565b610c69565b61014e6102913660046136ee565b610e98565b6102a96102a43660046138f5565b611090565b604051901515815260200161015b565b6102626102c736600461383b565b6111b5565b61014e6102da366004613942565b6111ee565b6102626102ed3660046139d1565b6113e7565b610262610300366004613a5e565b6114e4565b61026261031336600461388e565b6115fa565b61020c6103263660046137f0565b6117db565b61014e610339366004613942565b611a77565b61017761034c366004613a8a565b611c5c565b61036461035f3660046137b7565b611dd5565b6040516001600160a01b03909116815260200161015b565b6060816103d05760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064015b60405180910390fd5b6103db826001613ad6565b67ffffffffffffffff8111156103f3576103f3613aee565b60405190808252806020026020018201604052801561041c578160200160208202803683370190505b509050838160008151811061043357610433613b1d565b60209081029190910101528560005b838110156104fb576000806000806000806104848f8c8c8a81811061046957610469613b1d565b905060200201602081019061047e9190613a8a565b8a6117db565b9550955095509550955095506104b78988815181106104a5576104a5613b1d565b60200260200101518686868686610c69565b896104c3896001613ad6565b815181106104d3576104d3613b1d565b60200260200101818152505085975050505050505080806104f390613b4c565b915050610442565b50856001600160a01b0316816001600160a01b0316146105835760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f4f5560448201527f545f50415448000000000000000000000000000000000000000000000000000060648201526084016103c7565b509695505050505050565b6040517fca2229790000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152600091829182919086169063ca22297990602401606060405180830381865afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106199190613b85565b9250925092509250925092565b6000806000806106368686610837565b91509150600080886001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561067b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069f9190613bc7565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150886001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190613bf8565b6001600160a01b0316846001600160a01b03161480156107b85750886001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561077f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a39190613bf8565b6001600160a01b0316836001600160a01b0316145b6108045760405162461bcd60e51b815260206004820152601d60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e00000060448201526064016103c7565b836001600160a01b0316886001600160a01b031614610824578082610827565b81815b909a909950975050505050505050565b600080826001600160a01b0316846001600160a01b031614156108c25760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a204944454e544943414c5f41444452455360448201527f534553000000000000000000000000000000000000000000000000000000000060648201526084016103c7565b826001600160a01b0316846001600160a01b0316106108e25782846108e5565b83835b90925090506001600160a01b0382166109405760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a205a45524f5f414444524553530000000060448201526064016103c7565b9250929050565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190613bc7565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000806109e68c611c5c565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a549190613bf8565b6001600160a01b03168b6001600160a01b03161415610ae4578b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acf9190613bf8565b99509297509095509350915084848484610c1e565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b469190613bf8565b6001600160a01b03168b6001600160a01b03161415610bd6578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc19190613bf8565b99509197509195509350915083858385610c1e565b60405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e41000060448201526064016103c7565b505050509295509295509295565b6000806000806000806000610c418a8a610947565b955095509550955095509550610c5b8885878587866115fa565b9a9950505050505050505050565b6000808711610ce05760405162461bcd60e51b815260206004820152602960248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f494e5060448201527f55545f414d4f554e54000000000000000000000000000000000000000000000060648201526084016103c7565b600086118015610cf05750600085115b610d625760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201527f554944495459000000000000000000000000000000000000000000000000000060648201526084016103c7565b6000610d88610d7384612710613c15565b63ffffffff1689611f3e90919063ffffffff16565b90508363ffffffff168563ffffffff161415610dd057610db481610dae89612710611f3e565b90611f51565b610dbe8783611f3e565b610dc89190613c69565b915050610e8e565b60008080610de484610dae8c612710611f3e565b9050610dfd81610df68c612710611f3e565b8a8a611f6e565b90935091506000610e0e8a85611f3e565b905060ff83168a901b6000610e238284613c7d565b11610e705760405162461bcd60e51b815260206004820152600560248201527f484948494800000000000000000000000000000000000000000000000000000060448201526064016103c7565b84610e7b8284613c7d565b610e859190613c69565b96505050505050505b9695505050505050565b606081610ee75760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103c7565b610ef2826001613ad6565b67ffffffffffffffff811115610f0a57610f0a613aee565b604051908082528060200260200182016040528015610f33578160200160208202803683370190505b509050838160018351610f469190613c7d565b81518110610f5657610f56613b1d565b602090810291909101015284825b80156110085760008080808080610f918f8c8c610f8260018c613c7d565b81811061046957610469613b1d565b955095509550955095509550610fc4898881518110610fb257610fb2613b1d565b602002602001015185878587866115fa565b89610fd060018a613c7d565b81518110610fe057610fe0613b1d565b602002602001018181525050859750505050505050808061100090613c94565b915050610f64565b50866001600160a01b0316816001600160a01b0316146105835760405162461bcd60e51b815260206004820152602560248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f494e60448201527f5f5041544800000000000000000000000000000000000000000000000000000060648201526084016103c7565b60008163ffffffff16603214156110be576110ab8686611f3e565b6110b58585611f3e565b101590506111ac565b8584101580156110ce5750848310155b156110db575060016111ac565b8584111580156110eb5750848311155b156110f8575060006111ac565b816000611106826064613c15565b90506000806000808b8a10611144576111228b8a876032611f6e565b90945060ff1692506111378a8d886032611f6e565b90925060ff16905061116f565b6111518c8b886032611f6e565b90945060ff169250611166898c876032611f6e565b90925060ff1690505b600081841061117e5781611180565b835b905061118c8185613c7d565b93506111988183613c7d565b9290921c9390921c92909211159450505050505b95945050505050565b6000806000806000806111c88989610947565b95509550955095509550506111e1878686868686610c69565b9998505050505050505050565b60608161123d5760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103c7565b611248826001613ad6565b67ffffffffffffffff81111561126057611260613aee565b604051908082528060200260200182016040528015611289578160200160208202803683370190505b50905083816000815181106112a0576112a0613b1d565b60209081029190910101528560005b83811015611355576000806000806000806112f08b8b898181106112d5576112d5613b1d565b90506020020160208101906112ea9190613a8a565b89610947565b9550955095509550955095506113118988815181106104a5576104a5613b1d565b8961131d896001613ad6565b8151811061132d5761132d613b1d565b602002602001018181525050859750505050505050808061134d90613b4c565b9150506112af565b50856001600160a01b0316816001600160a01b0316146113dd5760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f4f5560448201527f545f50415448000000000000000000000000000000000000000000000000000060648201526084016103c7565b5095945050505050565b60006dffffffffffffffffffffffffffff8316156114685760008061143b6114226dffffffffffffffffffffffffffff878116908c16611f51565b8a6dffffffffffffffffffffffffffff16896064611f6e565b90925060ff1690506114638a61145d836114558387611f3e565b87911c611f51565b906120c5565b925050505b6dffffffffffffffffffffffffffff8216156114d9576000806114ba6114a16dffffffffffffffffffffffffffff868116908b16611f51565b896dffffffffffffffffffffffffffff16886064611f6e565b90925060ff1690506114d48a61145d836114558387611f3e565b925050505b979650505050505050565b600080841161155b5760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f414d4f60448201527f554e54000000000000000000000000000000000000000000000000000000000060648201526084016103c7565b60008311801561156b5750600082115b6115dd5760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201527f554944495459000000000000000000000000000000000000000000000000000060648201526084016103c7565b826115e88584611f3e565b6115f29190613c69565b949350505050565b60008087116116715760405162461bcd60e51b815260206004820152602a60248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4f555460448201527f5055545f414d4f554e540000000000000000000000000000000000000000000060648201526084016103c7565b6000861180156116815750600085115b6116f35760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201527f554944495459000000000000000000000000000000000000000000000000000060648201526084016103c7565b8263ffffffff168463ffffffff16141561176557600061171f612710611719898b611f3e565b90611f3e565b9050600061174b61173285612710613c15565b63ffffffff166117198b8a6120c590919063ffffffff16565b905061175c6001610dae8385613c69565b92505050610e8e565b60008080611773888b6120c5565b90506117818882888a611f6e565b909350915060006117948a612710611f3e565b905060006117a28286611f3e565b905060ff841682901b610e8560016117bc8a612710613c15565b63ffffffff1660ff88166117d08587613c7d565b610dae92911c613c69565b600080600080600080600080896001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611825573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118499190613bc7565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060008061187b8d8d61058e565b8097508193508294505050508b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e99190613bf8565b6001600160a01b03168b6001600160a01b03161415611979578b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119649190613bf8565b99509297509095509350915084848484611a67565b8b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119db9190613bf8565b6001600160a01b03168b6001600160a01b03161415610bd6578b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a569190613bf8565b995091975091955093509150838583855b5050505093975093979195509350565b606081611ac65760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103c7565b611ad1826001613ad6565b67ffffffffffffffff811115611ae957611ae9613aee565b604051908082528060200260200182016040528015611b12578160200160208202803683370190505b509050838160018351611b259190613c7d565b81518110611b3557611b35613b1d565b602090810291909101015284825b8015611bd45760008080808080611b6f8b8b611b6060018b613c7d565b8181106112d5576112d5613b1d565b955095509550955095509550611b90898881518110610fb257610fb2613b1d565b89611b9c60018a613c7d565b81518110611bac57611bac613b1d565b6020026020010181815250508597505050505050508080611bcc90613c94565b915050611b43565b50866001600160a01b0316816001600160a01b0316146113dd5760405162461bcd60e51b815260206004820152602560248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f494e60448201527f5f5041544800000000000000000000000000000000000000000000000000000060648201526084016103c7565b6000806000836001600160a01b03166332bfe4696040518163ffffffff1660e01b81526004016040805180830381865afa925050508015611cd8575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611cd591810190613cc9565b60015b611d6157611ce4613cf8565b806308c379a01415611d1e5750611cf9613d86565b80611d045750611d20565b8060405162461bcd60e51b81526004016103c79190613e2e565b505b3d808015611d4a576040519150601f19603f3d011682016040523d82523d6000602084013e611d4f565b606091505b50603280601e93509350935050611dce565b8181876001600160a01b031663d4cadf686040518163ffffffff1660e01b8152600401602060405180830381865afa158015611da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc59190613ea1565b94509450945050505b9193909250565b600080836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3a9190613bf8565b90506000846001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea09190613bf8565b9050836001600160a01b0316826001600160a01b03161480611ed35750836001600160a01b0316816001600160a01b0316145b611f1f5760405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e41000060448201526064016103c7565b836001600160a01b0316826001600160a01b0316146115f257816111ac565b6000611f4a8284613ebe565b9392505050565b600080611f5e8385613ad6565b9050611f4a8482101560006120d3565b60008084861015611fc15760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420737570706f7274205f626173654e203c205f6261736544000000000060448201526064016103c7565b7002000000000000000000000000000000008610611fde57600080fd5b60008086611ff06001607f1b8a613ebe565b611ffa9190613c69565b905070015bf0a8b1457695355fb8ac404e7a79e38110156120255761201e816120e5565b9150612031565b61202e8161271b565b91505b60008563ffffffff168763ffffffff168461204c9190613ebe565b6120569190613c69565b90507008000000000000000000000000000000008110156120885761207a81612823565b607f945094505050506120bc565b600061209382612ea5565b90506120af6120a382607f613efb565b60ff1683901c82612f58565b955093506120bc92505050565b94509492505050565b6000611f4a838360016135b6565b816120e1576120e1816135d1565b5050565b6000808080806fd3094c70f034de4b96ff7d5b6f99fcd8861061214a5761211c6f4000000000000000000000000000000085613ad6565b93506fd3094c70f034de4b96ff7d5b6f99fcd861213d6001607f1b88613ebe565b6121479190613c69565b95505b6fa45af1e1f40c333b3de1db4dd55f29a786106121a95761217b6f2000000000000000000000000000000085613ad6565b93506fa45af1e1f40c333b3de1db4dd55f29a761219c6001607f1b88613ebe565b6121a69190613c69565b95505b6f910b022db7ae67ce76b441c27035c6a18610612208576121da6f1000000000000000000000000000000085613ad6565b93506f910b022db7ae67ce76b441c27035c6a16121fb6001607f1b88613ebe565b6122059190613c69565b95505b6f88415abbe9a76bead8d00cf112e4d4a88610612267576122396f0800000000000000000000000000000085613ad6565b93506f88415abbe9a76bead8d00cf112e4d4a861225a6001607f1b88613ebe565b6122649190613c69565b95505b6f84102b00893f64c705e841d5d4064bd386106122c6576122986f0400000000000000000000000000000085613ad6565b93506f84102b00893f64c705e841d5d4064bd36122b96001607f1b88613ebe565b6122c39190613c69565b95505b6f8204055aaef1c8bd5c3259f4822735a28610612325576122f76f0200000000000000000000000000000085613ad6565b93506f8204055aaef1c8bd5c3259f4822735a26123186001607f1b88613ebe565b6123229190613c69565b95505b6f810100ab00222d861931c15e39b44e998610612384576123566f0100000000000000000000000000000085613ad6565b93506f810100ab00222d861931c15e39b44e996123776001607f1b88613ebe565b6123819190613c69565b95505b6f808040155aabbbe9451521693554f73386106123e2576123b46e80000000000000000000000000000085613ad6565b93506f808040155aabbbe9451521693554f7336123d56001607f1b88613ebe565b6123df9190613c69565b95505b6123f06001607f1b87613c7d565b92508291506001607f1b6124048380613ebe565b61240e9190613c69565b905070010000000000000000000000000000000061242c8482613c7d565b6124369084613ebe565b6124409190613c69565b61244a9085613ad6565b93506001607f1b61245b8284613ebe565b6124659190613c69565b9150700200000000000000000000000000000000612493846faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa613c7d565b61249d9084613ebe565b6124a79190613c69565b6124b19085613ad6565b93506001607f1b6124c28284613ebe565b6124cc9190613c69565b91507003000000000000000000000000000000006124fa846f99999999999999999999999999999999613c7d565b6125049084613ebe565b61250e9190613c69565b6125189085613ad6565b93506001607f1b6125298284613ebe565b6125339190613c69565b9150700400000000000000000000000000000000612561846f92492492492492492492492492492492613c7d565b61256b9084613ebe565b6125759190613c69565b61257f9085613ad6565b93506001607f1b6125908284613ebe565b61259a9190613c69565b91507005000000000000000000000000000000006125c8846f8e38e38e38e38e38e38e38e38e38e38e613c7d565b6125d29084613ebe565b6125dc9190613c69565b6125e69085613ad6565b93506001607f1b6125f78284613ebe565b6126019190613c69565b915070060000000000000000000000000000000061262f846f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b613c7d565b6126399084613ebe565b6126439190613c69565b61264d9085613ad6565b93506001607f1b61265e8284613ebe565b6126689190613c69565b9150700700000000000000000000000000000000612696846f89d89d89d89d89d89d89d89d89d89d89613c7d565b6126a09084613ebe565b6126aa9190613c69565b6126b49085613ad6565b93506001607f1b6126c58284613ebe565b6126cf9190613c69565b91507008000000000000000000000000000000006126fd846f88888888888888888888888888888888613c7d565b6127079084613ebe565b6127119190613c69565b610e8e9085613ad6565b600080700100000000000000000000000000000000831061276c57600061274e6127496001607f1b86613c69565b613624565b60ff811694851c94909150612768906001607f1b90613ebe565b9150505b6001607f1b8311156127ee57607f5b60ff8116156127ec576001607f1b6127938580613ebe565b61279d9190613c69565b935070010000000000000000000000000000000084106127dc57600193841c936127c79082613efb565b60ff166001901b826127d99190613ad6565b91505b6127e581613f1e565b905061277b565b505b6f05b9de1d10bf4103d647b0955897ba806128196f03f80fe03f80fe03f80fe03f80fe03f883613ebe565b611f4a9190613c69565b60008080806128426f1000000000000000000000000000000086613f59565b91508190506001607f1b6128568280613ebe565b6128609190613c69565b9050612874816710e1b3be415a0000613ebe565b61287e9084613ad6565b92506001607f1b61288f8383613ebe565b6128999190613c69565b90506128ad816705a0913f6b1e0000613ebe565b6128b79084613ad6565b92506001607f1b6128c88383613ebe565b6128d29190613c69565b90506128e681670168244fdac78000613ebe565b6128f09084613ad6565b92506001607f1b6129018383613ebe565b61290b9190613c69565b905061291e81664807432bc18000613ebe565b6129289084613ad6565b92506001607f1b6129398383613ebe565b6129439190613c69565b905061295681660c0135dca04000613ebe565b6129609084613ad6565b92506001607f1b6129718383613ebe565b61297b9190613c69565b905061298e816601b707b1cdc000613ebe565b6129989084613ad6565b92506001607f1b6129a98383613ebe565b6129b39190613c69565b90506129c5816536e0f639b800613ebe565b6129cf9084613ad6565b92506001607f1b6129e08383613ebe565b6129ea9190613c69565b90506129fc81650618fee9f800613ebe565b612a069084613ad6565b92506001607f1b612a178383613ebe565b612a219190613c69565b9050612a3281649c197dcc00613ebe565b612a3c9084613ad6565b92506001607f1b612a4d8383613ebe565b612a579190613c69565b9050612a6881640e30dce400613ebe565b612a729084613ad6565b92506001607f1b612a838383613ebe565b612a8d9190613c69565b9050612a9e8164012ebd1300613ebe565b612aa89084613ad6565b92506001607f1b612ab98383613ebe565b612ac39190613c69565b9050612ad3816317499f00613ebe565b612add9084613ad6565b92506001607f1b612aee8383613ebe565b612af89190613c69565b9050612b08816301a9d480613ebe565b612b129084613ad6565b92506001607f1b612b238383613ebe565b612b2d9190613c69565b9050612b3c81621c6380613ebe565b612b469084613ad6565b92506001607f1b612b578383613ebe565b612b619190613c69565b9050612b70816201c638613ebe565b612b7a9084613ad6565b92506001607f1b612b8b8383613ebe565b612b959190613c69565b9050612ba381611ab8613ebe565b612bad9084613ad6565b92506001607f1b612bbe8383613ebe565b612bc89190613c69565b9050612bd68161017c613ebe565b612be09084613ad6565b92506001607f1b612bf18383613ebe565b612bfb9190613c69565b9050612c08816014613ebe565b612c129084613ad6565b92506001607f1b612c238383613ebe565b612c2d9190613c69565b9050612c3a816001613ebe565b612c449084613ad6565b92506001607f1b82612c5e6721c3677c82b4000086613c69565b612c689190613ad6565b612c729190613ad6565b92506f10000000000000000000000000000000851615612cc65770018ebef9eac820ae8682b9793ac6d1e776612cb9847001c3d6a24ed82218787d624d3e5eba95f9613ebe565b612cc39190613c69565b92505b6f20000000000000000000000000000000851615612d18577001368b2fc6f9609fe7aceb46aa619baed4612d0b8470018ebef9eac820ae8682b9793ac6d1e778613ebe565b612d159190613c69565b92505b6f40000000000000000000000000000000851615612d69576fbc5ab1b16779be3575bd8f0520a9f21f612d5c847001368b2fc6f9609fe7aceb46aa619baed5613ebe565b612d669190613c69565b92505b6001607f1b851615612dad576f454aaa8efe072e7f6ddbab84b40a55c9612da0846fbc5ab1b16779be3575bd8f0520a9f21e613ebe565b612daa9190613c69565b92505b700100000000000000000000000000000000851615612dfe576f0960aadc109e7a3bf4578099615711ea612df1846f454aaa8efe072e7f6ddbab84b40a55c5613ebe565b612dfb9190613c69565b92505b700200000000000000000000000000000000851615612e4e576e2bf84208204f5977f9a8cf01fdce3d612e41846f0960aadc109e7a3bf4578099615711d7613ebe565b612e4b9190613c69565b92505b700400000000000000000000000000000000851615612e9c576d03c6ab775dd0b95b4cbee7e65d11612e8f846e2bf84208204f5977f9a8cf01fdc307613ebe565b612e999190613c69565b92505b50909392505050565b60006020607f5b60ff8116612ebb836001613f6d565b60ff161015612f0e5760006002612ed28385613f6d565b612edc9190613f92565b90508460008260ff1660808110612ef557612ef5613b1d565b015410612f0457809250612f08565b8091505b50612eac565b8360008260ff1660808110612f2557612f25613b1d565b015410612f33579392505050565b8360008360ff1660808110612f4a57612f4a613b1d565b015410610136575092915050565b6000828160ff8416612f6a8380613ebe565b901c9150612f88826f03442c4e6074a82f1797f72ac0000000613ebe565b612f929082613ad6565b905060ff8416612fa28684613ebe565b901c9150612fc0826f0116b96f757c380fb287fd0e40000000613ebe565b612fca9082613ad6565b905060ff8416612fda8684613ebe565b901c9150612ff7826e45ae5bdd5f0e03eca1ff4390000000613ebe565b6130019082613ad6565b905060ff84166130118684613ebe565b901c915061302e826e0defabf91302cd95b9ffda50000000613ebe565b6130389082613ad6565b905060ff84166130488684613ebe565b901c9150613065826e02529ca9832b22439efff9b8000000613ebe565b61306f9082613ad6565b905060ff841661307f8684613ebe565b901c915061309b826d54f1cf12bd04e516b6da88000000613ebe565b6130a59082613ad6565b905060ff84166130b58684613ebe565b901c91506130d1826d0a9e39e257a09ca2d6db51000000613ebe565b6130db9082613ad6565b905060ff84166130eb8684613ebe565b901c9150613107826d012e066e7b839fa050c309000000613ebe565b6131119082613ad6565b905060ff84166131218684613ebe565b901c915061313c826c1e33d7d926c329a1ad1a800000613ebe565b6131469082613ad6565b905060ff84166131568684613ebe565b901c9150613171826c02bee513bdb4a6b19b5f800000613ebe565b61317b9082613ad6565b905060ff841661318b8684613ebe565b901c91506131a5826b3a9316fa79b88eccf2a00000613ebe565b6131af9082613ad6565b905060ff84166131bf8684613ebe565b901c91506131d9826b048177ebe1fa812375200000613ebe565b6131e39082613ad6565b905060ff84166131f38684613ebe565b901c915061320c826a5263fe90242dcbacf00000613ebe565b6132169082613ad6565b905060ff84166132268684613ebe565b901c915061323f826a057e22099c030d94100000613ebe565b6132499082613ad6565b905060ff84166132598684613ebe565b901c9150613271826957e22099c030d9410000613ebe565b61327b9082613ad6565b905060ff841661328b8684613ebe565b901c91506132a38269052b6b54569976310000613ebe565b6132ad9082613ad6565b905060ff84166132bd8684613ebe565b901c91506132d482684985f67696bf748000613ebe565b6132de9082613ad6565b905060ff84166132ee8684613ebe565b901c9150613305826803dea12ea99e498000613ebe565b61330f9082613ad6565b905060ff841661331f8684613ebe565b901c9150613335826731880f2214b6e000613ebe565b61333f9082613ad6565b905060ff841661334f8684613ebe565b901c91506133658267025bcff56eb36000613ebe565b61336f9082613ad6565b905060ff841661337f8684613ebe565b901c915061339482661b722e10ab1000613ebe565b61339e9082613ad6565b905060ff84166133ae8684613ebe565b901c91506133c3826601317c70077000613ebe565b6133cd9082613ad6565b905060ff84166133dd8684613ebe565b901c91506133f182650cba84aafa00613ebe565b6133fb9082613ad6565b905060ff841661340b8684613ebe565b901c915061341e826482573a0a00613ebe565b6134289082613ad6565b905060ff84166134388684613ebe565b901c915061344b826405035ad900613ebe565b6134559082613ad6565b905060ff84166134658684613ebe565b901c915061347782632f881b00613ebe565b6134819082613ad6565b905060ff84166134918684613ebe565b901c91506134a3826301b29340613ebe565b6134ad9082613ad6565b905060ff84166134bd8684613ebe565b901c91506134ce82620efc40613ebe565b6134d89082613ad6565b905060ff84166134e88684613ebe565b901c91506134f882617fe0613ebe565b6135029082613ad6565b905060ff84166135128684613ebe565b901c915061352282610420613ebe565b61352c9082613ad6565b905060ff841661353c8684613ebe565b901c915061354b826021613ebe565b6135559082613ad6565b905060ff84166135658684613ebe565b901c9150613574826001613ebe565b61357e9082613ad6565b9050600160ff85161b856135a26f0688589cc0e9505e2f2fee558000000084613c69565b6135ac9190613ad6565b6111ac9190613ad6565b60006135c584841115836120d3565b60006111ac8486613c7d565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b600080610100831015613657575b600183111561365257600192831c9261364b9082613f6d565b9050613632565b61368b565b60805b60ff81161561368957600160ff82161b841061367e5760ff81169390931c92908117905b60011c607f1661365a565b505b92915050565b6001600160a01b03811681146136a657600080fd5b50565b60008083601f8401126136bb57600080fd5b50813567ffffffffffffffff8111156136d357600080fd5b6020830191508360208260051b850101111561094057600080fd5b60008060008060008060a0878903121561370757600080fd5b863561371281613691565b9550602087013561372281613691565b9450604087013561373281613691565b935060608701359250608087013567ffffffffffffffff81111561375557600080fd5b61376189828a016136a9565b979a9699509497509295939492505050565b6020808252825182820181905260009190848201906040850190845b818110156137ab5783518352928401929184019160010161378f565b50909695505050505050565b600080604083850312156137ca57600080fd5b82356137d581613691565b915060208301356137e581613691565b809150509250929050565b60008060006060848603121561380557600080fd5b833561381081613691565b9250602084013561382081613691565b9150604084013561383081613691565b809150509250925092565b60008060006060848603121561385057600080fd5b833561385b81613691565b9250602084013561386b81613691565b929592945050506040919091013590565b63ffffffff811681146136a657600080fd5b60008060008060008060c087890312156138a757600080fd5b86359550602087013594506040870135935060608701356138c78161387c565b925060808701356138d78161387c565b915060a08701356138e78161387c565b809150509295509295509295565b600080600080600060a0868803121561390d57600080fd5b8535945060208601359350604086013592506060860135915060808601356139348161387c565b809150509295509295909350565b60008060008060006080868803121561395a57600080fd5b853561396581613691565b9450602086013561397581613691565b935060408601359250606086013567ffffffffffffffff81111561399857600080fd5b6139a4888289016136a9565b969995985093965092949392505050565b6dffffffffffffffffffffffffffff811681146136a657600080fd5b600080600080600080600060e0888a0312156139ec57600080fd5b8735965060208801356139fe816139b5565b95506040880135613a0e816139b5565b94506060880135613a1e8161387c565b93506080880135613a2e8161387c565b925060a0880135613a3e816139b5565b915060c0880135613a4e816139b5565b8091505092959891949750929550565b600080600060608486031215613a7357600080fd5b505081359360208301359350604090920135919050565b600060208284031215613a9c57600080fd5b8135611f4a81613691565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115613ae957613ae9613aa7565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b7e57613b7e613aa7565b5060010190565b600080600060608486031215613b9a57600080fd5b8351613ba58161387c565b6020850151909350613bb68161387c565b60408501519092506138308161387c565b600080600060608486031215613bdc57600080fd5b8351613be7816139b5565b6020850151909350613bb6816139b5565b600060208284031215613c0a57600080fd5b8151611f4a81613691565b600063ffffffff83811690831681811015613c3257613c32613aa7565b039392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082613c7857613c78613c3a565b500490565b600082821015613c8f57613c8f613aa7565b500390565b600081613ca357613ca3613aa7565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60008060408385031215613cdc57600080fd5b8251613ce78161387c565b60208401519092506137e58161387c565b600060033d1115613d115760046000803e5060005160e01c5b90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff82111715613d7f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040525050565b600060443d1015613d945790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff8160248401118184111715613de257505050505090565b8285019150815181811115613dfa5750505050505090565b843d8701016020828501011115613e145750505050505090565b613e2360208286010187613d14565b509095945050505050565b600060208083528351808285015260005b81811015613e5b57858101830151858201604001528201613e3f565b81811115613e6d576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600060208284031215613eb357600080fd5b8151611f4a8161387c565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613ef657613ef6613aa7565b500290565b600060ff821660ff841680821015613f1557613f15613aa7565b90039392505050565b600060ff821680613f3157613f31613aa7565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600082613f6857613f68613c3a565b500690565b600060ff821660ff84168060ff03821115613f8a57613f8a613aa7565b019392505050565b600060ff831680613fa557613fa5613c3a565b8060ff8416049150509291505056fea2646970667358221220dfbdab3a2fa6e2b889ced1e3ac5cb06467cbdf48fe331642b5f5a72edc49b78664736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAmountIn(uint256,uint256,uint256,uint32,uint32,uint32)": {
        "details": "given an output amount of an asset and pair reserves, returns a required input amount of the other asset Formula: return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)",
        "params": {
          "amountOut": "target reserve amount",
          "reserveIn": "source reserve balance",
          "reserveOut": "target reserve balance",
          "swapFee": "swap fee of the conversion",
          "tokenWeightIn": "source reserve weight, represented in ppm (2-98)",
          "tokenWeightOut": "target reserve weight, represented in ppm (2-98)"
        },
        "returns": {
          "amountIn": "amountIn"
        }
      },
      "getAmountOut(uint256,uint256,uint256,uint32,uint32,uint32)": {
        "details": "given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset, Formula: return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))",
        "params": {
          "amountIn": "source reserve amount",
          "reserveIn": "source reserve balance",
          "reserveOut": "target reserve balance",
          "swapFee": "swap fee of the conversion",
          "tokenWeightIn": "source reserve weight, represented in ppm (2-98)",
          "tokenWeightOut": "target reserve weight, represented in ppm (2-98)"
        },
        "returns": {
          "amountOut": "amountOut"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3423,
        "contract": "contracts/RequiemFormula.sol:RequiemFormula",
        "label": "maxExpArray",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)128_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)128_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[128]",
        "numberOfBytes": "4096"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}