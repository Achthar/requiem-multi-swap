{
  "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserve0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserve1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance0Adjusted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance1Adjusted",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        }
      ],
      "name": "ensureConstantValue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightIn",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightOut",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveOut",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightIn",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightOut",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getFactoryAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getFactoryAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getFactoryReserveAndWeights",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightB",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getFactoryWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getOtherToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "getPairAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getPairAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        }
      ],
      "name": "getReserveAndWeights",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightB",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint112",
          "name": "reserve0",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "reserve1",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint112",
          "name": "collectedFee0",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "collectedFee1",
          "type": "uint112"
        }
      ],
      "name": "mintLiquidityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "sortTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xa30f870ed092beccc6fc2c7cab3c6ad9e28061bba0b187e8feb03afa46904e77",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
    "transactionIndex": 0,
    "gasUsed": "5826775",
    "logsBloom": "0x
    "blockHash": "0xaa4c4b55588dc347b39af90eda6c970bcec555cee7416f9d88b32606cbcbca86",
    "transactionHash": "0xa30f870ed092beccc6fc2c7cab3c6ad9e28061bba0b187e8feb03afa46904e77",
    "logs": [],
    "blockNumber": 10,
    "cumulativeGasUsed": "5826775",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "527294eb863e82bfdbe83df0620b85bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance0Adjusted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance1Adjusted\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"}],\"name\":\"ensureConstantValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightIn\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightOut\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightIn\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightOut\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getFactoryAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getFactoryAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getFactoryReserveAndWeights\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getFactoryWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getOtherToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getPairAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getPairAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getReserveAndWeights\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightB\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"collectedFee0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"collectedFee1\",\"type\":\"uint112\"}],\"name\":\"mintLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAmountIn(uint256,uint256,uint256,uint32,uint32,uint32)\":{\"details\":\"given an output amount of an asset and pair reserves, returns a required input amount of the other asset Formula: return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\",\"params\":{\"amountOut\":\"target reserve amount\",\"reserveIn\":\"source reserve balance\",\"reserveOut\":\"target reserve balance\",\"swapFee\":\"swap fee of the conversion\",\"tokenWeightIn\":\"source reserve weight, represented in ppm (2-98)\",\"tokenWeightOut\":\"target reserve weight, represented in ppm (2-98)\"},\"returns\":{\"amountIn\":\"amountIn\"}},\"getAmountOut(uint256,uint256,uint256,uint32,uint32,uint32)\":{\"details\":\"given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset, Formula: return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\",\"params\":{\"amountIn\":\"source reserve amount\",\"reserveIn\":\"source reserve balance\",\"reserveOut\":\"target reserve balance\",\"swapFee\":\"swap fee of the conversion\",\"tokenWeightIn\":\"source reserve weight, represented in ppm (2-98)\",\"tokenWeightOut\":\"target reserve weight, represented in ppm (2-98)\"},\"returns\":{\"amountOut\":\"amountOut\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemFormula.sol\":\"RequiemFormula\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":12500},\"remappings\":[]},\"sources\":{\"contracts/RequiemFormula.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.10;\\n\\nimport \\\"./interfaces/IRequiemFormula.sol\\\";\\nimport \\\"./interfaces/IRequiemPair.sol\\\";\\nimport \\\"./interfaces/IRequiemFactory.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string, no-unused-vars\\n\\ncontract RequiemFormula is IRequiemFormula {\\n\\n    uint256 private constant ONE = 1;\\n    uint8 private constant MIN_PRECISION = 32;\\n    uint8 private constant MAX_PRECISION = 127;\\n\\n    uint256 private constant FIXED_1 = 0x080000000000000000000000000000000;\\n    uint256 private constant FIXED_2 = 0x100000000000000000000000000000000;\\n    uint256 private constant MAX_NUM = 0x200000000000000000000000000000000;\\n\\n    uint256 private constant LN2_NUMERATOR = 0x3f80fe03f80fe03f80fe03f80fe03f8;\\n    uint256 private constant LN2_DENOMINATOR = 0x5b9de1d10bf4103d647b0955897ba80;\\n\\n    uint256 private constant OPT_LOG_MAX_VAL = 0x15bf0a8b1457695355fb8ac404e7a79e3;\\n    uint256 private constant OPT_EXP_MAX_VAL = 0x800000000000000000000000000000000;\\n\\n    uint256 private constant LAMBERT_CONV_RADIUS = 0x002f16ac6c59de6f8d5d6f63c1482a7c86;\\n    uint256 private constant LAMBERT_POS2_SAMPLE = 0x0003060c183060c183060c183060c18306;\\n    uint256 private constant LAMBERT_POS2_MAXVAL = 0x01af16ac6c59de6f8d5d6f63c1482a7c80;\\n    uint256 private constant LAMBERT_POS3_MAXVAL = 0x6b22d43e72c326539cceeef8bb48f255ff;\\n\\n    uint256 private constant MAX_UNF_WEIGHT = 0x10c6f7a0b5ed8d36b4c7f34938583621fafc8b0079a2834d26fa3fcc9ea9;\\n\\n    uint256[128] private maxExpArray;\\n\\n    function initMaxExpArray() internal {\\n        maxExpArray[32] = 0x1c35fedd14ffffffffffffffffffffffff;\\n        maxExpArray[33] = 0x1b0ce43b323fffffffffffffffffffffff;\\n        maxExpArray[34] = 0x19f0028ec1ffffffffffffffffffffffff;\\n        maxExpArray[35] = 0x18ded91f0e7fffffffffffffffffffffff;\\n        maxExpArray[36] = 0x17d8ec7f0417ffffffffffffffffffffff;\\n        maxExpArray[37] = 0x16ddc6556cdbffffffffffffffffffffff;\\n        maxExpArray[38] = 0x15ecf52776a1ffffffffffffffffffffff;\\n        maxExpArray[39] = 0x15060c256cb2ffffffffffffffffffffff;\\n        maxExpArray[40] = 0x1428a2f98d72ffffffffffffffffffffff;\\n        maxExpArray[41] = 0x13545598e5c23fffffffffffffffffffff;\\n        maxExpArray[42] = 0x1288c4161ce1dfffffffffffffffffffff;\\n        maxExpArray[43] = 0x11c592761c666fffffffffffffffffffff;\\n        maxExpArray[44] = 0x110a688680a757ffffffffffffffffffff;\\n        maxExpArray[45] = 0x1056f1b5bedf77ffffffffffffffffffff;\\n        maxExpArray[46] = 0x0faadceceeff8bffffffffffffffffffff;\\n        maxExpArray[47] = 0x0f05dc6b27edadffffffffffffffffffff;\\n        maxExpArray[48] = 0x0e67a5a25da4107fffffffffffffffffff;\\n        maxExpArray[49] = 0x0dcff115b14eedffffffffffffffffffff;\\n        maxExpArray[50] = 0x0d3e7a392431239fffffffffffffffffff;\\n        maxExpArray[51] = 0x0cb2ff529eb71e4fffffffffffffffffff;\\n        maxExpArray[52] = 0x0c2d415c3db974afffffffffffffffffff;\\n        maxExpArray[53] = 0x0bad03e7d883f69bffffffffffffffffff;\\n        maxExpArray[54] = 0x0b320d03b2c343d5ffffffffffffffffff;\\n        maxExpArray[55] = 0x0abc25204e02828dffffffffffffffffff;\\n        maxExpArray[56] = 0x0a4b16f74ee4bb207fffffffffffffffff;\\n        maxExpArray[57] = 0x09deaf736ac1f569ffffffffffffffffff;\\n        maxExpArray[58] = 0x0976bd9952c7aa957fffffffffffffffff;\\n        maxExpArray[59] = 0x09131271922eaa606fffffffffffffffff;\\n        maxExpArray[60] = 0x08b380f3558668c46fffffffffffffffff;\\n        maxExpArray[61] = 0x0857ddf0117efa215bffffffffffffffff;\\n        maxExpArray[62] = 0x07ffffffffffffffffffffffffffffffff;\\n        maxExpArray[63] = 0x07abbf6f6abb9d087fffffffffffffffff;\\n        maxExpArray[64] = 0x075af62cbac95f7dfa7fffffffffffffff;\\n        maxExpArray[65] = 0x070d7fb7452e187ac13fffffffffffffff;\\n        maxExpArray[66] = 0x06c3390ecc8af379295fffffffffffffff;\\n        maxExpArray[67] = 0x067c00a3b07ffc01fd6fffffffffffffff;\\n        maxExpArray[68] = 0x0637b647c39cbb9d3d27ffffffffffffff;\\n        maxExpArray[69] = 0x05f63b1fc104dbd39587ffffffffffffff;\\n        maxExpArray[70] = 0x05b771955b36e12f7235ffffffffffffff;\\n        maxExpArray[71] = 0x057b3d49dda84556d6f6ffffffffffffff;\\n        maxExpArray[72] = 0x054183095b2c8ececf30ffffffffffffff;\\n        maxExpArray[73] = 0x050a28be635ca2b888f77fffffffffffff;\\n        maxExpArray[74] = 0x04d5156639708c9db33c3fffffffffffff;\\n        maxExpArray[75] = 0x04a23105873875bd52dfdfffffffffffff;\\n        maxExpArray[76] = 0x0471649d87199aa990756fffffffffffff;\\n        maxExpArray[77] = 0x04429a21a029d4c1457cfbffffffffffff;\\n        maxExpArray[78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff;\\n        maxExpArray[79] = 0x03eab73b3bbfe282243ce1ffffffffffff;\\n        maxExpArray[80] = 0x03c1771ac9fb6b4c18e229ffffffffffff;\\n        maxExpArray[81] = 0x0399e96897690418f785257fffffffffff;\\n        maxExpArray[82] = 0x0373fc456c53bb779bf0ea9fffffffffff;\\n        maxExpArray[83] = 0x034f9e8e490c48e67e6ab8bfffffffffff;\\n        maxExpArray[84] = 0x032cbfd4a7adc790560b3337ffffffffff;\\n        maxExpArray[85] = 0x030b50570f6e5d2acca94613ffffffffff;\\n        maxExpArray[86] = 0x02eb40f9f620fda6b56c2861ffffffffff;\\n        maxExpArray[87] = 0x02cc8340ecb0d0f520a6af58ffffffffff;\\n        maxExpArray[88] = 0x02af09481380a0a35cf1ba02ffffffffff;\\n        maxExpArray[89] = 0x0292c5bdd3b92ec810287b1b3fffffffff;\\n        maxExpArray[90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff;\\n        maxExpArray[91] = 0x025daf6654b1eaa55fd64df5efffffffff;\\n        maxExpArray[92] = 0x0244c49c648baa98192dce88b7ffffffff;\\n        maxExpArray[93] = 0x022ce03cd5619a311b2471268bffffffff;\\n        maxExpArray[94] = 0x0215f77c045fbe885654a44a0fffffffff;\\n        maxExpArray[95] = 0x01ffffffffffffffffffffffffffffffff;\\n        maxExpArray[96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff;\\n        maxExpArray[97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff;\\n        maxExpArray[98] = 0x01c35fedd14b861eb0443f7f133fffffff;\\n        maxExpArray[99] = 0x01b0ce43b322bcde4a56e8ada5afffffff;\\n        maxExpArray[100] = 0x019f0028ec1fff007f5a195a39dfffffff;\\n        maxExpArray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff;\\n        maxExpArray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff;\\n        maxExpArray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff;\\n        maxExpArray[104] = 0x015ecf52776a1155b5bd8395814f7fffff;\\n        maxExpArray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff;\\n        maxExpArray[106] = 0x01428a2f98d728ae223ddab715be3fffff;\\n        maxExpArray[107] = 0x013545598e5c23276ccf0ede68034fffff;\\n        maxExpArray[108] = 0x01288c4161ce1d6f54b7f61081194fffff;\\n        maxExpArray[109] = 0x011c592761c666aa641d5a01a40f17ffff;\\n        maxExpArray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff;\\n        maxExpArray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff;\\n        maxExpArray[112] = 0x00faadceceeff8a0890f3875f008277fff;\\n        maxExpArray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff;\\n        maxExpArray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff;\\n        maxExpArray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff;\\n        maxExpArray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff;\\n        maxExpArray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff;\\n        maxExpArray[118] = 0x00c2d415c3db974ab32a51840c0b67edff;\\n        maxExpArray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff;\\n        maxExpArray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff;\\n        maxExpArray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf;\\n        maxExpArray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df;\\n        maxExpArray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f;\\n        maxExpArray[124] = 0x00976bd9952c7aa957f5937d790ef65037;\\n        maxExpArray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf;\\n        maxExpArray[126] = 0x008b380f3558668c46c91c49a2f8e967b9;\\n        maxExpArray[127] = 0x00857ddf0117efa215952912839f6473e6;\\n    }\\n\\n    constructor() {\\n        initMaxExpArray();\\n    }\\n\\n    /**\\n     * @dev General Description:\\n     *     Determine a value of precision.\\n     *     Calculate an integer approximation of (_baseN / _baseD) ^ (_expN / _expD) * 2 ^ precision.\\n     *     Return the result along with the precision used.\\n     *\\n     * Detailed Description:\\n     *     Instead of calculating \\\"base ^ exp\\\", we calculate \\\"e ^ (log(base) * exp)\\\".\\n     *     The value of \\\"log(base)\\\" is represented with an integer slightly smaller than \\\"log(base) * 2 ^ precision\\\".\\n     *     The larger \\\"precision\\\" is, the more accurately this value represents the real value.\\n     *     However, the larger \\\"precision\\\" is, the more bits are required in order to store this value.\\n     *     And the exponentiation function, which takes \\\"x\\\" and calculates \\\"e ^ x\\\", is limited to a maximum exponent (maximum value of \\\"x\\\").\\n     *     This maximum exponent depends on the \\\"precision\\\" used, and it is given by \\\"maxExpArray[precision] >> (MAX_PRECISION - precision)\\\".\\n     *     Hence we need to determine the highest precision which can be used for the given input, before calling the exponentiation function.\\n     *     This allows us to compute \\\"base ^ exp\\\" with maximum accuracy and without exceeding 256 bits in any of the intermediate computations.\\n     *     This functions assumes that \\\"_expN < 2 ^ 256 / log(MAX_NUM - 1)\\\", otherwise the multiplication should be replaced with a \\\"safeMul\\\".\\n     *     Since we rely on unsigned-integer arithmetic and \\\"base < 1\\\" ==> \\\"log(base) < 0\\\", this function does not support \\\"_baseN < _baseD\\\".\\n     */\\n    function power(\\n        uint256 _baseN,\\n        uint256 _baseD,\\n        uint32 _expN,\\n        uint32 _expD\\n    ) internal view returns (uint256, uint8) {\\n        require(_baseN >= _baseD, \\\"not support _baseN < _baseD\\\");\\n        require(_baseN < MAX_NUM);\\n\\n        uint256 baseLog;\\n        uint256 base = (_baseN * FIXED_1) / _baseD;\\n        if (base < OPT_LOG_MAX_VAL) {\\n            baseLog = optimalLog(base);\\n        } else {\\n            baseLog = generalLog(base);\\n        }\\n\\n        uint256 baseLogTimesExp = (baseLog * _expN) / _expD;\\n        if (baseLogTimesExp < OPT_EXP_MAX_VAL) {\\n            return (optimalExp(baseLogTimesExp), MAX_PRECISION);\\n        } else {\\n            uint8 precision = findPositionInMaxExpArray(baseLogTimesExp);\\n            return (generalExp(baseLogTimesExp >> (MAX_PRECISION - precision), precision), precision);\\n        }\\n    }\\n\\n    /**\\n     * @dev computes log(x / FIXED_1) * FIXED_1.\\n     * This functions assumes that \\\"x >= FIXED_1\\\", because the output would be negative otherwise.\\n     */\\n    function generalLog(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\\n        if (x >= FIXED_2) {\\n            uint8 count = floorLog2(x / FIXED_1);\\n            x >>= count;\\n            // now x < 2\\n            res = count * FIXED_1;\\n        }\\n\\n        // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\\n        if (x > FIXED_1) {\\n            for (uint8 i = MAX_PRECISION; i > 0; --i) {\\n                x = (x * x) / FIXED_1;\\n                // now 1 < x < 4\\n                if (x >= FIXED_2) {\\n                    x >>= 1;\\n                    // now 1 < x < 2\\n                    res += ONE << (i - 1);\\n                }\\n            }\\n        }\\n\\n        return (res * LN2_NUMERATOR) / LN2_DENOMINATOR;\\n    }\\n\\n    /**\\n     * @dev computes the largest integer smaller than or equal to the binary logarithm of the input.\\n     */\\n    function floorLog2(uint256 _n) internal pure returns (uint8) {\\n        uint8 res = 0;\\n\\n        if (_n < 256) {\\n            // At most 8 iterations\\n            while (_n > 1) {\\n                _n >>= 1;\\n                res += 1;\\n            }\\n        } else {\\n            // Exactly 8 iterations\\n            for (uint8 s = 128; s > 0; s >>= 1) {\\n                if (_n >= (ONE << s)) {\\n                    _n >>= s;\\n                    res |= s;\\n                }\\n            }\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * @dev the global \\\"maxExpArray\\\" is sorted in descending order, and therefore the following statements are equivalent:\\n     * - This function finds the position of [the smallest value in \\\"maxExpArray\\\" larger than or equal to \\\"x\\\"]\\n     * - This function finds the highest position of [a value in \\\"maxExpArray\\\" larger than or equal to \\\"x\\\"]\\n     */\\n    function findPositionInMaxExpArray(uint256 _x) internal view returns (uint8) {\\n        uint8 lo = MIN_PRECISION;\\n        uint8 hi = MAX_PRECISION;\\n\\n        while (lo + 1 < hi) {\\n            uint8 mid = (lo + hi) / 2;\\n            if (maxExpArray[mid] >= _x) lo = mid;\\n            else hi = mid;\\n        }\\n\\n        if (maxExpArray[hi] >= _x) return hi;\\n        if (maxExpArray[lo] >= _x) return lo;\\n\\n        require(false);\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev this function can be auto-generated by the script \\\"PrintFunctionGeneralExp.py\\\".\\n     * it approximates \\\"e ^ x\\\" via maclaurin summation: \\\"(x^0)/0! + (x^1)/1! + ... + (x^n)/n!\\\".\\n     * it returns \\\"e ^ (x / 2 ^ precision) * 2 ^ precision\\\", that is, the result is upshifted for accuracy.\\n     * the global \\\"maxExpArray\\\" maps each \\\"precision\\\" to \\\"((maximumExponent + 1) << (MAX_PRECISION - precision)) - 1\\\".\\n     * the maximum permitted value for \\\"x\\\" is therefore given by \\\"maxExpArray[precision] >> (MAX_PRECISION - precision)\\\".\\n     */\\n    function generalExp(uint256 _x, uint8 _precision) internal pure returns (uint256) {\\n        uint256 xi = _x;\\n        uint256 res = 0;\\n\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x3442c4e6074a82f1797f72ac0000000;\\n        // add x^02 * (33! / 02!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x116b96f757c380fb287fd0e40000000;\\n        // add x^03 * (33! / 03!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x045ae5bdd5f0e03eca1ff4390000000;\\n        // add x^04 * (33! / 04!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00defabf91302cd95b9ffda50000000;\\n        // add x^05 * (33! / 05!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x002529ca9832b22439efff9b8000000;\\n        // add x^06 * (33! / 06!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00054f1cf12bd04e516b6da88000000;\\n        // add x^07 * (33! / 07!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000a9e39e257a09ca2d6db51000000;\\n        // add x^08 * (33! / 08!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000012e066e7b839fa050c309000000;\\n        // add x^09 * (33! / 09!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000001e33d7d926c329a1ad1a800000;\\n        // add x^10 * (33! / 10!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000002bee513bdb4a6b19b5f800000;\\n        // add x^11 * (33! / 11!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000003a9316fa79b88eccf2a00000;\\n        // add x^12 * (33! / 12!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000048177ebe1fa812375200000;\\n        // add x^13 * (33! / 13!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000005263fe90242dcbacf00000;\\n        // add x^14 * (33! / 14!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000057e22099c030d94100000;\\n        // add x^15 * (33! / 15!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000057e22099c030d9410000;\\n        // add x^16 * (33! / 16!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000052b6b54569976310000;\\n        // add x^17 * (33! / 17!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000004985f67696bf748000;\\n        // add x^18 * (33! / 18!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000003dea12ea99e498000;\\n        // add x^19 * (33! / 19!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000031880f2214b6e000;\\n        // add x^20 * (33! / 20!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000025bcff56eb36000;\\n        // add x^21 * (33! / 21!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000001b722e10ab1000;\\n        // add x^22 * (33! / 22!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000001317c70077000;\\n        // add x^23 * (33! / 23!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000cba84aafa00;\\n        // add x^24 * (33! / 24!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000082573a0a00;\\n        // add x^25 * (33! / 25!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000005035ad900;\\n        // add x^26 * (33! / 26!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x000000000000000000000002f881b00;\\n        // add x^27 * (33! / 27!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000001b29340;\\n        // add x^28 * (33! / 28!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x00000000000000000000000000efc40;\\n        // add x^29 * (33! / 29!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000007fe0;\\n        // add x^30 * (33! / 30!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000420;\\n        // add x^31 * (33! / 31!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000021;\\n        // add x^32 * (33! / 32!)\\n        xi = (xi * _x) >> _precision;\\n        res += xi * 0x0000000000000000000000000000001;\\n        // add x^33 * (33! / 33!)\\n\\n        return res / 0x688589cc0e9505e2f2fee5580000000 + _x + (ONE << _precision);\\n        // divide by 33! and then add x^1 / 1! + x^0 / 0!\\n    }\\n\\n    /**\\n     * @dev computes log(x / FIXED_1) * FIXED_1\\n     * Input range: FIXED_1 <= x <= OPT_LOG_MAX_VAL - 1\\n     * Auto-generated via \\\"PrintFunctionOptimalLog.py\\\"\\n     * Detailed description:\\n     * - Rewrite the input as a product of natural exponents and a single residual r, such that 1 < r < 2\\n     * - The natural logarithm of each (pre-calculated) exponent is the degree of the exponent\\n     * - The natural logarithm of r is calculated via Taylor series for log(1 + x), where x = r - 1\\n     * - The natural logarithm of the input is calculated by summing up the intermediate results above\\n     * - For example: log(250) = log(e^4 * e^1 * e^0.5 * 1.021692859) = 4 + 1 + 0.5 + log(1 + 0.021692859)\\n     */\\n    function optimalLog(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        uint256 y;\\n        uint256 z;\\n        uint256 w;\\n\\n        if (x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8) {\\n            res += 0x40000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0xd3094c70f034de4b96ff7d5b6f99fcd8;\\n        }\\n        // add 1 / 2^1\\n        if (x >= 0xa45af1e1f40c333b3de1db4dd55f29a7) {\\n            res += 0x20000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0xa45af1e1f40c333b3de1db4dd55f29a7;\\n        }\\n        // add 1 / 2^2\\n        if (x >= 0x910b022db7ae67ce76b441c27035c6a1) {\\n            res += 0x10000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x910b022db7ae67ce76b441c27035c6a1;\\n        }\\n        // add 1 / 2^3\\n        if (x >= 0x88415abbe9a76bead8d00cf112e4d4a8) {\\n            res += 0x08000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x88415abbe9a76bead8d00cf112e4d4a8;\\n        }\\n        // add 1 / 2^4\\n        if (x >= 0x84102b00893f64c705e841d5d4064bd3) {\\n            res += 0x04000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x84102b00893f64c705e841d5d4064bd3;\\n        }\\n        // add 1 / 2^5\\n        if (x >= 0x8204055aaef1c8bd5c3259f4822735a2) {\\n            res += 0x02000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x8204055aaef1c8bd5c3259f4822735a2;\\n        }\\n        // add 1 / 2^6\\n        if (x >= 0x810100ab00222d861931c15e39b44e99) {\\n            res += 0x01000000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x810100ab00222d861931c15e39b44e99;\\n        }\\n        // add 1 / 2^7\\n        if (x >= 0x808040155aabbbe9451521693554f733) {\\n            res += 0x00800000000000000000000000000000;\\n            x = (x * FIXED_1) / 0x808040155aabbbe9451521693554f733;\\n        }\\n        // add 1 / 2^8\\n\\n        z = y = x - FIXED_1;\\n        w = (y * y) / FIXED_1;\\n        res += (z * (0x100000000000000000000000000000000 - y)) / 0x100000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^01 / 01 - y^02 / 02\\n        res += (z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y)) / 0x200000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^03 / 03 - y^04 / 04\\n        res += (z * (0x099999999999999999999999999999999 - y)) / 0x300000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^05 / 05 - y^06 / 06\\n        res += (z * (0x092492492492492492492492492492492 - y)) / 0x400000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^07 / 07 - y^08 / 08\\n        res += (z * (0x08e38e38e38e38e38e38e38e38e38e38e - y)) / 0x500000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^09 / 09 - y^10 / 10\\n        res += (z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y)) / 0x600000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^11 / 11 - y^12 / 12\\n        res += (z * (0x089d89d89d89d89d89d89d89d89d89d89 - y)) / 0x700000000000000000000000000000000;\\n        z = (z * w) / FIXED_1;\\n        // add y^13 / 13 - y^14 / 14\\n        res += (z * (0x088888888888888888888888888888888 - y)) / 0x800000000000000000000000000000000;\\n        // add y^15 / 15 - y^16 / 16\\n\\n        return res;\\n    }\\n\\n    /**\\n     * @dev computes e ^ (x / FIXED_1) * FIXED_1\\n     * input range: 0 <= x <= OPT_EXP_MAX_VAL - 1\\n     * auto-generated via \\\"PrintFunctionOptimalExp.py\\\"\\n     * Detailed description:\\n     * - Rewrite the input as a sum of binary exponents and a single residual r, as small as possible\\n     * - The exponentiation of each binary exponent is given (pre-calculated)\\n     * - The exponentiation of r is calculated via Taylor series for e^x, where x = r\\n     * - The exponentiation of the input is calculated by multiplying the intermediate results above\\n     * - For example: e^5.521692859 = e^(4 + 1 + 0.5 + 0.021692859) = e^4 * e^1 * e^0.5 * e^0.021692859\\n     */\\n    function optimalExp(uint256 x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        uint256 y;\\n        uint256 z;\\n\\n        z = y = x % 0x10000000000000000000000000000000;\\n        // get the input modulo 2^(-3)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x10e1b3be415a0000;\\n        // add y^02 * (20! / 02!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x05a0913f6b1e0000;\\n        // add y^03 * (20! / 03!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0168244fdac78000;\\n        // add y^04 * (20! / 04!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x004807432bc18000;\\n        // add y^05 * (20! / 05!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000c0135dca04000;\\n        // add y^06 * (20! / 06!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0001b707b1cdc000;\\n        // add y^07 * (20! / 07!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000036e0f639b800;\\n        // add y^08 * (20! / 08!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x00000618fee9f800;\\n        // add y^09 * (20! / 09!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000009c197dcc00;\\n        // add y^10 * (20! / 10!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000e30dce400;\\n        // add y^11 * (20! / 11!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000000012ebd1300;\\n        // add y^12 * (20! / 12!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000017499f00;\\n        // add y^13 * (20! / 13!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000001a9d480;\\n        // add y^14 * (20! / 14!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x00000000001c6380;\\n        // add y^15 * (20! / 15!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000000000001c638;\\n        // add y^16 * (20! / 16!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000000001ab8;\\n        // add y^17 * (20! / 17!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x000000000000017c;\\n        // add y^18 * (20! / 18!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000000000014;\\n        // add y^19 * (20! / 19!)\\n        z = (z * y) / FIXED_1;\\n        res += z * 0x0000000000000001;\\n        // add y^20 * (20! / 20!)\\n        res = res / 0x21c3677c82b40000 + y + FIXED_1;\\n        // divide by 20! and then add y^1 / 1! + y^0 / 0!\\n\\n        if ((x & 0x010000000000000000000000000000000) != 0) res = (res * 0x1c3d6a24ed82218787d624d3e5eba95f9) / 0x18ebef9eac820ae8682b9793ac6d1e776;\\n        // multiply by e^2^(-3)\\n        if ((x & 0x020000000000000000000000000000000) != 0) res = (res * 0x18ebef9eac820ae8682b9793ac6d1e778) / 0x1368b2fc6f9609fe7aceb46aa619baed4;\\n        // multiply by e^2^(-2)\\n        if ((x & 0x040000000000000000000000000000000) != 0) res = (res * 0x1368b2fc6f9609fe7aceb46aa619baed5) / 0x0bc5ab1b16779be3575bd8f0520a9f21f;\\n        // multiply by e^2^(-1)\\n        if ((x & 0x080000000000000000000000000000000) != 0) res = (res * 0x0bc5ab1b16779be3575bd8f0520a9f21e) / 0x0454aaa8efe072e7f6ddbab84b40a55c9;\\n        // multiply by e^2^(+0)\\n        if ((x & 0x100000000000000000000000000000000) != 0) res = (res * 0x0454aaa8efe072e7f6ddbab84b40a55c5) / 0x00960aadc109e7a3bf4578099615711ea;\\n        // multiply by e^2^(+1)\\n        if ((x & 0x200000000000000000000000000000000) != 0) res = (res * 0x00960aadc109e7a3bf4578099615711d7) / 0x0002bf84208204f5977f9a8cf01fdce3d;\\n        // multiply by e^2^(+2)\\n        if ((x & 0x400000000000000000000000000000000) != 0) res = (res * 0x0002bf84208204f5977f9a8cf01fdc307) / 0x0000003c6ab775dd0b95b4cbee7e65d11;\\n        // multiply by e^2^(+3)\\n\\n        return res;\\n    }\\n\\n    function getReserveAndWeights(address pair, address tokenA)\\n        public\\n        view\\n        override\\n        returns (\\n            address tokenB,\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint32 tokenWeightA,\\n            uint32 tokenWeightB,\\n            uint32 swapFee\\n        )\\n    {\\n        (uint256 reserve0, uint256 reserve1, ) = IRequiemPair(pair).getReserves();\\n        uint32 tokenWeight0;\\n        uint32 tokenWeight1;\\n        (tokenWeight0, tokenWeight1, swapFee) = getWeightsAndSwapFee(pair);\\n\\n        if (tokenA == IRequiemPair(pair).token0()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemPair(pair).token1(), reserve0, reserve1, tokenWeight0, tokenWeight1);\\n        } else if (tokenA == IRequiemPair(pair).token1()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemPair(pair).token0(), reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        } else {\\n            revert(\\\"RequiemFormula: Invalid tokenA\\\");\\n        }\\n    }\\n\\n    function getFactoryReserveAndWeights(\\n        address factory,\\n        address pair,\\n        address tokenA\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            address tokenB,\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint32 tokenWeightA,\\n            uint32 tokenWeightB,\\n            uint32 swapFee\\n        )\\n    {\\n        (uint256 reserve0, uint256 reserve1, ) = IRequiemPair(pair).getReserves();\\n        uint32 tokenWeight0;\\n        uint32 tokenWeight1;\\n        (tokenWeight0, tokenWeight1, swapFee) = getFactoryWeightsAndSwapFee(factory, pair);\\n\\n        if (tokenA == IRequiemPair(pair).token0()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemPair(pair).token1(), reserve0, reserve1, tokenWeight0, tokenWeight1);\\n        } else if (tokenA == IRequiemPair(pair).token1()) {\\n            (tokenB, reserveA, reserveB, tokenWeightA, tokenWeightB) = (IRequiemPair(pair).token0(), reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        } else {\\n            revert(\\\"RequiemFormula: Invalid tokenA\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset,\\n     *\\n     * Formula:\\n     * return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\\n     *\\n     * @param amountIn                  source reserve amount\\n     * @param reserveIn    source reserve balance\\n     * @param reserveOut    target reserve balance\\n     * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\\n     * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\\n     * @param swapFee                  swap fee of the conversion\\n     *\\n     * @return amountOut\\n     */\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) public view override returns (uint256 amountOut) {\\n        // validate input\\n        require(amountIn > 0, \\\"RequiemFormula: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn * (10000 - swapFee);\\n        // special case for equal weights\\n        if (tokenWeightIn == tokenWeightOut) {\\n            return reserveOut * amountInWithFee / (reserveIn * 10000 + amountInWithFee);\\n        }\\n\\n        uint256 result;\\n        uint8 precision;\\n        uint256 baseN = reserveIn * 10000 + amountInWithFee;\\n        (result, precision) = power(baseN, reserveIn * 10000, tokenWeightIn, tokenWeightOut);\\n\\n        uint256 temp1 = reserveOut * result;\\n        uint256 temp2 = reserveOut << precision;\\n        amountOut = (temp1 - temp2) / result;\\n    }\\n\\n    /**\\n     * @dev given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n     *\\n     * Formula:\\n     * return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\\n     *\\n     * @param amountOut     target reserve amount\\n     * @param reserveIn    source reserve balance\\n     * @param reserveOut    target reserve balance\\n     * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\\n     * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\\n     * @param swapFee                  swap fee of the conversion\\n     *\\n     * @return amountIn\\n     */\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint32 tokenWeightIn,\\n        uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) public view override returns (uint256 amountIn) {\\n        // validate input\\n        require(amountOut > 0, \\\"RequiemFormula: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\");\\n        // special case for equal weights\\n        if (tokenWeightIn == tokenWeightOut) {\\n            uint256 numerator = reserveIn * amountOut * 10000;\\n            uint256 denominator = (reserveOut - amountOut) * (10000 - swapFee);\\n            return numerator / denominator + 1;\\n        }\\n\\n        uint256 result;\\n        uint8 precision;\\n        uint256 baseD = reserveOut - amountOut;\\n        (result, precision) = power(reserveOut, baseD, tokenWeightOut, tokenWeightIn);\\n        uint256 baseReserveIn = reserveIn - 10000;\\n        uint256 temp1 = baseReserveIn - result;\\n        uint256 temp2 = baseReserveIn << precision;\\n        amountIn = ((temp1 - temp2) >> precision) / (10000 - swapFee) + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[0] = amountIn;\\n        address currentTokenIn = tokenIn;\\n        for (uint256 i = 0; i < path.length; i++) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getReserveAndWeights(path[i], currentTokenIn);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenOut, \\\"RequiemFormula: INVALID_TOKEN_OUT_PATH\\\");\\n    }\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[0] = amountIn;\\n        address currentTokenIn = tokenIn;\\n\\n        for (uint256 i = 0; i < path.length; i++) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getFactoryReserveAndWeights(\\n                factory,\\n                path[i],\\n                currentTokenIn\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenOut, \\\"RequiemFormula: INVALID_TOKEN_OUT_PATH\\\");\\n    }\\n\\n    function getPairAmountOut(\\n        address pair,\\n        address tokenIn,\\n        uint256 amountIn\\n    ) external view override returns (uint256 amountOut) {\\n        (, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getReserveAndWeights(pair, tokenIn);\\n        amountOut = getAmountOut(amountIn, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[amounts.length - 1] = amountOut;\\n        address currentTokenIn = tokenOut;\\n        for (uint256 i = path.length; i > 0; i--) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getReserveAndWeights(path[i - 1], currentTokenIn);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveOut, reserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenIn, \\\"RequiemFormula: INVALID_TOKEN_IN_PATH\\\");\\n    }\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view override returns (uint256[] memory amounts) {\\n        require(path.length > 0, \\\"RequiemFormula: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length + 1);\\n        amounts[amounts.length - 1] = amountOut;\\n        address currentTokenIn = tokenOut;\\n        for (uint256 i = path.length; i > 0; i--) {\\n            (address currentTokenOut, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getFactoryReserveAndWeights(\\n                factory,\\n                path[i - 1],\\n                currentTokenIn\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveOut, reserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n            currentTokenIn = currentTokenOut;\\n        }\\n        require(currentTokenIn == tokenIn, \\\"RequiemFormula: INVALID_TOKEN_IN_PATH\\\");\\n    }\\n\\n    function getPairAmountIn(\\n        address pair,\\n        address tokenIn,\\n        uint256 amountOut\\n    ) external view override returns (uint256 amountIn) {\\n        (, uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut, uint32 swapFee) = getReserveAndWeights(pair, tokenIn);\\n        amountIn = getAmountIn(amountOut, reserveOut, reserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n    }\\n\\n    function getWeightsAndSwapFee(address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        )\\n    {\\n        try IRequiemPair(pair).getTokenWeights() returns (uint32 _tokenWeight0, uint32 _tokenWeight1) {\\n            return (_tokenWeight0, _tokenWeight1, IRequiemPair(pair).getSwapFee());\\n        } catch Error(string memory reason) {\\n            revert(reason);\\n        } catch (\\n            bytes memory /*lowLevelData*/\\n        ) {\\n            return (50, 50, 30);\\n        }\\n    }\\n\\n    function getFactoryWeightsAndSwapFee(address factory, address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        )\\n    {\\n        return IRequiemFactory(factory).getWeightsAndSwapFee(pair);\\n    }\\n\\n    // Ensure constant value reserve0^(tokenWeight0/50) * reserve1^((100 - tokenWeight0)/50) <= balance0Adjusted^(tokenWeight0/50) * balance1Adjusted^((100 - tokenWeight0)/50)\\n    //  1 <= (balance0Adjusted / reserve0 )^(tokenWeight0/50) * (balance1Adjusted/reserve1)^((100 - tokenWeight0)/50)\\n    //  (reserve0 / balance0Adjusted) ^ (tokenWeight0/50) <=  (balance1Adjusted / reserve1) ^ ((100 - tokenWeight0)/50)\\n    function ensureConstantValue(\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 balance0Adjusted,\\n        uint256 balance1Adjusted,\\n        uint32 tokenWeight0\\n    ) external view override returns (bool) {\\n        if (tokenWeight0 == 50) {\\n            return balance0Adjusted*balance1Adjusted >= reserve0*reserve1;\\n        }\\n        if (balance0Adjusted >= reserve0 && balance1Adjusted >= reserve1) {\\n            return true;\\n        }\\n        if (balance0Adjusted <= reserve0 && balance1Adjusted <= reserve1) {\\n            return false;\\n        }\\n        uint32 w0 = tokenWeight0;\\n        uint32 w1 = 100 - w0;\\n\\n        uint256 r0;\\n        uint256 p0;\\n        uint256 r1;\\n        uint256 p1;\\n        if (balance0Adjusted >= reserve0) {\\n            (r0, p0) = power(reserve1, balance1Adjusted, w1, 50);\\n            (r1, p1) = power(balance0Adjusted, reserve0, w0, 50);\\n        } else {\\n            (r0, p0) = power(reserve0, balance0Adjusted, w0, 50);\\n            (r1, p1) = power(balance1Adjusted, reserve1, w1, 50);\\n        }\\n        uint256 minP = p0 < p1 ? p0 : p1;\\n        p0 = p0 - minP;\\n        p1 = p1 - minP;\\n        return (r0 >> p0) <= (r1 >> p1);\\n    }\\n\\n    function sortTokens(address tokenA, address tokenB) public pure override returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"RequiemFormula: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"RequiemFormula: ZERO_ADDRESS\\\");\\n    }\\n\\n    function getReserves(\\n        address pair,\\n        address tokenA,\\n        address tokenB\\n    ) external view override returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IRequiemPair(pair).getReserves();\\n        require(token0 == IRequiemPair(pair).token0() && token1 == IRequiemPair(pair).token1(), \\\"RequiemFormula: Invalid token\\\");\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    function getOtherToken(address pair, address tokenA) external view override returns (address tokenB) {\\n        address token0 = IRequiemPair(pair).token0();\\n        address token1 = IRequiemPair(pair).token1();\\n        require(token0 == tokenA || token1 == tokenA, \\\"RequiemFormula: Invalid tokenA\\\");\\n        tokenB = token0 == tokenA ? token1 : token0;\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure override returns (uint256 amountB) {\\n        require(amountA > 0, \\\"RequiemFormula: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"RequiemFormula: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = amountA * reserveB / reserveA;\\n    }\\n\\n    function mintLiquidityFee(\\n        uint256 totalLiquidity,\\n        uint112 reserve0,\\n        uint112 reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112 collectedFee0,\\n        uint112 collectedFee1\\n    ) external view override returns (uint256 amount) {\\n        if (collectedFee0 > 0) {\\n            (uint256 r0, uint256 p0) = power(uint256(collectedFee0) + reserve0, reserve0, tokenWeight0, 100);\\n            amount = amount + ((totalLiquidity * r0) >> p0) - totalLiquidity;\\n        }\\n        if (collectedFee1 > 0) {\\n            (uint256 r1, uint256 p1) = power(uint256(collectedFee1) + reserve1, reserve1, tokenWeight1, 100);\\n            amount = amount + ((totalLiquidity  * r1) >> p1) - totalLiquidity;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd056386a68e7bbc610be564d8e0864759a7ae9d5cdc8d45e59d7df9321b1e64\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x4c6cbede01f2adab66096cbfa9f82596da0b22f70a745e95a0af2cd9f87d1714\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\ninterface IRequiemFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint);\\n    function feeTo() external view returns (address);\\n    function formula() external view returns (address);\\n    function protocolFee() external view returns (uint);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function isPair(address) external view returns (bool);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external returns (address pair);\\n    function getWeightsAndSwapFee(address pair) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setProtocolFee(uint) external;\\n}\\n\",\"keccak256\":\"0x500ff0062150432105415e938dcaa0d64b666c224764c4cb901137ce45204b5d\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.5.16;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IRequiemFormula {\\n\\n    function getReserveAndWeights(address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getPairAmountIn(address pair, address tokenIn, uint amountOut) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getPairAmountOut(address pair, address tokenIn, uint amountIn) external view returns (uint amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x8a32e1c404f6a93f17cf6151173ff21fedb58abe50a6635cb10f47780f044c98\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IRequiemPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IRequiemERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemPair is IRequiemERC20 {\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n    function getSwapFee() external view returns (uint32);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address,\\n        address,\\n        uint32,\\n        uint32\\n    ) external;\\n}\\n\",\"keccak256\":\"0x81ff6bd4a679d53dec7084e8e98b0c3f611879700e3f47aaa74d5e4515cf2091\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80638888a737116100b2578063b19210b011610081578063b3923a9911610066578063b3923a9914610345578063ca22297914610358578063d69109371461036b57600080fd5b8063b19210b01461031f578063b33d96b01461033257600080fd5b80638888a737146102d35780638fabd82d146102e657806392aec23c146102f9578063ad615dec1461030c57600080fd5b80635bff1d9211610109578063671a11b5116100ee578063671a11b51461028a57806367f84adc1461029d57806379c91b37146102b057600080fd5b80635bff1d92146102065780636350d7741461026957600080fd5b8063119220a51461013b5780632bb66e1d14610164578063327494611461019e578063544caa56146101c6575b600080fd5b61014e6101493660046138b2565b6103a3565b60405161015b9190613937565b60405180910390f35b61017761017236600461397b565b6105cf565b6040805163ffffffff9485168152928416602084015292169181019190915260600161015b565b6101b16101ac3660046139b4565b610674565b6040805192835260208301919091520161015b565b6101d96101d436600461397b565b6108fa565b6040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301520161015b565b61021961021436600461397b565b610a4b565b6040805173ffffffffffffffffffffffffffffffffffffffff909716875260208701959095529385019290925263ffffffff908116606085015290811660808401521660a082015260c00161015b565b61027c6102773660046139ff565b610da5565b60405190815260200161015b565b61027c610298366004613a52565b610dde565b61014e6102ab3660046138b2565b610fb4565b6102c36102be366004613ab9565b6111c6565b604051901515815260200161015b565b61027c6102e13660046139ff565b6112eb565b61014e6102f4366004613b06565b611317565b61027c610307366004613b95565b61152a565b61027c61031a366004613c22565b611637565b61027c61032d366004613a52565b61174d565b6102196103403660046139b4565b611938565b61014e610353366004613b06565b611c49565b610177610366366004613c4e565b611e48565b61037e61037936600461397b565b611fdb565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161015b565b6060816103f75760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064015b60405180910390fd5b610402826001613c9a565b67ffffffffffffffff81111561041a5761041a613cb2565b604051908082528060200260200182016040528015610443578160200160208202803683370190505b509050838160008151811061045a5761045a613ce1565b60209081029190910101528560005b83811015610522576000806000806000806104ab8f8c8c8a81811061049057610490613ce1565b90506020020160208101906104a59190613c4e565b8a611938565b9550955095509550955095506104de8988815181106104cc576104cc613ce1565b60200260200101518686868686610dde565b896104ea896001613c9a565b815181106104fa576104fa613ce1565b602002602001018181525050859750505050505050808061051a90613d10565b915050610469565b508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105c45760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f4f5560448201527f545f50415448000000000000000000000000000000000000000000000000000060648201526084016103ee565b509695505050505050565b6040517fca22297900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152600091829182919086169063ca22297990602401606060405180830381865afa158015610643573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106679190613d49565b9250925092509250925092565b60008060008061068486866108fa565b915091506000808873ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156106d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fa9190613d8b565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508873ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e9190613dbc565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614801561086157508873ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561080e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108329190613dbc565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b6108ad5760405162461bcd60e51b815260206004820152601d60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e00000060448201526064016103ee565b8373ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146108e75780826108ea565b81815b909a909950975050505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561099f5760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a204944454e544943414c5f41444452455360448201527f534553000000000000000000000000000000000000000000000000000000000060648201526084016103ee565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106109d95782846109dc565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216610a445760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a205a45524f5f414444524553530000000060448201526064016103ee565b9250929050565b6000806000806000806000808973ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac69190613d8b565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600080610af78c611e48565b8097508193508294505050508b73ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b729190613dbc565b73ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff161415610c29578b73ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c149190613dbc565b99509297509095509350915084848484610d97565b8b73ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c989190613dbc565b73ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff161415610d4f578b73ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3a9190613dbc565b99509197509195509350915083858385610d97565b60405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e41000060448201526064016103ee565b505050509295509295509295565b600080600080600080610db88989610a4b565b9550955095509550955050610dd187858785878661174d565b9998505050505050505050565b6000808711610e555760405162461bcd60e51b815260206004820152602960248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f494e5060448201527f55545f414d4f554e54000000000000000000000000000000000000000000000060648201526084016103ee565b600086118015610e655750600085115b610ed75760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201527f554944495459000000000000000000000000000000000000000000000000000060648201526084016103ee565b6000610ee583612710613dd9565b610ef59063ffffffff1689613dfe565b90508363ffffffff168563ffffffff161415610f3e5780610f1888612710613dfe565b610f229190613c9a565b610f2c8288613dfe565b610f369190613e6a565b915050610faa565b6000808083610f4f8b612710613dfe565b610f599190613c9a565b9050610f7281610f6b8c612710613dfe565b8a8a6121ac565b90935091506000610f83848b613dfe565b905060ff83168a901b84610f978284613e7e565b610fa19190613e6a565b96505050505050505b9695505050505050565b6060816110035760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103ee565b61100e826001613c9a565b67ffffffffffffffff81111561102657611026613cb2565b60405190808252806020026020018201604052801561104f578160200160208202803683370190505b5090508381600183516110629190613e7e565b8151811061107257611072613ce1565b602090810291909101015284825b801561112457600080808080806110ad8f8c8c61109e60018c613e7e565b81811061049057610490613ce1565b9550955095509550955095506110e08988815181106110ce576110ce613ce1565b6020026020010151858785878661174d565b896110ec60018a613e7e565b815181106110fc576110fc613ce1565b602002602001018181525050859750505050505050808061111c90613e95565b915050611080565b508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105c45760405162461bcd60e51b815260206004820152602560248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f494e60448201527f5f5041544800000000000000000000000000000000000000000000000000000060648201526084016103ee565b60008163ffffffff16603214156111f4576111e18587613dfe565b6111eb8486613dfe565b101590506112e2565b8584101580156112045750848310155b15611211575060016112e2565b8584111580156112215750848311155b1561122e575060006112e2565b81600061123c826064613dd9565b90506000806000808b8a1061127a576112588b8a8760326121ac565b90945060ff16925061126d8a8d8860326121ac565b90925060ff1690506112a5565b6112878c8b8860326121ac565b90945060ff16925061129c898c8760326121ac565b90925060ff1690505b60008184106112b457816112b6565b835b90506112c28185613e7e565b93506112ce8183613e7e565b9290921c9390921c92909211159450505050505b95945050505050565b6000806000806000806112fe8989610a4b565b9550955095509550955050610dd1878686868686610dde565b6060816113665760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103ee565b611371826001613c9a565b67ffffffffffffffff81111561138957611389613cb2565b6040519080825280602002602001820160405280156113b2578160200160208202803683370190505b50905083816000815181106113c9576113c9613ce1565b60209081029190910101528560005b8381101561147e576000806000806000806114198b8b898181106113fe576113fe613ce1565b90506020020160208101906114139190613c4e565b89610a4b565b95509550955095509550955061143a8988815181106104cc576104cc613ce1565b89611446896001613c9a565b8151811061145657611456613ce1565b602002602001018181525050859750505050505050808061147690613d10565b9150506113d8565b508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146115205760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f4f5560448201527f545f50415448000000000000000000000000000000000000000000000000000060648201526084016103ee565b5095945050505050565b60006dffffffffffffffffffffffffffff8316156115ac5760008061157e6115656dffffffffffffffffffffffffffff808c16908816613c9a565b8a6dffffffffffffffffffffffffffff168960646121ac565b90925060ff16905089816115928483613dfe565b61159d911c85613c9a565b6115a79190613e7e565b925050505b6dffffffffffffffffffffffffffff82161561162c576000806115fe6115e56dffffffffffffffffffffffffffff808b16908716613c9a565b896dffffffffffffffffffffffffffff168860646121ac565b90925060ff16905089816116128483613dfe565b61161d911c85613c9a565b6116279190613e7e565b925050505b979650505050505050565b60008084116116ae5760405162461bcd60e51b815260206004820152602360248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f414d4f60448201527f554e54000000000000000000000000000000000000000000000000000000000060648201526084016103ee565b6000831180156116be5750600082115b6117305760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201527f554944495459000000000000000000000000000000000000000000000000000060648201526084016103ee565b8261173b8386613dfe565b6117459190613e6a565b949350505050565b60008087116117c45760405162461bcd60e51b815260206004820152602a60248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4f555460448201527f5055545f414d4f554e540000000000000000000000000000000000000000000060648201526084016103ee565b6000861180156117d45750600085115b6118465760405162461bcd60e51b815260206004820152602660248201527f5265717569656d466f726d756c613a20494e53554646494349454e545f4c495160448201527f554944495459000000000000000000000000000000000000000000000000000060648201526084016103ee565b8263ffffffff168463ffffffff1614156118bc5760006118668888613dfe565b61187290612710613dfe565b9050600061188284612710613dd9565b63ffffffff166118928a89613e7e565b61189c9190613dfe565b90506118a88183613e6a565b6118b3906001613c9a565b92505050610faa565b600080806118ca8a89613e7e565b90506118d88882888a6121ac565b909350915060006118eb6127108b613e7e565b905060006118f98583613e7e565b905060ff841682901b61190e88612710613dd9565b63ffffffff1660ff86166119228385613e7e565b61192d92911c613e6a565b610fa1906001613c9a565b6000806000806000806000808973ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561198f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b39190613d8b565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000806119e58d8d6105cf565b8097508193508294505050508b73ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a609190613dbc565b73ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff161415611b17578b73ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ade573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b029190613dbc565b99509297509095509350915084848484611c39565b8b73ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b869190613dbc565b73ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff161415610d4f578b73ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c289190613dbc565b995091975091955093509150838583855b5050505093975093979195509350565b606081611c985760405162461bcd60e51b815260206004820152601c60248201527f5265717569656d466f726d756c613a20494e56414c49445f504154480000000060448201526064016103ee565b611ca3826001613c9a565b67ffffffffffffffff811115611cbb57611cbb613cb2565b604051908082528060200260200182016040528015611ce4578160200160208202803683370190505b509050838160018351611cf79190613e7e565b81518110611d0757611d07613ce1565b602090810291909101015284825b8015611da65760008080808080611d418b8b611d3260018b613e7e565b8181106113fe576113fe613ce1565b955095509550955095509550611d628988815181106110ce576110ce613ce1565b89611d6e60018a613e7e565b81518110611d7e57611d7e613ce1565b6020026020010181815250508597505050505050508080611d9e90613e95565b915050611d15565b508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146115205760405162461bcd60e51b815260206004820152602560248201527f5265717569656d466f726d756c613a20494e56414c49445f544f4b454e5f494e60448201527f5f5041544800000000000000000000000000000000000000000000000000000060648201526084016103ee565b60008060008373ffffffffffffffffffffffffffffffffffffffff166332bfe4696040518163ffffffff1660e01b81526004016040805180830381865afa925050508015611ed1575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611ece91810190613eca565b60015b611f5a57611edd613ef9565b806308c379a01415611f175750611ef2613f87565b80611efd5750611f19565b8060405162461bcd60e51b81526004016103ee919061402f565b505b3d808015611f43576040519150601f19603f3d011682016040523d82523d6000602084013e611f48565b606091505b50603280601e93509350935050611fd4565b81818773ffffffffffffffffffffffffffffffffffffffff1663d4cadf686040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fcb91906140a2565b94509450945050505b9193909250565b6000808373ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204d9190613dbc565b905060008473ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561209c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c09190613dbc565b90508373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061212757508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b6121735760405162461bcd60e51b815260206004820152601e60248201527f5265717569656d466f726d756c613a20496e76616c696420746f6b656e41000060448201526064016103ee565b8373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461174557816112e2565b600080848610156121ff5760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420737570706f7274205f626173654e203c205f6261736544000000000060448201526064016103ee565b700200000000000000000000000000000000861061221c57600080fd5b6000808661222e6001607f1b8a613dfe565b6122389190613e6a565b905070015bf0a8b1457695355fb8ac404e7a79e38110156122635761225c81612303565b915061226f565b61226c81612939565b91505b60008563ffffffff168763ffffffff168461228a9190613dfe565b6122949190613e6a565b90507008000000000000000000000000000000008110156122c6576122b881612a48565b607f945094505050506122fa565b60006122d1826130ca565b90506122ed6122e182607f6140bf565b60ff1683901c8261317d565b955093506122fa92505050565b94509492505050565b6000808080806fd3094c70f034de4b96ff7d5b6f99fcd886106123685761233a6f4000000000000000000000000000000085613c9a565b93506fd3094c70f034de4b96ff7d5b6f99fcd861235b6001607f1b88613dfe565b6123659190613e6a565b95505b6fa45af1e1f40c333b3de1db4dd55f29a786106123c7576123996f2000000000000000000000000000000085613c9a565b93506fa45af1e1f40c333b3de1db4dd55f29a76123ba6001607f1b88613dfe565b6123c49190613e6a565b95505b6f910b022db7ae67ce76b441c27035c6a18610612426576123f86f1000000000000000000000000000000085613c9a565b93506f910b022db7ae67ce76b441c27035c6a16124196001607f1b88613dfe565b6124239190613e6a565b95505b6f88415abbe9a76bead8d00cf112e4d4a88610612485576124576f0800000000000000000000000000000085613c9a565b93506f88415abbe9a76bead8d00cf112e4d4a86124786001607f1b88613dfe565b6124829190613e6a565b95505b6f84102b00893f64c705e841d5d4064bd386106124e4576124b66f0400000000000000000000000000000085613c9a565b93506f84102b00893f64c705e841d5d4064bd36124d76001607f1b88613dfe565b6124e19190613e6a565b95505b6f8204055aaef1c8bd5c3259f4822735a28610612543576125156f0200000000000000000000000000000085613c9a565b93506f8204055aaef1c8bd5c3259f4822735a26125366001607f1b88613dfe565b6125409190613e6a565b95505b6f810100ab00222d861931c15e39b44e9986106125a2576125746f0100000000000000000000000000000085613c9a565b93506f810100ab00222d861931c15e39b44e996125956001607f1b88613dfe565b61259f9190613e6a565b95505b6f808040155aabbbe9451521693554f7338610612600576125d26e80000000000000000000000000000085613c9a565b93506f808040155aabbbe9451521693554f7336125f36001607f1b88613dfe565b6125fd9190613e6a565b95505b61260e6001607f1b87613e7e565b92508291506001607f1b6126228380613dfe565b61262c9190613e6a565b905070010000000000000000000000000000000061264a8482613e7e565b6126549084613dfe565b61265e9190613e6a565b6126689085613c9a565b93506001607f1b6126798284613dfe565b6126839190613e6a565b91507002000000000000000000000000000000006126b1846faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa613e7e565b6126bb9084613dfe565b6126c59190613e6a565b6126cf9085613c9a565b93506001607f1b6126e08284613dfe565b6126ea9190613e6a565b9150700300000000000000000000000000000000612718846f99999999999999999999999999999999613e7e565b6127229084613dfe565b61272c9190613e6a565b6127369085613c9a565b93506001607f1b6127478284613dfe565b6127519190613e6a565b915070040000000000000000000000000000000061277f846f92492492492492492492492492492492613e7e565b6127899084613dfe565b6127939190613e6a565b61279d9085613c9a565b93506001607f1b6127ae8284613dfe565b6127b89190613e6a565b91507005000000000000000000000000000000006127e6846f8e38e38e38e38e38e38e38e38e38e38e613e7e565b6127f09084613dfe565b6127fa9190613e6a565b6128049085613c9a565b93506001607f1b6128158284613dfe565b61281f9190613e6a565b915070060000000000000000000000000000000061284d846f8ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b613e7e565b6128579084613dfe565b6128619190613e6a565b61286b9085613c9a565b93506001607f1b61287c8284613dfe565b6128869190613e6a565b91507007000000000000000000000000000000006128b4846f89d89d89d89d89d89d89d89d89d89d89613e7e565b6128be9084613dfe565b6128c89190613e6a565b6128d29085613c9a565b93506001607f1b6128e38284613dfe565b6128ed9190613e6a565b915070080000000000000000000000000000000061291b846f88888888888888888888888888888888613e7e565b6129259084613dfe565b61292f9190613e6a565b610faa9085613c9a565b600080700100000000000000000000000000000000831061298a57600061296c6129676001607f1b86613e6a565b6137db565b60ff811694851c94909150612986906001607f1b90613dfe565b9150505b6001607f1b831115612a0c57607f5b60ff811615612a0a576001607f1b6129b18580613dfe565b6129bb9190613e6a565b935070010000000000000000000000000000000084106129fa57600193841c936129e590826140bf565b60ff166001901b826129f79190613c9a565b91505b612a03816140e2565b9050612999565b505b6f05b9de1d10bf4103d647b0955897ba80612a376f03f80fe03f80fe03f80fe03f80fe03f883613dfe565b612a419190613e6a565b9392505050565b6000808080612a676f100000000000000000000000000000008661411d565b91508190506001607f1b612a7b8280613dfe565b612a859190613e6a565b9050612a99816710e1b3be415a0000613dfe565b612aa39084613c9a565b92506001607f1b612ab48383613dfe565b612abe9190613e6a565b9050612ad2816705a0913f6b1e0000613dfe565b612adc9084613c9a565b92506001607f1b612aed8383613dfe565b612af79190613e6a565b9050612b0b81670168244fdac78000613dfe565b612b159084613c9a565b92506001607f1b612b268383613dfe565b612b309190613e6a565b9050612b4381664807432bc18000613dfe565b612b4d9084613c9a565b92506001607f1b612b5e8383613dfe565b612b689190613e6a565b9050612b7b81660c0135dca04000613dfe565b612b859084613c9a565b92506001607f1b612b968383613dfe565b612ba09190613e6a565b9050612bb3816601b707b1cdc000613dfe565b612bbd9084613c9a565b92506001607f1b612bce8383613dfe565b612bd89190613e6a565b9050612bea816536e0f639b800613dfe565b612bf49084613c9a565b92506001607f1b612c058383613dfe565b612c0f9190613e6a565b9050612c2181650618fee9f800613dfe565b612c2b9084613c9a565b92506001607f1b612c3c8383613dfe565b612c469190613e6a565b9050612c5781649c197dcc00613dfe565b612c619084613c9a565b92506001607f1b612c728383613dfe565b612c7c9190613e6a565b9050612c8d81640e30dce400613dfe565b612c979084613c9a565b92506001607f1b612ca88383613dfe565b612cb29190613e6a565b9050612cc38164012ebd1300613dfe565b612ccd9084613c9a565b92506001607f1b612cde8383613dfe565b612ce89190613e6a565b9050612cf8816317499f00613dfe565b612d029084613c9a565b92506001607f1b612d138383613dfe565b612d1d9190613e6a565b9050612d2d816301a9d480613dfe565b612d379084613c9a565b92506001607f1b612d488383613dfe565b612d529190613e6a565b9050612d6181621c6380613dfe565b612d6b9084613c9a565b92506001607f1b612d7c8383613dfe565b612d869190613e6a565b9050612d95816201c638613dfe565b612d9f9084613c9a565b92506001607f1b612db08383613dfe565b612dba9190613e6a565b9050612dc881611ab8613dfe565b612dd29084613c9a565b92506001607f1b612de38383613dfe565b612ded9190613e6a565b9050612dfb8161017c613dfe565b612e059084613c9a565b92506001607f1b612e168383613dfe565b612e209190613e6a565b9050612e2d816014613dfe565b612e379084613c9a565b92506001607f1b612e488383613dfe565b612e529190613e6a565b9050612e5f816001613dfe565b612e699084613c9a565b92506001607f1b82612e836721c3677c82b4000086613e6a565b612e8d9190613c9a565b612e979190613c9a565b92506f10000000000000000000000000000000851615612eeb5770018ebef9eac820ae8682b9793ac6d1e776612ede847001c3d6a24ed82218787d624d3e5eba95f9613dfe565b612ee89190613e6a565b92505b6f20000000000000000000000000000000851615612f3d577001368b2fc6f9609fe7aceb46aa619baed4612f308470018ebef9eac820ae8682b9793ac6d1e778613dfe565b612f3a9190613e6a565b92505b6f40000000000000000000000000000000851615612f8e576fbc5ab1b16779be3575bd8f0520a9f21f612f81847001368b2fc6f9609fe7aceb46aa619baed5613dfe565b612f8b9190613e6a565b92505b6001607f1b851615612fd2576f454aaa8efe072e7f6ddbab84b40a55c9612fc5846fbc5ab1b16779be3575bd8f0520a9f21e613dfe565b612fcf9190613e6a565b92505b700100000000000000000000000000000000851615613023576f0960aadc109e7a3bf4578099615711ea613016846f454aaa8efe072e7f6ddbab84b40a55c5613dfe565b6130209190613e6a565b92505b700200000000000000000000000000000000851615613073576e2bf84208204f5977f9a8cf01fdce3d613066846f0960aadc109e7a3bf4578099615711d7613dfe565b6130709190613e6a565b92505b7004000000000000000000000000000000008516156130c1576d03c6ab775dd0b95b4cbee7e65d116130b4846e2bf84208204f5977f9a8cf01fdc307613dfe565b6130be9190613e6a565b92505b50909392505050565b60006020607f5b60ff81166130e0836001614131565b60ff16101561313357600060026130f78385614131565b6131019190614156565b90508460008260ff166080811061311a5761311a613ce1565b0154106131295780925061312d565b8091505b506130d1565b8360008260ff166080811061314a5761314a613ce1565b015410613158579392505050565b8360008360ff166080811061316f5761316f613ce1565b015410610136575092915050565b6000828160ff841661318f8380613dfe565b901c91506131ad826f03442c4e6074a82f1797f72ac0000000613dfe565b6131b79082613c9a565b905060ff84166131c78684613dfe565b901c91506131e5826f0116b96f757c380fb287fd0e40000000613dfe565b6131ef9082613c9a565b905060ff84166131ff8684613dfe565b901c915061321c826e45ae5bdd5f0e03eca1ff4390000000613dfe565b6132269082613c9a565b905060ff84166132368684613dfe565b901c9150613253826e0defabf91302cd95b9ffda50000000613dfe565b61325d9082613c9a565b905060ff841661326d8684613dfe565b901c915061328a826e02529ca9832b22439efff9b8000000613dfe565b6132949082613c9a565b905060ff84166132a48684613dfe565b901c91506132c0826d54f1cf12bd04e516b6da88000000613dfe565b6132ca9082613c9a565b905060ff84166132da8684613dfe565b901c91506132f6826d0a9e39e257a09ca2d6db51000000613dfe565b6133009082613c9a565b905060ff84166133108684613dfe565b901c915061332c826d012e066e7b839fa050c309000000613dfe565b6133369082613c9a565b905060ff84166133468684613dfe565b901c9150613361826c1e33d7d926c329a1ad1a800000613dfe565b61336b9082613c9a565b905060ff841661337b8684613dfe565b901c9150613396826c02bee513bdb4a6b19b5f800000613dfe565b6133a09082613c9a565b905060ff84166133b08684613dfe565b901c91506133ca826b3a9316fa79b88eccf2a00000613dfe565b6133d49082613c9a565b905060ff84166133e48684613dfe565b901c91506133fe826b048177ebe1fa812375200000613dfe565b6134089082613c9a565b905060ff84166134188684613dfe565b901c9150613431826a5263fe90242dcbacf00000613dfe565b61343b9082613c9a565b905060ff841661344b8684613dfe565b901c9150613464826a057e22099c030d94100000613dfe565b61346e9082613c9a565b905060ff841661347e8684613dfe565b901c9150613496826957e22099c030d9410000613dfe565b6134a09082613c9a565b905060ff84166134b08684613dfe565b901c91506134c88269052b6b54569976310000613dfe565b6134d29082613c9a565b905060ff84166134e28684613dfe565b901c91506134f982684985f67696bf748000613dfe565b6135039082613c9a565b905060ff84166135138684613dfe565b901c915061352a826803dea12ea99e498000613dfe565b6135349082613c9a565b905060ff84166135448684613dfe565b901c915061355a826731880f2214b6e000613dfe565b6135649082613c9a565b905060ff84166135748684613dfe565b901c915061358a8267025bcff56eb36000613dfe565b6135949082613c9a565b905060ff84166135a48684613dfe565b901c91506135b982661b722e10ab1000613dfe565b6135c39082613c9a565b905060ff84166135d38684613dfe565b901c91506135e8826601317c70077000613dfe565b6135f29082613c9a565b905060ff84166136028684613dfe565b901c915061361682650cba84aafa00613dfe565b6136209082613c9a565b905060ff84166136308684613dfe565b901c9150613643826482573a0a00613dfe565b61364d9082613c9a565b905060ff841661365d8684613dfe565b901c9150613670826405035ad900613dfe565b61367a9082613c9a565b905060ff841661368a8684613dfe565b901c915061369c82632f881b00613dfe565b6136a69082613c9a565b905060ff84166136b68684613dfe565b901c91506136c8826301b29340613dfe565b6136d29082613c9a565b905060ff84166136e28684613dfe565b901c91506136f382620efc40613dfe565b6136fd9082613c9a565b905060ff841661370d8684613dfe565b901c915061371d82617fe0613dfe565b6137279082613c9a565b905060ff84166137378684613dfe565b901c915061374782610420613dfe565b6137519082613c9a565b905060ff84166137618684613dfe565b901c9150613770826021613dfe565b61377a9082613c9a565b905060ff841661378a8684613dfe565b901c9150613799826001613dfe565b6137a39082613c9a565b9050600160ff85161b856137c76f0688589cc0e9505e2f2fee558000000084613e6a565b6137d19190613c9a565b6112e29190613c9a565b60008061010083101561380e575b600183111561380957600192831c926138029082614131565b90506137e9565b613842565b60805b60ff81161561384057600160ff82161b84106138355760ff81169390931c92908117905b60011c607f16613811565b505b92915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461386a57600080fd5b50565b60008083601f84011261387f57600080fd5b50813567ffffffffffffffff81111561389757600080fd5b6020830191508360208260051b8501011115610a4457600080fd5b60008060008060008060a087890312156138cb57600080fd5b86356138d681613848565b955060208701356138e681613848565b945060408701356138f681613848565b935060608701359250608087013567ffffffffffffffff81111561391957600080fd5b61392589828a0161386d565b979a9699509497509295939492505050565b6020808252825182820181905260009190848201906040850190845b8181101561396f57835183529284019291840191600101613953565b50909695505050505050565b6000806040838503121561398e57600080fd5b823561399981613848565b915060208301356139a981613848565b809150509250929050565b6000806000606084860312156139c957600080fd5b83356139d481613848565b925060208401356139e481613848565b915060408401356139f481613848565b809150509250925092565b600080600060608486031215613a1457600080fd5b8335613a1f81613848565b92506020840135613a2f81613848565b929592945050506040919091013590565b63ffffffff8116811461386a57600080fd5b60008060008060008060c08789031215613a6b57600080fd5b8635955060208701359450604087013593506060870135613a8b81613a40565b92506080870135613a9b81613a40565b915060a0870135613aab81613a40565b809150509295509295509295565b600080600080600060a08688031215613ad157600080fd5b853594506020860135935060408601359250606086013591506080860135613af881613a40565b809150509295509295909350565b600080600080600060808688031215613b1e57600080fd5b8535613b2981613848565b94506020860135613b3981613848565b935060408601359250606086013567ffffffffffffffff811115613b5c57600080fd5b613b688882890161386d565b969995985093965092949392505050565b6dffffffffffffffffffffffffffff8116811461386a57600080fd5b600080600080600080600060e0888a031215613bb057600080fd5b873596506020880135613bc281613b79565b95506040880135613bd281613b79565b94506060880135613be281613a40565b93506080880135613bf281613a40565b925060a0880135613c0281613b79565b915060c0880135613c1281613b79565b8091505092959891949750929550565b600080600060608486031215613c3757600080fd5b505081359360208301359350604090920135919050565b600060208284031215613c6057600080fd5b8135612a4181613848565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115613cad57613cad613c6b565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613d4257613d42613c6b565b5060010190565b600080600060608486031215613d5e57600080fd5b8351613d6981613a40565b6020850151909350613d7a81613a40565b60408501519092506139f481613a40565b600080600060608486031215613da057600080fd5b8351613dab81613b79565b6020850151909350613d7a81613b79565b600060208284031215613dce57600080fd5b8151612a4181613848565b600063ffffffff83811690831681811015613df657613df6613c6b565b039392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613e3657613e36613c6b565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082613e7957613e79613e3b565b500490565b600082821015613e9057613e90613c6b565b500390565b600081613ea457613ea4613c6b565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60008060408385031215613edd57600080fd5b8251613ee881613a40565b60208401519092506139a981613a40565b600060033d1115613f125760046000803e5060005160e01c5b90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff82111715613f80577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040525050565b600060443d1015613f955790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff8160248401118184111715613fe357505050505090565b8285019150815181811115613ffb5750505050505090565b843d87010160208285010111156140155750505050505090565b61402460208286010187613f15565b509095945050505050565b600060208083528351808285015260005b8181101561405c57858101830151858201604001528201614040565b8181111561406e576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6000602082840312156140b457600080fd5b8151612a4181613a40565b600060ff821660ff8416808210156140d9576140d9613c6b565b90039392505050565b600060ff8216806140f5576140f5613c6b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b60008261412c5761412c613e3b565b500690565b600060ff821660ff84168060ff0382111561414e5761414e613c6b565b019392505050565b600060ff83168061416957614169613e3b565b8060ff8416049150509291505056fea26469706673582212209cf3b196250937bd11c893005768f0b3ccaf720e1a26b26f6a0c6a0fd6dca8f864736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAmountIn(uint256,uint256,uint256,uint32,uint32,uint32)": {
        "details": "given an output amount of an asset and pair reserves, returns a required input amount of the other asset Formula: return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)",
        "params": {
          "amountOut": "target reserve amount",
          "reserveIn": "source reserve balance",
          "reserveOut": "target reserve balance",
          "swapFee": "swap fee of the conversion",
          "tokenWeightIn": "source reserve weight, represented in ppm (2-98)",
          "tokenWeightOut": "target reserve weight, represented in ppm (2-98)"
        },
        "returns": {
          "amountIn": "amountIn"
        }
      },
      "getAmountOut(uint256,uint256,uint256,uint32,uint32,uint32)": {
        "details": "given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset, Formula: return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))",
        "params": {
          "amountIn": "source reserve amount",
          "reserveIn": "source reserve balance",
          "reserveOut": "target reserve balance",
          "swapFee": "swap fee of the conversion",
          "tokenWeightIn": "source reserve weight, represented in ppm (2-98)",
          "tokenWeightOut": "target reserve weight, represented in ppm (2-98)"
        },
        "returns": {
          "amountOut": "amountOut"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1589,
        "contract": "contracts/RequiemFormula.sol:RequiemFormula",
        "label": "maxExpArray",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)128_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)128_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[128]",
        "numberOfBytes": "4096"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}