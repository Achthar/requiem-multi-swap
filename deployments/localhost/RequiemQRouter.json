{
  "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "output",
          "type": "address"
        }
      ],
      "name": "Exchange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "createPairETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRequiemRouter.Swap[][]",
          "name": "swapSequences",
          "type": "tuple[][]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "multihopBatchSwapExactIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRequiemRouter.Swap[][]",
          "name": "swapSequences",
          "type": "tuple[][]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "multihopBatchSwapExactOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "structure",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            }
          ],
          "internalType": "struct IRequiemSwap.QSwapStep[]",
          "name": "params",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountLast",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "structure",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            }
          ],
          "internalType": "struct IRequiemSwap.QSwapStep[]",
          "name": "params",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountLast",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "structure",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            }
          ],
          "internalType": "struct IRequiemSwap.QSwapStep[]",
          "name": "params",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "structure",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            }
          ],
          "internalType": "struct IRequiemSwap.QSwapStep[]",
          "name": "params",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETHSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approveMax",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "removeLiquidityWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETHSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc50bdf558c8d6b179396cb9d99f6cde007007cb8e641e98cd8c60d84f200c280",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
    "transactionIndex": 0,
    "gasUsed": "5179527",
    "logsBloom": "0x
    "blockHash": "0xb1575b17f3dc520d0255cddb0457fc45ef4abaf717df9914350a3532b610ce01",
    "transactionHash": "0xc50bdf558c8d6b179396cb9d99f6cde007007cb8e641e98cd8c60d84f200c280",
    "logs": [],
    "blockNumber": 13,
    "cumulativeGasUsed": "5179527",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9"
  ],
  "solcInputHash": "bda2c24233cb9e4c01414279d500fda4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"output\",\"type\":\"address\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"createPairETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IRequiemRouter.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IRequiemRouter.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"structure\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct IRequiemSwap.QSwapStep[]\",\"name\":\"params\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLast\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"structure\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct IRequiemSwap.QSwapStep[]\",\"name\":\"params\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLast\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"structure\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct IRequiemSwap.QSwapStep[]\",\"name\":\"params\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"structure\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct IRequiemSwap.QSwapStep[]\",\"name\":\"params\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETHSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemQRouter.sol\":\"RequiemQRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/RequiemQRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"./interfaces/IRequiemFactory.sol\\\";\\nimport \\\"./interfaces/IRequiemFormula.sol\\\";\\nimport \\\"./interfaces/IRequiemPair.sol\\\";\\nimport \\\"./interfaces/IRequiemSwap.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IRequiemRouter.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\ncontract RequiemQRouter is IRequiemRouter {\\n    using SafeMath for uint256;\\n    address public immutable override factory;\\n    address public immutable override formula;\\n    address public immutable override WETH;\\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"Router: EXPIRED\\\");\\n        _;\\n    }\\n\\n    constructor(address _factory, address _WETH) {\\n        factory = _factory;\\n        formula = IRequiemFactory(_factory).formula();\\n        WETH = _WETH;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH);\\n        // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    // **** ADD LIQUIDITY ****\\n    function _addLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin\\n    ) internal virtual returns (uint256 amountA, uint256 amountB) {\\n        (uint256 reserveA, uint256 reserveB) = IRequiemFormula(formula).getReserves(pair, tokenA, tokenB);\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n        } else {\\n            uint256 amountBOptimal = IRequiemFormula(formula).quote(amountADesired, reserveA, reserveB);\\n            if (amountBOptimal <= amountBDesired) {\\n                require(amountBOptimal >= amountBMin, \\\"Router: INSUFFICIENT_B_AMOUNT\\\");\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n            } else {\\n                uint256 amountAOptimal = IRequiemFormula(formula).quote(amountBDesired, reserveB, reserveA);\\n                assert(amountAOptimal <= amountADesired);\\n                require(amountAOptimal >= amountAMin, \\\"Router: INSUFFICIENT_A_AMOUNT\\\");\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n            }\\n        }\\n    }\\n\\n    function _addLiquidityToken(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin\\n    ) internal returns (uint256 amountA, uint256 amountB) {\\n        (amountA, amountB) = _addLiquidity(pair, tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\n    }\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee,\\n        address to\\n    ) public virtual override returns (uint256 liquidity) {\\n        address pair = IRequiemFactory(factory).createPair(tokenA, tokenB, tokenWeightA, swapFee);\\n        _addLiquidityToken(pair, tokenA, tokenB, amountA, amountB, 0, 0);\\n        liquidity = IRequiemPair(pair).mint(to);\\n    }\\n\\n    function addLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        virtual\\n        override\\n        ensure(deadline)\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        )\\n    {\\n        (amountA, amountB) = _addLiquidityToken(pair, tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\\n        liquidity = IRequiemPair(pair).mint(to);\\n    }\\n\\n    function _addLiquidityETH(\\n        address pair,\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to\\n    )\\n        internal\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        )\\n    {\\n        (amountToken, amountETH) = _addLiquidity(pair, token, WETH, amountTokenDesired, msg.value, amountTokenMin, amountETHMin);\\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\\n        transferETHTo(amountETH, pair);\\n        liquidity = IRequiemPair(pair).mint(to);\\n        // refund dust eth, if any\\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\\n    }\\n\\n    function createPairETH(\\n        address token,\\n        uint256 amountToken,\\n        uint32 tokenWeight,\\n        uint32 swapFee,\\n        address to\\n    ) public payable virtual override returns (uint256 liquidity) {\\n        address pair = IRequiemFactory(factory).createPair(token, WETH, tokenWeight, swapFee);\\n        (, , liquidity) = _addLiquidityETH(pair, token, amountToken, 0, 0, to);\\n    }\\n\\n    function addLiquidityETH(\\n        address pair,\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        public\\n        payable\\n        virtual\\n        override\\n        ensure(deadline)\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        )\\n    {\\n        (amountToken, amountETH, liquidity) = _addLiquidityETH(pair, token, amountTokenDesired, amountTokenMin, amountETHMin, to);\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        address tokenIn,\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        address input = tokenIn;\\n        for (uint256 i = 0; i < path.length; i++) {\\n            IRequiemPair pairV2 = IRequiemPair(path[i]);\\n            address token0 = pairV2.token0();\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out, address output) = input == token0 ? (uint256(0), amountOut, pairV2.token1()) : (amountOut, uint256(0), token0);\\n            address to = i < path.length - 1 ? path[i + 1] : _to;\\n            pairV2.swap(amount0Out, amount1Out, to, new bytes(0));\\n            emit Exchange(address(pairV2), amountOut, output);\\n            input = output;\\n        }\\n    }\\n\\n    function swapExactTokensForTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) public virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _validateAmountOut(tokenIn, tokenOut, amountIn, amountOutMin, path);\\n\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\\n        _swap(tokenIn, amounts, path, to);\\n    }\\n\\n    function onSwapExactTokensForTokens(\\n        IRequiemSwap.QSwapStep[] memory params,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to,\\n        uint256 deadline\\n    ) public virtual ensure(deadline) returns (uint256 amountLast) {\\n        amountLast = amountIn;\\n        TransferHelper.safeTransferFrom(params[0].tokenIn, msg.sender, params[0].pool, amountIn);\\n        for (uint256 i = 0; i < params.length; i++) {\\n            address _to = i == params.length - 1 ? to : params[i + 1].pool;\\n            if (params[i].structure == 0) {\\n                uint256 _amountIn = amountLast;\\n                amountLast = IRequiemSwap(params[i].pool).calculateSwapGivenIn(params[i].tokenIn, params[i].tokenOut, amountLast);\\n                IRequiemSwap(params[i].pool).onSwapGivenIn(params[i].tokenIn, params[i].tokenOut, _amountIn, amountLast, _to);\\n            } else {\\n                amountLast = IRequiemSwap(params[i].pool).onSwapGivenIn(params[i].tokenIn, params[i].tokenOut, amountLast, 0, _to);\\n            }\\n        }\\n        require(amountOutMin <= amountLast, \\\"INSUFFICIENT_OUTPUT\\\");\\n    }\\n\\n    function onSwapTokensForExactTokens(\\n        IRequiemSwap.QSwapStep[] memory params,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to,\\n        uint256 deadline\\n    ) external virtual ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = new uint256[](params.length + 1);\\n        amounts[params.length] = amountOut;\\n        for (uint256 i = amounts.length - 1; i > 0; i--) {\\n            amounts[i - 1] = IRequiemSwap(params[i - 1].pool).calculateSwapGivenOut(params[i - 1].tokenIn, params[i - 1].tokenOut, amounts[i]);\\n        }\\n        require(amounts[0] <= amountInMax, \\\"EXCESSIVE_INPUT\\\");\\n        TransferHelper.safeTransferFrom(params[0].tokenIn, msg.sender, params[0].pool, amounts[0]);\\n\\n        for (uint8 i = 0; i < params.length; i++) {\\n            address _to = i == params.length - 1 ? to : params[i + 1].pool;\\n            IRequiemSwap(params[i].pool).onSwapGivenIn(params[i].tokenIn, params[i].tokenOut, amounts[i], params[i].structure == 0 ? amounts[i + 1] : 0, _to);\\n        }\\n    }\\n\\n    function onSwapExactETHForTokens(\\n        IRequiemSwap.QSwapStep[] memory params,\\n        uint256 amountOutMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual ensure(deadline) returns (uint256 amountLast) {\\n        uint256 _amountIn = msg.value;\\n        transferETHTo(msg.value, params[0].pool);\\n        amountLast = IRequiemSwap(params[0].pool).calculateSwapGivenIn(params[0].tokenIn, params[0].tokenOut, _amountIn);\\n        IRequiemSwap(params[0].pool).onSwapGivenIn(params[0].tokenIn, params[0].tokenOut, _amountIn, amountLast, params[1].pool);\\n        for (uint8 i = 1; i < params.length; i++) {\\n            address _to = i == params.length - 1 ? to : params[i + 1].pool;\\n            if (params[i].structure == 0) {\\n                _amountIn = amountLast;\\n                amountLast = IRequiemSwap(params[i].pool).calculateSwapGivenIn(params[i].tokenIn, params[i].tokenOut, amountLast);\\n                IRequiemSwap(params[i].pool).onSwapGivenIn(params[i].tokenIn, params[i].tokenOut, _amountIn, amountLast, _to);\\n            } else {\\n                amountLast = IRequiemSwap(params[i].pool).onSwapGivenIn(params[i].tokenIn, params[i].tokenOut, amountLast, 0, _to);\\n            }\\n        }\\n        require(amountOutMin <= amountLast, \\\"INSUFFICIENT_OUTPUT\\\");\\n    }\\n\\n    function onSwapTokensForExactETH(\\n        IRequiemSwap.QSwapStep[] memory params,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to,\\n        uint256 deadline\\n    ) external virtual ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = new uint256[](params.length + 1);\\n        amounts[params.length] = amountOut;\\n        for (uint256 i = amounts.length - 1; i > 0; i--) {\\n            amounts[i - 1] = IRequiemSwap(params[i - 1].pool).calculateSwapGivenOut(params[i - 1].tokenIn, params[i - 1].tokenOut, amounts[i]);\\n        }\\n        require(amounts[0] <= amountInMax, \\\"EXCESSIVE_INPUT\\\");\\n        TransferHelper.safeTransferFrom(params[0].tokenIn, msg.sender, params[0].pool, amounts[0]);\\n\\n        for (uint8 i = 0; i < params.length - 1; i++) {\\n            IRequiemSwap(params[i].pool).onSwapGivenIn(params[i].tokenIn, params[i].tokenOut, amounts[i], params[i].structure == 0 ? amounts[i + 1] : 0, params[i + 1].pool);\\n        }\\n        IRequiemSwap(params[params.length - 1].pool).onSwapGivenIn(\\n            params[params.length - 1].tokenIn,\\n            params[params.length - 1].tokenOut,\\n            amounts[params.length - 1],\\n            amounts[params.length],\\n            address(this)\\n        );\\n        transferAll(ETH_ADDRESS, to, amountOut);\\n    }\\n\\n    function swapTokensForExactTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _validateAmountIn(tokenIn, tokenOut, amountOut, amountInMax, path);\\n\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\\n        _swap(tokenIn, amounts, path, to);\\n    }\\n\\n    function swapExactETHForTokens(\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _validateAmountOut(WETH, tokenOut, msg.value, amountOutMin, path);\\n\\n        transferETHTo(amounts[0], path[0]);\\n        _swap(WETH, amounts, path, to);\\n    }\\n\\n    function swapTokensForExactETH(\\n        address tokenIn,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _validateAmountIn(tokenIn, WETH, amountOut, amountInMax, path);\\n\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\\n        _swap(tokenIn, amounts, path, address(this));\\n        transferAll(ETH_ADDRESS, to, amounts[amounts.length - 1]);\\n    }\\n\\n    function swapExactTokensForETH(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _validateAmountOut(tokenIn, WETH, amountIn, amountOutMin, path);\\n\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\\n        _swap(tokenIn, amounts, path, address(this));\\n        transferAll(ETH_ADDRESS, to, amounts[amounts.length - 1]);\\n    }\\n\\n    function swapETHForExactTokens(\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _validateAmountIn(WETH, tokenOut, amountOut, msg.value, path);\\n\\n        transferETHTo(amounts[0], path[0]);\\n        _swap(WETH, amounts, path, to);\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\n    }\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swapSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        address input = tokenIn;\\n        for (uint256 i; i < path.length; i++) {\\n            IRequiemPair pair = IRequiemPair(path[i]);\\n\\n            uint256 amountInput;\\n            uint256 amountOutput;\\n            address currentOutput;\\n            {\\n                (address output, uint256 reserveInput, uint256 reserveOutput, uint32 tokenWeightInput, uint32 tokenWeightOutput, uint32 swapFee) = IRequiemFormula(formula).getFactoryReserveAndWeights(\\n                    factory,\\n                    address(pair),\\n                    input\\n                );\\n                amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\\n                amountOutput = IRequiemFormula(formula).getAmountOut(amountInput, reserveInput, reserveOutput, tokenWeightInput, tokenWeightOutput, swapFee);\\n                currentOutput = output;\\n            }\\n            (uint256 amount0Out, uint256 amount1Out) = input == pair.token0() ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\\n            address to = i < path.length - 1 ? path[i + 1] : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n            emit Exchange(address(pair), amountOutput, currentOutput);\\n            input = currentOutput;\\n        }\\n    }\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override ensure(deadline) {\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amountIn);\\n        uint256 balanceBefore = IERC20(tokenOut).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(tokenIn, path, to);\\n        require(IERC20(tokenOut).balanceOf(to).sub(balanceBefore) >= amountOutMin, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    }\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual override ensure(deadline) {\\n        //            require(path[0] == WETH, \\\"Router: INVALID_PATH\\\");\\n        uint256 amountIn = msg.value;\\n        transferETHTo(amountIn, path[0]);\\n        uint256 balanceBefore = IERC20(tokenOut).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(WETH, path, to);\\n        require(IERC20(tokenOut).balanceOf(to).sub(balanceBefore) >= amountOutMin, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    }\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override ensure(deadline) {\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amountIn);\\n        _swapSupportingFeeOnTransferTokens(tokenIn, path, address(this));\\n        uint256 amountOut = IERC20(WETH).balanceOf(address(this));\\n        require(amountOut >= amountOutMin, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        transferAll(ETH_ADDRESS, to, amountOut);\\n    }\\n\\n    function multihopBatchSwapExactIn(\\n        Swap[][] memory swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 totalAmountIn,\\n        uint256 minTotalAmountOut,\\n        uint256 deadline\\n    ) public payable virtual override ensure(deadline) returns (uint256 totalAmountOut) {\\n        transferFromAll(tokenIn, totalAmountIn);\\n        uint256 balanceBefore;\\n        if (!isETH(tokenOut)) {\\n            balanceBefore = IERC20(tokenOut).balanceOf(msg.sender);\\n        }\\n\\n        for (uint256 i = 0; i < swapSequences.length; i++) {\\n            uint256 tokenAmountOut;\\n            for (uint256 k = 0; k < swapSequences[i].length; k++) {\\n                Swap memory swap = swapSequences[i][k];\\n                if (k > 0) {\\n                    // Makes sure that on the second swap the output of the first was used\\n                    // so there is not intermediate token leftover\\n                    swap.swapAmount = tokenAmountOut;\\n                }\\n                tokenAmountOut = _swapSingleSupportFeeOnTransferTokens(swap.tokenIn, swap.tokenOut, swap.pool, swap.swapAmount, swap.limitReturnAmount);\\n            }\\n\\n            // This takes the amountOut of the last swap\\n            totalAmountOut = tokenAmountOut.add(totalAmountOut);\\n        }\\n\\n        transferAll(tokenOut, msg.sender, totalAmountOut);\\n        transferAll(tokenIn, msg.sender, getBalance(tokenIn));\\n\\n        if (isETH(tokenOut)) {\\n            require(totalAmountOut >= minTotalAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n        } else {\\n            require(IERC20(tokenOut).balanceOf(msg.sender).sub(balanceBefore) >= minTotalAmountOut, \\\"<minTotalAmountOut\\\");\\n        }\\n    }\\n\\n    function multihopBatchSwapExactOut(\\n        Swap[][] memory swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 maxTotalAmountIn,\\n        uint256 deadline\\n    ) public payable virtual override ensure(deadline) returns (uint256 totalAmountIn) {\\n        transferFromAll(tokenIn, maxTotalAmountIn);\\n\\n        for (uint256 i = 0; i < swapSequences.length; i++) {\\n            uint256 tokenAmountInFirstSwap;\\n            // Specific code for a simple swap and a multihop (2 swaps in sequence)\\n            if (swapSequences[i].length == 1) {\\n                Swap memory swap = swapSequences[i][0];\\n                tokenAmountInFirstSwap = _swapSingleMixOut(swap.tokenIn, swap.tokenOut, swap.pool, swap.swapAmount, swap.limitReturnAmount);\\n            } else {\\n                // Consider we are swapping A -> B and B -> C. The goal is to buy a given amount\\n                // of token C. But first we need to buy B with A so we can then buy C with B\\n                // To get the exact amount of C we then first need to calculate how much B we\\\"ll need:\\n                uint256 intermediateTokenAmount;\\n                // This would be token B as described above\\n                Swap memory secondSwap = swapSequences[i][1];\\n                {\\n                    address[] memory paths = new address[](1);\\n                    paths[0] = secondSwap.pool;\\n                    uint256[] memory amounts = IRequiemFormula(formula).getFactoryAmountsIn(factory, secondSwap.tokenIn, secondSwap.tokenOut, secondSwap.swapAmount, paths);\\n                    intermediateTokenAmount = amounts[0];\\n                    require(intermediateTokenAmount <= secondSwap.limitReturnAmount, \\\"Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n                }\\n\\n                //// Buy intermediateTokenAmount of token B with A in the first pool\\n                Swap memory firstSwap = swapSequences[i][0];\\n                tokenAmountInFirstSwap = _swapSingleMixOut(firstSwap.tokenIn, firstSwap.tokenOut, firstSwap.pool, intermediateTokenAmount, firstSwap.limitReturnAmount);\\n\\n                //// Buy the final amount of token C desired\\n                _swapSingle(secondSwap.tokenIn, secondSwap.pool, intermediateTokenAmount, secondSwap.swapAmount);\\n            }\\n\\n            totalAmountIn = tokenAmountInFirstSwap.add(totalAmountIn);\\n        }\\n\\n        require(totalAmountIn <= maxTotalAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        transferAll(tokenOut, msg.sender, getBalance(tokenOut));\\n        transferAll(tokenIn, msg.sender, getBalance(tokenIn));\\n    }\\n\\n    function transferFromAll(address token, uint256 amount) internal returns (bool) {\\n        if (isETH(token)) {\\n            IWETH(WETH).deposit{value: msg.value}();\\n        } else {\\n            TransferHelper.safeTransferFrom(token, msg.sender, address(this), amount);\\n        }\\n        return true;\\n    }\\n\\n    function getBalance(address token) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return IWETH(WETH).balanceOf(address(this));\\n        } else {\\n            return IERC20(token).balanceOf(address(this));\\n        }\\n    }\\n\\n    function _swapSingleMixOut(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool,\\n        uint256 swapAmount,\\n        uint256 limitReturnAmount\\n    ) internal returns (uint256 tokenAmountIn) {\\n        address[] memory paths = new address[](1);\\n        paths[0] = pool;\\n        uint256[] memory amounts = IRequiemFormula(formula).getFactoryAmountsIn(factory, tokenIn, tokenOut, swapAmount, paths);\\n        tokenAmountIn = amounts[0];\\n        require(tokenAmountIn <= limitReturnAmount, \\\"Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n        _swapSingle(tokenIn, pool, tokenAmountIn, amounts[1]);\\n    }\\n\\n    function _swapSingle(\\n        address tokenIn,\\n        address pair,\\n        uint256 targetSwapAmount,\\n        uint256 targetOutAmount\\n    ) internal {\\n        TransferHelper.safeTransfer(tokenIn, pair, targetSwapAmount);\\n        IRequiemPair pairV2 = IRequiemPair(pair);\\n        address token0 = pairV2.token0();\\n\\n        (uint256 amount0Out, uint256 amount1Out, address output) = tokenIn == token0 ? (uint256(0), targetOutAmount, pairV2.token1()) : (targetOutAmount, uint256(0), token0);\\n        pairV2.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n\\n        emit Exchange(pair, targetOutAmount, output);\\n    }\\n\\n    function _swapSingleSupportFeeOnTransferTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool,\\n        uint256 swapAmount,\\n        uint256 limitReturnAmount\\n    ) internal returns (uint256 tokenAmountOut) {\\n        TransferHelper.safeTransfer(tokenIn, pool, swapAmount);\\n\\n        uint256 amountOutput;\\n        {\\n            (, uint256 reserveInput, uint256 reserveOutput, uint32 tokenWeightInput, uint32 tokenWeightOutput, uint32 swapFee) = IRequiemFormula(formula).getFactoryReserveAndWeights(\\n                factory,\\n                pool,\\n                tokenIn\\n            );\\n            uint256 amountInput = IERC20(tokenIn).balanceOf(pool).sub(reserveInput);\\n            amountOutput = IRequiemFormula(formula).getAmountOut(amountInput, reserveInput, reserveOutput, tokenWeightInput, tokenWeightOutput, swapFee);\\n        }\\n        uint256 balanceBefore = IERC20(tokenOut).balanceOf(address(this));\\n        (uint256 amount0Out, uint256 amount1Out) = tokenIn == IRequiemPair(pool).token0() ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\\n        IRequiemPair(pool).swap(amount0Out, amount1Out, address(this), new bytes(0));\\n        emit Exchange(pool, amountOutput, tokenOut);\\n\\n        tokenAmountOut = IERC20(tokenOut).balanceOf(address(this)).sub(balanceBefore);\\n        require(tokenAmountOut >= limitReturnAmount, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    }\\n\\n    function _validateAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        amounts = IRequiemFormula(formula).getFactoryAmountsOut(factory, tokenIn, tokenOut, amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    }\\n\\n    function _calculateAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        amounts = IRequiemFormula(formula).getFactoryAmountsOut(factory, tokenIn, tokenOut, amountIn, path);\\n    }\\n\\n    function _validateAmountIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        amounts = IRequiemFormula(formula).getFactoryAmountsIn(factory, tokenIn, tokenOut, amountOut, path);\\n        require(amounts[0] <= amountInMax, \\\"Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n    }\\n\\n    // the same as _validateAmountIn, just with no requirement checking\\n    function _calculateAmountIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        amounts = IRequiemFormula(formula).getFactoryAmountsIn(factory, tokenIn, tokenOut, amountOut, path);\\n    }\\n\\n    function transferETHTo(uint256 amount, address to) internal {\\n        IWETH(WETH).deposit{value: amount}();\\n        assert(IWETH(WETH).transfer(to, amount));\\n    }\\n\\n    function transferAll(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n\\n        if (isETH(token)) {\\n            IWETH(WETH).withdraw(amount);\\n            TransferHelper.safeTransferETH(to, amount);\\n        } else {\\n            TransferHelper.safeTransfer(token, to, amount);\\n        }\\n        return true;\\n    }\\n\\n    function isETH(address token) internal pure returns (bool) {\\n        return (token == ETH_ADDRESS);\\n    }\\n\\n    // **** REMOVE LIQUIDITY ****\\n    function _removeLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to\\n    ) internal returns (uint256 amountA, uint256 amountB) {\\n        require(IRequiemFactory(factory).isPair(pair), \\\"Router: Invalid pair\\\");\\n        IRequiemPair(pair).transferFrom(msg.sender, pair, liquidity);\\n        // send liquidity to pair\\n        (uint256 amount0, uint256 amount1) = IRequiemPair(pair).burn(to);\\n        (address token0, ) = IRequiemFormula(formula).sortTokens(tokenA, tokenB);\\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\n        require(amountA >= amountAMin, \\\"Router: INSUFFICIENT_A_AMOUNT\\\");\\n        require(amountB >= amountBMin, \\\"Router: INSUFFICIENT_B_AMOUNT\\\");\\n    }\\n\\n    function removeLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) public virtual override ensure(deadline) returns (uint256 amountA, uint256 amountB) {\\n        (amountA, amountB) = _removeLiquidity(pair, tokenA, tokenB, liquidity, amountAMin, amountBMin, to);\\n    }\\n\\n    function removeLiquidityETH(\\n        address pair,\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) public virtual override ensure(deadline) returns (uint256 amountToken, uint256 amountETH) {\\n        (amountToken, amountETH) = _removeLiquidity(pair, token, WETH, liquidity, amountTokenMin, amountETHMin, address(this));\\n        TransferHelper.safeTransfer(token, to, amountToken);\\n        transferAll(ETH_ADDRESS, to, amountETH);\\n    }\\n\\n    function removeLiquidityWithPermit(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual override ensure(deadline) returns (uint256 amountA, uint256 amountB) {\\n        {\\n            uint256 value = approveMax ? type(uint256).max : liquidity;\\n            IRequiemPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        }\\n        (amountA, amountB) = _removeLiquidity(pair, tokenA, tokenB, liquidity, amountAMin, amountBMin, to);\\n    }\\n\\n    function removeLiquidityETHWithPermit(\\n        address pair,\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual override returns (uint256 amountToken, uint256 amountETH) {\\n        uint256 value = approveMax ? type(uint256).max : liquidity;\\n        IRequiemPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        (amountToken, amountETH) = removeLiquidityETH(pair, token, liquidity, amountTokenMin, amountETHMin, to, deadline);\\n    }\\n\\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address pair,\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) public virtual override ensure(deadline) returns (uint256 amountETH) {\\n        (, amountETH) = removeLiquidity(pair, token, WETH, liquidity, amountTokenMin, amountETHMin, address(this), deadline);\\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\\n        transferAll(ETH_ADDRESS, to, amountETH);\\n    }\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address pair,\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual override returns (uint256 amountETH) {\\n        uint256 value = approveMax ? type(uint256).max : liquidity;\\n        IRequiemPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(pair, token, liquidity, amountTokenMin, amountETHMin, to, deadline);\\n    }\\n}\\n\",\"keccak256\":\"0xdaf0a13843cbbe257c4262000a0e4d7ad92f969e9c2be44d35548c49b42f22a2\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb7230835a4efbbbebcb5371d121977e859388b33f3ee5d9a7a44fc4de8d6b970\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x59ca041c7f003069ae1fc9ede79694b1fa0b11e6eebf4eb765a044a27030687c\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\ninterface IRequiemFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint);\\n    function feeTo() external view returns (address);\\n    function formula() external view returns (address);\\n    function protocolFee() external view returns (uint);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function isPair(address) external view returns (bool);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external returns (address pair);\\n    function getWeightsAndSwapFee(address pair) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setProtocolFee(uint) external;\\n}\\n\",\"keccak256\":\"0x500ff0062150432105415e938dcaa0d64b666c224764c4cb901137ce45204b5d\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.5.16;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IRequiemFormula {\\n\\n    function getReserveAndWeights(address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getPairAmountIn(address pair, address tokenIn, uint amountOut) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getPairAmountOut(address pair, address tokenIn, uint amountIn) external view returns (uint amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x8a32e1c404f6a93f17cf6151173ff21fedb58abe50a6635cb10f47780f044c98\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IRequiemPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IRequiemERC20.sol\\\";\\n\\ninterface IRequiemPair is IRequiemERC20 {\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n    function getSwapFee() external view returns (uint32);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address,\\n        address,\\n        uint32,\\n        uint32\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1924a077618cc54dd9f8755e2ad9f2f36f51372ea68c9b8d39b5927f7a1e1137\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemRouter {\\n    event Exchange(\\n        address pair,\\n        uint amountOut,\\n        address output\\n    );\\n    struct Swap {\\n        address pool;\\n        address tokenIn;\\n        address tokenOut;\\n        uint swapAmount; // tokenInAmount / tokenOutAmount\\n        uint limitReturnAmount; // minAmountOut / maxAmountIn\\n        uint maxPrice;\\n    }\\n    function factory() external view returns (address);\\n    function formula() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address pair,\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n\\n    function swapExactTokensForTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(address tokenOut, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(address tokenIn, uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(address tokenIn, uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(address tokenOut, uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        address tokenOut,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n\\n    function multihopBatchSwapExactIn(\\n        Swap[][] memory swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint totalAmountIn,\\n        uint minTotalAmountOut,\\n        uint deadline\\n    )\\n    external payable returns (uint totalAmountOut);\\n    function multihopBatchSwapExactOut(\\n        Swap[][] memory swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint maxTotalAmountIn,\\n        uint deadline\\n    ) external payable returns (uint totalAmountIn);\\n\\n    function createPair( address tokenA, address tokenB,uint amountA,uint amountB, uint32 tokenWeightA, uint32 swapFee, address to) external returns (uint liquidity);\\n    function createPairETH( address token, uint amountToken, uint32 tokenWeight, uint32 swapFee, address to) external payable returns (uint liquidity);\\n\\n    function removeLiquidity(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address pair,\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address pair,\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n}\\n\",\"keccak256\":\"0x5286bb3a4fc4627eccbb25824d2147496522172ea002825714e3ce27d21a33b7\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemSwap {\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    struct QSwapStep {\\n        uint8 structure;\\n        address pool;\\n        address tokenIn;\\n        address tokenOut;\\n    }\\n\\n    struct SwapStep {\\n        address pool;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 swapAmount; // tokenInAmount / tokenOutAmount\\n        uint256 limitReturnAmount; // minAmountOut / maxAmountIn\\n        uint256 maxPrice;\\n    }\\n\\n    function onSwap(SwapStep memory params, address to) external returns (uint256);\\n\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external returns (uint256);\\n\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to\\n    ) external returns (uint256);\\n\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (uint256);\\n\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5579bba2bd5bb37be6ca99dd6f24f57f4c854fc6aa80804e466611fe3cba673f\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for WETH9.\\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x13735d45257a1ea45c2a7dc3bb8a68c89ae9b7159f57180c395793f57c05afcc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        RequiemErrors._require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        uint256 errorCode\\n    ) internal pure returns (uint256) {\\n        RequiemErrors._require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc82c3356797b0e56c4ac77d5554343f66b3b436a18537bdb146e10921605d729\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.16;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x622a8d9485701159ac15735e9f4b83bf2b3a36b1c2f6c53e1535e166e7685491\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x37ebaca1c58a9daf307229c45122f12d603a95d1d92c1a8e7648b1910755bfa0\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162005f3138038062005f318339810160408190526200003491620000db565b6001600160a01b038216608081905260408051634b75f54f60e01b81529051634b75f54f916004808201926020929091908290030181865afa1580156200007f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a5919062000113565b6001600160a01b0390811660a0521660c0525062000138565b80516001600160a01b0381168114620000d657600080fd5b919050565b60008060408385031215620000ef57600080fd5b620000fa83620000be565b91506200010a60208401620000be565b90509250929050565b6000602082840312156200012657600080fd5b6200013182620000be565b9392505050565b60805160a05160c051615cb8620002796000396000818161015b015281816103850152818161079c0152818161092701528181610a5701528181611d7b015281816120af0152818161214201528181612224015281816127c801528181612c5501528181612d9201528181612e0a01528181612e71015281816136cc01528181613757015281816137dd0152818161388a0152613c6d0152600081816101f6015281816111fe0152818161312f0152818161337a0152818161347f0152818161397701528181613d340152818161408701528181614383015281816144890152818161474c0152818161481601526148de01526000818161040c01528181610a270152818161122d0152818161257901528181612f4c015281816133a9015281816139a401528181613d61015281816140b401526143b20152615cb86000f3fe60806040526004361061014b5760003560e01c80630e2f024c1461018f5780633990ba54146101c25780634b75f54f146101e45780634c17fd7c146102255780635cae03101461025a578063674ee80b1461027a5780636cb494281461028d57806370e3adcc146102a0578063840c34d0146102cd57806393b2dfe0146102e0578063944264fe146103005780639c91fcb514610313578063a4aabb0814610333578063a67d0e3c14610353578063ad5c464814610373578063b05f579e146103a7578063b56b681d146103ba578063bff51d71146103da578063c45a0155146103fa578063ce8196321461042e578063d0f2c82a14610441578063d59e44ee14610461578063e1f4a78414610481578063ebb5d2e9146104a1578063ee63113f146104c1578063fa3219d5146104e1578063fbf4513514610501578063fde1adda1461052157600080fd5b3661018a57336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461018857610188614a0d565b005b600080fd5b34801561019b57600080fd5b506101af6101aa366004614a65565b610534565b6040519081526020015b60405180910390f35b6101d56101d0366004614b0f565b6105d3565b6040516101b993929190614b81565b3480156101f057600080fd5b506102187f000000000000000000000000000000000000000000000000000000000000000081565b6040516101b99190614b97565b34801561023157600080fd5b50610245610240366004614bab565b610624565b604080519283526020830191909152016101b9565b34801561026657600080fd5b50610188610275366004614cb2565b6106ef565b610188610288366004614d38565b61085f565b6101af61029b366004614dc5565b610a22565b3480156102ac57600080fd5b506102c06102bb366004614f9a565b610af8565b6040516101b99190615004565b6101af6102db366004615182565b611082565b3480156102ec57600080fd5b506102c06102fb366004614f9a565b6113fb565b6101af61030e3660046151f5565b6117f1565b34801561031f57600080fd5b506102c061032e366004614cb2565b611d52565b34801561033f57600080fd5b5061024561034e366004614a65565b611ea9565b34801561035f57600080fd5b5061018861036e366004615255565b611f4e565b34801561037f57600080fd5b506102187f000000000000000000000000000000000000000000000000000000000000000081565b6102c06103b5366004614d38565b612087565b3480156103c657600080fd5b506102456103d5366004614b0f565b6121f9565b3480156103e657600080fd5b506102c06103f53660046152ed565b612289565b34801561040657600080fd5b506102187f000000000000000000000000000000000000000000000000000000000000000081565b6101af61043c3660046153db565b612306565b34801561044d57600080fd5b506101af61045c366004615458565b612574565b34801561046d57600080fd5b506102c061047c366004615255565b61268f565b34801561048d57600080fd5b5061024561049c3660046154dc565b612759565b3480156104ad57600080fd5b506101af6104bc366004614b0f565b61279e565b3480156104cd57600080fd5b506101af6104dc366004614f9a565b61288e565b3480156104ed57600080fd5b506102c06104fc366004614cb2565b612c2c565b34801561050d57600080fd5b506101d561051c366004615561565b612caf565b6102c061052f366004614d38565b612d6a565b60008085610542578a610546565b6000195b60405163d505accf60e01b81529091506001600160a01b038e169063d505accf90610581903390309086908d908c908c908c906004016155f0565b600060405180830381600087803b15801561059b57600080fd5b505af11580156105af573d6000803e3d6000fd5b505050506105c28d8d8d8d8d8d8d61279e565b9d9c50505050505050505050505050565b600080600083428110156106025760405162461bcd60e51b81526004016105f990615631565b60405180910390fd5b6106108b8b8b8b8b8b612e65565b919d909c50909a5098505050505050505050565b60008086428110156106485760405162461bcd60e51b81526004016105f990615631565b600087610655578c610659565b6000195b90508f6001600160a01b031663d505accf3330848d8c8c8c6040518863ffffffff1660e01b815260040161069397969594939291906155f0565b600060405180830381600087803b1580156106ad57600080fd5b505af11580156106c1573d6000803e3d6000fd5b50505050506106d58f8f8f8f8f8f8f612f47565b8093508194505050509c509c9a5050505050505050505050565b80428110156107105760405162461bcd60e51b81526004016105f990615631565b6107438833878760008181106107285761072861565a565b905060200201602081019061073d9190615670565b8a613213565b6107828886868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525030925061333f915050565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906107d1903090600401614b97565b602060405180830381865afa1580156107ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610812919061568d565b9050868110156108345760405162461bcd60e51b81526004016105f9906156a6565b61085373eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8583613699565b50505050505050505050565b80428110156108805760405162461bcd60e51b81526004016105f990615631565b346108b08187876000816108965761089661565a565b90506020020160208101906108ab9190615670565b613755565b6040516370a0823160e01b81526000906001600160a01b038a16906370a08231906108df908890600401614b97565b602060405180830381865afa1580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610920919061568d565b90506109817f00000000000000000000000000000000000000000000000000000000000000008888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a925061333f915050565b876109f9828b6001600160a01b03166370a08231896040518263ffffffff1660e01b81526004016109b29190614b97565b602060405180830381865afa1580156109cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f3919061568d565b9061386a565b1015610a175760405162461bcd60e51b81526004016105f9906156a6565b505050505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166314572adb887f000000000000000000000000000000000000000000000000000000000000000088886040518563ffffffff1660e01b8152600401610a9794939291906156e8565b6020604051808303816000875af1158015610ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ada9190615719565b9050610aeb81888860008088612e65565b9998505050505050505050565b60608142811015610b1b5760405162461bcd60e51b81526004016105f990615631565b8651610b2890600161574c565b6001600160401b03811115610b3f57610b3f614e2d565b604051908082528060200260200182016040528015610b68578160200160208202803683370190505b5091508582885181518110610b7f57610b7f61565a565b602002602001018181525050600060018351610b9b9190615764565b90505b8015610ce05787610bb0600183615764565b81518110610bc057610bc061565a565b6020026020010151602001516001600160a01b031663cc56fd4389600184610be89190615764565b81518110610bf857610bf861565a565b6020026020010151604001518a600185610c129190615764565b81518110610c2257610c2261565a565b602002602001015160600151868581518110610c4057610c4061565a565b60200260200101516040518463ffffffff1660e01b8152600401610c669392919061577b565b602060405180830381865afa158015610c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca7919061568d565b83610cb3600184615764565b81518110610cc357610cc361565a565b602090810291909101015280610cd88161579f565b915050610b9e565b508482600081518110610cf557610cf561565a565b60200260200101511115610d1b5760405162461bcd60e51b81526004016105f9906157b6565b610d7d87600081518110610d3157610d3161565a565b6020026020010151604001513389600081518110610d5157610d5161565a565b60200260200101516020015185600081518110610d7057610d7061565a565b6020026020010151613213565b60005b60018851610d8e9190615764565b8160ff161015610f2157878160ff1681518110610dad57610dad61565a565b6020026020010151602001516001600160a01b0316634ac00e03898360ff1681518110610ddc57610ddc61565a565b6020026020010151604001518a8460ff1681518110610dfd57610dfd61565a565b602002602001015160600151868560ff1681518110610e1e57610e1e61565a565b60200260200101518c8660ff1681518110610e3b57610e3b61565a565b60200260200101516000015160ff16600014610e58576000610e80565b87610e648760016157df565b60ff1681518110610e7757610e7761565a565b60200260200101515b8d610e8c8860016157df565b60ff1681518110610e9f57610e9f61565a565b6020026020010151602001516040518663ffffffff1660e01b8152600401610ecb959493929190615804565b6020604051808303816000875af1158015610eea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0e919061568d565b5080610f1981615834565b915050610d80565b508660018851610f319190615764565b81518110610f4157610f4161565a565b6020026020010151602001516001600160a01b0316634ac00e038860018a51610f6a9190615764565b81518110610f7a57610f7a61565a565b6020026020010151604001518960018b51610f959190615764565b81518110610fa557610fa561565a565b6020026020010151606001518560018c51610fc09190615764565b81518110610fd057610fd061565a565b6020026020010151868c5181518110610feb57610feb61565a565b6020026020010151306040518663ffffffff1660e01b8152600401611014959493929190615804565b6020604051808303816000875af1158015611033573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611057919061568d565b5061107773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8588613699565b505095945050505050565b600081428110156110a55760405162461bcd60e51b81526004016105f990615631565b6110af8685613878565b5060005b87518110156113995760008882815181106110d0576110d061565a565b602002602001015151600114156111425760008983815181106110f5576110f561565a565b602002602001015160008151811061110f5761110f61565a565b6020026020010151905061113a81602001518260400151836000015184606001518560800151613916565b915050611379565b6000808a84815181106111575761115761565a565b60200260200101516001815181106111715761117161565a565b60200260200101519050600060016001600160401b0381111561119657611196614e2d565b6040519080825280602002602001820160405280156111bf578160200160208202803683370190505b5090508160000151816000815181106111da576111da61565a565b60200260200101906001600160a01b031690816001600160a01b03168152505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166367f84adc7f0000000000000000000000000000000000000000000000000000000000000000856020015186604001518760600151876040518663ffffffff1660e01b815260040161127c959493929190615854565b600060405180830381865afa158015611299573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112c191908101906158c7565b9050806000815181106112d6576112d661565a565b6020026020010151935082608001518411156113045760405162461bcd60e51b81526004016105f990615957565b505060008b858151811061131a5761131a61565a565b60200260200101516000815181106113345761133461565a565b6020026020010151905061135b816020015182604001518360000151868560800151613916565b935061137582602001518360000151858560600151613a7a565b5050505b6113838185613c29565b93505080806113919061598e565b9150506110b3565b50838211156113d95760405162461bcd60e51b815260206004820152600c60248201526b22a9292fa624a6a4aa2fa4a760a11b60448201526064016105f9565b6113ec85336113e788613c46565b613699565b5061107786336113e789613c46565b6060814281101561141e5760405162461bcd60e51b81526004016105f990615631565b865161142b90600161574c565b6001600160401b0381111561144257611442614e2d565b60405190808252806020026020018201604052801561146b578160200160208202803683370190505b50915085828851815181106114825761148261565a565b60200260200101818152505060006001835161149e9190615764565b90505b80156115e357876114b3600183615764565b815181106114c3576114c361565a565b6020026020010151602001516001600160a01b031663cc56fd43896001846114eb9190615764565b815181106114fb576114fb61565a565b6020026020010151604001518a6001856115159190615764565b815181106115255761152561565a565b6020026020010151606001518685815181106115435761154361565a565b60200260200101516040518463ffffffff1660e01b81526004016115699392919061577b565b602060405180830381865afa158015611586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115aa919061568d565b836115b6600184615764565b815181106115c6576115c661565a565b6020908102919091010152806115db8161579f565b9150506114a1565b5084826000815181106115f8576115f861565a565b6020026020010151111561161e5760405162461bcd60e51b81526004016105f9906157b6565b61163487600081518110610d3157610d3161565a565b60005b87518160ff161015611077576000600189516116539190615764565b8260ff161461168c57886116688360016157df565b60ff168151811061167b5761167b61565a565b60200260200101516020015161168e565b855b9050888260ff16815181106116a5576116a561565a565b6020026020010151602001516001600160a01b0316634ac00e038a8460ff16815181106116d4576116d461565a565b6020026020010151604001518b8560ff16815181106116f5576116f561565a565b602002602001015160600151878660ff16815181106117165761171661565a565b60200260200101518d8760ff16815181106117335761173361565a565b60200260200101516000015160ff16600014611750576000611778565b8861175c8860016157df565b60ff168151811061176f5761176f61565a565b60200260200101515b866040518663ffffffff1660e01b8152600401611799959493929190615804565b6020604051808303816000875af11580156117b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117dc919061568d565b505080806117e990615834565b915050611637565b600081428110156118145760405162461bcd60e51b81526004016105f990615631565b600034905061184134886000815181106118305761183061565a565b602002602001015160200151613755565b866000815181106118545761185461565a565b6020026020010151602001516001600160a01b031663e9255bae886000815181106118815761188161565a565b602002602001015160400151896000815181106118a0576118a061565a565b602002602001015160600151846040518463ffffffff1660e01b81526004016118cb9392919061577b565b602060405180830381865afa1580156118e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190c919061568d565b9250866000815181106119215761192161565a565b6020026020010151602001516001600160a01b0316634ac00e038860008151811061194e5761194e61565a565b6020026020010151604001518960008151811061196d5761196d61565a565b60200260200101516060015184878c60018151811061198e5761198e61565a565b6020026020010151602001516040518663ffffffff1660e01b81526004016119ba959493929190615804565b6020604051808303816000875af11580156119d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fd919061568d565b5060015b87518160ff161015611d2757600060018951611a1d9190615764565b8260ff1614611a565788611a328360016157df565b60ff1681518110611a4557611a4561565a565b602002602001015160200151611a58565b865b9050888260ff1681518110611a6f57611a6f61565a565b60200260200101516000015160ff1660001415611c3957849250888260ff1681518110611a9e57611a9e61565a565b6020026020010151602001516001600160a01b031663e9255bae8a8460ff1681518110611acd57611acd61565a565b6020026020010151604001518b8560ff1681518110611aee57611aee61565a565b602002602001015160600151886040518463ffffffff1660e01b8152600401611b199392919061577b565b602060405180830381865afa158015611b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5a919061568d565b9450888260ff1681518110611b7157611b7161565a565b6020026020010151602001516001600160a01b0316634ac00e038a8460ff1681518110611ba057611ba061565a565b6020026020010151604001518b8560ff1681518110611bc157611bc161565a565b6020026020010151606001518689866040518663ffffffff1660e01b8152600401611bf0959493929190615804565b6020604051808303816000875af1158015611c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c33919061568d565b50611d14565b888260ff1681518110611c4e57611c4e61565a565b6020026020010151602001516001600160a01b0316634ac00e038a8460ff1681518110611c7d57611c7d61565a565b6020026020010151604001518b8560ff1681518110611c9e57611c9e61565a565b602002602001015160600151886000866040518663ffffffff1660e01b8152600401611cce959493929190615804565b6020604051808303816000875af1158015611ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d11919061568d565b94505b5080611d1f81615834565b915050611a01565b5082861115611d485760405162461bcd60e51b81526004016105f9906159a9565b5050949350505050565b60608142811015611d755760405162461bcd60e51b81526004016105f990615631565b611dd5897f00000000000000000000000000000000000000000000000000000000000000008a8a8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613d1a92505050565b9150611e17893388886000818110611def57611def61565a565b9050602002016020810190611e049190615670565b85600081518110610d7057610d7061565a565b611e578983888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250613e27915050565b611e9c73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee858460018651611e7f9190615764565b81518110611e8f57611e8f61565a565b6020026020010151613699565b5050979650505050505050565b600080600086611eb9578b611ebd565b6000195b60405163d505accf60e01b81529091506001600160a01b038f169063d505accf90611ef8903390309086908e908d908d908d906004016155f0565b600060405180830381600087803b158015611f1257600080fd5b505af1158015611f26573d6000803e3d6000fd5b50505050611f398e8e8e8e8e8e8e6121f9565b909f909e509c50505050505050505050505050565b8042811015611f6f5760405162461bcd60e51b81526004016105f990615631565b611f878933878760008181106107285761072861565a565b6040516370a0823160e01b81526000906001600160a01b038a16906370a0823190611fb6908790600401614b97565b602060405180830381865afa158015611fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff7919061568d565b90506120388a87878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525089925061333f915050565b86612069828b6001600160a01b03166370a08231886040518263ffffffff1660e01b81526004016109b29190614b97565b10156108535760405162461bcd60e51b81526004016105f9906156a6565b606081428110156120aa5760405162461bcd60e51b81526004016105f990615631565b61210a7f00000000000000000000000000000000000000000000000000000000000000008989348a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061406d92505050565b915061213d826000815181106121225761212261565a565b6020026020010151878760008181106108965761089661565a565b61219d7f0000000000000000000000000000000000000000000000000000000000000000838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a9250613e27915050565b816000815181106121b0576121b061565a565b60200260200101513411156121ee576121ee33836000815181106121d6576121d661565a565b6020026020010151346121e99190615764565b614165565b509695505050505050565b600080824281101561221d5760405162461bcd60e51b81526004016105f990615631565b61224c8a8a7f00000000000000000000000000000000000000000000000000000000000000008b8b8b30612f47565b909350915061225c898685614233565b61227b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8684613699565b505097509795505050505050565b606081428110156122ac5760405162461bcd60e51b81526004016105f990615631565b6122b98989898989613d1a565b91506122ee8933876000815181106122d3576122d361565a565b602002602001015185600081518110610d7057610d7061565a565b6122fa89838787613e27565b50979650505050505050565b600081428110156123295760405162461bcd60e51b81526004016105f990615631565b6123338786613878565b50600061233f87614349565b6123b3576040516370a0823160e01b81526001600160a01b038816906370a082319061236f903390600401614b97565b602060405180830381865afa15801561238c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b0919061568d565b90505b60005b8951811015612485576000805b8b83815181106123d5576123d561565a565b6020026020010151518110156124645760008c84815181106123f9576123f961565a565b602002602001015182815181106124125761241261565a565b60200260200101519050600082111561242d57606081018390525b61244e8160200151826040015183600001518460600151856080015161436b565b925050808061245c9061598e565b9150506123c3565b5061246f8186613c29565b945050808061247d9061598e565b9150506123b6565b50612491873385613699565b506124a088336113e78b613c46565b506124aa87614349565b156124f457848310156124ef5760405162461bcd60e51b815260206004820152600d60248201526c11549497d31253525517d3d555609a1b60448201526064016105f9565b612568565b8461252582896001600160a01b03166370a08231336040518263ffffffff1660e01b81526004016109b29190614b97565b10156125685760405162461bcd60e51b81526020600482015260126024820152710f1b5a5b951bdd185b105b5bdd5b9d13dd5d60721b60448201526064016105f9565b50509695505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166314572adb8a8a88886040518563ffffffff1660e01b81526004016125c994939291906156e8565b6020604051808303816000875af11580156125e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260c9190615719565b905061261e818a8a8a8a600080614709565b50506040516335313c2160e11b81526001600160a01b03821690636a6278429061264c908690600401614b97565b6020604051808303816000875af115801561266b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aeb919061568d565b606081428110156126b25760405162461bcd60e51b81526004016105f990615631565b6126f28a8a8a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061406d92505050565b915061270c8a3388886000818110611def57611def61565a565b61274c8a838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a9250613e27915050565b5098975050505050505050565b600080824281101561277d5760405162461bcd60e51b81526004016105f990615631565b61278c8b8b8b8b8b8b8b612f47565b909c909b509950505050505050505050565b600081428110156127c15760405162461bcd60e51b81526004016105f990615631565b6127f189897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a612759565b6040516370a0823160e01b815290935061286f9150899086906001600160a01b038316906370a0823190612829903090600401614b97565b602060405180830381865afa158015612846573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286a919061568d565b614233565b611e9c73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8584613699565b600081428110156128b15760405162461bcd60e51b81526004016105f990615631565b8591506128fc876000815181106128ca576128ca61565a565b60200260200101516040015133896000815181106128ea576128ea61565a565b60200260200101516020015189613213565b60005b8751811015612c01576000600189516129189190615764565b821461294b578861292a83600161574c565b8151811061293a5761293a61565a565b60200260200101516020015161294d565b855b90508882815181106129615761296161565a565b60200260200101516000015160ff1660001415612b1c57600084905089838151811061298f5761298f61565a565b6020026020010151602001516001600160a01b031663e9255bae8b85815181106129bb576129bb61565a565b6020026020010151604001518c86815181106129d9576129d961565a565b602002602001015160600151886040518463ffffffff1660e01b8152600401612a049392919061577b565b602060405180830381865afa158015612a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a45919061568d565b9450898381518110612a5957612a5961565a565b6020026020010151602001516001600160a01b0316634ac00e038b8581518110612a8557612a8561565a565b6020026020010151604001518c8681518110612aa357612aa361565a565b6020026020010151606001518489876040518663ffffffff1660e01b8152600401612ad2959493929190615804565b6020604051808303816000875af1158015612af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b15919061568d565b5050612bee565b888281518110612b2e57612b2e61565a565b6020026020010151602001516001600160a01b0316634ac00e038a8481518110612b5a57612b5a61565a565b6020026020010151604001518b8581518110612b7857612b7861565a565b602002602001015160600151876000866040518663ffffffff1660e01b8152600401612ba8959493929190615804565b6020604051808303816000875af1158015612bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612beb919061568d565b93505b5080612bf98161598e565b9150506128ff565b5081851115612c225760405162461bcd60e51b81526004016105f9906159a9565b5095945050505050565b60608142811015612c4f5760405162461bcd60e51b81526004016105f990615631565b611dd5897f00000000000000000000000000000000000000000000000000000000000000008a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061406d92505050565b60008060008342811015612cd55760405162461bcd60e51b81526004016105f990615631565b612ce48d8d8d8d8d8d8d614709565b6040516335313c2160e11b815291955093506001600160a01b038e1690636a62784290612d15908990600401614b97565b6020604051808303816000875af1158015612d34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d58919061568d565b91505099509950999650505050505050565b60608142811015612d8d5760405162461bcd60e51b81526004016105f990615631565b612ded7f000000000000000000000000000000000000000000000000000000000000000089348a8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613d1a92505050565b9150612e05826000815181106121225761212261565a565b6121ee7f0000000000000000000000000000000000000000000000000000000000000000838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a9250613e27915050565b6000806000612e9989897f00000000000000000000000000000000000000000000000000000000000000008a348b8b614744565b9093509150612eaa88338b86613213565b612eb4828a613755565b6040516335313c2160e11b81526001600160a01b038a1690636a62784290612ee0908790600401614b97565b6020604051808303816000875af1158015612eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f23919061568d565b905081341115612f3b57612f3b336121e98434615764565b96509650969350505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e5e31b138a6040518263ffffffff1660e01b8152600401612f969190614b97565b602060405180830381865afa158015612fb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd791906159d6565b61301a5760405162461bcd60e51b81526020600482015260146024820152732937baba32b91d1024b73b30b634b2103830b4b960611b60448201526064016105f9565b6040516323b872dd60e01b81526001600160a01b038a16906323b872dd9061304a9033908d908b9060040161577b565b6020604051808303816000875af1158015613069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308d91906159d6565b506000808a6001600160a01b03166389afcb44866040518263ffffffff1660e01b81526004016130bd9190614b97565b60408051808303816000875af11580156130db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ff91906159f3565b604051632a26552b60e11b81526001600160a01b038d811660048301528c811660248301529294509092506000917f0000000000000000000000000000000000000000000000000000000000000000169063544caa56906044016040805180830381865afa158015613175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131999190615a17565b509050806001600160a01b03168b6001600160a01b0316146131bc5781836131bf565b82825b9095509350878510156131e45760405162461bcd60e51b81526004016105f990615a51565b868410156132045760405162461bcd60e51b81526004016105f990615a88565b50505097509795505050505050565b600080856001600160a01b03166323b872dd86868660405160240161323a9392919061577b565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516132739190615aef565b6000604051808303816000865af19150503d80600081146132b0576040519150601f19603f3d011682016040523d82523d6000602084013e6132b5565b606091505b50915091508180156132df5750805115806132df5750808060200190518101906132df91906159d6565b6133375760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416044820152631253115160e21b60648201526084016105f9565b505050505050565b8260005b83518110156136925760008482815181106133605761336061565a565b6020026020010151905060008060008060008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b33d96b07f00000000000000000000000000000000000000000000000000000000000000008c8f6040518463ffffffff1660e01b81526004016133e893929190615b0b565b60c060405180830381865afa158015613405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134299190615b2e565b955095509550955095509550613465858d6001600160a01b03166370a082318d6040518263ffffffff1660e01b81526004016109b29190614b97565b60405163671a11b560e01b81529099506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063671a11b5906134be908c9089908990899089908990600401615ba2565b602060405180830381865afa1580156134db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ff919061568d565b9750859650505050505050600080856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561354b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061356f9190615719565b6001600160a01b0316886001600160a01b03161461358f57836000613593565b6000845b91509150600060018b516135a79190615764565b88106135b357896135d8565b8a6135bf89600161574c565b815181106135cf576135cf61565a565b60200260200101515b6040805160008152602081019182905263022c0d9f60e01b9091529091506001600160a01b0388169063022c0d9f9061361a9086908690869060248101615bd6565b600060405180830381600087803b15801561363457600080fd5b505af1158015613648573d6000803e3d6000fd5b50505050600080516020615c6383398151915287868660405161366d93929190615c26565b60405180910390a183985050505050505050808061368a9061598e565b915050613343565b5050505050565b6000816136a85750600161374e565b6136b184614349565b1561373f57604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561371857600080fd5b505af115801561372c573d6000803e3d6000fd5b5050505061373a8383614165565b61374a565b61374a848484614233565b5060015b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156137b057600080fd5b505af11580156137c4573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb9250613817915084908690600401615c49565b6020604051808303816000875af1158015613836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061385a91906159d6565b61386657613866614a0d565b5050565b600061374e8383600161499c565b600061388383614349565b15613901577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156138e357600080fd5b505af11580156138f7573d6000803e3d6000fd5b505050505061390d565b61390d83333085613213565b50600192915050565b60408051600180825281830190925260009182919060208083019080368337019050509050848160008151811061394f5761394f61565a565b6001600160a01b0392831660209182029290920101526040516319fe12b760e21b81526000917f000000000000000000000000000000000000000000000000000000000000000016906367f84adc906139d4907f0000000000000000000000000000000000000000000000000000000000000000908c908c908b908990600401615854565b600060405180830381865afa1580156139f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a1991908101906158c7565b905080600081518110613a2e57613a2e61565a565b6020026020010151925083831115613a585760405162461bcd60e51b81526004016105f990615957565b61107788878584600181518110613a7157613a7161565a565b60200260200101515b613a85848484614233565b60008390506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015613aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aee9190615719565b90506000806000836001600160a01b0316896001600160a01b031614613b175785600085613b7c565b600086866001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b7c9190615719565b6040805160008152602081019182905263022c0d9f60e01b90915292955090935091506001600160a01b0386169063022c0d9f90613bc39086908690309060248101615bd6565b600060405180830381600087803b158015613bdd57600080fd5b505af1158015613bf1573d6000803e3d6000fd5b50505050600080516020615c63833981519152888783604051613c1693929190615c26565b60405180910390a1505050505050505050565b600080613c36838561574c565b905061374e8482101560006149b7565b6000613c5182614349565b15613ce9576040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190613ca2903090600401614b97565b602060405180830381865afa158015613cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce3919061568d565b92915050565b6040516370a0823160e01b81526001600160a01b038316906370a0823190613ca2903090600401614b97565b919050565b60405163119220a560e01b81526060906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063119220a590613d91907f0000000000000000000000000000000000000000000000000000000000000000908a908a908a908990600401615854565b600060405180830381865afa158015613dae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613dd691908101906158c7565b9050828160018351613de89190615764565b81518110613df857613df861565a565b60200260200101511015613e1e5760405162461bcd60e51b81526004016105f9906156a6565b95945050505050565b8360005b8351811015613337576000848281518110613e4857613e4861565a565b602002602001015190506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eb69190615719565b9050600087613ec685600161574c565b81518110613ed657613ed661565a565b602002602001015190506000806000846001600160a01b0316886001600160a01b031614613f075783600086613f6c565b600084876001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f6c9190615719565b925092509250600060018b51613f829190615764565b8810613f8e5789613fb3565b8a613f9a89600161574c565b81518110613faa57613faa61565a565b60200260200101515b6040805160008152602081019182905263022c0d9f60e01b9091529091506001600160a01b0388169063022c0d9f90613ff59087908790869060248101615bd6565b600060405180830381600087803b15801561400f57600080fd5b505af1158015614023573d6000803e3d6000fd5b50505050600080516020615c6383398151915287868460405161404893929190615c26565b60405180910390a18198505050505050505080806140659061598e565b915050613e2b565b6040516319fe12b760e21b81526060906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906367f84adc906140e4907f0000000000000000000000000000000000000000000000000000000000000000908a908a908a908990600401615854565b600060405180830381865afa158015614101573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261412991908101906158c7565b9050828160008151811061413f5761413f61565a565b60200260200101511115613e1e5760405162461bcd60e51b81526004016105f990615957565b604080516000808252602082019092526001600160a01b03841690839060405161418f9190615aef565b60006040518083038185875af1925050503d80600081146141cc576040519150601f19603f3d011682016040523d82523d6000602084013e6141d1565b606091505b505090508061422e5760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b60648201526084016105f9565b505050565b600080846001600160a01b031663a9059cbb8585604051602401614258929190615c49565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516142919190615aef565b6000604051808303816000865af19150503d80600081146142ce576040519150601f19603f3d011682016040523d82523d6000602084013e6142d3565b606091505b50915091508180156142fd5750805115806142fd5750808060200190518101906142fd91906159d6565b6136925760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016105f9565b6001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1490565b6000614378868585614233565b6000806000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b33d96b07f00000000000000000000000000000000000000000000000000000000000000008c8f6040518463ffffffff1660e01b81526004016143f193929190615b0b565b60c060405180830381865afa15801561440e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144329190615b2e565b9550955095509550955050600061446f868e6001600160a01b03166370a082318e6040518263ffffffff1660e01b81526004016109b29190614b97565b60405163671a11b560e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063671a11b5906144c89084908a908a908a908a908a90600401615ba2565b602060405180830381865afa1580156144e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614509919061568d565b96505050505050506000866001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161453f9190614b97565b602060405180830381865afa15801561455c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614580919061568d565b9050600080876001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156145c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145e79190615719565b6001600160a01b03168a6001600160a01b0316146146075783600061460b565b6000845b6040805160008152602081019182905263022c0d9f60e01b90915291935091506001600160a01b0389169063022c0d9f9061464f9085908590309060248101615bd6565b600060405180830381600087803b15801561466957600080fd5b505af115801561467d573d6000803e3d6000fd5b50505050600080516020615c6383398151915288858b6040516146a293929190615c26565b60405180910390a16146da838a6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016109b29190614b97565b9450858510156146fc5760405162461bcd60e51b81526004016105f9906156a6565b5050505095945050505050565b60008061471b89898989898989614744565b909250905061472c88338b85613213565b61473887338b84613213565b97509795505050505050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663327494618c8c8c6040518463ffffffff1660e01b815260040161479a93929190615b0b565b6040805180830381865afa1580156147b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147da91906159f3565b915091508160001480156147ec575080155b156147fc5787935086925061227b565b604051632b58577b60e21b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ad615dec9061484f908c9087908790600401614b81565b602060405180830381865afa15801561486c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614890919061568d565b90508781116148c457858110156148b95760405162461bcd60e51b81526004016105f990615a88565b889450925082613204565b604051632b58577b60e21b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ad615dec90614917908c9087908990600401614b81565b602060405180830381865afa158015614934573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614958919061568d565b90508981111561496a5761496a614a0d565b8781101561498a5760405162461bcd60e51b81526004016105f990615a51565b9c979b50969950505050505050505050565b60006149ab84841115836149b7565b6000613e1e8486615764565b816138665762461bcd60e51b600090815260206004526007602452600a808304818104828106603090810160101b848706949093060160081b929092010166524551230000300160c81b60445261386691606490fd5b634e487b7160e01b600052600160045260246000fd5b6001600160a01b0381168114614a3857600080fd5b50565b8035613d1581614a23565b8015158114614a3857600080fd5b803560ff81168114613d1557600080fd5b60008060008060008060008060008060006101608c8e031215614a8757600080fd5b8b35614a9281614a23565b9a5060208c0135614aa281614a23565b995060408c0135985060608c0135975060808c0135965060a08c0135614ac781614a23565b955060c08c0135945060e08c0135614ade81614a46565b9350614aed6101008d01614a54565b92506101208c013591506101408c013590509295989b509295989b9093969950565b600080600080600080600060e0888a031215614b2a57600080fd5b8735614b3581614a23565b96506020880135614b4581614a23565b955060408801359450606088013593506080880135925060a0880135614b6a81614a23565b8092505060c0880135905092959891949750929550565b9283526020830191909152604082015260600190565b6001600160a01b0391909116815260200190565b6000806000806000806000806000806000806101808d8f031215614bce57600080fd5b8c35614bd981614a23565b9b5060208d0135614be981614a23565b9a5060408d0135614bf981614a23565b995060608d0135985060808d0135975060a08d0135965060c08d0135614c1e81614a23565b955060e08d013594506101008d0135614c3681614a46565b9350614c456101208e01614a54565b92506101408d013591506101608d013590509295989b509295989b509295989b565b60008083601f840112614c7957600080fd5b5081356001600160401b03811115614c9057600080fd5b6020830191508360208260051b8501011115614cab57600080fd5b9250929050565b600080600080600080600060c0888a031215614ccd57600080fd5b8735614cd881614a23565b9650602088013595506040880135945060608801356001600160401b03811115614d0157600080fd5b614d0d8a828b01614c67565b9095509350506080880135614d2181614a23565b8092505060a0880135905092959891949750929550565b60008060008060008060a08789031215614d5157600080fd5b8635614d5c81614a23565b95506020870135945060408701356001600160401b03811115614d7e57600080fd5b614d8a89828a01614c67565b9095509350506060870135614d9e81614a23565b80925050608087013590509295509295509295565b63ffffffff81168114614a3857600080fd5b600080600080600060a08688031215614ddd57600080fd5b8535614de881614a23565b9450602086013593506040860135614dff81614db3565b92506060860135614e0f81614db3565b91506080860135614e1f81614a23565b809150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715614e6557614e65614e2d565b60405290565b60405160c081016001600160401b0381118282101715614e6557614e65614e2d565b604051601f8201601f191681016001600160401b0381118282101715614eb557614eb5614e2d565b604052919050565b60006001600160401b03821115614ed657614ed6614e2d565b5060051b60200190565b600082601f830112614ef157600080fd5b81356020614f06614f0183614ebd565b614e8d565b82815260079290921b84018101918181019086841115614f2557600080fd5b8286015b848110156121ee5760808189031215614f425760008081fd5b614f4a614e43565b614f5382614a54565b815284820135614f6281614a23565b81860152604082810135614f7581614a23565b90820152606082810135614f8881614a23565b90820152835291830191608001614f29565b600080600080600060a08688031215614fb257600080fd5b85356001600160401b03811115614fc857600080fd5b614fd488828901614ee0565b95505060208601359350604086013592506060860135614ff381614a23565b949793965091946080013592915050565b6020808252825182820181905260009190848201906040850190845b8181101561503c57835183529284019291840191600101615020565b50909695505050505050565b600082601f83011261505957600080fd5b81356020615069614f0183614ebd565b82815260059290921b8401810191818101908684111561508857600080fd5b8286015b848110156121ee5780356001600160401b038111156150ab5760008081fd5b8701603f810189136150bd5760008081fd5b8481013560406150cf614f0183614ebd565b82815260c0928302840182019288820191908d8511156150ef5760008081fd5b948301945b848610156151705780868f03121561510c5760008081fd5b615114614e6b565b863561511f81614a23565b8152868b013561512e81614a23565b818c01528685013561513f81614a23565b81860152606087810135908201526080808801359082015260a08088013590820152835294850194918901916150f4565b5087525050509284019250830161508c565b600080600080600060a0868803121561519a57600080fd5b85356001600160401b038111156151b057600080fd5b6151bc88828901615048565b95505060208601356151cd81614a23565b935060408601356151dd81614a23565b94979396509394606081013594506080013592915050565b6000806000806080858703121561520b57600080fd5b84356001600160401b0381111561522157600080fd5b61522d87828801614ee0565b94505060208501359250604085013561524581614a23565b9396929550929360600135925050565b60008060008060008060008060e0898b03121561527157600080fd5b883561527c81614a23565b9750602089013561528c81614a23565b9650604089013595506060890135945060808901356001600160401b038111156152b557600080fd5b6152c18b828c01614c67565b90955093505060a08901356152d581614a23565b8092505060c089013590509295985092959890939650565b600080600080600080600060e0888a03121561530857600080fd5b873561531381614a23565b965060208881013561532481614a23565b9650604089013595506060890135945060808901356001600160401b0381111561534d57600080fd5b8901601f81018b1361535e57600080fd5b803561536c614f0182614ebd565b81815260059190911b8201830190838101908d83111561538b57600080fd5b928401925b828410156153b25783356153a381614a23565b82529284019290840190615390565b80975050505050506153c660a08901614a3b565b915060c0880135905092959891949750929550565b60008060008060008060c087890312156153f457600080fd5b86356001600160401b0381111561540a57600080fd5b61541689828a01615048565b965050602087013561542781614a23565b9450604087013561543781614a23565b959894975094956060810135955060808101359460a0909101359350915050565b600080600080600080600060e0888a03121561547357600080fd5b873561547e81614a23565b9650602088013561548e81614a23565b9550604088013594506060880135935060808801356154ac81614db3565b925060a08801356154bc81614db3565b915060c08801356154cc81614a23565b8091505092959891949750929550565b600080600080600080600080610100898b0312156154f957600080fd5b883561550481614a23565b9750602089013561551481614a23565b9650604089013561552481614a23565b9550606089013594506080890135935060a0890135925060c089013561554981614a23565b8092505060e089013590509295985092959890939650565b60008060008060008060008060006101208a8c03121561558057600080fd5b893561558b81614a23565b985060208a013561559b81614a23565b975060408a01356155ab81614a23565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a01356155d781614a23565b809250506101008a013590509295985092959850929598565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6020808252600f908201526e149bdd5d195c8e8811561412549151608a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561568257600080fd5b813561374e81614a23565b60006020828403121561569f57600080fd5b5051919050565b60208082526022908201527f526f757465723a20494e53554646494349454e545f4f55545055545f414d4f55604082015261139560f21b606082015260800190565b6001600160a01b03948516815292909316602083015263ffffffff9081166040830152909116606082015260800190565b60006020828403121561572b57600080fd5b815161374e81614a23565b634e487b7160e01b600052601160045260246000fd5b6000821982111561575f5761575f615736565b500190565b60008282101561577657615776615736565b500390565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000816157ae576157ae615736565b506000190190565b6020808252600f908201526e115610d154d4d2559157d253941555608a1b604082015260600190565b600060ff821660ff84168060ff038211156157fc576157fc615736565b019392505050565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b600060ff821660ff81141561584b5761584b615736565b60010192915050565b600060a0820160018060a01b038089168452602081891681860152818816604086015286606086015260a0608086015282865180855260c087019150828801945060005b818110156158b6578551851683529483019491830191600101615898565b50909b9a5050505050505050505050565b600060208083850312156158da57600080fd5b82516001600160401b038111156158f057600080fd5b8301601f8101851361590157600080fd5b805161590f614f0182614ebd565b81815260059190911b8201830190838101908783111561592e57600080fd5b928401925b8284101561594c57835182529284019290840190615933565b979650505050505050565b6020808252601e908201527f526f757465723a204558434553534956455f494e5055545f414d4f554e540000604082015260600190565b60006000198214156159a2576159a2615736565b5060010190565b602080825260139082015272125394d551919250d251539517d3d555141555606a1b604082015260600190565b6000602082840312156159e857600080fd5b815161374e81614a46565b60008060408385031215615a0657600080fd5b505080516020909101519092909150565b60008060408385031215615a2a57600080fd5b8251615a3581614a23565b6020840151909250615a4681614a23565b809150509250929050565b6020808252601d908201527f526f757465723a20494e53554646494349454e545f415f414d4f554e54000000604082015260600190565b6020808252601d908201527f526f757465723a20494e53554646494349454e545f425f414d4f554e54000000604082015260600190565b60005b83811015615ada578181015183820152602001615ac2565b83811115615ae9576000848401525b50505050565b60008251615b01818460208701615abf565b9190910192915050565b6001600160a01b0393841681529183166020830152909116604082015260600190565b60008060008060008060c08789031215615b4757600080fd5b8651615b5281614a23565b8096505060208701519450604087015193506060870151615b7281614db3565b6080880151909350615b8381614db3565b60a0880151909250615b9481614db3565b809150509295509295509295565b9586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b84815283602082015260018060a01b03831660408201526080606082015260008251806080840152615c0f8160a0850160208701615abf565b601f01601f19169190910160a00195945050505050565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6001600160a01b0392909216825260208201526040019056feddac40937f35385a34f721af292e5a83fc5b840f722bff57c2fc71adba708c48a26469706673582212205b3269feac14e5f9aea440ef1c9c16002e20d1ed133e9fd7e55104db758bc54964736f6c634300080a0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}