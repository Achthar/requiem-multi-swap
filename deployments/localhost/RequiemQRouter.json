{
  "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "output",
          "type": "address"
        }
      ],
      "name": "Exchange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRequiemQRouter.Swap[][]",
          "name": "swapSequences",
          "type": "tuple[][]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "multihopBatchSwapExactIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRequiemQRouter.Swap[][]",
          "name": "swapSequences",
          "type": "tuple[][]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "multihopBatchSwapExactOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountLast",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountLast",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountLast",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETHSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x90732914fac4956793f4f04e30f2ec21732ea2056d83c316bc4bf703e3d70189",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
    "transactionIndex": 0,
    "gasUsed": "4635198",
    "logsBloom": "0x
    "blockHash": "0x3243ba8bfc08e2abe4f93734c7309526ec40762ccde7f813d5ceab648dc26277",
    "transactionHash": "0x90732914fac4956793f4f04e30f2ec21732ea2056d83c316bc4bf703e3d70189",
    "logs": [],
    "blockNumber": 13,
    "cumulativeGasUsed": "4635198",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9"
  ],
  "solcInputHash": "527294eb863e82bfdbe83df0620b85bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"output\",\"type\":\"address\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IRequiemQRouter.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IRequiemQRouter.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLast\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLast\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLast\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemQRouter.sol\":\"RequiemQRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":12500},\"remappings\":[]},\"sources\":{\"contracts/RequiemQRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.10;\\n\\nimport \\\"./interfaces/IRequiemFactory.sol\\\";\\nimport \\\"./interfaces/IRequiemFormula.sol\\\";\\nimport \\\"./interfaces/IRequiemPair.sol\\\";\\nimport \\\"./interfaces/IRequiemSwap.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IRequiemQRouter.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\ncontract RequiemQRouter is IRequiemQRouter {\\n    address public immutable override factory;\\n    address public immutable override formula;\\n    address public immutable override WETH;\\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"Router: EXPIRED\\\");\\n        _;\\n    }\\n\\n    constructor(address _factory, address _WETH) {\\n        factory = _factory;\\n        formula = IRequiemFactory(_factory).formula();\\n        WETH = _WETH;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH);\\n        // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        address tokenIn,\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        address input = tokenIn;\\n        for (uint256 i = 0; i < path.length; i++) {\\n            IRequiemPair pairV2 = IRequiemPair(path[i]);\\n            address token0 = pairV2.token0();\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out, address output) = input == token0 ? (uint256(0), amountOut, pairV2.token1()) : (amountOut, uint256(0), token0);\\n            address to = i < path.length - 1 ? path[i + 1] : _to;\\n            pairV2.swap(amount0Out, amount1Out, to, new bytes(0));\\n            emit Exchange(address(pairV2), amountOut, output);\\n            input = output;\\n        }\\n    }\\n\\n    function swapExactTokensForTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) public virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _validateAmountOut(tokenIn, tokenOut, amountIn, amountOutMin, path);\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\\n        _swap(tokenIn, amounts, path, to);\\n    }\\n\\n    // the onSwap functions are designed to include the stable swap\\n    // it currenty only allows exactIn structures\\n    function onSwapExactTokensForTokens(\\n        address[] memory pools,\\n        address[] memory tokens,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to,\\n        uint256 deadline\\n    ) public virtual ensure(deadline) returns (uint256 amountLast) {\\n        amountLast = amountIn;\\n        TransferHelper.safeTransferFrom(tokens[0], msg.sender, pools[0], amountIn);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address _to = i == pools.length - 1 ? to : pools[i + 1];\\n            amountLast = IRequiemSwap(pools[i]).onSwapGivenIn(tokens[i], tokens[i + 1], amountLast, 0, _to);\\n        }\\n        require(amountOutMin <= amountLast, \\\"INSUFFICIENT_OUTPUT\\\");\\n    }\\n\\n    function onSwapExactETHForTokens(\\n        address[] memory pools,\\n        address[] memory tokens,\\n        uint256 amountOutMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual ensure(deadline) returns (uint256 amountLast) {\\n        amountLast = msg.value;\\n        transferETHTo(msg.value, pools[0]);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address _to = i == pools.length - 1 ? to : pools[i + 1];\\n            amountLast = IRequiemSwap(pools[i]).onSwapGivenIn(tokens[i], tokens[i + 1], amountLast, 0, _to);\\n        }\\n        require(amountOutMin <= amountLast, \\\"INSUFFICIENT_OUTPUT\\\");\\n    }\\n\\n    function onSwapExactTokensForETH(\\n        address[] memory pools,\\n        address[] memory tokens,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to,\\n        uint256 deadline\\n    ) external virtual ensure(deadline) returns (uint256 amountLast) {\\n        amountLast = amountIn;\\n        TransferHelper.safeTransferFrom(tokens[0], msg.sender, pools[0], amountIn);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address _to = i == pools.length - 1 ? address(this) : pools[i + 1];\\n            amountLast = IRequiemSwap(pools[i]).onSwapGivenIn(tokens[i], tokens[i + 1], amountLast, 0, _to);\\n        }\\n        require(amountOutMin <= amountLast, \\\"INSUFFICIENT_OUTPUT\\\");\\n        transferAll(ETH_ADDRESS, to, amountLast);\\n    }\\n\\n    // direct swap function for given exact output\\n    function onSwapTokensForExactTokens(\\n        address[] memory pools,\\n        address[] memory tokens,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to,\\n        uint256 deadline\\n    ) external virtual ensure(deadline) returns (uint256[] memory amounts) {\\n        // set amount array\\n        amounts = new uint256[](tokens.length);\\n        amounts[pools.length] = amountOut;\\n\\n        // calculate all amounts to be sent and recieved\\n        for (uint256 i = amounts.length - 1; i > 0; i--) {\\n            amounts[i - 1] = IRequiemSwap(pools[i - 1]).calculateSwapGivenOut(tokens[i - 1], tokens[i], amounts[i]);\\n        }\\n\\n        // check input condition\\n        require(amounts[0] <= amountInMax, \\\"EXCESSIVE_INPUT\\\");\\n\\n        // tranfer amounts\\n        TransferHelper.safeTransferFrom(tokens[0], msg.sender, pools[0], amounts[0]);\\n\\n        // use general swap functions that do not execute the full calculation to save gas\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address _to = i == pools.length - 1 ? to : pools[i + 1];\\n            IRequiemSwap(pools[i]).onSwap(tokens[i], tokens[i + 1], amounts[i], amounts[i + 1], _to);\\n        }\\n    }\\n\\n    function onSwapETHForExactTokens(\\n        address[] memory pools,\\n        address[] memory tokens,\\n        uint256 amountOut,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = new uint256[](tokens.length);\\n        amounts[pools.length] = amountOut;\\n        for (uint256 i = amounts.length - 1; i > 0; i--) {\\n            amounts[i - 1] = IRequiemSwap(pools[i - 1]).calculateSwapGivenOut(tokens[i - 1], tokens[i], amounts[i]);\\n        }\\n\\n        require(amounts[0] <= msg.value, \\\"EXCESSIVE_INPUT\\\");\\n\\n        transferETHTo(amounts[0], pools[0]);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address _to = i == pools.length - 1 ? to : pools[i + 1];\\n            IRequiemSwap(pools[i]).onSwap(tokens[i], tokens[i + 1], amounts[i], amounts[i + 1], _to);\\n        }\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\n    }\\n\\n    function onSwapTokensForExactETH(\\n        address[] memory pools,\\n        address[] memory tokens,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to,\\n        uint256 deadline\\n    ) external virtual ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = new uint256[](tokens.length);\\n        amounts[pools.length] = amountOut;\\n        for (uint256 i = amounts.length - 1; i > 0; i--) {\\n            amounts[i - 1] = IRequiemSwap(pools[i - 1]).calculateSwapGivenOut(tokens[i - 1], tokens[i], amounts[i]);\\n        }\\n\\n        require(amounts[0] <= amountInMax, \\\"EXCESSIVE_INPUT\\\");\\n        TransferHelper.safeTransferFrom(tokens[0], msg.sender, pools[0], amounts[0]);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address _to = i == pools.length - 1 ? address(this) : pools[i + 1];\\n            IRequiemSwap(pools[i]).onSwap(tokens[i], tokens[i + 1], amounts[i], amounts[i + 1], _to);\\n        }\\n\\n        transferAll(ETH_ADDRESS, to, amountOut);\\n    }\\n\\n    function swapTokensForExactTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _validateAmountIn(tokenIn, tokenOut, amountOut, amountInMax, path);\\n\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\\n        _swap(tokenIn, amounts, path, to);\\n    }\\n\\n    function swapExactETHForTokens(\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _validateAmountOut(WETH, tokenOut, msg.value, amountOutMin, path);\\n\\n        transferETHTo(amounts[0], path[0]);\\n        _swap(WETH, amounts, path, to);\\n    }\\n\\n    function swapTokensForExactETH(\\n        address tokenIn,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _validateAmountIn(tokenIn, WETH, amountOut, amountInMax, path);\\n\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\\n        _swap(tokenIn, amounts, path, address(this));\\n        transferAll(ETH_ADDRESS, to, amounts[amounts.length - 1]);\\n    }\\n\\n    function swapExactTokensForETH(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _validateAmountOut(tokenIn, WETH, amountIn, amountOutMin, path);\\n\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\\n        _swap(tokenIn, amounts, path, address(this));\\n        transferAll(ETH_ADDRESS, to, amounts[amounts.length - 1]);\\n    }\\n\\n    function swapETHForExactTokens(\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = _validateAmountIn(WETH, tokenOut, amountOut, msg.value, path);\\n\\n        transferETHTo(amounts[0], path[0]);\\n        _swap(WETH, amounts, path, to);\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\n    }\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swapSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        address input = tokenIn;\\n        for (uint256 i; i < path.length; i++) {\\n            IRequiemPair pair = IRequiemPair(path[i]);\\n            uint256 amountInput;\\n            uint256 amountOutput;\\n            address currentOutput;\\n            {\\n                (address output, uint256 reserveInput, uint256 reserveOutput, uint32 tokenWeightInput, uint32 tokenWeightOutput, uint32 swapFee) = IRequiemFormula(formula).getFactoryReserveAndWeights(\\n                    factory,\\n                    address(pair),\\n                    input\\n                );\\n                amountInput = IERC20(input).balanceOf(address(pair)) - reserveInput;\\n                amountOutput = IRequiemFormula(formula).getAmountOut(amountInput, reserveInput, reserveOutput, tokenWeightInput, tokenWeightOutput, swapFee);\\n                currentOutput = output;\\n            }\\n            (uint256 amount0Out, uint256 amount1Out) = input == pair.token0() ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\\n            address to = i < path.length - 1 ? path[i + 1] : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n            emit Exchange(address(pair), amountOutput, currentOutput);\\n            input = currentOutput;\\n        }\\n    }\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override ensure(deadline) {\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amountIn);\\n        uint256 balanceBefore = IERC20(tokenOut).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(tokenIn, path, to);\\n        require(IERC20(tokenOut).balanceOf(to) - balanceBefore >= amountOutMin, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    }\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual override ensure(deadline) {\\n        //            require(path[0] == WETH, \\\"Router: INVALID_PATH\\\");\\n        uint256 amountIn = msg.value;\\n        transferETHTo(amountIn, path[0]);\\n        uint256 balanceBefore = IERC20(tokenOut).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(WETH, path, to);\\n        require(IERC20(tokenOut).balanceOf(to) - balanceBefore >= amountOutMin, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    }\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual override ensure(deadline) {\\n        TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amountIn);\\n        _swapSupportingFeeOnTransferTokens(tokenIn, path, address(this));\\n        uint256 amountOut = IERC20(WETH).balanceOf(address(this));\\n        require(amountOut >= amountOutMin, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        transferAll(ETH_ADDRESS, to, amountOut);\\n    }\\n\\n    function multihopBatchSwapExactIn(\\n        Swap[][] memory swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 totalAmountIn,\\n        uint256 minTotalAmountOut,\\n        uint256 deadline\\n    ) public payable virtual override ensure(deadline) returns (uint256 totalAmountOut) {\\n        transferFromAll(tokenIn, totalAmountIn);\\n        uint256 balanceBefore;\\n        if (!isETH(tokenOut)) {\\n            balanceBefore = IERC20(tokenOut).balanceOf(msg.sender);\\n        }\\n\\n        for (uint256 i = 0; i < swapSequences.length; i++) {\\n            uint256 tokenAmountOut;\\n            for (uint256 k = 0; k < swapSequences[i].length; k++) {\\n                Swap memory swap = swapSequences[i][k];\\n                if (k > 0) {\\n                    // Makes sure that on the second swap the output of the first was used\\n                    // so there is not intermediate token leftover\\n                    swap.swapAmount = tokenAmountOut;\\n                }\\n                tokenAmountOut = _swapSingleSupportFeeOnTransferTokens(swap.tokenIn, swap.tokenOut, swap.pool, swap.swapAmount, swap.limitReturnAmount);\\n            }\\n\\n            // This takes the amountOut of the last swap\\n            tokenAmountOut += totalAmountOut;\\n        }\\n\\n        transferAll(tokenOut, msg.sender, totalAmountOut);\\n        transferAll(tokenIn, msg.sender, getBalance(tokenIn));\\n\\n        if (isETH(tokenOut)) {\\n            require(totalAmountOut >= minTotalAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n        } else {\\n            require(IERC20(tokenOut).balanceOf(msg.sender) - balanceBefore >= minTotalAmountOut, \\\"<minTotalAmountOut\\\");\\n        }\\n    }\\n\\n    function multihopBatchSwapExactOut(\\n        Swap[][] memory swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 maxTotalAmountIn,\\n        uint256 deadline\\n    ) public payable virtual override ensure(deadline) returns (uint256 totalAmountIn) {\\n        transferFromAll(tokenIn, maxTotalAmountIn);\\n\\n        for (uint256 i = 0; i < swapSequences.length; i++) {\\n            uint256 tokenAmountInFirstSwap;\\n            // Specific code for a simple swap and a multihop (2 swaps in sequence)\\n            if (swapSequences[i].length == 1) {\\n                Swap memory swap = swapSequences[i][0];\\n                tokenAmountInFirstSwap = _swapSingleMixOut(swap.tokenIn, swap.tokenOut, swap.pool, swap.swapAmount, swap.limitReturnAmount);\\n            } else {\\n                // Consider we are swapping A -> B and B -> C. The goal is to buy a given amount\\n                // of token C. But first we need to buy B with A so we can then buy C with B\\n                // To get the exact amount of C we then first need to calculate how much B we\\\"ll need:\\n                uint256 intermediateTokenAmount;\\n                // This would be token B as described above\\n                Swap memory secondSwap = swapSequences[i][1];\\n                {\\n                    address[] memory paths = new address[](1);\\n                    paths[0] = secondSwap.pool;\\n                    uint256[] memory amounts = IRequiemFormula(formula).getFactoryAmountsIn(factory, secondSwap.tokenIn, secondSwap.tokenOut, secondSwap.swapAmount, paths);\\n                    intermediateTokenAmount = amounts[0];\\n                    require(intermediateTokenAmount <= secondSwap.limitReturnAmount, \\\"Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n                }\\n\\n                //// Buy intermediateTokenAmount of token B with A in the first pool\\n                Swap memory firstSwap = swapSequences[i][0];\\n                tokenAmountInFirstSwap = _swapSingleMixOut(firstSwap.tokenIn, firstSwap.tokenOut, firstSwap.pool, intermediateTokenAmount, firstSwap.limitReturnAmount);\\n\\n                //// Buy the final amount of token C desired\\n                _swapSingle(secondSwap.tokenIn, secondSwap.pool, intermediateTokenAmount, secondSwap.swapAmount);\\n            }\\n\\n            totalAmountIn += tokenAmountInFirstSwap;\\n        }\\n\\n        require(totalAmountIn <= maxTotalAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        transferAll(tokenOut, msg.sender, getBalance(tokenOut));\\n        transferAll(tokenIn, msg.sender, getBalance(tokenIn));\\n    }\\n\\n    function transferFromAll(address token, uint256 amount) internal returns (bool) {\\n        if (isETH(token)) {\\n            IWETH(WETH).deposit{value: msg.value}();\\n        } else {\\n            TransferHelper.safeTransferFrom(token, msg.sender, address(this), amount);\\n        }\\n        return true;\\n    }\\n\\n    function getBalance(address token) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return IWETH(WETH).balanceOf(address(this));\\n        } else {\\n            return IERC20(token).balanceOf(address(this));\\n        }\\n    }\\n\\n    function _swapSingleMixOut(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool,\\n        uint256 swapAmount,\\n        uint256 limitReturnAmount\\n    ) internal returns (uint256 tokenAmountIn) {\\n        address[] memory paths = new address[](1);\\n        paths[0] = pool;\\n        uint256[] memory amounts = IRequiemFormula(formula).getFactoryAmountsIn(factory, tokenIn, tokenOut, swapAmount, paths);\\n        tokenAmountIn = amounts[0];\\n        require(tokenAmountIn <= limitReturnAmount, \\\"Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n        _swapSingle(tokenIn, pool, tokenAmountIn, amounts[1]);\\n    }\\n\\n    function _swapSingle(\\n        address tokenIn,\\n        address pair,\\n        uint256 targetSwapAmount,\\n        uint256 targetOutAmount\\n    ) internal {\\n        TransferHelper.safeTransfer(tokenIn, pair, targetSwapAmount);\\n        IRequiemPair pairV2 = IRequiemPair(pair);\\n        address token0 = pairV2.token0();\\n\\n        (uint256 amount0Out, uint256 amount1Out, address output) = tokenIn == token0 ? (uint256(0), targetOutAmount, pairV2.token1()) : (targetOutAmount, uint256(0), token0);\\n        pairV2.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n\\n        emit Exchange(pair, targetOutAmount, output);\\n    }\\n\\n    function _swapSingleSupportFeeOnTransferTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        address pool,\\n        uint256 swapAmount,\\n        uint256 limitReturnAmount\\n    ) internal returns (uint256 tokenAmountOut) {\\n        TransferHelper.safeTransfer(tokenIn, pool, swapAmount);\\n\\n        uint256 amountOutput;\\n        {\\n            (, uint256 reserveInput, uint256 reserveOutput, uint32 tokenWeightInput, uint32 tokenWeightOutput, uint32 swapFee) = IRequiemFormula(formula).getFactoryReserveAndWeights(\\n                factory,\\n                pool,\\n                tokenIn\\n            );\\n            uint256 amountInput = IERC20(tokenIn).balanceOf(pool) - reserveInput;\\n            amountOutput = IRequiemFormula(formula).getAmountOut(amountInput, reserveInput, reserveOutput, tokenWeightInput, tokenWeightOutput, swapFee);\\n        }\\n        uint256 balanceBefore = IERC20(tokenOut).balanceOf(address(this));\\n        (uint256 amount0Out, uint256 amount1Out) = tokenIn == IRequiemPair(pool).token0() ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\\n        IRequiemPair(pool).swap(amount0Out, amount1Out, address(this), new bytes(0));\\n        emit Exchange(pool, amountOutput, tokenOut);\\n\\n        tokenAmountOut = IERC20(tokenOut).balanceOf(address(this)) - balanceBefore;\\n        require(tokenAmountOut >= limitReturnAmount, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    }\\n\\n    function _validateAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        amounts = IRequiemFormula(formula).getFactoryAmountsOut(factory, tokenIn, tokenOut, amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    }\\n\\n    function _calculateAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        amounts = IRequiemFormula(formula).getFactoryAmountsOut(factory, tokenIn, tokenOut, amountIn, path);\\n    }\\n\\n    function _validateAmountIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        amounts = IRequiemFormula(formula).getFactoryAmountsIn(factory, tokenIn, tokenOut, amountOut, path);\\n        require(amounts[0] <= amountInMax, \\\"Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n    }\\n\\n    // the same as _validateAmountIn, just with no requirement checking\\n    function _calculateAmountIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        amounts = IRequiemFormula(formula).getFactoryAmountsIn(factory, tokenIn, tokenOut, amountOut, path);\\n    }\\n\\n    function transferETHTo(uint256 amount, address to) internal {\\n        IWETH(WETH).deposit{value: amount}();\\n        assert(IWETH(WETH).transfer(to, amount));\\n    }\\n\\n    function transferAll(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n\\n        if (isETH(token)) {\\n            IWETH(WETH).withdraw(amount);\\n            TransferHelper.safeTransferETH(to, amount);\\n        } else {\\n            TransferHelper.safeTransfer(token, to, amount);\\n        }\\n        return true;\\n    }\\n\\n    function isETH(address token) internal pure returns (bool) {\\n        return (token == ETH_ADDRESS);\\n    }\\n}\\n\",\"keccak256\":\"0x692b3459da2823ae7bcbb799ee3bd59d85c6e310250be30421a50983774a7162\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb7230835a4efbbbebcb5371d121977e859388b33f3ee5d9a7a44fc4de8d6b970\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x4c6cbede01f2adab66096cbfa9f82596da0b22f70a745e95a0af2cd9f87d1714\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\ninterface IRequiemFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint);\\n    function feeTo() external view returns (address);\\n    function formula() external view returns (address);\\n    function protocolFee() external view returns (uint);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function isPair(address) external view returns (bool);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external returns (address pair);\\n    function getWeightsAndSwapFee(address pair) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setProtocolFee(uint) external;\\n}\\n\",\"keccak256\":\"0x500ff0062150432105415e938dcaa0d64b666c224764c4cb901137ce45204b5d\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.5.16;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IRequiemFormula {\\n\\n    function getReserveAndWeights(address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getPairAmountIn(address pair, address tokenIn, uint amountOut) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getPairAmountOut(address pair, address tokenIn, uint amountIn) external view returns (uint amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x8a32e1c404f6a93f17cf6151173ff21fedb58abe50a6635cb10f47780f044c98\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IRequiemPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IRequiemERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemPair is IRequiemERC20 {\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n    function getSwapFee() external view returns (uint32);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address,\\n        address,\\n        uint32,\\n        uint32\\n    ) external;\\n}\\n\",\"keccak256\":\"0x81ff6bd4a679d53dec7084e8e98b0c3f611879700e3f47aaa74d5e4515cf2091\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemQRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemQRouter {\\n    event Exchange(address pair, uint256 amountOut, address output);\\n    struct Swap {\\n        address pool;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 swapAmount; // tokenInAmount / tokenOutAmount\\n        uint256 limitReturnAmount; // minAmountOut / maxAmountIn\\n        uint256 maxPrice;\\n    }\\n\\n    function factory() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function swapExactTokensForTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        address tokenIn,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        address tokenOut,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function multihopBatchSwapExactIn(\\n        Swap[][] memory swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 totalAmountIn,\\n        uint256 minTotalAmountOut,\\n        uint256 deadline\\n    ) external payable returns (uint256 totalAmountOut);\\n\\n    function multihopBatchSwapExactOut(\\n        Swap[][] memory swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 maxTotalAmountIn,\\n        uint256 deadline\\n    ) external payable returns (uint256 totalAmountIn);\\n}\\n\",\"keccak256\":\"0xc5b704b44bfb52080506383551d1fc4bd1ecb42452830a777fa029008bca55bc\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemSwap {\\n    // this funtion requires the correctly calculated amounts as input\\n    // the others are supposed to implement that calculation\\n    // no return value required since the amounts are already known\\n    function onSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address to\\n    ) external;\\n\\n    //\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external returns (uint256);\\n\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to\\n    ) external returns (uint256);\\n\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (uint256);\\n\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x905db01e6f2b1be6fa834315054c375eac7f2c719dc3ca333dfb5d5597bfde56\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for WETH9.\\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x13735d45257a1ea45c2a7dc3bb8a68c89ae9b7159f57180c395793f57c05afcc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.10;\\n\\n// solhint-disable avoid-low-level-calls, reason-string\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xcb1337f49b7a886980209ccd42806883db2bfa17b8dac448587f31ddd1147a1b\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101635760003560e01c8063ad5c4648116100c0578063ce81963211610074578063f35aaf6311610059578063f35aaf63146103f1578063fa3219d514610411578063fde1adda1461043157600080fd5b8063ce819632146103be578063d59e44ee146103d157600080fd5b8063b4e819fd116100a5578063b4e819fd1461034a578063bff51d711461036a578063c45a01551461038a57600080fd5b8063ad5c464814610303578063b05f579e1461033757600080fd5b8063674ee80b116101175780639c91fcb5116100fc5780639c91fcb5146102a3578063a67d0e3c146102c3578063abbfddc5146102e357600080fd5b8063674ee80b1461027d578063840c34d01461029057600080fd5b80634b75f54f116101485780634b75f54f146101f157806351bf18301461023d5780635cae03101461025d57600080fd5b806308c820da146101a75780630d1424a3146101d057600080fd5b366101a257336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101a0576101a06147c6565b005b600080fd5b6101ba6101b5366004614941565b610444565b6040516101c791906149c9565b60405180910390f35b6101e36101de366004614941565b610912565b6040519081526020016101c7565b3480156101fd57600080fd5b506102257f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101c7565b34801561024957600080fd5b506101ba610258366004614a0d565b610b40565b34801561026957600080fd5b506101a0610278366004614aed565b610fd5565b6101a061028b366004614b74565b6111df565b6101e361029e366004614d2b565b611458565b3480156102af57600080fd5b506101ba6102be366004614aed565b61186c565b3480156102cf57600080fd5b506101a06102de366004614d9f565b6119f3565b3480156102ef57600080fd5b506101ba6102fe366004614a0d565b611c29565b34801561030f57600080fd5b506102257f000000000000000000000000000000000000000000000000000000000000000081565b6101ba610345366004614b74565b61208e565b34801561035657600080fd5b506101e3610365366004614a0d565b612218565b34801561037657600080fd5b506101ba610385366004614e38565b61246f565b34801561039657600080fd5b506102257f000000000000000000000000000000000000000000000000000000000000000081565b6101e36103cc366004614ecc565b612501565b3480156103dd57600080fd5b506101ba6103ec366004614d9f565b61284d565b3480156103fd57600080fd5b506101e361040c366004614a0d565b612947565b34801561041d57600080fd5b506101ba61042c366004614aed565b612b93565b6101ba61043f366004614b74565b612c46565b6060814281101561049c5760405162461bcd60e51b815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064015b60405180910390fd5b855167ffffffffffffffff8111156104b6576104b66147f5565b6040519080825280602002602001820160405280156104df578160200160208202803683370190505b50915084828851815181106104f6576104f6614f4a565b6020026020010181815250506000600183516105129190614fa8565b90505b80156106715787610527600183614fa8565b8151811061053757610537614f4a565b60200260200101516001600160a01b031663cc56fd438860018461055b9190614fa8565b8151811061056b5761056b614f4a565b602002602001015189848151811061058557610585614f4a565b602002602001015186858151811061059f5761059f614f4a565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381865afa158015610614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106389190614fbf565b83610644600184614fa8565b8151811061065457610654614f4a565b60209081029190910101528061066981614fd8565b915050610515565b50348260008151811061068657610686614f4a565b602002602001015111156106dc5760405162461bcd60e51b815260206004820152600f60248201527f4558434553534956455f494e50555400000000000000000000000000000000006044820152606401610493565b61071a826000815181106106f2576106f2614f4a565b60200260200101518860008151811061070d5761070d614f4a565b6020026020010151612d71565b60005b87518110156108b6576000600189516107369190614fa8565b8214610765578861074883600161500d565b8151811061075857610758614f4a565b6020026020010151610767565b855b905088828151811061077b5761077b614f4a565b60200260200101516001600160a01b03166332fd54938984815181106107a3576107a3614f4a565b60200260200101518a8560016107b9919061500d565b815181106107c9576107c9614f4a565b60200260200101518786815181106107e3576107e3614f4a565b6020026020010151888760016107f9919061500d565b8151811061080957610809614f4a565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b039485166004820152928416602484015260448301919091526064820152908416608482015260a401600060405180830381600087803b15801561088a57600080fd5b505af115801561089e573d6000803e3d6000fd5b505050505080806108ae90615025565b91505061071d565b50816000815181106108ca576108ca614f4a565b60200260200101513411156109085761090833836000815181106108f0576108f0614f4a565b6020026020010151346109039190614fa8565b612ea2565b5095945050505050565b600081428110156109655760405162461bcd60e51b815260206004820152600f60248201527f526f757465723a204558504952454400000000000000000000000000000000006044820152606401610493565b34915061097f348860008151811061070d5761070d614f4a565b60005b8751811015610aef5760006001895161099b9190614fa8565b82146109ca57886109ad83600161500d565b815181106109bd576109bd614f4a565b60200260200101516109cc565b855b90508882815181106109e0576109e0614f4a565b60200260200101516001600160a01b0316634ac00e03898481518110610a0857610a08614f4a565b60200260200101518a856001610a1e919061500d565b81518110610a2e57610a2e614f4a565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03928316600482015290821660248201526044810188905260006064820152908416608482015260a4016020604051808303816000875af1158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad99190614fbf565b9350508080610ae790615025565b915050610982565b50818511156109085760405162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f4f5554505554000000000000000000000000006044820152606401610493565b60608142811015610b935760405162461bcd60e51b815260206004820152600f60248201527f526f757465723a204558504952454400000000000000000000000000000000006044820152606401610493565b865167ffffffffffffffff811115610bad57610bad6147f5565b604051908082528060200260200182016040528015610bd6578160200160208202803683370190505b5091508582895181518110610bed57610bed614f4a565b602002602001018181525050600060018351610c099190614fa8565b90505b8015610d685788610c1e600183614fa8565b81518110610c2e57610c2e614f4a565b60200260200101516001600160a01b031663cc56fd4389600184610c529190614fa8565b81518110610c6257610c62614f4a565b60200260200101518a8481518110610c7c57610c7c614f4a565b6020026020010151868581518110610c9657610c96614f4a565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381865afa158015610d0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2f9190614fbf565b83610d3b600184614fa8565b81518110610d4b57610d4b614f4a565b602090810291909101015280610d6081614fd8565b915050610c0c565b508482600081518110610d7d57610d7d614f4a565b60200260200101511115610dd35760405162461bcd60e51b815260206004820152600f60248201527f4558434553534956455f494e50555400000000000000000000000000000000006044820152606401610493565b610e2d87600081518110610de957610de9614f4a565b6020026020010151338a600081518110610e0557610e05614f4a565b602002602001015185600081518110610e2057610e20614f4a565b6020026020010151612f8a565b60005b8851811015610fc957600060018a51610e499190614fa8565b8214610e785789610e5b83600161500d565b81518110610e6b57610e6b614f4a565b6020026020010151610e7a565b855b9050898281518110610e8e57610e8e614f4a565b60200260200101516001600160a01b03166332fd54938a8481518110610eb657610eb6614f4a565b60200260200101518b856001610ecc919061500d565b81518110610edc57610edc614f4a565b6020026020010151878681518110610ef657610ef6614f4a565b602002602001015188876001610f0c919061500d565b81518110610f1c57610f1c614f4a565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b039485166004820152928416602484015260448301919091526064820152908416608482015260a401600060405180830381600087803b158015610f9d57600080fd5b505af1158015610fb1573d6000803e3d6000fd5b50505050508080610fc190615025565b915050610e30565b50509695505050505050565b80428110156110265760405162461bcd60e51b815260206004820152600f60248201527f526f757465723a204558504952454400000000000000000000000000000000006044820152606401610493565b61105988338787600081811061103e5761103e614f4a565b9050602002016020810190611053919061505e565b8a612f8a565b61109888868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250613101915050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611118573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113c9190614fbf565b9050868110156111b45760405162461bcd60e51b815260206004820152602260248201527f526f757465723a20494e53554646494349454e545f4f55545055545f414d4f5560448201527f4e540000000000000000000000000000000000000000000000000000000000006064820152608401610493565b6111d373eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8583613540565b50505050505050505050565b80428110156112305760405162461bcd60e51b815260206004820152600f60248201527f526f757465723a204558504952454400000000000000000000000000000000006044820152606401610493565b3461126081878760008161124657611246614f4a565b905060200201602081019061125b919061505e565b612d71565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152600091908a16906370a0823190602401602060405180830381865afa1580156112c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e79190614fbf565b90506113487f00000000000000000000000000000000000000000000000000000000000000008888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a9250613101915050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152899183918c16906370a0823190602401602060405180830381865afa1580156113ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cf9190614fbf565b6113d99190614fa8565b101561144d5760405162461bcd60e51b815260206004820152602260248201527f526f757465723a20494e53554646494349454e545f4f55545055545f414d4f5560448201527f4e540000000000000000000000000000000000000000000000000000000000006064820152608401610493565b505050505050505050565b600081428110156114ab5760405162461bcd60e51b815260206004820152600f60248201527f526f757465723a204558504952454400000000000000000000000000000000006044820152606401610493565b6114b5868561362c565b5060005b87518110156117ee5760008882815181106114d6576114d6614f4a565b602002602001015151600114156115485760008983815181106114fb576114fb614f4a565b602002602001015160008151811061151557611515614f4a565b60200260200101519050611540816020015182604001518360000151846060015185608001516136e1565b9150506117ce565b6000808a848151811061155d5761155d614f4a565b602002602001015160018151811061157757611577614f4a565b602002602001015190506000600167ffffffffffffffff81111561159d5761159d6147f5565b6040519080825280602002602001820160405280156115c6578160200160208202803683370190505b5090508160000151816000815181106115e1576115e1614f4a565b60200260200101906001600160a01b031690816001600160a01b03168152505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166367f84adc7f0000000000000000000000000000000000000000000000000000000000000000856020015186604001518760600151876040518663ffffffff1660e01b815260040161168395949392919061507b565b600060405180830381865afa1580156116a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526116e691908101906150ef565b9050806000815181106116fb576116fb614f4a565b6020026020010151935082608001518411156117595760405162461bcd60e51b815260206004820152601e60248201527f526f757465723a204558434553534956455f494e5055545f414d4f554e5400006044820152606401610493565b505060008b858151811061176f5761176f614f4a565b602002602001015160008151811061178957611789614f4a565b602002602001015190506117b08160200151826040015183600001518685608001516136e1565b93506117ca826020015183600001518585606001516138ac565b5050505b6117d8818561500d565b93505080806117e690615025565b9150506114b9565b508382111561183f5760405162461bcd60e51b815260206004820152600c60248201527f4552525f4c494d49545f494e00000000000000000000000000000000000000006044820152606401610493565b611852853361184d88613a96565b613540565b50611861863361184d89613a96565b505095945050505050565b606081428110156118bf5760405162461bcd60e51b815260206004820152600f60248201527f526f757465723a204558504952454400000000000000000000000000000000006044820152606401610493565b61191f897f00000000000000000000000000000000000000000000000000000000000000008a8a8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613baf92505050565b915061196189338888600081811061193957611939614f4a565b905060200201602081019061194e919061505e565b85600081518110610e2057610e20614f4a565b6119a18983888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250613d49915050565b6119e673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8584600186516119c99190614fa8565b815181106119d9576119d9614f4a565b6020026020010151613540565b5050979650505050505050565b8042811015611a445760405162461bcd60e51b815260206004820152600f60248201527f526f757465723a204558504952454400000000000000000000000000000000006044820152606401610493565b611a5c89338787600081811061103e5761103e614f4a565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152600091908a16906370a0823190602401602060405180830381865afa158015611abf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae39190614fbf565b9050611b248a878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250613101915050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152889183918c16906370a0823190602401602060405180830381865afa158015611b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bab9190614fbf565b611bb59190614fa8565b10156111d35760405162461bcd60e51b815260206004820152602260248201527f526f757465723a20494e53554646494349454e545f4f55545055545f414d4f5560448201527f4e540000000000000000000000000000000000000000000000000000000000006064820152608401610493565b60608142811015611c7c5760405162461bcd60e51b815260206004820152600f60248201527f526f757465723a204558504952454400000000000000000000000000000000006044820152606401610493565b865167ffffffffffffffff811115611c9657611c966147f5565b604051908082528060200260200182016040528015611cbf578160200160208202803683370190505b5091508582895181518110611cd657611cd6614f4a565b602002602001018181525050600060018351611cf29190614fa8565b90505b8015611e515788611d07600183614fa8565b81518110611d1757611d17614f4a565b60200260200101516001600160a01b031663cc56fd4389600184611d3b9190614fa8565b81518110611d4b57611d4b614f4a565b60200260200101518a8481518110611d6557611d65614f4a565b6020026020010151868581518110611d7f57611d7f614f4a565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381865afa158015611df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e189190614fbf565b83611e24600184614fa8565b81518110611e3457611e34614f4a565b602090810291909101015280611e4981614fd8565b915050611cf5565b508482600081518110611e6657611e66614f4a565b60200260200101511115611ebc5760405162461bcd60e51b815260206004820152600f60248201527f4558434553534956455f494e50555400000000000000000000000000000000006044820152606401610493565b611ed287600081518110610de957610de9614f4a565b60005b885181101561206e57600060018a51611eee9190614fa8565b8214611f1d5789611f0083600161500d565b81518110611f1057611f10614f4a565b6020026020010151611f1f565b305b9050898281518110611f3357611f33614f4a565b60200260200101516001600160a01b03166332fd54938a8481518110611f5b57611f5b614f4a565b60200260200101518b856001611f71919061500d565b81518110611f8157611f81614f4a565b6020026020010151878681518110611f9b57611f9b614f4a565b602002602001015188876001611fb1919061500d565b81518110611fc157611fc1614f4a565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b039485166004820152928416602484015260448301919091526064820152908416608482015260a401600060405180830381600087803b15801561204257600080fd5b505af1158015612056573d6000803e3d6000fd5b5050505050808061206690615025565b915050611ed5565b50610fc973eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8588613540565b606081428110156120e15760405162461bcd60e51b815260206004820152600f60248201527f526f757465723a204558504952454400000000000000000000000000000000006044820152606401610493565b6121417f00000000000000000000000000000000000000000000000000000000000000008989348a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613fca92505050565b91506121748260008151811061215957612159614f4a565b60200260200101518787600081811061124657611246614f4a565b6121d47f0000000000000000000000000000000000000000000000000000000000000000838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a9250613d49915050565b816000815181106121e7576121e7614f4a565b602002602001015134111561220d5761220d33836000815181106108f0576108f0614f4a565b509695505050505050565b6000814281101561226b5760405162461bcd60e51b815260206004820152600f60248201527f526f757465723a204558504952454400000000000000000000000000000000006044820152606401610493565b8591506122ae8760008151811061228457612284614f4a565b6020026020010151338a6000815181106122a0576122a0614f4a565b602002602001015189612f8a565b60005b885181101561241e57600060018a516122ca9190614fa8565b82146122f957896122dc83600161500d565b815181106122ec576122ec614f4a565b60200260200101516122fb565b855b905089828151811061230f5761230f614f4a565b60200260200101516001600160a01b0316634ac00e038a848151811061233757612337614f4a565b60200260200101518b85600161234d919061500d565b8151811061235d5761235d614f4a565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03928316600482015290821660248201526044810188905260006064820152908416608482015260a4016020604051808303816000875af11580156123e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124089190614fbf565b935050808061241690615025565b9150506122b1565b508185111561220d5760405162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f4f5554505554000000000000000000000000006044820152606401610493565b606081428110156124c25760405162461bcd60e51b815260206004820152600f60248201527f526f757465723a204558504952454400000000000000000000000000000000006044820152606401610493565b6124cf8989898989613baf565b91506124e9893387600081518110610e0557610e05614f4a565b6124f589838787613d49565b50979650505050505050565b600081428110156125545760405162461bcd60e51b815260206004820152600f60248201527f526f757465723a204558504952454400000000000000000000000000000000006044820152606401610493565b61255e878661362c565b50600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03881614612609576040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038816906370a0823190602401602060405180830381865afa1580156125e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126069190614fbf565b90505b60005b89518110156126da576000805b8b838151811061262b5761262b614f4a565b6020026020010151518110156126ba5760008c848151811061264f5761264f614f4a565b6020026020010151828151811061266857612668614f4a565b60200260200101519050600082111561268357606081018390525b6126a481602001518260400151836000015184606001518560800151614129565b92505080806126b290615025565b915050612619565b506126c5858261500d565b508190506126d281615025565b91505061260c565b506126e6873385613540565b506126f5883361184d8b613a96565b5073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0388161415612770578483101561276b5760405162461bcd60e51b815260206004820152600d60248201527f4552525f4c494d49545f4f5554000000000000000000000000000000000000006044820152606401610493565b610fc9565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152336004820152859082906001600160a01b038a16906370a0823190602401602060405180830381865afa1580156127d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f59190614fbf565b6127ff9190614fa8565b1015610fc95760405162461bcd60e51b815260206004820152601260248201527f3c6d696e546f74616c416d6f756e744f757400000000000000000000000000006044820152606401610493565b606081428110156128a05760405162461bcd60e51b815260206004820152600f60248201527f526f757465723a204558504952454400000000000000000000000000000000006044820152606401610493565b6128e08a8a8a8a8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613fca92505050565b91506128fa8a338888600081811061193957611939614f4a565b61293a8a838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a9250613d49915050565b5098975050505050505050565b6000814281101561299a5760405162461bcd60e51b815260206004820152600f60248201527f526f757465723a204558504952454400000000000000000000000000000000006044820152606401610493565b8591506129b38760008151811061228457612284614f4a565b60005b8851811015612b2357600060018a516129cf9190614fa8565b82146129fe57896129e183600161500d565b815181106129f1576129f1614f4a565b6020026020010151612a00565b305b9050898281518110612a1457612a14614f4a565b60200260200101516001600160a01b0316634ac00e038a8481518110612a3c57612a3c614f4a565b60200260200101518b856001612a52919061500d565b81518110612a6257612a62614f4a565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b03928316600482015290821660248201526044810188905260006064820152908416608482015260a4016020604051808303816000875af1158015612ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0d9190614fbf565b9350508080612b1b90615025565b9150506129b6565b5081851115612b745760405162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f4f5554505554000000000000000000000000006044820152606401610493565b610fc973eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8584613540565b60608142811015612be65760405162461bcd60e51b815260206004820152600f60248201527f526f757465723a204558504952454400000000000000000000000000000000006044820152606401610493565b61191f897f00000000000000000000000000000000000000000000000000000000000000008a8a8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613fca92505050565b60608142811015612c995760405162461bcd60e51b815260206004820152600f60248201527f526f757465723a204558504952454400000000000000000000000000000000006044820152606401610493565b612cf97f000000000000000000000000000000000000000000000000000000000000000089348a8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613baf92505050565b9150612d118260008151811061215957612159614f4a565b61220d7f0000000000000000000000000000000000000000000000000000000000000000838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a9250613d49915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015612dcc57600080fd5b505af1158015612de0573d6000803e3d6000fd5b50506040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018790527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af1158015612e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e929190615180565b612e9e57612e9e6147c6565b5050565b604080516000808252602082019092526001600160a01b038416908390604051612ecc91906151d2565b60006040518083038185875af1925050503d8060008114612f09576040519150601f19603f3d011682016040523d82523d6000602084013e612f0e565b606091505b5050905080612f855760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201527f4c454400000000000000000000000000000000000000000000000000000000006064820152608401610493565b505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052915160009283929088169161301c91906151d2565b6000604051808303816000865af19150503d8060008114613059576040519150601f19603f3d011682016040523d82523d6000602084013e61305e565b606091505b50915091508180156130885750805115806130885750808060200190518101906130889190615180565b6130f95760405162461bcd60e51b8152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f464160448201527f494c4544000000000000000000000000000000000000000000000000000000006064820152608401610493565b505050505050565b8260005b835181101561353957600084828151811061312257613122614f4a565b6020026020010151905060008060008060008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b33d96b07f00000000000000000000000000000000000000000000000000000000000000008c8f6040518463ffffffff1660e01b81526004016131c8939291906001600160a01b0393841681529183166020830152909116604082015260600190565b60c060405180830381865afa1580156131e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132099190615202565b955095509550955095509550848c6001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040161325191906001600160a01b0391909116815260200190565b602060405180830381865afa15801561326e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132929190614fbf565b61329c9190614fa8565b6040517f671a11b500000000000000000000000000000000000000000000000000000000815260048101829052602481018790526044810186905263ffffffff80861660648301528085166084830152831660a48201529099507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063671a11b59060c401602060405180830381865afa158015613347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061336b9190614fbf565b9750859650505050505050600080856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156133b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133db919061526b565b6001600160a01b0316886001600160a01b0316146133fb578360006133ff565b6000845b91509150600060018b516134139190614fa8565b881061341f5789613444565b8a61342b89600161500d565b8151811061343b5761343b614f4a565b60200260200101515b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091529091506001600160a01b0388169063022c0d9f9061349f9086908690869060248101615288565b600060405180830381600087803b1580156134b957600080fd5b505af11580156134cd573d6000803e3d6000fd5b5050604080516001600160a01b038b81168252602082018a905288168183015290517fddac40937f35385a34f721af292e5a83fc5b840f722bff57c2fc71adba708c489350908190036060019150a183985050505050505050808061353190615025565b915050613105565b5050505050565b60008161354f57506001613625565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0385161415613616576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156135ef57600080fd5b505af1158015613603573d6000803e3d6000fd5b505050506136118383612ea2565b613621565b613621848484614684565b5060015b9392505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03841614156136cc577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156136ae57600080fd5b505af11580156136c2573d6000803e3d6000fd5b50505050506136d8565b6136d883333085612f8a565b50600192915050565b60408051600180825281830190925260009182919060208083019080368337019050509050848160008151811061371a5761371a614f4a565b6001600160a01b0392831660209182029290920101526040517f67f84adc0000000000000000000000000000000000000000000000000000000081526000917f000000000000000000000000000000000000000000000000000000000000000016906367f84adc906137b8907f0000000000000000000000000000000000000000000000000000000000000000908c908c908b90899060040161507b565b600060405180830381865afa1580156137d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261381b91908101906150ef565b90508060008151811061383057613830614f4a565b602002602001015192508383111561388a5760405162461bcd60e51b815260206004820152601e60248201527f526f757465723a204558434553534956455f494e5055545f414d4f554e5400006044820152606401610493565b611861888785846001815181106138a3576138a3614f4a565b60200260200101515b6138b7848484614684565b60008390506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156138fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613920919061526b565b90506000806000836001600160a01b0316896001600160a01b03161461394957856000856139ae565b600086866001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561398a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ae919061526b565b604080516000815260208101918290527f022c0d9f0000000000000000000000000000000000000000000000000000000090915292955090935091506001600160a01b0386169063022c0d9f90613a0e9086908690309060248101615288565b600060405180830381600087803b158015613a2857600080fd5b505af1158015613a3c573d6000803e3d6000fd5b5050604080516001600160a01b038c81168252602082018b905285168183015290517fddac40937f35385a34f721af292e5a83fc5b840f722bff57c2fc71adba708c489350908190036060019150a1505050505050505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0383161415613b65576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a08231906024015b602060405180830381865afa158015613b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b5f9190614fbf565b92915050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038316906370a0823190602401613b1e565b919050565b6040517f119220a50000000000000000000000000000000000000000000000000000000081526060906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063119220a590613c3f907f0000000000000000000000000000000000000000000000000000000000000000908a908a908a90899060040161507b565b600060405180830381865afa158015613c5c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052613ca291908101906150ef565b9050828160018351613cb49190614fa8565b81518110613cc457613cc4614f4a565b60200260200101511015613d405760405162461bcd60e51b815260206004820152602260248201527f526f757465723a20494e53554646494349454e545f4f55545055545f414d4f5560448201527f4e540000000000000000000000000000000000000000000000000000000000006064820152608401610493565b95945050505050565b8360005b83518110156130f9576000848281518110613d6a57613d6a614f4a565b602002602001015190506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015613db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dd8919061526b565b9050600087613de885600161500d565b81518110613df857613df8614f4a565b602002602001015190506000806000846001600160a01b0316886001600160a01b031614613e295783600086613e8e565b600084876001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e8e919061526b565b925092509250600060018b51613ea49190614fa8565b8810613eb05789613ed5565b8a613ebc89600161500d565b81518110613ecc57613ecc614f4a565b60200260200101515b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091529091506001600160a01b0388169063022c0d9f90613f309087908790869060248101615288565b600060405180830381600087803b158015613f4a57600080fd5b505af1158015613f5e573d6000803e3d6000fd5b5050604080516001600160a01b038b81168252602082018a905286168183015290517fddac40937f35385a34f721af292e5a83fc5b840f722bff57c2fc71adba708c489350908190036060019150a1819850505050505050508080613fc290615025565b915050613d4d565b6040517f67f84adc0000000000000000000000000000000000000000000000000000000081526060906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906367f84adc9061405a907f0000000000000000000000000000000000000000000000000000000000000000908a908a908a90899060040161507b565b600060405180830381865afa158015614077573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526140bd91908101906150ef565b905082816000815181106140d3576140d3614f4a565b60200260200101511115613d405760405162461bcd60e51b815260206004820152601e60248201527f526f757465723a204558434553534956455f494e5055545f414d4f554e5400006044820152606401610493565b6000614136868585614684565b6040517fb33d96b00000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015285811660248301528781166044830152600091829182918291829182917f0000000000000000000000000000000000000000000000000000000000000000169063b33d96b09060640160c060405180830381865afa1580156141f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142169190615202565b95509550955095509550506000858d6001600160a01b03166370a082318d6040518263ffffffff1660e01b815260040161425f91906001600160a01b0391909116815260200190565b602060405180830381865afa15801561427c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142a09190614fbf565b6142aa9190614fa8565b6040517f671a11b500000000000000000000000000000000000000000000000000000000815260048101829052602481018890526044810187905263ffffffff80871660648301528086166084830152841660a48201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063671a11b59060c401602060405180830381865afa158015614355573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143799190614fbf565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152909750600096506001600160a01b038d1695506370a08231945060240192506143cc915050565b602060405180830381865afa1580156143e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061440d9190614fbf565b9050600080876001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015614450573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614474919061526b565b6001600160a01b03168a6001600160a01b03161461449457836000614498565b6000845b604080516000815260208101918290527f022c0d9f0000000000000000000000000000000000000000000000000000000090915291935091506001600160a01b0389169063022c0d9f906144f59085908590309060248101615288565b600060405180830381600087803b15801561450f57600080fd5b505af1158015614523573d6000803e3d6000fd5b5050604080516001600160a01b038c81168252602082018990528d168183015290517fddac40937f35385a34f721af292e5a83fc5b840f722bff57c2fc71adba708c489350908190036060019150a16040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015283906001600160a01b038b16906370a0823190602401602060405180830381865afa1580156145d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145f59190614fbf565b6145ff9190614fa8565b9450858510156146775760405162461bcd60e51b815260206004820152602260248201527f526f757465723a20494e53554646494349454e545f4f55545055545f414d4f5560448201527f4e540000000000000000000000000000000000000000000000000000000000006064820152608401610493565b5050505095945050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283929087169161470e91906151d2565b6000604051808303816000865af19150503d806000811461474b576040519150601f19603f3d011682016040523d82523d6000602084013e614750565b606091505b509150915081801561477a57508051158061477a57508080602001905181019061477a9190615180565b6135395760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c4544006044820152606401610493565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715614847576148476147f5565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614894576148946147f5565b604052919050565b600067ffffffffffffffff8211156148b6576148b66147f5565b5060051b60200190565b6001600160a01b03811681146148d557600080fd5b50565b600082601f8301126148e957600080fd5b813560206148fe6148f98361489c565b61484d565b82815260059290921b8401810191818101908684111561491d57600080fd5b8286015b8481101561220d578035614934816148c0565b8352918301918301614921565b600080600080600060a0868803121561495957600080fd5b853567ffffffffffffffff8082111561497157600080fd5b61497d89838a016148d8565b9650602088013591508082111561499357600080fd5b506149a0888289016148d8565b9450506040860135925060608601356149b8816148c0565b949793965091946080013592915050565b6020808252825182820181905260009190848201906040850190845b81811015614a01578351835292840192918401916001016149e5565b50909695505050505050565b60008060008060008060c08789031215614a2657600080fd5b863567ffffffffffffffff80821115614a3e57600080fd5b614a4a8a838b016148d8565b97506020890135915080821115614a6057600080fd5b50614a6d89828a016148d8565b95505060408701359350606087013592506080870135614a8c816148c0565b8092505060a087013590509295509295509295565b60008083601f840112614ab357600080fd5b50813567ffffffffffffffff811115614acb57600080fd5b6020830191508360208260051b8501011115614ae657600080fd5b9250929050565b600080600080600080600060c0888a031215614b0857600080fd5b8735614b13816148c0565b96506020880135955060408801359450606088013567ffffffffffffffff811115614b3d57600080fd5b614b498a828b01614aa1565b9095509350506080880135614b5d816148c0565b8092505060a0880135905092959891949750929550565b60008060008060008060a08789031215614b8d57600080fd5b8635614b98816148c0565b955060208701359450604087013567ffffffffffffffff811115614bbb57600080fd5b614bc789828a01614aa1565b9095509350506060870135614bdb816148c0565b80925050608087013590509295509295509295565b600082601f830112614c0157600080fd5b81356020614c116148f98361489c565b82815260059290921b84018101918181019086841115614c3057600080fd5b8286015b8481101561220d57803567ffffffffffffffff811115614c545760008081fd5b8701603f81018913614c665760008081fd5b848101356040614c786148f98361489c565b82815260c0928302840182019288820191908d851115614c985760008081fd5b948301945b84861015614d195780868f031215614cb55760008081fd5b614cbd614824565b8635614cc8816148c0565b8152868b0135614cd7816148c0565b818c015286850135614ce8816148c0565b81860152606087810135908201526080808801359082015260a0808801359082015283529485019491890191614c9d565b50875250505092840192508301614c34565b600080600080600060a08688031215614d4357600080fd5b853567ffffffffffffffff811115614d5a57600080fd5b614d6688828901614bf0565b9550506020860135614d77816148c0565b93506040860135614d87816148c0565b94979396509394606081013594506080013592915050565b60008060008060008060008060e0898b031215614dbb57600080fd5b8835614dc6816148c0565b97506020890135614dd6816148c0565b96506040890135955060608901359450608089013567ffffffffffffffff811115614e0057600080fd5b614e0c8b828c01614aa1565b90955093505060a0890135614e20816148c0565b8092505060c089013590509295985092959890939650565b600080600080600080600060e0888a031215614e5357600080fd5b8735614e5e816148c0565b96506020880135614e6e816148c0565b95506040880135945060608801359350608088013567ffffffffffffffff811115614e9857600080fd5b614ea48a828b016148d8565b93505060a0880135614eb5816148c0565b8092505060c0880135905092959891949750929550565b60008060008060008060c08789031215614ee557600080fd5b863567ffffffffffffffff811115614efc57600080fd5b614f0889828a01614bf0565b9650506020870135614f19816148c0565b94506040870135614f29816148c0565b959894975094956060810135955060808101359460a0909101359350915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015614fba57614fba614f79565b500390565b600060208284031215614fd157600080fd5b5051919050565b600081614fe757614fe7614f79565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6000821982111561502057615020614f79565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561505757615057614f79565b5060010190565b60006020828403121561507057600080fd5b8135613625816148c0565b600060a082016001600160a01b038089168452602081891681860152818816604086015286606086015260a0608086015282865180855260c087019150828801945060005b818110156150de5785518516835294830194918301916001016150c0565b50909b9a5050505050505050505050565b6000602080838503121561510257600080fd5b825167ffffffffffffffff81111561511957600080fd5b8301601f8101851361512a57600080fd5b80516151386148f98261489c565b81815260059190911b8201830190838101908783111561515757600080fd5b928401925b828410156151755783518252928401929084019061515c565b979650505050505050565b60006020828403121561519257600080fd5b8151801515811461362557600080fd5b60005b838110156151bd5781810151838201526020016151a5565b838111156151cc576000848401525b50505050565b600082516151e48184602087016151a2565b9190910192915050565b805163ffffffff81168114613baa57600080fd5b60008060008060008060c0878903121561521b57600080fd5b8651615226816148c0565b6020880151604089015191975095509350615243606088016151ee565b9250615251608088016151ee565b915061525f60a088016151ee565b90509295509295509295565b60006020828403121561527d57600080fd5b8151613625816148c0565b8481528360208201526001600160a01b038316604082015260806060820152600082518060808401526152c28160a08501602087016151a2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160a0019594505050505056fea2646970667358221220af38ae370b1dc86c12b21938de08386b5495c33d2d96783ac7209a5ec9971d9064736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}