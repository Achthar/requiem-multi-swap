{
  "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "output",
          "type": "address"
        }
      ],
      "name": "Exchange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountLast",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountLast",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountLast",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "onSwapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x58e6e8d0bb5114f62ae7c68b9d1d0c018ba4e2fc7529f7021133298c0ca2b957",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
    "transactionIndex": 0,
    "gasUsed": "2036646",
    "logsBloom": "0x
    "blockHash": "0x95f717f9919ad46984bc3076abbfbcb02ac7f1b098da8abcecda64b6372a975c",
    "transactionHash": "0x58e6e8d0bb5114f62ae7c68b9d1d0c018ba4e2fc7529f7021133298c0ca2b957",
    "logs": [],
    "blockNumber": 13,
    "cumulativeGasUsed": "2036646",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9"
  ],
  "solcInputHash": "f2b4bccf3d51fc9a7843da55e39c44de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"output\",\"type\":\"address\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLast\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLast\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLast\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"onSwapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WeightedRouterV2.sol\":\"WeightedRouterV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999999},\"remappings\":[]},\"sources\":{\"contracts/WeightedRouterV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./interfaces/IRequiemWeightedPairFactoryV2.sol\\\";\\nimport \\\"./interfaces/IWeightedFormulaV2.sol\\\";\\nimport \\\"./interfaces/IRequiemWeightedPair.sol\\\";\\nimport \\\"./interfaces/IRequiemSwap.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/ISwapRouter.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\ncontract WeightedRouterV2 is ISwapRouter {\\n    address public immutable override factory;\\n    address public immutable override formula;\\n    address public immutable override WETH;\\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"Router: EXPIRED\\\");\\n        _;\\n    }\\n\\n    constructor(address _factory, address _WETH) {\\n        factory = _factory;\\n        formula = IRequiemWeightedPairFactoryV2(_factory).formula();\\n        WETH = _WETH;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH);\\n        // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        address tokenIn,\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        address input = tokenIn;\\n        for (uint256 i = 0; i < path.length; i++) {\\n            IRequiemWeightedPair pairV2 = IRequiemWeightedPair(path[i]);\\n            address token0 = pairV2.token0();\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out, address output) = input == token0 ? (uint256(0), amountOut, pairV2.token1()) : (amountOut, uint256(0), token0);\\n            address to = i < path.length - 1 ? path[i + 1] : _to;\\n            pairV2.swap(amount0Out, amount1Out, to, new bytes(0));\\n            emit Exchange(address(pairV2), amountOut, output);\\n            input = output;\\n        }\\n    }\\n\\n    // function swapExactTokensForTokens(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountIn,\\n    //     uint256 amountOutMin,\\n    //     address[] memory path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) public virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n    //     amounts = _validateAmountOut(tokenIn, tokenOut, amountIn, amountOutMin, path);\\n    //     TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\\n    //     _swap(tokenIn, amounts, path, to);\\n    // }\\n\\n    // the onSwap functions are designed to include the stable swap\\n    // it currenty only allows exactIn structures\\n    function onSwapExactTokensForTokens(\\n        address[] memory pools,\\n        address[] memory tokens,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to,\\n        uint256 deadline\\n    ) public virtual ensure(deadline) returns (uint256 amountLast) {\\n        amountLast = amountIn;\\n        TransferHelper.safeTransferFrom(tokens[0], msg.sender, pools[0], amountIn);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address _to = i == pools.length - 1 ? to : pools[i + 1];\\n            amountLast = IRequiemSwap(pools[i]).onSwapGivenIn(tokens[i], tokens[i + 1], amountLast, 0, _to);\\n        }\\n        require(amountOutMin <= amountLast, \\\"INSUFFICIENT_OUTPUT\\\");\\n    }\\n\\n    function onSwapExactETHForTokens(\\n        address[] memory pools,\\n        address[] memory tokens,\\n        uint256 amountOutMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual ensure(deadline) returns (uint256 amountLast) {\\n        amountLast = msg.value;\\n        transferETHTo(msg.value, pools[0]);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address _to = i == pools.length - 1 ? to : pools[i + 1];\\n            amountLast = IRequiemSwap(pools[i]).onSwapGivenIn(tokens[i], tokens[i + 1], amountLast, 0, _to);\\n        }\\n        require(amountOutMin <= amountLast, \\\"INSUFFICIENT_OUTPUT\\\");\\n    }\\n\\n    function onSwapExactTokensForETH(\\n        address[] memory pools,\\n        address[] memory tokens,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to,\\n        uint256 deadline\\n    ) external virtual ensure(deadline) returns (uint256 amountLast) {\\n        amountLast = amountIn;\\n        TransferHelper.safeTransferFrom(tokens[0], msg.sender, pools[0], amountIn);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address _to = i == pools.length - 1 ? address(this) : pools[i + 1];\\n            amountLast = IRequiemSwap(pools[i]).onSwapGivenIn(tokens[i], tokens[i + 1], amountLast, 0, _to);\\n        }\\n        require(amountOutMin <= amountLast, \\\"INSUFFICIENT_OUTPUT\\\");\\n        transferAll(ETH_ADDRESS, to, amountLast);\\n    }\\n\\n    // direct swap function for given exact output\\n    function onSwapTokensForExactTokens(\\n        address[] memory pools,\\n        address[] memory tokens,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to,\\n        uint256 deadline\\n    ) external virtual ensure(deadline) returns (uint256[] memory amounts) {\\n        // set amount array\\n        amounts = new uint256[](tokens.length);\\n        amounts[pools.length] = amountOut;\\n\\n        // calculate all amounts to be sent and recieved\\n        for (uint256 i = amounts.length - 1; i > 0; i--) {\\n            amounts[i - 1] = IRequiemSwap(pools[i - 1]).calculateSwapGivenOut(tokens[i - 1], tokens[i], amounts[i]);\\n        }\\n\\n        // check input condition\\n        require(amounts[0] <= amountInMax, \\\"EXCESSIVE_INPUT\\\");\\n\\n        // tranfer amounts\\n        TransferHelper.safeTransferFrom(tokens[0], msg.sender, pools[0], amounts[0]);\\n\\n        // use general swap functions that do not execute the full calculation to save gas\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address _to = i == pools.length - 1 ? to : pools[i + 1];\\n            IRequiemSwap(pools[i]).onSwap(tokens[i], tokens[i + 1], amounts[i], amounts[i + 1], _to);\\n        }\\n    }\\n\\n    function onSwapETHForExactTokens(\\n        address[] memory pools,\\n        address[] memory tokens,\\n        uint256 amountOut,\\n        address to,\\n        uint256 deadline\\n    ) external payable virtual ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = new uint256[](tokens.length);\\n        amounts[pools.length] = amountOut;\\n        for (uint256 i = amounts.length - 1; i > 0; i--) {\\n            amounts[i - 1] = IRequiemSwap(pools[i - 1]).calculateSwapGivenOut(tokens[i - 1], tokens[i], amounts[i]);\\n        }\\n\\n        require(amounts[0] <= msg.value, \\\"EXCESSIVE_INPUT\\\");\\n\\n        transferETHTo(amounts[0], pools[0]);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address _to = i == pools.length - 1 ? to : pools[i + 1];\\n            IRequiemSwap(pools[i]).onSwap(tokens[i], tokens[i + 1], amounts[i], amounts[i + 1], _to);\\n        }\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\n    }\\n\\n    function onSwapTokensForExactETH(\\n        address[] memory pools,\\n        address[] memory tokens,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to,\\n        uint256 deadline\\n    ) external virtual ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = new uint256[](tokens.length);\\n        amounts[pools.length] = amountOut;\\n        for (uint256 i = amounts.length - 1; i > 0; i--) {\\n            amounts[i - 1] = IRequiemSwap(pools[i - 1]).calculateSwapGivenOut(tokens[i - 1], tokens[i], amounts[i]);\\n        }\\n\\n        require(amounts[0] <= amountInMax, \\\"EXCESSIVE_INPUT\\\");\\n        TransferHelper.safeTransferFrom(tokens[0], msg.sender, pools[0], amounts[0]);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address _to = i == pools.length - 1 ? address(this) : pools[i + 1];\\n            IRequiemSwap(pools[i]).onSwap(tokens[i], tokens[i + 1], amounts[i], amounts[i + 1], _to);\\n        }\\n\\n        transferAll(ETH_ADDRESS, to, amountOut);\\n    }\\n\\n    // function swapTokensForExactTokens(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountOut,\\n    //     uint256 amountInMax,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n    //     amounts = _validateAmountIn(tokenIn, tokenOut, amountOut, amountInMax, path);\\n\\n    //     TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\\n    //     _swap(tokenIn, amounts, path, to);\\n    // }\\n\\n    // function swapExactETHForTokens(\\n    //     address tokenOut,\\n    //     uint256 amountOutMin,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n    //     amounts = _validateAmountOut(WETH, tokenOut, msg.value, amountOutMin, path);\\n\\n    //     transferETHTo(amounts[0], path[0]);\\n    //     _swap(WETH, amounts, path, to);\\n    // }\\n\\n    // function swapTokensForExactETH(\\n    //     address tokenIn,\\n    //     uint256 amountOut,\\n    //     uint256 amountInMax,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n    //     amounts = _validateAmountIn(tokenIn, WETH, amountOut, amountInMax, path);\\n\\n    //     TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\\n    //     _swap(tokenIn, amounts, path, address(this));\\n    //     transferAll(ETH_ADDRESS, to, amounts[amounts.length - 1]);\\n    // }\\n\\n    // function swapExactTokensForETH(\\n    //     address tokenIn,\\n    //     uint256 amountIn,\\n    //     uint256 amountOutMin,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n    //     amounts = _validateAmountOut(tokenIn, WETH, amountIn, amountOutMin, path);\\n\\n    //     TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amounts[0]);\\n    //     _swap(tokenIn, amounts, path, address(this));\\n    //     transferAll(ETH_ADDRESS, to, amounts[amounts.length - 1]);\\n    // }\\n\\n    // function swapETHForExactTokens(\\n    //     address tokenOut,\\n    //     uint256 amountOut,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {\\n    //     amounts = _validateAmountIn(WETH, tokenOut, amountOut, msg.value, path);\\n\\n    //     transferETHTo(amounts[0], path[0]);\\n    //     _swap(WETH, amounts, path, to);\\n    //     // refund dust eth, if any\\n    //     if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\n    // }\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n    // requires the initial amount to have already been sent to the first pair\\n    // function _swapSupportingFeeOnTransferTokens(\\n    //     address tokenIn,\\n    //     address[] memory path,\\n    //     address _to\\n    // ) internal virtual {\\n    //     address input = tokenIn;\\n    //     for (uint256 i; i < path.length; i++) {\\n    //         IRequiemWeightedPair pair = IRequiemWeightedPair(path[i]);\\n    //         uint256 amountInput;\\n    //         uint256 amountOutput;\\n    //         address currentOutput;\\n    //         {\\n    //             (address output, uint256 reserveInput, uint256 reserveOutput, uint32 tokenWeightInput, uint32 tokenWeightOutput, uint32 swapFee) = IWeightedFormulaV2(formula).getFactoryReserveAndWeights(\\n    //                 factory,\\n    //                 address(pair),\\n    //                 input\\n    //             );\\n    //             amountInput = IERC20(input).balanceOf(address(pair)) - reserveInput;\\n    //             amountOutput = IWeightedFormulaV2(formula).getAmountOut(amountInput, reserveInput, reserveOutput, tokenWeightInput, tokenWeightOutput, swapFee);\\n    //             currentOutput = output;\\n    //         }\\n    //         (uint256 amount0Out, uint256 amount1Out) = input == pair.token0() ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\\n    //         address to = i < path.length - 1 ? path[i + 1] : _to;\\n    //         pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n    //         emit Exchange(address(pair), amountOutput, currentOutput);\\n    //         input = currentOutput;\\n    //     }\\n    // }\\n\\n    // function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountIn,\\n    //     uint256 amountOutMin,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) external virtual override ensure(deadline) {\\n    //     TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amountIn);\\n    //     uint256 balanceBefore = IERC20(tokenOut).balanceOf(to);\\n    //     _swapSupportingFeeOnTransferTokens(tokenIn, path, to);\\n    //     require(IERC20(tokenOut).balanceOf(to) - balanceBefore >= amountOutMin, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    // }\\n\\n    // function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    //     address tokenOut,\\n    //     uint256 amountOutMin,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) external payable virtual override ensure(deadline) {\\n    //     //            require(path[0] == WETH, \\\"Router: INVALID_PATH\\\");\\n    //     uint256 amountIn = msg.value;\\n    //     transferETHTo(amountIn, path[0]);\\n    //     uint256 balanceBefore = IERC20(tokenOut).balanceOf(to);\\n    //     _swapSupportingFeeOnTransferTokens(WETH, path, to);\\n    //     require(IERC20(tokenOut).balanceOf(to) - balanceBefore >= amountOutMin, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    // }\\n\\n    // function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    //     address tokenIn,\\n    //     uint256 amountIn,\\n    //     uint256 amountOutMin,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) external virtual override ensure(deadline) {\\n    //     TransferHelper.safeTransferFrom(tokenIn, msg.sender, path[0], amountIn);\\n    //     _swapSupportingFeeOnTransferTokens(tokenIn, path, address(this));\\n    //     uint256 amountOut = IERC20(WETH).balanceOf(address(this));\\n    //     require(amountOut >= amountOutMin, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    //     transferAll(ETH_ADDRESS, to, amountOut);\\n    // }\\n\\n    // function multihopBatchSwapExactIn(\\n    //     Swap[][] memory swapSequences,\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 totalAmountIn,\\n    //     uint256 minTotalAmountOut,\\n    //     uint256 deadline\\n    // ) public payable virtual override ensure(deadline) returns (uint256 totalAmountOut) {\\n    //     transferFromAll(tokenIn, totalAmountIn);\\n    //     uint256 balanceBefore;\\n    //     if (!isETH(tokenOut)) {\\n    //         balanceBefore = IERC20(tokenOut).balanceOf(msg.sender);\\n    //     }\\n\\n    //     for (uint256 i = 0; i < swapSequences.length; i++) {\\n    //         uint256 tokenAmountOut;\\n    //         for (uint256 k = 0; k < swapSequences[i].length; k++) {\\n    //             Swap memory swap = swapSequences[i][k];\\n    //             if (k > 0) {\\n    //                 // Makes sure that on the second swap the output of the first was used\\n    //                 // so there is not intermediate token leftover\\n    //                 swap.swapAmount = tokenAmountOut;\\n    //             }\\n    //             tokenAmountOut = _swapSingleSupportFeeOnTransferTokens(swap.tokenIn, swap.tokenOut, swap.pool, swap.swapAmount, swap.limitReturnAmount);\\n    //         }\\n\\n    //         // This takes the amountOut of the last swap\\n    //         tokenAmountOut += totalAmountOut;\\n    //     }\\n\\n    //     transferAll(tokenOut, msg.sender, totalAmountOut);\\n    //     transferAll(tokenIn, msg.sender, getBalance(tokenIn));\\n\\n    //     if (isETH(tokenOut)) {\\n    //         require(totalAmountOut >= minTotalAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n    //     } else {\\n    //         require(IERC20(tokenOut).balanceOf(msg.sender) - balanceBefore >= minTotalAmountOut, \\\"<minTotalAmountOut\\\");\\n    //     }\\n    // }\\n\\n    // function multihopBatchSwapExactOut(\\n    //     Swap[][] memory swapSequences,\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 maxTotalAmountIn,\\n    //     uint256 deadline\\n    // ) public payable virtual override ensure(deadline) returns (uint256 totalAmountIn) {\\n    //     transferFromAll(tokenIn, maxTotalAmountIn);\\n\\n    //     for (uint256 i = 0; i < swapSequences.length; i++) {\\n    //         uint256 tokenAmountInFirstSwap;\\n    //         // Specific code for a simple swap and a multihop (2 swaps in sequence)\\n    //         if (swapSequences[i].length == 1) {\\n    //             Swap memory swap = swapSequences[i][0];\\n    //             tokenAmountInFirstSwap = _swapSingleMixOut(swap.tokenIn, swap.tokenOut, swap.pool, swap.swapAmount, swap.limitReturnAmount);\\n    //         } else {\\n    //             // Consider we are swapping A -> B and B -> C. The goal is to buy a given amount\\n    //             // of token C. But first we need to buy B with A so we can then buy C with B\\n    //             // To get the exact amount of C we then first need to calculate how much B we\\\"ll need:\\n    //             uint256 intermediateTokenAmount;\\n    //             // This would be token B as described above\\n    //             Swap memory secondSwap = swapSequences[i][1];\\n    //             {\\n    //                 address[] memory paths = new address[](1);\\n    //                 paths[0] = secondSwap.pool;\\n    //                 uint256[] memory amounts = IWeightedFormulaV2(formula).getFactoryAmountsIn(factory, secondSwap.tokenIn, secondSwap.tokenOut, secondSwap.swapAmount, paths);\\n    //                 intermediateTokenAmount = amounts[0];\\n    //                 require(intermediateTokenAmount <= secondSwap.limitReturnAmount, \\\"Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n    //             }\\n\\n    //             //// Buy intermediateTokenAmount of token B with A in the first pool\\n    //             Swap memory firstSwap = swapSequences[i][0];\\n    //             tokenAmountInFirstSwap = _swapSingleMixOut(firstSwap.tokenIn, firstSwap.tokenOut, firstSwap.pool, intermediateTokenAmount, firstSwap.limitReturnAmount);\\n\\n    //             //// Buy the final amount of token C desired\\n    //             _swapSingle(secondSwap.tokenIn, secondSwap.pool, intermediateTokenAmount, secondSwap.swapAmount);\\n    //         }\\n\\n    //         totalAmountIn += tokenAmountInFirstSwap;\\n    //     }\\n\\n    //     require(totalAmountIn <= maxTotalAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n    //     transferAll(tokenOut, msg.sender, getBalance(tokenOut));\\n    //     transferAll(tokenIn, msg.sender, getBalance(tokenIn));\\n    // }\\n\\n    function transferFromAll(address token, uint256 amount) internal returns (bool) {\\n        if (isETH(token)) {\\n            IWETH(WETH).deposit{value: msg.value}();\\n        } else {\\n            TransferHelper.safeTransferFrom(token, msg.sender, address(this), amount);\\n        }\\n        return true;\\n    }\\n\\n    function getBalance(address token) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return IWETH(WETH).balanceOf(address(this));\\n        } else {\\n            return IERC20(token).balanceOf(address(this));\\n        }\\n    }\\n\\n    // function _swapSingleMixOut(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     address pool,\\n    //     uint256 swapAmount,\\n    //     uint256 limitReturnAmount\\n    // ) internal returns (uint256 tokenAmountIn) {\\n    //     address[] memory paths = new address[](1);\\n    //     paths[0] = pool;\\n    //     uint256[] memory amounts = IWeightedFormulaV2(formula).getFactoryAmountsIn(factory, tokenIn, tokenOut, swapAmount, paths);\\n    //     tokenAmountIn = amounts[0];\\n    //     require(tokenAmountIn <= limitReturnAmount, \\\"Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n    //     _swapSingle(tokenIn, pool, tokenAmountIn, amounts[1]);\\n    // }\\n\\n    function _swapSingle(\\n        address tokenIn,\\n        address pair,\\n        uint256 targetSwapAmount,\\n        uint256 targetOutAmount\\n    ) internal {\\n        TransferHelper.safeTransfer(tokenIn, pair, targetSwapAmount);\\n        IRequiemWeightedPair pairV2 = IRequiemWeightedPair(pair);\\n        address token0 = pairV2.token0();\\n\\n        (uint256 amount0Out, uint256 amount1Out, address output) = tokenIn == token0 ? (uint256(0), targetOutAmount, pairV2.token1()) : (targetOutAmount, uint256(0), token0);\\n        pairV2.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n\\n        emit Exchange(pair, targetOutAmount, output);\\n    }\\n\\n    // function _swapSingleSupportFeeOnTransferTokens(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     address pool,\\n    //     uint256 swapAmount,\\n    //     uint256 limitReturnAmount\\n    // ) internal returns (uint256 tokenAmountOut) {\\n    //     TransferHelper.safeTransfer(tokenIn, pool, swapAmount);\\n\\n    //     uint256 amountOutput;\\n    //     {\\n    //         (, uint256 reserveInput, uint256 reserveOutput, uint32 tokenWeightInput, uint32 tokenWeightOutput, uint32 swapFee) = IWeightedFormulaV2(formula).getFactoryReserveAndWeights(\\n    //             factory,\\n    //             pool,\\n    //             tokenIn\\n    //         );\\n    //         uint256 amountInput = IERC20(tokenIn).balanceOf(pool) - reserveInput;\\n    //         amountOutput = IWeightedFormulaV2(formula).getAmountOut(amountInput, reserveInput, reserveOutput, tokenWeightInput, tokenWeightOutput, swapFee);\\n    //     }\\n    //     uint256 balanceBefore = IERC20(tokenOut).balanceOf(address(this));\\n    //     (uint256 amount0Out, uint256 amount1Out) = tokenIn == IRequiemWeightedPair(pool).token0() ? (uint256(0), amountOutput) : (amountOutput, uint256(0));\\n    //     IRequiemWeightedPair(pool).swap(amount0Out, amount1Out, address(this), new bytes(0));\\n    //     emit Exchange(pool, amountOutput, tokenOut);\\n\\n    //     tokenAmountOut = IERC20(tokenOut).balanceOf(address(this)) - balanceBefore;\\n    //     require(tokenAmountOut >= limitReturnAmount, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    // }\\n\\n    // function _validateAmountOut(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountIn,\\n    //     uint256 amountOutMin,\\n    //     address[] memory path\\n    // ) internal view returns (uint256[] memory amounts) {\\n    //     amounts = IWeightedFormulaV2(formula).getFactoryAmountsOut(factory, tokenIn, tokenOut, amountIn, path);\\n    //     require(amounts[amounts.length - 1] >= amountOutMin, \\\"Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n    // }\\n\\n    // function _calculateAmountOut(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountIn,\\n    //     address[] memory path\\n    // ) internal view returns (uint256[] memory amounts) {\\n    //     amounts = IWeightedFormulaV2(formula).getFactoryAmountsOut(factory, tokenIn, tokenOut, amountIn, path);\\n    // }\\n\\n    // function _validateAmountIn(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountOut,\\n    //     uint256 amountInMax,\\n    //     address[] memory path\\n    // ) internal view returns (uint256[] memory amounts) {\\n    //     amounts = IWeightedFormulaV2(formula).getFactoryAmountsIn(factory, tokenIn, tokenOut, amountOut, path);\\n    //     require(amounts[0] <= amountInMax, \\\"Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n    // }\\n\\n    // // the same as _validateAmountIn, just with no requirement checking\\n    // function _calculateAmountIn(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountOut,\\n    //     address[] memory path\\n    // ) internal view returns (uint256[] memory amounts) {\\n    //     amounts = IWeightedFormulaV2(formula).getFactoryAmountsIn(factory, tokenIn, tokenOut, amountOut, path);\\n    // }\\n\\n    function transferETHTo(uint256 amount, address to) internal {\\n        IWETH(WETH).deposit{value: amount}();\\n        assert(IWETH(WETH).transfer(to, amount));\\n    }\\n\\n    function transferAll(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n\\n        if (isETH(token)) {\\n            IWETH(WETH).withdraw(amount);\\n            TransferHelper.safeTransferETH(to, amount);\\n        } else {\\n            TransferHelper.safeTransfer(token, to, amount);\\n        }\\n        return true;\\n    }\\n\\n    function isETH(address token) internal pure returns (bool) {\\n        return (token == ETH_ADDRESS);\\n    }\\n}\\n\",\"keccak256\":\"0xf297598504aadc401ad951f696574ed5f3173786905eb5398a2f5b9edf1177e7\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xab442747ba7fbbe95ce3e26fac7ff53c7ed1f2ddb11ee665905bcd85593ac42e\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemPairERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemPairERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0xd26126b87195232c895a1ceccb7f255652a775e948f72c104828178ad0f59ae6\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface IRequiemSwap {\\n    // this funtion requires the correctly calculated amounts as input\\n    // the others are supposed to implement that calculation\\n    // no return value required since the amounts are already known\\n    function onSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address to\\n    ) external;\\n\\n    //\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external returns (uint256);\\n\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to\\n    ) external returns (uint256);\\n\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (uint256);\\n\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x63771a8851ddc9a45c2b814e46c5b5491477aefeff7dd3b4043c8ea61dee5dad\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IRequiemPairERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemWeightedPair is IRequiemPairERC20 {\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n    function getSwapFee() external view returns (uint32);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address,\\n        address,\\n        uint32,\\n        uint32\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0aa4bb9ae109e65bd75ee1d3ea5ff9daeb5f6b0b32739c9e6988ad7852946de7\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemWeightedPairFactoryV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\ninterface IRequiemWeightedPairFactoryV2 {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function protocolFee() external view returns (uint256);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function isPair(address) external view returns (bool);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 initialFee,\\n        uint32 initialAmp\\n    ) external returns (address pair);\\n\\n    function getParameters(address pair)\\n        external\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee,\\n            uint32 amp\\n        );\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setProtocolFee(uint256) external;\\n}\\n\",\"keccak256\":\"0xa0172ff52b829d3c554e478fcb1afabe4a14b8e8e58a14fdbff59562701e9cb6\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface ISwapRouter {\\n    event Exchange(address pair, uint256 amountOut, address output);\\n    struct Swap {\\n        address pool;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 swapAmount; // tokenInAmount / tokenOutAmount\\n        uint256 limitReturnAmount; // minAmountOut / maxAmountIn\\n        uint256 maxPrice;\\n    }\\n\\n    function factory() external view returns (address);\\n\\n    function formula() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    // function swapExactTokensForTokens(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountIn,\\n    //     uint256 amountOutMin,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) external returns (uint256[] memory amounts);\\n\\n    // function swapTokensForExactTokens(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountOut,\\n    //     uint256 amountInMax,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) external returns (uint256[] memory amounts);\\n\\n    // function swapExactETHForTokens(\\n    //     address tokenOut,\\n    //     uint256 amountOutMin,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) external payable returns (uint256[] memory amounts);\\n\\n    // function swapTokensForExactETH(\\n    //     address tokenIn,\\n    //     uint256 amountOut,\\n    //     uint256 amountInMax,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) external returns (uint256[] memory amounts);\\n\\n    // function swapExactTokensForETH(\\n    //     address tokenIn,\\n    //     uint256 amountIn,\\n    //     uint256 amountOutMin,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) external returns (uint256[] memory amounts);\\n\\n    // function swapETHForExactTokens(\\n    //     address tokenOut,\\n    //     uint256 amountOut,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) external payable returns (uint256[] memory amounts);\\n\\n    // function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountIn,\\n    //     uint256 amountOutMin,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) external;\\n\\n    // function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    //     address tokenOut,\\n    //     uint256 amountOutMin,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) external payable;\\n\\n    // function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    //     address tokenIn,\\n    //     uint256 amountIn,\\n    //     uint256 amountOutMin,\\n    //     address[] calldata path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) external;\\n\\n    // function multihopBatchSwapExactIn(\\n    //     Swap[][] memory swapSequences,\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 totalAmountIn,\\n    //     uint256 minTotalAmountOut,\\n    //     uint256 deadline\\n    // ) external payable returns (uint256 totalAmountOut);\\n\\n    // function multihopBatchSwapExactOut(\\n    //     Swap[][] memory swapSequences,\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 maxTotalAmountIn,\\n    //     uint256 deadline\\n    // ) external payable returns (uint256 totalAmountIn);\\n}\\n\",\"keccak256\":\"0xde76df7f21bd1ab74206633a3137bbe2f179694946c137370bfee55530b75bb4\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for WETH9.\\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x600e2568f99be94742a908a8fd69ce6c956b3c995a85ba7feb7809326fe19f1f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IWeightedFormulaV2.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.8.13;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IWeightedFormulaV2 {\\n    struct PricingData {\\n        uint256 reserveIn;\\n        uint256 reserveOut;\\n        uint256 vReserveIn;\\n        uint256 vReserveOut;\\n        uint32 tokenWeightIn;\\n        uint32 tokenWeightOut;\\n        uint32 swapFee;\\n    }\\n\\n    // function getReserveAndWeights(address pair, address tokenA) external view returns (PricingData calldata);\\n\\n    // function getFactoryReserveAndWeights(\\n    //     address factory,\\n    //     address pair,\\n    //     address tokenA\\n    // ) external view returns (PricingData calldata);\\n\\n    function getAmountIn(uint256 amountOut, PricingData calldata pricingData) external view returns (uint256 amountIn);\\n\\n    // function getPairAmountIn(\\n    //     address pair,\\n    //     address tokenIn,\\n    //     uint256 amountOut\\n    // ) external view returns (uint256 amountIn);\\n\\n    function getAmountOut(uint256 amountIn, PricingData calldata pricingData) external view returns (uint256 amountOut);\\n\\n    // function getPairAmountOut(\\n    //     address pair,\\n    //     address tokenIn,\\n    //     uint256 amountIn\\n    // ) external view returns (uint256 amountOut);\\n\\n    // function getAmountsIn(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountOut,\\n    //     address[] calldata path\\n    // ) external view returns (uint256[] memory amounts);\\n\\n    // function getFactoryAmountsIn(\\n    //     address factory,\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountOut,\\n    //     address[] calldata path\\n    // ) external view returns (uint256[] memory amounts);\\n\\n    // function getAmountsOut(\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountIn,\\n    //     address[] calldata path\\n    // ) external view returns (uint256[] memory amounts);\\n\\n    // function getFactoryAmountsOut(\\n    //     address factory,\\n    //     address tokenIn,\\n    //     address tokenOut,\\n    //     uint256 amountIn,\\n    //     address[] calldata path\\n    // ) external view returns (uint256[] memory amounts);\\n\\n    function ensureConstantValue(\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 balance0Adjusted,\\n        uint256 balance1Adjusted,\\n        uint32 tokenWeight0\\n    ) external view returns (bool);\\n\\n    function getReserves(\\n        address pair,\\n        address tokenA,\\n        address tokenB\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 reserveA,\\n            uint256 reserveB,\\n            uint256 vReserveA,\\n            uint256 vReserveB\\n        );\\n\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n\\n    function mintLiquidityFee(\\n        uint256 totalLiquidity,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint32 tokenWeight0,\\n        uint112 collectedFee0,\\n        uint112 collectedFee1\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xafb5dbffaa59f212c300bc7f1a7504b4bff32f0db12317497bdd9080c06736ad\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.13;\\n\\n// solhint-disable avoid-low-level-calls, reason-string\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x429ddbf2e1e8c7be482e806aee97439e670a4466659433e6439b59f9200b4cd4\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162002576380380620025768339810160408190526200003491620000db565b6001600160a01b038216608081905260408051634b75f54f60e01b81529051634b75f54f916004808201926020929091908290030181865afa1580156200007f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a5919062000113565b6001600160a01b0390811660a0521660c0525062000138565b80516001600160a01b0381168114620000d657600080fd5b919050565b60008060408385031215620000ef57600080fd5b620000fa83620000be565b91506200010a60208401620000be565b90509250929050565b6000602082840312156200012657600080fd5b6200013182620000be565b9392505050565b60805160a05160c0516123f3620001836000396000818160b7015281816101e00152818161193e01528181611a060152611da6015260006101470152600061023401526123f36000f3fe60806040526004361061009a5760003560e01c8063abbfddc511610069578063b4e819fd1161004e578063b4e819fd14610202578063c45a015514610222578063f35aaf631461025657600080fd5b8063abbfddc5146101ae578063ad5c4648146101ce57600080fd5b806308c820da146100eb5780630d1424a3146101145780634b75f54f1461013557806351bf18301461018e57600080fd5b366100e6573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146100e4576100e4611fac565b005b600080fd5b6100fe6100f93660046120f3565b610276565b60405161010b9190612179565b60405180910390f35b6101276101223660046120f3565b6107ac565b60405190815260200161010b565b34801561014157600080fd5b506101697f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010b565b34801561019a57600080fd5b506100fe6101a93660046121bd565b610a28565b3480156101ba57600080fd5b506100fe6101c93660046121bd565b610f25565b3480156101da57600080fd5b506101697f000000000000000000000000000000000000000000000000000000000000000081565b34801561020e57600080fd5b5061012761021d3660046121bd565b6113f2565b34801561022e57600080fd5b506101697f000000000000000000000000000000000000000000000000000000000000000081565b34801561026257600080fd5b506101276102713660046121bd565b6116a2565b606081428110156102e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064015b60405180910390fd5b855167ffffffffffffffff81111561030257610302611fdb565b60405190808252806020026020018201604052801561032b578160200160208202803683370190505b50915084828851815181106103425761034261224d565b60200260200101818152505060006001835161035e91906122ab565b90505b80156104d757876103736001836122ab565b815181106103835761038361224d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663cc56fd43886001846103b491906122ab565b815181106103c4576103c461224d565b60200260200101518984815181106103de576103de61224d565b60200260200101518685815181106103f8576103f861224d565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401602060405180830381865afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e91906122c2565b836104aa6001846122ab565b815181106104ba576104ba61224d565b6020908102919091010152806104cf816122db565b915050610361565b5034826000815181106104ec576104ec61224d565b6020026020010151111561055c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4558434553534956455f494e505554000000000000000000000000000000000060448201526064016102df565b61059a826000815181106105725761057261224d565b60200260200101518860008151811061058d5761058d61224d565b602002602001015161193c565b60005b8751811015610750576000600189516105b691906122ab565b82146105e557886105c8836001612310565b815181106105d8576105d861224d565b60200260200101516105e7565b855b90508882815181106105fb576105fb61224d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166332fd54938984815181106106305761063061224d565b60200260200101518a8560016106469190612310565b815181106106565761065661224d565b60200260200101518786815181106106705761067061224d565b6020026020010151888760016106869190612310565b815181106106965761069661224d565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff9485166004820152928416602484015260448301919091526064820152908416608482015260a401600060405180830381600087803b15801561072457600080fd5b505af1158015610738573d6000803e3d6000fd5b5050505050808061074890612328565b91505061059d565b50816000815181106107645761076461224d565b60200260200101513411156107a2576107a2338360008151811061078a5761078a61224d565b60200260200101513461079d91906122ab565b611a87565b5095945050505050565b60008142811015610819576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016102df565b349150610833348860008151811061058d5761058d61224d565b60005b87518110156109bd5760006001895161084f91906122ab565b821461087e5788610861836001612310565b815181106108715761087161224d565b6020026020010151610880565b855b90508882815181106108945761089461224d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16634ac00e038984815181106108c9576108c961224d565b60200260200101518a8560016108df9190612310565b815181106108ef576108ef61224d565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff928316600482015290821660248201526044810188905260006064820152908416608482015260a4016020604051808303816000875af1158015610983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a791906122c2565b93505080806109b590612328565b915050610836565b50818511156107a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f4f55545055540000000000000000000000000060448201526064016102df565b60608142811015610a95576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016102df565b865167ffffffffffffffff811115610aaf57610aaf611fdb565b604051908082528060200260200182016040528015610ad8578160200160208202803683370190505b5091508582895181518110610aef57610aef61224d565b602002602001018181525050600060018351610b0b91906122ab565b90505b8015610c845788610b206001836122ab565b81518110610b3057610b3061224d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663cc56fd4389600184610b6191906122ab565b81518110610b7157610b7161224d565b60200260200101518a8481518110610b8b57610b8b61224d565b6020026020010151868581518110610ba557610ba561224d565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401602060405180830381865afa158015610c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4b91906122c2565b83610c576001846122ab565b81518110610c6757610c6761224d565b602090810291909101015280610c7c816122db565b915050610b0e565b508482600081518110610c9957610c9961224d565b60200260200101511115610d09576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4558434553534956455f494e505554000000000000000000000000000000000060448201526064016102df565b610d6387600081518110610d1f57610d1f61224d565b6020026020010151338a600081518110610d3b57610d3b61224d565b602002602001015185600081518110610d5657610d5661224d565b6020026020010151611b96565b60005b8851811015610f1957600060018a51610d7f91906122ab565b8214610dae5789610d91836001612310565b81518110610da157610da161224d565b6020026020010151610db0565b855b9050898281518110610dc457610dc461224d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166332fd54938a8481518110610df957610df961224d565b60200260200101518b856001610e0f9190612310565b81518110610e1f57610e1f61224d565b6020026020010151878681518110610e3957610e3961224d565b602002602001015188876001610e4f9190612310565b81518110610e5f57610e5f61224d565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff9485166004820152928416602484015260448301919091526064820152908416608482015260a401600060405180830381600087803b158015610eed57600080fd5b505af1158015610f01573d6000803e3d6000fd5b50505050508080610f1190612328565b915050610d66565b50509695505050505050565b60608142811015610f92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016102df565b865167ffffffffffffffff811115610fac57610fac611fdb565b604051908082528060200260200182016040528015610fd5578160200160208202803683370190505b5091508582895181518110610fec57610fec61224d565b60200260200101818152505060006001835161100891906122ab565b90505b8015611181578861101d6001836122ab565b8151811061102d5761102d61224d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663cc56fd438960018461105e91906122ab565b8151811061106e5761106e61224d565b60200260200101518a84815181106110885761108861224d565b60200260200101518685815181106110a2576110a261224d565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401602060405180830381865afa158015611124573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114891906122c2565b836111546001846122ab565b815181106111645761116461224d565b602090810291909101015280611179816122db565b91505061100b565b5084826000815181106111965761119661224d565b60200260200101511115611206576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4558434553534956455f494e505554000000000000000000000000000000000060448201526064016102df565b61121c87600081518110610d1f57610d1f61224d565b60005b88518110156113d257600060018a5161123891906122ab565b8214611267578961124a836001612310565b8151811061125a5761125a61224d565b6020026020010151611269565b305b905089828151811061127d5761127d61224d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166332fd54938a84815181106112b2576112b261224d565b60200260200101518b8560016112c89190612310565b815181106112d8576112d861224d565b60200260200101518786815181106112f2576112f261224d565b6020026020010151888760016113089190612310565b815181106113185761131861224d565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff9485166004820152928416602484015260448301919091526064820152908416608482015260a401600060405180830381600087803b1580156113a657600080fd5b505af11580156113ba573d6000803e3d6000fd5b505050505080806113ca90612328565b91505061121f565b50610f1973eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8588611d34565b6000814281101561145f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016102df565b8591506114a2876000815181106114785761147861224d565b6020026020010151338a6000815181106114945761149461224d565b602002602001015189611b96565b60005b885181101561162c57600060018a516114be91906122ab565b82146114ed57896114d0836001612310565b815181106114e0576114e061224d565b60200260200101516114ef565b855b90508982815181106115035761150361224d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16634ac00e038a84815181106115385761153861224d565b60200260200101518b85600161154e9190612310565b8151811061155e5761155e61224d565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff928316600482015290821660248201526044810188905260006064820152908416608482015260a4016020604051808303816000875af11580156115f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161691906122c2565b935050808061162490612328565b9150506114a5565b5081851115611697576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f4f55545055540000000000000000000000000060448201526064016102df565b509695505050505050565b6000814281101561170f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016102df565b859150611728876000815181106114785761147861224d565b60005b88518110156118b257600060018a5161174491906122ab565b82146117735789611756836001612310565b815181106117665761176661224d565b6020026020010151611775565b305b90508982815181106117895761178961224d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16634ac00e038a84815181106117be576117be61224d565b60200260200101518b8560016117d49190612310565b815181106117e4576117e461224d565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff928316600482015290821660248201526044810188905260006064820152908416608482015260a4016020604051808303816000875af1158015611878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189c91906122c2565b93505080806118aa90612328565b91505061172b565b508185111561191d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f4f55545055540000000000000000000000000060448201526064016102df565b610f1973eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8584611d34565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156119a457600080fd5b505af11580156119b8573d6000803e3d6000fd5b50506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018790527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af1158015611a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a779190612360565b611a8357611a83611fac565b5050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff8416908390604051611abe9190612382565b60006040518083038185875af1925050503d8060008114611afb576040519150601f19603f3d011682016040523d82523d6000602084013e611b00565b606091505b5050905080611b91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201527f4c4544000000000000000000000000000000000000000000000000000000000060648201526084016102df565b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790529151600092839290881691611c359190612382565b6000604051808303816000865af19150503d8060008114611c72576040519150601f19603f3d011682016040523d82523d6000602084013e611c77565b606091505b5091509150818015611ca1575080511580611ca1575080806020019051810190611ca19190612360565b611d2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f464160448201527f494c45440000000000000000000000000000000000000000000000000000000060648201526084016102df565b505050505050565b600081600003611d4657506001611e35565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff851603611e26576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b158015611dff57600080fd5b505af1158015611e13573d6000803e3d6000fd5b50505050611e218383611a87565b611e31565b611e31848484611e3c565b5060015b9392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691611ed39190612382565b6000604051808303816000865af19150503d8060008114611f10576040519150601f19603f3d011682016040523d82523d6000602084013e611f15565b606091505b5091509150818015611f3f575080511580611f3f575080806020019051810190611f3f9190612360565b611fa5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016102df565b5050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461202e57600080fd5b919050565b600082601f83011261204457600080fd5b8135602067ffffffffffffffff8083111561206157612061611fdb565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811084821117156120a4576120a4611fdb565b6040529384528581018301938381019250878511156120c257600080fd5b83870191505b848210156120e8576120d98261200a565b835291830191908301906120c8565b979650505050505050565b600080600080600060a0868803121561210b57600080fd5b853567ffffffffffffffff8082111561212357600080fd5b61212f89838a01612033565b9650602088013591508082111561214557600080fd5b5061215288828901612033565b945050604086013592506121686060870161200a565b949793965091946080013592915050565b6020808252825182820181905260009190848201906040850190845b818110156121b157835183529284019291840191600101612195565b50909695505050505050565b60008060008060008060c087890312156121d657600080fd5b863567ffffffffffffffff808211156121ee57600080fd5b6121fa8a838b01612033565b9750602089013591508082111561221057600080fd5b5061221d89828a01612033565b955050604087013593506060870135925061223a6080880161200a565b915060a087013590509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156122bd576122bd61227c565b500390565b6000602082840312156122d457600080fd5b5051919050565b6000816122ea576122ea61227c565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600082198211156123235761232361227c565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036123595761235961227c565b5060010190565b60006020828403121561237257600080fd5b81518015158114611e3557600080fd5b6000825160005b818110156123a35760208186018101518583015201612389565b818111156123b2576000828501525b50919091019291505056fea264697066735822122094b6bca6975155f316346d81cea6a7629da42990ff685ab1d2cf63001f8fe87e64736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361061009a5760003560e01c8063abbfddc511610069578063b4e819fd1161004e578063b4e819fd14610202578063c45a015514610222578063f35aaf631461025657600080fd5b8063abbfddc5146101ae578063ad5c4648146101ce57600080fd5b806308c820da146100eb5780630d1424a3146101145780634b75f54f1461013557806351bf18301461018e57600080fd5b366100e6573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146100e4576100e4611fac565b005b600080fd5b6100fe6100f93660046120f3565b610276565b60405161010b9190612179565b60405180910390f35b6101276101223660046120f3565b6107ac565b60405190815260200161010b565b34801561014157600080fd5b506101697f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010b565b34801561019a57600080fd5b506100fe6101a93660046121bd565b610a28565b3480156101ba57600080fd5b506100fe6101c93660046121bd565b610f25565b3480156101da57600080fd5b506101697f000000000000000000000000000000000000000000000000000000000000000081565b34801561020e57600080fd5b5061012761021d3660046121bd565b6113f2565b34801561022e57600080fd5b506101697f000000000000000000000000000000000000000000000000000000000000000081565b34801561026257600080fd5b506101276102713660046121bd565b6116a2565b606081428110156102e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064015b60405180910390fd5b855167ffffffffffffffff81111561030257610302611fdb565b60405190808252806020026020018201604052801561032b578160200160208202803683370190505b50915084828851815181106103425761034261224d565b60200260200101818152505060006001835161035e91906122ab565b90505b80156104d757876103736001836122ab565b815181106103835761038361224d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663cc56fd43886001846103b491906122ab565b815181106103c4576103c461224d565b60200260200101518984815181106103de576103de61224d565b60200260200101518685815181106103f8576103f861224d565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401602060405180830381865afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e91906122c2565b836104aa6001846122ab565b815181106104ba576104ba61224d565b6020908102919091010152806104cf816122db565b915050610361565b5034826000815181106104ec576104ec61224d565b6020026020010151111561055c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4558434553534956455f494e505554000000000000000000000000000000000060448201526064016102df565b61059a826000815181106105725761057261224d565b60200260200101518860008151811061058d5761058d61224d565b602002602001015161193c565b60005b8751811015610750576000600189516105b691906122ab565b82146105e557886105c8836001612310565b815181106105d8576105d861224d565b60200260200101516105e7565b855b90508882815181106105fb576105fb61224d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166332fd54938984815181106106305761063061224d565b60200260200101518a8560016106469190612310565b815181106106565761065661224d565b60200260200101518786815181106106705761067061224d565b6020026020010151888760016106869190612310565b815181106106965761069661224d565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff9485166004820152928416602484015260448301919091526064820152908416608482015260a401600060405180830381600087803b15801561072457600080fd5b505af1158015610738573d6000803e3d6000fd5b5050505050808061074890612328565b91505061059d565b50816000815181106107645761076461224d565b60200260200101513411156107a2576107a2338360008151811061078a5761078a61224d565b60200260200101513461079d91906122ab565b611a87565b5095945050505050565b60008142811015610819576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016102df565b349150610833348860008151811061058d5761058d61224d565b60005b87518110156109bd5760006001895161084f91906122ab565b821461087e5788610861836001612310565b815181106108715761087161224d565b6020026020010151610880565b855b90508882815181106108945761089461224d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16634ac00e038984815181106108c9576108c961224d565b60200260200101518a8560016108df9190612310565b815181106108ef576108ef61224d565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff928316600482015290821660248201526044810188905260006064820152908416608482015260a4016020604051808303816000875af1158015610983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a791906122c2565b93505080806109b590612328565b915050610836565b50818511156107a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f4f55545055540000000000000000000000000060448201526064016102df565b60608142811015610a95576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016102df565b865167ffffffffffffffff811115610aaf57610aaf611fdb565b604051908082528060200260200182016040528015610ad8578160200160208202803683370190505b5091508582895181518110610aef57610aef61224d565b602002602001018181525050600060018351610b0b91906122ab565b90505b8015610c845788610b206001836122ab565b81518110610b3057610b3061224d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663cc56fd4389600184610b6191906122ab565b81518110610b7157610b7161224d565b60200260200101518a8481518110610b8b57610b8b61224d565b6020026020010151868581518110610ba557610ba561224d565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401602060405180830381865afa158015610c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4b91906122c2565b83610c576001846122ab565b81518110610c6757610c6761224d565b602090810291909101015280610c7c816122db565b915050610b0e565b508482600081518110610c9957610c9961224d565b60200260200101511115610d09576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4558434553534956455f494e505554000000000000000000000000000000000060448201526064016102df565b610d6387600081518110610d1f57610d1f61224d565b6020026020010151338a600081518110610d3b57610d3b61224d565b602002602001015185600081518110610d5657610d5661224d565b6020026020010151611b96565b60005b8851811015610f1957600060018a51610d7f91906122ab565b8214610dae5789610d91836001612310565b81518110610da157610da161224d565b6020026020010151610db0565b855b9050898281518110610dc457610dc461224d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166332fd54938a8481518110610df957610df961224d565b60200260200101518b856001610e0f9190612310565b81518110610e1f57610e1f61224d565b6020026020010151878681518110610e3957610e3961224d565b602002602001015188876001610e4f9190612310565b81518110610e5f57610e5f61224d565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff9485166004820152928416602484015260448301919091526064820152908416608482015260a401600060405180830381600087803b158015610eed57600080fd5b505af1158015610f01573d6000803e3d6000fd5b50505050508080610f1190612328565b915050610d66565b50509695505050505050565b60608142811015610f92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016102df565b865167ffffffffffffffff811115610fac57610fac611fdb565b604051908082528060200260200182016040528015610fd5578160200160208202803683370190505b5091508582895181518110610fec57610fec61224d565b60200260200101818152505060006001835161100891906122ab565b90505b8015611181578861101d6001836122ab565b8151811061102d5761102d61224d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663cc56fd438960018461105e91906122ab565b8151811061106e5761106e61224d565b60200260200101518a84815181106110885761108861224d565b60200260200101518685815181106110a2576110a261224d565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401602060405180830381865afa158015611124573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114891906122c2565b836111546001846122ab565b815181106111645761116461224d565b602090810291909101015280611179816122db565b91505061100b565b5084826000815181106111965761119661224d565b60200260200101511115611206576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4558434553534956455f494e505554000000000000000000000000000000000060448201526064016102df565b61121c87600081518110610d1f57610d1f61224d565b60005b88518110156113d257600060018a5161123891906122ab565b8214611267578961124a836001612310565b8151811061125a5761125a61224d565b6020026020010151611269565b305b905089828151811061127d5761127d61224d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166332fd54938a84815181106112b2576112b261224d565b60200260200101518b8560016112c89190612310565b815181106112d8576112d861224d565b60200260200101518786815181106112f2576112f261224d565b6020026020010151888760016113089190612310565b815181106113185761131861224d565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff9485166004820152928416602484015260448301919091526064820152908416608482015260a401600060405180830381600087803b1580156113a657600080fd5b505af11580156113ba573d6000803e3d6000fd5b505050505080806113ca90612328565b91505061121f565b50610f1973eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8588611d34565b6000814281101561145f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016102df565b8591506114a2876000815181106114785761147861224d565b6020026020010151338a6000815181106114945761149461224d565b602002602001015189611b96565b60005b885181101561162c57600060018a516114be91906122ab565b82146114ed57896114d0836001612310565b815181106114e0576114e061224d565b60200260200101516114ef565b855b90508982815181106115035761150361224d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16634ac00e038a84815181106115385761153861224d565b60200260200101518b85600161154e9190612310565b8151811061155e5761155e61224d565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff928316600482015290821660248201526044810188905260006064820152908416608482015260a4016020604051808303816000875af11580156115f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161691906122c2565b935050808061162490612328565b9150506114a5565b5081851115611697576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f4f55545055540000000000000000000000000060448201526064016102df565b509695505050505050565b6000814281101561170f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526f757465723a2045585049524544000000000000000000000000000000000060448201526064016102df565b859150611728876000815181106114785761147861224d565b60005b88518110156118b257600060018a5161174491906122ab565b82146117735789611756836001612310565b815181106117665761176661224d565b6020026020010151611775565b305b90508982815181106117895761178961224d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16634ac00e038a84815181106117be576117be61224d565b60200260200101518b8560016117d49190612310565b815181106117e4576117e461224d565b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff928316600482015290821660248201526044810188905260006064820152908416608482015260a4016020604051808303816000875af1158015611878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189c91906122c2565b93505080806118aa90612328565b91505061172b565b508185111561191d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f4f55545055540000000000000000000000000060448201526064016102df565b610f1973eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8584611d34565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156119a457600080fd5b505af11580156119b8573d6000803e3d6000fd5b50506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018790527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af1158015611a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a779190612360565b611a8357611a83611fac565b5050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff8416908390604051611abe9190612382565b60006040518083038185875af1925050503d8060008114611afb576040519150601f19603f3d011682016040523d82523d6000602084013e611b00565b606091505b5050905080611b91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201527f4c4544000000000000000000000000000000000000000000000000000000000060648201526084016102df565b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790529151600092839290881691611c359190612382565b6000604051808303816000865af19150503d8060008114611c72576040519150601f19603f3d011682016040523d82523d6000602084013e611c77565b606091505b5091509150818015611ca1575080511580611ca1575080806020019051810190611ca19190612360565b611d2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f464160448201527f494c45440000000000000000000000000000000000000000000000000000000060648201526084016102df565b505050505050565b600081600003611d4657506001611e35565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff851603611e26576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b158015611dff57600080fd5b505af1158015611e13573d6000803e3d6000fd5b50505050611e218383611a87565b611e31565b611e31848484611e3c565b5060015b9392505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790529151600092839290871691611ed39190612382565b6000604051808303816000865af19150503d8060008114611f10576040519150601f19603f3d011682016040523d82523d6000602084013e611f15565b606091505b5091509150818015611f3f575080511580611f3f575080806020019051810190611f3f9190612360565b611fa5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c45440060448201526064016102df565b5050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461202e57600080fd5b919050565b600082601f83011261204457600080fd5b8135602067ffffffffffffffff8083111561206157612061611fdb565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811084821117156120a4576120a4611fdb565b6040529384528581018301938381019250878511156120c257600080fd5b83870191505b848210156120e8576120d98261200a565b835291830191908301906120c8565b979650505050505050565b600080600080600060a0868803121561210b57600080fd5b853567ffffffffffffffff8082111561212357600080fd5b61212f89838a01612033565b9650602088013591508082111561214557600080fd5b5061215288828901612033565b945050604086013592506121686060870161200a565b949793965091946080013592915050565b6020808252825182820181905260009190848201906040850190845b818110156121b157835183529284019291840191600101612195565b50909695505050505050565b60008060008060008060c087890312156121d657600080fd5b863567ffffffffffffffff808211156121ee57600080fd5b6121fa8a838b01612033565b9750602089013591508082111561221057600080fd5b5061221d89828a01612033565b955050604087013593506060870135925061223a6080880161200a565b915060a087013590509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156122bd576122bd61227c565b500390565b6000602082840312156122d457600080fd5b5051919050565b6000816122ea576122ea61227c565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600082198211156123235761232361227c565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036123595761235961227c565b5060010190565b60006020828403121561237257600080fd5b81518015158114611e3557600080fd5b6000825160005b818110156123a35760208186018101518583015201612389565b818111156123b2576000828501525b50919091019291505056fea264697066735822122094b6bca6975155f316346d81cea6a7629da42990ff685ab1d2cf63001f8fe87e64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}