{
  "address": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coin_amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sold_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bought_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        }
      ],
      "name": "TokenExchange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "A_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_TOKEN_COMMON_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xefe159db31b2ed936570bf891cd9ee1a159b4633e636b9af7ed3811e04bc844d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
    "transactionIndex": 0,
    "gasUsed": "3592929",
    "logsBloom": "0x
    "blockHash": "0xbaa3b816edffc980a4af5c829f05adb94f36a524a88c20a20285e9648e439938",
    "transactionHash": "0xefe159db31b2ed936570bf891cd9ee1a159b4633e636b9af7ed3811e04bc844d",
    "logs": [],
    "blockNumber": 35,
    "cumulativeGasUsed": "3592929",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "550e4d753b3429079c3ff672185b4b19",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coin_amount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sold_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_sold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bought_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_bought\",\"type\":\"uint256\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_TOKEN_COMMON_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"params\":{\"amounts\":\"List of amounts of coins to deposit\",\"minMintAmount\":\"Minimum amount of LP tokens to mint from the deposit\"},\"returns\":{\"mintAmount\":\"Amount of LP tokens received by depositing\"}},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"params\":{\"self\":\"Swap struct to read from and write to\",\"toMint\":\"amount of pool tokens to be minted\",\"user\":\"address of the user depositing tokens\"}}},\"stateVariables\":{\"A_PRECISION\":{\"details\":\"protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration\"},\"MAX_ITERATION\":{\"details\":\"max iteration of converge calccuate\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"notice\":\"Deposit coins into the pool\"},\"calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)\":{\"notice\":\"Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account\"},\"getAPrecise(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"VIEW FUNCTIONS\"},\"getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"Returns portfolio virtual price (for calculating profit) scaled up by 1e18\"},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"notice\":\"Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit.\"}},\"notice\":\"StableSwap main algorithm\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemStableSwapLib.sol\":\"RequiemStableSwapLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/RequiemStableSwapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./tokens/LPToken.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\n/**\\n * StableSwap main algorithm\\n */\\nlibrary RequiemStableSwapLib {\\n    using SafeERC20 for IERC20;\\n\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] token_amounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n\\n    event TokenExchange(\\n        address indexed buyer,\\n        uint256 sold_id,\\n        uint256 tokens_sold,\\n        uint256 bought_id,\\n        uint256 tokens_bought\\n    );\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 token_supply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\\n\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] token_amounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n\\n    uint256 public constant FEE_DENOMINATOR = 1e10;\\n    // uint256 public constant PRECISION = 1e18;\\n\\n    /// @dev protect from division loss when run approximation loop. We cannot divide at the end because of overflow,\\n    /// so we add some (small) PRECISION when divide in each iteration\\n    uint256 public constant A_PRECISION = 100;\\n    /// @dev max iteration of converge calccuate\\n    uint256 internal constant MAX_ITERATION = 256;\\n    uint256 public constant POOL_TOKEN_COMMON_DECIMALS = 18;\\n\\n    struct SwapStorage {\\n        IERC20[] pooledTokens;\\n        LPToken lpToken;\\n        /// @dev token i multiplier to reach POOL_TOKEN_COMMON_DECIMALS\\n        uint256[] tokenMultipliers;\\n        /// @dev effective balance which might different from token balance of the contract 'cause it hold admin fee as well\\n        uint256[] balances;\\n        /// @dev swap fee ratio. Charge on any action which move balance state far from the ideal state\\n        uint256 fee;\\n        /// @dev admin fee in ratio of swap fee.\\n        uint256 adminFee;\\n        /// @dev observation of A, multiplied with A_PRECISION\\n        uint256 initialA;\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n        // withdrawal fee control\\n        uint256 defaultWithdrawFee;\\n        mapping(address => uint256) depositTimestamp;\\n        mapping(address => uint256) withdrawFeeMultiplier;\\n    }\\n\\n    /**\\n     * @notice Deposit coins into the pool\\n     * @param amounts List of amounts of coins to deposit\\n     * @param minMintAmount Minimum amount of LP tokens to mint from the deposit\\n     * @return mintAmount Amount of LP tokens received by depositing\\n     */\\n    function addLiquidity(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 minMintAmount\\n    ) external returns (uint256 mintAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256[] memory fees = new uint256[](nCoins);\\n        uint256 _fee = _feePerToken(self);\\n\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256 D0 = 0;\\n        if (tokenSupply > 0) {\\n            D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\\n        }\\n\\n        uint256[] memory newBalances = self.balances;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (tokenSupply == 0) {\\n                require(amounts[i] > 0, \\\"initialDepositRequireAllTokens\\\");\\n            }\\n            // get real transfer in amount\\n            newBalances[i] += _doTransferIn(self.pooledTokens[i], amounts[i]);\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        assert(D1 > D0); // double check\\n\\n        if (tokenSupply == 0) {\\n            self.balances = newBalances;\\n            mintAmount = D1;\\n        } else {\\n            uint256 diff = 0;\\n            for (uint256 i = 0; i < nCoins; i++) {\\n                diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\\n                fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n                self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n                newBalances[i] -= fees[i];\\n            }\\n            D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n            mintAmount = (tokenSupply * (D1 - D0)) / D0;\\n        }\\n\\n        require(mintAmount >= minMintAmount, \\\"> slippage\\\");\\n\\n        self.lpToken.mint(msg.sender, mintAmount);\\n        emit AddLiquidity(msg.sender, amounts, fees, D1, mintAmount);\\n    }\\n\\n    function swap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256) {\\n        IERC20 inCoin = self.pooledTokens[i];\\n        uint256[] memory normalizedBalances = _xp(self);\\n        inAmount = _doTransferIn(inCoin, inAmount);\\n\\n        // uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\\n        uint256 y = _getY(self, i, j, normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]), normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> slippage\\\");\\n\\n        // uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n        return dy;\\n    }\\n\\n    // the same function as swap, but it espects that amounts already have been\\n    // sent to the contract\\n    function onSwap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n\\n        uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\\n        uint256 y = _getY(self, i, j, x, normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> slippage\\\");\\n\\n        uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + _adminFee;\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n        return dy;\\n    }\\n\\n    function removeLiquidity(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256[] memory minAmounts\\n    ) external returns (uint256[] memory amounts) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(lpAmount <= totalSupply);\\n        uint256 nCoins = self.pooledTokens.length;\\n\\n        uint256[] memory fees = new uint256[](nCoins);\\n        amounts = _calculateRemoveLiquidity(self, msg.sender, lpAmount);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] >= minAmounts[i], \\\"> slippage\\\");\\n            self.balances[i] = self.balances[i] - amounts[i];\\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        emit RemoveLiquidity(msg.sender, amounts, fees, totalSupply - lpAmount);\\n    }\\n\\n    function removeLiquidityOneToken(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256 index,\\n        uint256 minAmount\\n    ) external returns (uint256) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply > 0, \\\"totalSupply = 0\\\");\\n        uint256 numTokens = self.pooledTokens.length;\\n        require(lpAmount <= self.lpToken.balanceOf(msg.sender), \\\"> balance\\\");\\n        require(lpAmount <= totalSupply, \\\"> totalSupply\\\");\\n        require(index < numTokens, \\\"tokenNotFound\\\");\\n\\n        uint256 dyFee;\\n        uint256 dy;\\n\\n        (dy, dyFee) = _calculateRemoveLiquidityOneToken(self, msg.sender, lpAmount, index);\\n\\n        require(dy >= minAmount, \\\"> slippage\\\");\\n\\n        self.balances[index] -= (dy + (dyFee * self.adminFee) / FEE_DENOMINATOR);\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        self.pooledTokens[index].safeTransfer(msg.sender, dy);\\n\\n        emit RemoveLiquidityOne(msg.sender, index, lpAmount, dy);\\n\\n        return dy;\\n    }\\n\\n    function removeLiquidityImbalance(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 maxBurnAmount\\n    ) external returns (uint256 burnAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply != 0, \\\"totalSupply = 0\\\");\\n        uint256 _fee = _feePerToken(self);\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256[] memory newBalances = self.balances;\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            newBalances[i] -= amounts[i];\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256[] memory fees = new uint256[](nCoins);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            uint256 idealBalance = (D1 * self.balances[i]) / D0;\\n            uint256 diff = _distance(newBalances[i], idealBalance);\\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n            newBalances[i] -= fees[i];\\n        }\\n\\n        // recalculate invariant with fee charged balances\\n        D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        burnAmount = ((D0 - D1) * totalSupply) / D0;\\n        assert(burnAmount > 0);\\n        burnAmount = (burnAmount + 1) * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, msg.sender)); //In case of rounding errors - make it unfavorable for the \\\"attacker\\\"\\n        require(burnAmount <= maxBurnAmount, \\\"> slippage\\\");\\n\\n        self.lpToken.burnFrom(msg.sender, burnAmount);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (amounts[i] != 0) {\\n                self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, totalSupply - burnAmount);\\n    }\\n\\n    /// VIEW FUNCTIONS\\n    function getAPrecise(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self);\\n    }\\n\\n    /**\\n     * Returns portfolio virtual price (for calculating profit)\\n     * scaled up by 1e18\\n     */\\n    function getVirtualPrice(SwapStorage storage self) external view returns (uint256) {\\n        uint256 D = _getD(_xp(self), _getAPrecise(self));\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        return (D * 10**POOL_TOKEN_COMMON_DECIMALS) / tokenSupply;\\n    }\\n\\n    function getAdminBalance(SwapStorage storage self, uint256 index) external view returns (uint256) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        return self.pooledTokens[index].balanceOf(address(this)) - (self.balances[index]);\\n    }\\n\\n    /**\\n     * Estimate amount of LP token minted or burned at deposit or withdrawal\\n     * without taking fees into account\\n     */\\n    function calculateTokenAmount(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        uint256[] memory newBalances = self.balances;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (deposit) {\\n                newBalances[i] += amounts[i];\\n            } else {\\n                newBalances[i] -= amounts[i];\\n            }\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n\\n        if (totalSupply == 0) {\\n            return D1; // first depositor take it all\\n        }\\n\\n        uint256 diff = deposit ? D1 - D0 : D0 - D1;\\n        return (diff * self.lpToken.totalSupply()) / D0;\\n    }\\n\\n    function getA(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self) / A_PRECISION;\\n    }\\n\\n    function calculateSwap(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 newInBalance = normalizedBalances[inIndex] + (inAmount * self.tokenMultipliers[inIndex]);\\n        uint256 outBalance = _getY(self, inIndex, outIndex, newInBalance, normalizedBalances);\\n        uint256 outAmount = (normalizedBalances[outIndex] - outBalance - 1) / self.tokenMultipliers[outIndex];\\n        uint256 _fee = (self.fee * outAmount) / FEE_DENOMINATOR;\\n        return outAmount - _fee;\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) external view returns (uint256[] memory) {\\n        return _calculateRemoveLiquidity(self, account, amount);\\n    }\\n\\n    function calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 lpAmount,\\n        uint256 tokenIndex\\n    ) external view returns (uint256 amount) {\\n        (amount, ) = _calculateRemoveLiquidityOneToken(self, account, lpAmount, tokenIndex);\\n    }\\n\\n    /**\\n     * @notice Update the withdraw fee for `user`. If the user is currently\\n     * not providing liquidity in the pool, sets to default value. If not, recalculate\\n     * the starting withdraw fee based on the last deposit's time & amount relative\\n     * to the new deposit.\\n     *\\n     * @param self Swap struct to read from and write to\\n     * @param user address of the user depositing tokens\\n     * @param toMint amount of pool tokens to be minted\\n     */\\n    function updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) external {\\n        _updateUserWithdrawFee(self, user, toMint);\\n    }\\n\\n    /// INTERNAL FUNCTIONS\\n\\n    /**\\n     * Ramping A up or down, return A with precision of A_PRECISION\\n     */\\n    function _getAPrecise(SwapStorage storage self) internal view returns (uint256) {\\n        if (block.timestamp >= self.futureATime) {\\n            return self.futureA;\\n        }\\n\\n        if (self.futureA > self.initialA) {\\n            return\\n                self.initialA +\\n                ((self.futureA - self.initialA) * (block.timestamp - self.initialATime)) /\\n                (self.futureATime - self.initialATime);\\n        }\\n\\n        return\\n            self.initialA -\\n            ((self.initialA - self.futureA) * (block.timestamp - self.initialATime)) /\\n            (self.futureATime - self.initialATime);\\n    }\\n\\n    /**\\n     * normalized balances of each tokens.\\n     */\\n    function _xp(uint256[] memory balances, uint256[] memory rates) internal pure returns (uint256[] memory) {\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            rates[i] = (rates[i] * balances[i]);\\n        }\\n\\n        return rates;\\n    }\\n\\n    function _xp(SwapStorage storage self) internal view returns (uint256[] memory) {\\n        return _xp(self.balances, self.tokenMultipliers);\\n    }\\n\\n    /**\\n     * Calculate D for *NORMALIZED* balances of each tokens\\n     * @param xp normalized balances of token\\n     */\\n    function _getD(uint256[] memory xp, uint256 amp) internal pure returns (uint256) {\\n        uint256 nCoins = xp.length;\\n        uint256 sum = _sumOf(xp);\\n        if (sum == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev = 0;\\n        uint256 D = sum;\\n        uint256 Ann = amp * nCoins;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            uint256 D_P = D;\\n            for (uint256 j = 0; j < xp.length; j++) {\\n                D_P = (D_P * D) / (xp[j] * nCoins);\\n            }\\n            Dprev = D;\\n            D =\\n                (((Ann * sum) / A_PRECISION + D_P * nCoins) * D) /\\n                (((Ann - A_PRECISION) * D) / A_PRECISION + (nCoins + 1) * D_P);\\n            if (_distance(D, Dprev) <= 1) {\\n                return D;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    /**\\n     * calculate new balance of when swap\\n     * Done by solving quadratic equation iteratively.\\n     *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     *  x_1**2 + b*x_1 = c\\n     *  x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     * @param inIndex index of token to swap in\\n     * @param outIndex index of token to swap out\\n     * @param inBalance new balance (normalized) of input token if the swap success\\n     * @return NORMALIZED balance of output token if the swap success\\n     */\\n    function _getY(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inBalance,\\n        uint256[] memory normalizedBalances\\n    ) internal view returns (uint256) {\\n        require(inIndex != outIndex, \\\"sameToken\\\");\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(inIndex < nCoins && outIndex < nCoins, \\\"indexOutOfRange\\\");\\n\\n        uint256 amp = _getAPrecise(self);\\n        uint256 Ann = amp * nCoins;\\n        uint256 D = _getD(normalizedBalances, amp);\\n\\n        uint256 sum = 0; // sum of new balances except output token\\n        uint256 c = D;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == outIndex) {\\n                continue;\\n            }\\n\\n            uint256 x = i == inIndex ? inBalance : normalizedBalances[i];\\n            sum += x;\\n            c = (c * D) / (x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = sum + (D * A_PRECISION) / Ann;\\n\\n        uint256 lastY = 0;\\n        uint256 y = D;\\n\\n        for (uint256 index = 0; index < MAX_ITERATION; index++) {\\n            lastY = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(lastY, y) <= 1) {\\n                return y;\\n            }\\n        }\\n\\n        revert(\\\"yCalculationFailed\\\");\\n    }\\n\\n    function _calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) internal view returns (uint256[] memory) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(amount <= totalSupply, \\\"Cannot exceed total supply\\\");\\n\\n        uint256 feeAdjustedAmount = (amount * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) /\\n            FEE_DENOMINATOR;\\n\\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            amounts[i] = (self.balances[i] * (feeAdjustedAmount)) / (totalSupply);\\n        }\\n        return amounts;\\n    }\\n\\n    function _calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 tokenAmount,\\n        uint256 index\\n    ) internal view returns (uint256 dy, uint256 fee) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256[] memory xp = _xp(self);\\n        uint256 D0 = _getD(xp, amp);\\n        uint256 D1 = D0 - (tokenAmount * D0) / self.lpToken.totalSupply();\\n        uint256 newY = _getYD(self, amp, index, xp, D1);\\n        uint256[] memory reducedXP = xp;\\n        uint256 _fee = _feePerToken(self);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            uint256 expectedDx = 0;\\n            if (i == index) {\\n                expectedDx = (xp[i] * D1) / D0 - newY;\\n            } else {\\n                expectedDx = xp[i] - (xp[i] * D1) / D0;\\n            }\\n            reducedXP[i] -= (_fee * expectedDx) / FEE_DENOMINATOR;\\n        }\\n\\n        dy = reducedXP[index] - _getYD(self, amp, index, reducedXP, D1);\\n        dy = (dy - 1) / self.tokenMultipliers[index];\\n        fee = ((xp[index] - newY) / self.tokenMultipliers[index]) - dy;\\n        dy = (dy * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n    }\\n\\n    function _feePerToken(SwapStorage storage self) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        return (self.fee * nCoins) / (4 * (nCoins - 1));\\n    }\\n\\n    function _getYD(\\n        SwapStorage storage self,\\n        uint256 A,\\n        uint256 index,\\n        uint256[] memory xp,\\n        uint256 D\\n    ) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        assert(index < nCoins);\\n        uint256 Ann = A * nCoins;\\n        uint256 c = D;\\n        uint256 s = 0;\\n        uint256 _x = 0;\\n        uint256 yPrev = 0;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == index) {\\n                continue;\\n            }\\n            _x = xp[i];\\n            s += _x;\\n            c = (c * D) / (_x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = s + (D * A_PRECISION) / Ann;\\n        uint256 y = D;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(yPrev, y) <= 1) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    function _updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) internal {\\n        // If token is transferred to address 0 (or burned), don't update the fee.\\n        if (user == address(0)) {\\n            return;\\n        }\\n        if (self.defaultWithdrawFee == 0) {\\n            // If current fee is set to 0%, set multiplier to FEE_DENOMINATOR\\n            self.withdrawFeeMultiplier[user] = FEE_DENOMINATOR;\\n        } else {\\n            // Otherwise, calculate appropriate discount based on last deposit amount\\n            uint256 currentFee = _calculateCurrentWithdrawFee(self, user);\\n            uint256 currentBalance = self.lpToken.balanceOf(user);\\n\\n            // ((currentBalance * currentFee) + (toMint * defaultWithdrawFee)) * FEE_DENOMINATOR /\\n            // ((toMint + currentBalance) * defaultWithdrawFee)\\n            if ((toMint + currentBalance) * self.defaultWithdrawFee != 0) {\\n                self.withdrawFeeMultiplier[user] =\\n                    (((currentBalance * currentFee) + (toMint * self.defaultWithdrawFee)) * (FEE_DENOMINATOR)) /\\n                    ((toMint + currentBalance) * self.defaultWithdrawFee);\\n            }\\n        }\\n        self.depositTimestamp[user] = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Calculate the fee that is applied when the given user withdraws.\\n     * Withdraw fee decays linearly over 4 weeks.\\n     * @param user address you want to calculate withdraw fee of\\n     * @return current withdraw fee of the user\\n     */\\n    function _calculateCurrentWithdrawFee(SwapStorage storage self, address user) internal view returns (uint256) {\\n        uint256 endTime = self.depositTimestamp[user] + (4 weeks);\\n        if (endTime > block.timestamp) {\\n            uint256 timeLeftover = endTime - block.timestamp;\\n            return\\n                (self.defaultWithdrawFee * self.withdrawFeeMultiplier[user] * timeLeftover) /\\n                (4 weeks) /\\n                FEE_DENOMINATOR;\\n        }\\n        return 0;\\n    }\\n\\n    function _doTransferIn(IERC20 token, uint256 amount) internal returns (uint256) {\\n        uint256 priorBalance = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        return token.balanceOf(address(this)) - priorBalance;\\n    }\\n\\n    function _sumOf(uint256[] memory x) internal pure returns (uint256 sum) {\\n        sum = 0;\\n        for (uint256 i = 0; i < x.length; i++) {\\n            sum += x[i];\\n        }\\n    }\\n\\n    function _distance(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x - y : y - x;\\n    }\\n}\\n\",\"keccak256\":\"0x641ff2fecfaa90f6dbd1e688aa91041f423c38728295256194b0b2d1add0cc9e\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb7230835a4efbbbebcb5371d121977e859388b33f3ee5d9a7a44fc4de8d6b970\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0xc92c369d1363b5cbec9337ea8921578bd4acd272af2ac9eaf7227a17689f29e9\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event TokenExchange(address indexed buyer, uint256 soldId, uint256 tokensSold, uint256 boughtId, uint256 tokensBought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0xe47d45ba36e1a5e9e044ebb0815b1c4ced235dc5c7b38d30f9fe6d3768d5749f\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xd5f49ed9e5ab4471a4c25f3730f50ed4c29a9bfa9637306f227c2a59a18bbe81\",\"license\":\"MIT\"},\"contracts/libraries/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ERC20/IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7bf66daeb140a455a28ab3c1e03f4eebb5948ccf6000dbb700f6c57bba03a9d4\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, msg.sender).sub(amount, Errors.ERC20_BURN_EXCEEDS_ALLOWANCE);\\n\\n        _approve(account, msg.sender, decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x82fe5fb385cfe74b417e3aaace26a64aa5190b36ea0716ad441484fb444087f8\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xd978150fb13e68cd0b2b4b237d65306f55397437127bea72622d5cd4244ba92b\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        RequiemErrors._require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\n    }\\n}\\n\",\"keccak256\":\"0xa39a2c090cd9727eeca0658c5a3c382f9dcfe581f4d323bb388776c3237c72fd\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        RequiemErrors._require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        uint256 errorCode\\n    ) internal pure returns (uint256) {\\n        RequiemErrors._require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc82c3356797b0e56c4ac77d5554343f66b3b436a18537bdb146e10921605d729\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x37ebaca1c58a9daf307229c45122f12d603a95d1d92c1a8e7648b1910755bfa0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/tokens/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\nimport \\\"../libraries/ERC20Burnable.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../interfaces/IRequiemStableSwap.sol\\\";\\n\\ncontract LPToken is Ownable, ERC20Burnable {\\n    IRequiemStableSwap public swap;\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n        swap = IRequiemStableSwap(msg.sender);\\n    }\\n\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"zeroMintAmount\\\");\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n     * minting and burning. This ensures that swap.updateUserWithdrawFees are called everytime.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20) {\\n        super._beforeTokenTransfer(from, to, amount);\\n        swap.updateUserWithdrawFee(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2f4e27227aca77ab9543f1f7ea0a45e5b14b62177b414e47f18248c49613aac3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61403761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101405760003560e01c8063c20aace8116100bc578063d011f9181161008b578063d73792a911610070578063d73792a9146102c9578063e2eba89b146102d5578063fa563597146102e857600080fd5b8063d011f918146102ae578063d36604ac146102b657600080fd5b8063c20aace814610239578063c685696c14610241578063c8344c061461026e578063ce055b8d1461028e57600080fd5b8063a303558511610113578063b52e146f116100f8578063b52e146f146101f1578063ba2998d914610204578063c188e4be1461021757600080fd5b8063a3035585146101be578063ad30093f146101d157600080fd5b8063159763bb146101455780631e7e95d31461016b5780632bfe30d01461017e5780637a6cba3c1461019e575b600080fd5b6101586101533660046138e7565b6102fb565b6040519081526020015b60405180910390f35b610158610179366004613a1b565b610313565b81801561018a57600080fd5b50610158610199366004613a76565b610685565b8180156101aa57600080fd5b506101586101b9366004613aa8565b610acf565b6101586101cc366004613af8565b611213565b8180156101dd57600080fd5b506101586101ec366004613b11565b611224565b6101586101ff366004613af8565b6114fd565b610158610212366004613a76565b611514565b81801561022357600080fd5b50610237610232366004613b62565b611621565b005b610158601281565b81801561024d57600080fd5b5061026161025c366004613b97565b611631565b6040516101629190613be7565b81801561027a57600080fd5b50610158610289366004613aa8565b611946565b81801561029a57600080fd5b506101586102a9366004613b11565b611fdd565b610158606481565b6101586102c4366004613af8565b61227d565b6101586402540be40081565b6101586102e3366004613c2b565b61235c565b6102616102f6366004613b62565b612489565b600061030985858585612496565b5095945050505050565b8254825160009190811461036e5760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964416d6f756e74734c656e67746800000000000000000000000060448201526064015b60405180910390fd5b6000610379866127fb565b9050600061038f610389886128d4565b83612982565b90506000876003018054806020026020016040519081016040528092919081815260200182805480156103e157602002820191906000526020600020905b8154815260200190600101908083116103cd575b5050505050905060005b848110156104975786156104415787818151811061040b5761040b613c4d565b602002602001015182828151811061042557610425613c4d565b602002602001018181516104399190613cab565b905250610485565b87818151811061045357610453613c4d565b602002602001015182828151811061046d5761046d613c4d565b602002602001018181516104819190613cc3565b9052505b8061048f81613cda565b9150506103eb565b5060006104ff6104f9838b6002018054806020026020016040519081016040528092919081815260200182805480156104ef57602002820191906000526020600020905b8154815260200190600101908083116104db575b5050505050612b1e565b85612982565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105969190613d13565b9050806105aa5750945061067e9350505050565b6000886105c0576105bb8386613cc3565b6105ca565b6105ca8584613cc3565b9050848b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106609190613d13565b61066a9083613d2c565b6106749190613d69565b9750505050505050505b9392505050565b6000808560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071b9190613d13565b90506000811161076d5760405162461bcd60e51b815260206004820152600f60248201527f746f74616c537570706c79203d203000000000000000000000000000000000006044820152606401610365565b855460018701546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156107df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108039190613d13565b8611156108525760405162461bcd60e51b815260206004820152600960248201527f3e2062616c616e636500000000000000000000000000000000000000000000006044820152606401610365565b818611156108a25760405162461bcd60e51b815260206004820152600d60248201527f3e20746f74616c537570706c79000000000000000000000000000000000000006044820152606401610365565b8085106108f15760405162461bcd60e51b815260206004820152600d60248201527f746f6b656e4e6f74466f756e64000000000000000000000000000000000000006044820152606401610365565b60008061090089338a8a612496565b92509050858110156109545760405162461bcd60e51b815260206004820152600a60248201527f3e20736c697070616765000000000000000000000000000000000000000000006044820152606401610365565b6402540be40089600501548361096a9190613d2c565b6109749190613d69565b61097e9082613cab565b89600301888154811061099357610993613c4d565b9060005260206000200160008282546109ac9190613cc3565b909155505060018901546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018a905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015610a2557600080fd5b505af1158015610a39573d6000803e3d6000fd5b50505050610a8033828b6000018a81548110610a5757610a57613c4d565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169190612ba1565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b82548251600091908114610b255760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964416d6f756e74734c656e6774680000000000000000000000006044820152606401610365565b60008167ffffffffffffffff811115610b4057610b40613922565b604051908082528060200260200182016040528015610b69578160200160208202803683370190505b5090506000610b7787612c75565b905060008760010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0e9190613d13565b90506000610c1b896127fb565b905060008215610cd757610cd46103898b600301805480602002602001604051908101604052809291908181526020018280548015610c7957602002820191906000526020600020905b815481526020019060010190808311610c65575b50505050508c6002018054806020026020016040519081016040528092919081815260200182805480156104ef57602002820191906000526020600020908154815260200190600101908083116104db575050505050612b1e565b90505b60008a600301805480602002602001604051908101604052809291908181526020018280548015610d2757602002820191906000526020600020905b815481526020019060010190808311610d13575b5050505050905060005b87811015610e445784610da75760008b8281518110610d5257610d52613c4d565b602002602001015111610da75760405162461bcd60e51b815260206004820152601e60248201527f696e697469616c4465706f73697452657175697265416c6c546f6b656e7300006044820152606401610365565b610e098c6000018281548110610dbf57610dbf613c4d565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c8381518110610dfc57610dfc613c4d565b6020026020010151612caa565b828281518110610e1b57610e1b613c4d565b60200260200101818151610e2f9190613cab565b90525080610e3c81613cda565b915050610d31565b506000610ea46104f9838e6002018054806020026020016040519081016040528092919081815260200182805480156104ef57602002820191906000526020600020908154815260200190600101908083116104db575050505050612b1e565b9050828111610eb557610eb5613da4565b84610ed8578151610ecf9060038e0190602085019061385e565b508098506110d4565b6000805b8981101561104b57610f3c858f6003018381548110610efd57610efd613c4d565b906000526020600020015485610f139190613d2c565b610f1d9190613d69565b858381518110610f2f57610f2f613c4d565b6020026020010151612dfb565b91506402540be400610f4e838a613d2c565b610f589190613d69565b898281518110610f6a57610f6a613c4d565b6020026020010181815250506402540be4008e600501548a8381518110610f9357610f93613c4d565b6020026020010151610fa59190613d2c565b610faf9190613d69565b848281518110610fc157610fc1613c4d565b6020026020010151610fd39190613cc3565b8e6003018281548110610fe857610fe8613c4d565b906000526020600020018190555088818151811061100857611008613c4d565b602002602001015184828151811061102257611022613c4d565b602002602001018181516110369190613cc3565b9052508061104381613cda565b915050610edc565b506110af6110a9848f6002018054806020026020016040519081016040528092919081815260200182805480156104ef57602002820191906000526020600020908154815260200190600101908083116104db575050505050612b1e565b86612982565b9150836110bc8184613cc3565b6110c69088613d2c565b6110d09190613d69565b9950505b898910156111245760405162461bcd60e51b815260206004820152600a60248201527f3e20736c697070616765000000000000000000000000000000000000000000006044820152606401610365565b60018c01546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906340c10f1990604401600060405180830381600087803b15801561119857600080fd5b505af11580156111ac573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d6040516111fc9493929190613e0e565b60405180910390a250505050505050509392505050565b600061121e826127fb565b92915050565b60008087600001878154811061123c5761123c613c4d565b600091825260208220015473ffffffffffffffffffffffffffffffffffffffff169150611268896128d4565b90506112748287612caa565b955060006112d38a8a8a8d6002018d8154811061129357611293613c4d565b90600052602060002001548b6112a99190613d2c565b868e815181106112bb576112bb613c4d565b60200260200101516112cd9190613cab565b86612e1d565b90506000600182848b815181106112ec576112ec613c4d565b60200260200101516112fe9190613cc3565b6113089190613cc3565b905060006402540be4008c60040154836113229190613d2c565b61132c9190613d69565b90508b6002018a8154811061134357611343613c4d565b9060005260206000200154818361135a9190613cc3565b6113649190613d69565b9150878210156113b65760405162461bcd60e51b815260206004820152600a60248201527f3e20736c697070616765000000000000000000000000000000000000000000006044820152606401610365565b888c6003018c815481106113cc576113cc613c4d565b9060005260206000200160008282546113e59190613cab565b909155505060028c0180548b90811061140057611400613c4d565b90600052602060002001546402540be4008d60050154836114219190613d2c565b61142b9190613d69565b6114359190613d69565b61143f9083613cab565b8c6003018b8154811061145457611454613c4d565b90600052602060002001600082825461146d9190613cc3565b9250508190555061148e87838e6000018d81548110610a5757610a57613c4d565b604080518c8152602081018b90529081018b90526060810183905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a2509a9950505050505050505050565b6000606461150a836127fb565b61121e9190613d69565b600080611520866128d4565b9050600086600201868154811061153957611539613c4d565b90600052602060002001548461154f9190613d2c565b82878151811061156157611561613c4d565b60200260200101516115739190613cab565b905060006115848888888587612e1d565b9050600088600201878154811061159d5761159d613c4d565b9060005260206000200154600183868a815181106115bd576115bd613c4d565b60200260200101516115cf9190613cc3565b6115d99190613cc3565b6115e39190613d69565b905060006402540be400828b600401546115fd9190613d2c565b6116079190613d69565b90506116138183613cc3565b9a9950505050505050505050565b61162c8383836130a7565b505050565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c89190613d13565b9050808411156116d757600080fd5b845460008167ffffffffffffffff8111156116f4576116f4613922565b60405190808252806020026020018201604052801561171d578160200160208202803683370190505b50905061172b87338861327d565b935060005b84518110156118675785818151811061174b5761174b613c4d565b602002602001015185828151811061176557611765613c4d565b602002602001015110156117bb5760405162461bcd60e51b815260206004820152600a60248201527f3e20736c697070616765000000000000000000000000000000000000000000006044820152606401610365565b8481815181106117cd576117cd613c4d565b60200260200101518860030182815481106117ea576117ea613c4d565b90600052602060002001546117ff9190613cc3565b88600301828154811061181457611814613c4d565b90600052602060002001819055506118553386838151811061183857611838613c4d565b60200260200101518a6000018481548110610a5757610a57613c4d565b8061185f81613cda565b915050611730565b5060018701546040517f79cc67900000000000000000000000000000000000000000000000000000000081523360048201526024810188905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b1580156118dc57600080fd5b505af11580156118f0573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea9150869050836119258a88613cc3565b60405161193493929190613e47565b60405180910390a25050509392505050565b8254825160009190811461199c5760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964416d6f756e74734c656e6774680000000000000000000000006044820152606401610365565b6001850154604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916318160ddd9160048083019260209291908290030181865afa158015611a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a329190613d13565b905080611a815760405162461bcd60e51b815260206004820152600f60248201527f746f74616c537570706c79203d203000000000000000000000000000000000006044820152606401610365565b6000611a8c87612c75565b90506000611a99886127fb565b9050600088600301805480602002602001604051908101604052809291908181526020018280548015611aeb57602002820191906000526020600020905b815481526020019060010190808311611ad7575b505050505090506000611b06611b008b6128d4565b84612982565b905060005b86811015611b6857898181518110611b2557611b25613c4d565b6020026020010151838281518110611b3f57611b3f613c4d565b60200260200101818151611b539190613cc3565b90525080611b6081613cda565b915050611b0b565b506000611bc86104f9848d6002018054806020026020016040519081016040528092919081815260200182805480156104ef57602002820191906000526020600020908154815260200190600101908083116104db575050505050612b1e565b905060008767ffffffffffffffff811115611be557611be5613922565b604051908082528060200260200182016040528015611c0e578160200160208202803683370190505b50905060005b88811015611d8e576000848e6003018381548110611c3457611c34613c4d565b906000526020600020015485611c4a9190613d2c565b611c549190613d69565b90506000611c7b878481518110611c6d57611c6d613c4d565b602002602001015183612dfb565b90506402540be400611c8d828b613d2c565b611c979190613d69565b848481518110611ca957611ca9613c4d565b6020026020010181815250506402540be4008f60050154858581518110611cd257611cd2613c4d565b6020026020010151611ce49190613d2c565b611cee9190613d69565b878481518110611d0057611d00613c4d565b6020026020010151611d129190613cc3565b8f6003018481548110611d2757611d27613c4d565b9060005260206000200181905550838381518110611d4757611d47613c4d565b6020026020010151878481518110611d6157611d61613c4d565b60200260200101818151611d759190613cc3565b905250829150611d86905081613cda565b915050611c14565b50611dec6110a9858e6002018054806020026020016040519081016040528092919081815260200182805480156104ef57602002820191906000526020600020908154815260200190600101908083116104db575050505050612b1e565b91508287611dfa8483613cc3565b611e049190613d2c565b611e0e9190613d69565b985060008911611e2057611e20613da4565b611e2a8c33613463565b611e39906402540be400613cc3565b611e448a6001613cab565b611e4e9190613d2c565b985089891115611ea05760405162461bcd60e51b815260206004820152600a60248201527f3e20736c697070616765000000000000000000000000000000000000000000006044820152606401610365565b60018c01546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015611f1457600080fd5b505af1158015611f28573d6000803e3d6000fd5b5050505060005b88811015611f9d578b8181518110611f4957611f49613c4d565b6020026020010151600014611f8b57611f8b338d8381518110611f6e57611f6e613c4d565b60200260200101518f6000018481548110610a5757610a57613c4d565b80611f9581613cda565b915050611f2f565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c8385611fcd8e8d613cc3565b6040516111fc9493929190613e0e565b600080611fe9886128d4565b9050600088600201888154811061200257612002613c4d565b9060005260206000200154866120189190613d2c565b82898151811061202a5761202a613c4d565b602002602001015161203c9190613cab565b9050600061204d8a8a8a8587612e1d565b90506000600182858b8151811061206657612066613c4d565b60200260200101516120789190613cc3565b6120829190613cc3565b905060006402540be4008c600401548361209c9190613d2c565b6120a69190613d69565b90508b6002018a815481106120bd576120bd613c4d565b906000526020600020015481836120d49190613cc3565b6120de9190613d69565b9150878210156121305760405162461bcd60e51b815260206004820152600a60248201527f3e20736c697070616765000000000000000000000000000000000000000000006044820152606401610365565b60008c6002018b8154811061214757612147613c4d565b90600052602060002001546402540be4008e60050154846121689190613d2c565b6121729190613d69565b61217c9190613d69565b9050898d6003018d8154811061219457612194613c4d565b9060005260206000200160008282546121ad9190613cab565b909155506121bd90508184613cab565b8d6003018c815481106121d2576121d2613c4d565b9060005260206000200160008282546121eb9190613cc3565b9250508190555061220c88848f6000018e81548110610a5757610a57613c4d565b604080518d8152602081018c90529081018c90526060810184905273ffffffffffffffffffffffffffffffffffffffff8916907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a250909b9a5050505050505050505050565b60008061229a61228c846128d4565b612295856127fb565b612982565b905060008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561230d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123319190613d13565b9050806123406012600a613f9d565b61234a9084613d2c565b6123549190613d69565b949350505050565b815460009082106123af5760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e676500000000000000000000000000000000006044820152606401610365565b8260030182815481106123c4576123c4613c4d565b90600052602060002001548360000183815481106123e4576123e4613c4d565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561245b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247f9190613d13565b61067e9190613cc3565b606061235484848461327d565b8354600090819083106124eb5760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e676500000000000000000000000000000000006044820152606401610365565b60006124f6876127fb565b90506000612503886128d4565b905060006125118284612982565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a89190613d13565b6125b2838a613d2c565b6125bc9190613d69565b6125c69083613cc3565b905060006125d78b868a8786613529565b90508360006125e58d612c75565b905060005b8d548110156126ed5760008b82141561263f578487878a858151811061261257612612613c4d565b60200260200101516126249190613d2c565b61262e9190613d69565b6126389190613cc3565b9050612696565b868689848151811061265357612653613c4d565b60200260200101516126659190613d2c565b61266f9190613d69565b88838151811061268157612681613c4d565b60200260200101516126939190613cc3565b90505b6402540be4006126a68285613d2c565b6126b09190613d69565b8483815181106126c2576126c2613c4d565b602002602001018181516126d69190613cc3565b9052508190506126e581613cda565b9150506125ea565b506126fb8d888c8588613529565b828b8151811061270d5761270d613c4d565b602002602001015161271f9190613cc3565b98508c6002018a8154811061273657612736613c4d565b906000526020600020015460018a61274e9190613cc3565b6127589190613d69565b9850888d6002018b8154811061277057612770613c4d565b906000526020600020015484888d8151811061278e5761278e613c4d565b60200260200101516127a09190613cc3565b6127aa9190613d69565b6127b49190613cc3565b97506402540be4006127c68e8e613463565b6127d5906402540be400613cc3565b6127df908b613d2c565b6127e99190613d69565b98505050505050505094509492505050565b60008160090154421061281057506007015490565b81600601548260070154111561287a57816008015482600901546128349190613cc3565b60088301546128439042613cc3565b836006015484600701546128579190613cc3565b6128619190613d2c565b61286b9190613d69565b826006015461121e9190613cab565b8160080154826009015461288e9190613cc3565b600883015461289d9042613cc3565b836007015484600601546128b19190613cc3565b6128bb9190613d2c565b6128c59190613d69565b826006015461121e9190613cc3565b606061121e8260030180548060200260200160405190810160405280929190818152602001828054801561292757602002820191906000526020600020905b815481526020019060010190808311612913575b5050505050836002018054806020026020016040519081016040528092919081815260200182805480156104ef57602002820191906000526020600020908154815260200190600101908083116104db575050505050612b1e565b8151600090816129918561369d565b9050806129a35760009250505061121e565b600081816129b18588613d2c565b905060005b610100811015612ad5578260005b8a51811015612a1a57878b82815181106129e0576129e0613c4d565b60200260200101516129f29190613d2c565b6129fc8684613d2c565b612a069190613d69565b915080612a1281613cda565b9150506129c4565b5083945080876001612a2c9190613cab565b612a369190613d2c565b606485612a438287613cc3565b612a4d9190613d2c565b612a579190613d69565b612a619190613cab565b84612a6c8984613d2c565b6064612a788a88613d2c565b612a829190613d69565b612a8c9190613cab565b612a969190613d2c565b612aa09190613d69565b93506001612aae8587612dfb565b11612ac2578397505050505050505061121e565b5080612acd81613cda565b9150506129b6565b5060405162461bcd60e51b815260206004820152601a60248201527f696e76617269616e7443616c63756c6174696f6e4661696c65640000000000006044820152606401610365565b606060005b8351811015612b9957838181518110612b3e57612b3e613c4d565b6020026020010151838281518110612b5857612b58613c4d565b6020026020010151612b6a9190613d2c565b838281518110612b7c57612b7c613c4d565b602090810291909101015280612b9181613cda565b915050612b23565b509092915050565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261162c9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526136e9565b8054600090612c85600182613cc3565b612c90906004613d2c565b818460040154612ca09190613d2c565b61067e9190613d69565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015612d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3d9190613d13565b9050612d6173ffffffffffffffffffffffffffffffffffffffff851633308661379b565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015612dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df19190613d13565b6123549190613cc3565b6000818311612e1357612e0e8383613cc3565b61067e565b61067e8284613cc3565b600083851415612e6f5760405162461bcd60e51b815260206004820152600960248201527f73616d65546f6b656e00000000000000000000000000000000000000000000006044820152606401610365565b85548086108015612e7f57508085105b612ecb5760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e676500000000000000000000000000000000006044820152606401610365565b6000612ed6886127fb565b90506000612ee48383613d2c565b90506000612ef28684612982565b9050600081815b86811015612f7a578a811415612f0e57612f68565b60008c8214612f3657898281518110612f2957612f29613c4d565b6020026020010151612f38565b8a5b9050612f448185613cab565b9350612f508882613d2c565b612f5a8685613d2c565b612f649190613d69565b9250505b80612f7281613cda565b915050612ef9565b50612f858685613d2c565b6064612f918584613d2c565b612f9b9190613d2c565b612fa59190613d69565b9050600084612fb5606486613d2c565b612fbf9190613d69565b612fc99084613cab565b9050600084815b610100811015613055578192508684836002612fec9190613d2c565b612ff69190613cab565b6130009190613cc3565b8561300b8480613d2c565b6130159190613cab565b61301f9190613d69565b9150600161302d8484612dfb565b116130435750985061309e975050505050505050565b8061304d81613cda565b915050612fd0565b5060405162461bcd60e51b815260206004820152601260248201527f7943616c63756c6174696f6e4661696c656400000000000000000000000000006044820152606401610365565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff82166130c757505050565b600a8301546131045773ffffffffffffffffffffffffffffffffffffffff82166000908152600c8401602052604090206402540be4009055613250565b60006131108484613463565b60018501546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152929350600092909116906370a0823190602401602060405180830381865afa158015613188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ac9190613d13565b600a8601549091506131be8285613cab565b6131c89190613d2c565b1561324d57600a8501546131dc8285613cab565b6131e69190613d2c565b6402540be40086600a0154856131fc9190613d2c565b6132068585613d2c565b6132109190613cab565b61321a9190613d2c565b6132249190613d69565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600c870160205260409020555b50505b5073ffffffffffffffffffffffffffffffffffffffff166000908152600b90910160205260409020429055565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133149190613d13565b9050808311156133665760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742065786365656420746f74616c20737570706c790000000000006044820152606401610365565b60006402540be4006133788787613463565b613387906402540be400613cc3565b6133919086613d2c565b61339b9190613d69565b865490915060009067ffffffffffffffff8111156133bb576133bb613922565b6040519080825280602002602001820160405280156133e4578160200160208202803683370190505b50905060005b875481101561345857838389600301838154811061340a5761340a613c4d565b906000526020600020015461341f9190613d2c565b6134299190613d69565b82828151811061343b5761343b613c4d565b60209081029190910101528061345081613cda565b9150506133ea565b509695505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600b83016020526040812054819061349a906224ea00613cab565b90504281111561351f5760006134b04283613cc3565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600c87016020526040902054600a8701549192506402540be400916224ea009184916134f89190613d2c565b6135029190613d2c565b61350c9190613d69565b6135169190613d69565b9250505061121e565b5060009392505050565b845460009080851061353d5761353d613da4565b60006135498288613d2c565b90508360008080805b868110156135c4578a811415613567576135b2565b89818151811061357957613579613c4d565b60200260200101519250828461358f9190613cab565b935061359b8784613d2c565b6135a58a87613d2c565b6135af9190613d69565b94505b806135bc81613cda565b915050613552565b506135cf8686613d2c565b60646135db8a87613d2c565b6135e59190613d2c565b6135ef9190613d69565b93506000856135ff60648b613d2c565b6136099190613d69565b6136139085613cab565b90508860005b610100811015612ad5578193508a838360026136359190613d2c565b61363f9190613cab565b6136499190613cc3565b876136548480613d2c565b61365e9190613cab565b6136689190613d69565b915060016136768584612dfb565b1161368b5750975061309e9650505050505050565b8061369581613cda565b915050613619565b6000805b82518110156136e3578281815181106136bc576136bc613c4d565b6020026020010151826136cf9190613cab565b9150806136db81613cda565b9150506136a1565b50919050565b6000808373ffffffffffffffffffffffffffffffffffffffff16836040516137119190613fa9565b6000604051808303816000865af19150503d806000811461374e576040519150601f19603f3d011682016040523d82523d6000602084013e613753565b606091505b5091509150600082141561376b573d6000803e3d6000fd5b61379581516000148061378d57508180602001905181019061378d9190613fe4565b6101a26137f9565b50505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526137959085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612bf3565b81613807576138078161380b565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b828054828255906000526020600020908101928215613899579160200282015b8281111561389957825182559160200191906001019061387e565b506138a59291506138a9565b5090565b5b808211156138a557600081556001016138aa565b803573ffffffffffffffffffffffffffffffffffffffff811681146138e257600080fd5b919050565b600080600080608085870312156138fd57600080fd5b8435935061390d602086016138be565b93969395505050506040820135916060013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261396257600080fd5b8135602067ffffffffffffffff8083111561397f5761397f613922565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811084821117156139c2576139c2613922565b6040529384528581018301938381019250878511156139e057600080fd5b83870191505b848210156139ff578135835291830191908301906139e6565b979650505050505050565b8015158114613a1857600080fd5b50565b600080600060608486031215613a3057600080fd5b83359250602084013567ffffffffffffffff811115613a4e57600080fd5b613a5a86828701613951565b9250506040840135613a6b81613a0a565b809150509250925092565b60008060008060808587031215613a8c57600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060608486031215613abd57600080fd5b83359250602084013567ffffffffffffffff811115613adb57600080fd5b613ae786828701613951565b925050604084013590509250925092565b600060208284031215613b0a57600080fd5b5035919050565b60008060008060008060c08789031215613b2a57600080fd5b8635955060208701359450604087013593506060870135925060808701359150613b5660a088016138be565b90509295509295509295565b600080600060608486031215613b7757600080fd5b83359250613b87602085016138be565b9150604084013590509250925092565b600080600060608486031215613bac57600080fd5b8335925060208401359150604084013567ffffffffffffffff811115613bd157600080fd5b613bdd86828701613951565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015613c1f57835183529284019291840191600101613c03565b50909695505050505050565b60008060408385031215613c3e57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115613cbe57613cbe613c7c565b500190565b600082821015613cd557613cd5613c7c565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613d0c57613d0c613c7c565b5060010190565b600060208284031215613d2557600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613d6457613d64613c7c565b500290565b600082613d9f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600081518084526020808501945080840160005b83811015613e0357815187529582019590820190600101613de7565b509495945050505050565b608081526000613e216080830187613dd3565b8281036020840152613e338187613dd3565b604084019590955250506060015292915050565b606081526000613e5a6060830186613dd3565b8281036020840152613e6c8186613dd3565b915050826040830152949350505050565b600181815b80851115613ed657817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613ebc57613ebc613c7c565b80851615613ec957918102915b93841c9390800290613e82565b509250929050565b600082613eed5750600161121e565b81613efa5750600061121e565b8160018114613f105760028114613f1a57613f36565b600191505061121e565b60ff841115613f2b57613f2b613c7c565b50506001821b61121e565b5060208310610133831016604e8410600b8410161715613f59575081810a61121e565b613f638383613e7d565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613f9557613f95613c7c565b029392505050565b600061067e8383613ede565b6000825160005b81811015613fca5760208186018101518583015201613fb0565b81811115613fd9576000828501525b509190910192915050565b600060208284031215613ff657600080fd5b815161067e81613a0a56fea26469706673582212201e84711310b7d2cab81f8cf26c3dd2d18f43e2af667b38e7007c37674bd3566d64736f6c634300080a0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101405760003560e01c8063c20aace8116100bc578063d011f9181161008b578063d73792a911610070578063d73792a9146102c9578063e2eba89b146102d5578063fa563597146102e857600080fd5b8063d011f918146102ae578063d36604ac146102b657600080fd5b8063c20aace814610239578063c685696c14610241578063c8344c061461026e578063ce055b8d1461028e57600080fd5b8063a303558511610113578063b52e146f116100f8578063b52e146f146101f1578063ba2998d914610204578063c188e4be1461021757600080fd5b8063a3035585146101be578063ad30093f146101d157600080fd5b8063159763bb146101455780631e7e95d31461016b5780632bfe30d01461017e5780637a6cba3c1461019e575b600080fd5b6101586101533660046138e7565b6102fb565b6040519081526020015b60405180910390f35b610158610179366004613a1b565b610313565b81801561018a57600080fd5b50610158610199366004613a76565b610685565b8180156101aa57600080fd5b506101586101b9366004613aa8565b610acf565b6101586101cc366004613af8565b611213565b8180156101dd57600080fd5b506101586101ec366004613b11565b611224565b6101586101ff366004613af8565b6114fd565b610158610212366004613a76565b611514565b81801561022357600080fd5b50610237610232366004613b62565b611621565b005b610158601281565b81801561024d57600080fd5b5061026161025c366004613b97565b611631565b6040516101629190613be7565b81801561027a57600080fd5b50610158610289366004613aa8565b611946565b81801561029a57600080fd5b506101586102a9366004613b11565b611fdd565b610158606481565b6101586102c4366004613af8565b61227d565b6101586402540be40081565b6101586102e3366004613c2b565b61235c565b6102616102f6366004613b62565b612489565b600061030985858585612496565b5095945050505050565b8254825160009190811461036e5760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964416d6f756e74734c656e67746800000000000000000000000060448201526064015b60405180910390fd5b6000610379866127fb565b9050600061038f610389886128d4565b83612982565b90506000876003018054806020026020016040519081016040528092919081815260200182805480156103e157602002820191906000526020600020905b8154815260200190600101908083116103cd575b5050505050905060005b848110156104975786156104415787818151811061040b5761040b613c4d565b602002602001015182828151811061042557610425613c4d565b602002602001018181516104399190613cab565b905250610485565b87818151811061045357610453613c4d565b602002602001015182828151811061046d5761046d613c4d565b602002602001018181516104819190613cc3565b9052505b8061048f81613cda565b9150506103eb565b5060006104ff6104f9838b6002018054806020026020016040519081016040528092919081815260200182805480156104ef57602002820191906000526020600020905b8154815260200190600101908083116104db575b5050505050612b1e565b85612982565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105969190613d13565b9050806105aa5750945061067e9350505050565b6000886105c0576105bb8386613cc3565b6105ca565b6105ca8584613cc3565b9050848b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106609190613d13565b61066a9083613d2c565b6106749190613d69565b9750505050505050505b9392505050565b6000808560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071b9190613d13565b90506000811161076d5760405162461bcd60e51b815260206004820152600f60248201527f746f74616c537570706c79203d203000000000000000000000000000000000006044820152606401610365565b855460018701546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156107df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108039190613d13565b8611156108525760405162461bcd60e51b815260206004820152600960248201527f3e2062616c616e636500000000000000000000000000000000000000000000006044820152606401610365565b818611156108a25760405162461bcd60e51b815260206004820152600d60248201527f3e20746f74616c537570706c79000000000000000000000000000000000000006044820152606401610365565b8085106108f15760405162461bcd60e51b815260206004820152600d60248201527f746f6b656e4e6f74466f756e64000000000000000000000000000000000000006044820152606401610365565b60008061090089338a8a612496565b92509050858110156109545760405162461bcd60e51b815260206004820152600a60248201527f3e20736c697070616765000000000000000000000000000000000000000000006044820152606401610365565b6402540be40089600501548361096a9190613d2c565b6109749190613d69565b61097e9082613cab565b89600301888154811061099357610993613c4d565b9060005260206000200160008282546109ac9190613cc3565b909155505060018901546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018a905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015610a2557600080fd5b505af1158015610a39573d6000803e3d6000fd5b50505050610a8033828b6000018a81548110610a5757610a57613c4d565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169190612ba1565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b82548251600091908114610b255760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964416d6f756e74734c656e6774680000000000000000000000006044820152606401610365565b60008167ffffffffffffffff811115610b4057610b40613922565b604051908082528060200260200182016040528015610b69578160200160208202803683370190505b5090506000610b7787612c75565b905060008760010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0e9190613d13565b90506000610c1b896127fb565b905060008215610cd757610cd46103898b600301805480602002602001604051908101604052809291908181526020018280548015610c7957602002820191906000526020600020905b815481526020019060010190808311610c65575b50505050508c6002018054806020026020016040519081016040528092919081815260200182805480156104ef57602002820191906000526020600020908154815260200190600101908083116104db575050505050612b1e565b90505b60008a600301805480602002602001604051908101604052809291908181526020018280548015610d2757602002820191906000526020600020905b815481526020019060010190808311610d13575b5050505050905060005b87811015610e445784610da75760008b8281518110610d5257610d52613c4d565b602002602001015111610da75760405162461bcd60e51b815260206004820152601e60248201527f696e697469616c4465706f73697452657175697265416c6c546f6b656e7300006044820152606401610365565b610e098c6000018281548110610dbf57610dbf613c4d565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c8381518110610dfc57610dfc613c4d565b6020026020010151612caa565b828281518110610e1b57610e1b613c4d565b60200260200101818151610e2f9190613cab565b90525080610e3c81613cda565b915050610d31565b506000610ea46104f9838e6002018054806020026020016040519081016040528092919081815260200182805480156104ef57602002820191906000526020600020908154815260200190600101908083116104db575050505050612b1e565b9050828111610eb557610eb5613da4565b84610ed8578151610ecf9060038e0190602085019061385e565b508098506110d4565b6000805b8981101561104b57610f3c858f6003018381548110610efd57610efd613c4d565b906000526020600020015485610f139190613d2c565b610f1d9190613d69565b858381518110610f2f57610f2f613c4d565b6020026020010151612dfb565b91506402540be400610f4e838a613d2c565b610f589190613d69565b898281518110610f6a57610f6a613c4d565b6020026020010181815250506402540be4008e600501548a8381518110610f9357610f93613c4d565b6020026020010151610fa59190613d2c565b610faf9190613d69565b848281518110610fc157610fc1613c4d565b6020026020010151610fd39190613cc3565b8e6003018281548110610fe857610fe8613c4d565b906000526020600020018190555088818151811061100857611008613c4d565b602002602001015184828151811061102257611022613c4d565b602002602001018181516110369190613cc3565b9052508061104381613cda565b915050610edc565b506110af6110a9848f6002018054806020026020016040519081016040528092919081815260200182805480156104ef57602002820191906000526020600020908154815260200190600101908083116104db575050505050612b1e565b86612982565b9150836110bc8184613cc3565b6110c69088613d2c565b6110d09190613d69565b9950505b898910156111245760405162461bcd60e51b815260206004820152600a60248201527f3e20736c697070616765000000000000000000000000000000000000000000006044820152606401610365565b60018c01546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906340c10f1990604401600060405180830381600087803b15801561119857600080fd5b505af11580156111ac573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d6040516111fc9493929190613e0e565b60405180910390a250505050505050509392505050565b600061121e826127fb565b92915050565b60008087600001878154811061123c5761123c613c4d565b600091825260208220015473ffffffffffffffffffffffffffffffffffffffff169150611268896128d4565b90506112748287612caa565b955060006112d38a8a8a8d6002018d8154811061129357611293613c4d565b90600052602060002001548b6112a99190613d2c565b868e815181106112bb576112bb613c4d565b60200260200101516112cd9190613cab565b86612e1d565b90506000600182848b815181106112ec576112ec613c4d565b60200260200101516112fe9190613cc3565b6113089190613cc3565b905060006402540be4008c60040154836113229190613d2c565b61132c9190613d69565b90508b6002018a8154811061134357611343613c4d565b9060005260206000200154818361135a9190613cc3565b6113649190613d69565b9150878210156113b65760405162461bcd60e51b815260206004820152600a60248201527f3e20736c697070616765000000000000000000000000000000000000000000006044820152606401610365565b888c6003018c815481106113cc576113cc613c4d565b9060005260206000200160008282546113e59190613cab565b909155505060028c0180548b90811061140057611400613c4d565b90600052602060002001546402540be4008d60050154836114219190613d2c565b61142b9190613d69565b6114359190613d69565b61143f9083613cab565b8c6003018b8154811061145457611454613c4d565b90600052602060002001600082825461146d9190613cc3565b9250508190555061148e87838e6000018d81548110610a5757610a57613c4d565b604080518c8152602081018b90529081018b90526060810183905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a2509a9950505050505050505050565b6000606461150a836127fb565b61121e9190613d69565b600080611520866128d4565b9050600086600201868154811061153957611539613c4d565b90600052602060002001548461154f9190613d2c565b82878151811061156157611561613c4d565b60200260200101516115739190613cab565b905060006115848888888587612e1d565b9050600088600201878154811061159d5761159d613c4d565b9060005260206000200154600183868a815181106115bd576115bd613c4d565b60200260200101516115cf9190613cc3565b6115d99190613cc3565b6115e39190613d69565b905060006402540be400828b600401546115fd9190613d2c565b6116079190613d69565b90506116138183613cc3565b9a9950505050505050505050565b61162c8383836130a7565b505050565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c89190613d13565b9050808411156116d757600080fd5b845460008167ffffffffffffffff8111156116f4576116f4613922565b60405190808252806020026020018201604052801561171d578160200160208202803683370190505b50905061172b87338861327d565b935060005b84518110156118675785818151811061174b5761174b613c4d565b602002602001015185828151811061176557611765613c4d565b602002602001015110156117bb5760405162461bcd60e51b815260206004820152600a60248201527f3e20736c697070616765000000000000000000000000000000000000000000006044820152606401610365565b8481815181106117cd576117cd613c4d565b60200260200101518860030182815481106117ea576117ea613c4d565b90600052602060002001546117ff9190613cc3565b88600301828154811061181457611814613c4d565b90600052602060002001819055506118553386838151811061183857611838613c4d565b60200260200101518a6000018481548110610a5757610a57613c4d565b8061185f81613cda565b915050611730565b5060018701546040517f79cc67900000000000000000000000000000000000000000000000000000000081523360048201526024810188905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b1580156118dc57600080fd5b505af11580156118f0573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea9150869050836119258a88613cc3565b60405161193493929190613e47565b60405180910390a25050509392505050565b8254825160009190811461199c5760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964416d6f756e74734c656e6774680000000000000000000000006044820152606401610365565b6001850154604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916318160ddd9160048083019260209291908290030181865afa158015611a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a329190613d13565b905080611a815760405162461bcd60e51b815260206004820152600f60248201527f746f74616c537570706c79203d203000000000000000000000000000000000006044820152606401610365565b6000611a8c87612c75565b90506000611a99886127fb565b9050600088600301805480602002602001604051908101604052809291908181526020018280548015611aeb57602002820191906000526020600020905b815481526020019060010190808311611ad7575b505050505090506000611b06611b008b6128d4565b84612982565b905060005b86811015611b6857898181518110611b2557611b25613c4d565b6020026020010151838281518110611b3f57611b3f613c4d565b60200260200101818151611b539190613cc3565b90525080611b6081613cda565b915050611b0b565b506000611bc86104f9848d6002018054806020026020016040519081016040528092919081815260200182805480156104ef57602002820191906000526020600020908154815260200190600101908083116104db575050505050612b1e565b905060008767ffffffffffffffff811115611be557611be5613922565b604051908082528060200260200182016040528015611c0e578160200160208202803683370190505b50905060005b88811015611d8e576000848e6003018381548110611c3457611c34613c4d565b906000526020600020015485611c4a9190613d2c565b611c549190613d69565b90506000611c7b878481518110611c6d57611c6d613c4d565b602002602001015183612dfb565b90506402540be400611c8d828b613d2c565b611c979190613d69565b848481518110611ca957611ca9613c4d565b6020026020010181815250506402540be4008f60050154858581518110611cd257611cd2613c4d565b6020026020010151611ce49190613d2c565b611cee9190613d69565b878481518110611d0057611d00613c4d565b6020026020010151611d129190613cc3565b8f6003018481548110611d2757611d27613c4d565b9060005260206000200181905550838381518110611d4757611d47613c4d565b6020026020010151878481518110611d6157611d61613c4d565b60200260200101818151611d759190613cc3565b905250829150611d86905081613cda565b915050611c14565b50611dec6110a9858e6002018054806020026020016040519081016040528092919081815260200182805480156104ef57602002820191906000526020600020908154815260200190600101908083116104db575050505050612b1e565b91508287611dfa8483613cc3565b611e049190613d2c565b611e0e9190613d69565b985060008911611e2057611e20613da4565b611e2a8c33613463565b611e39906402540be400613cc3565b611e448a6001613cab565b611e4e9190613d2c565b985089891115611ea05760405162461bcd60e51b815260206004820152600a60248201527f3e20736c697070616765000000000000000000000000000000000000000000006044820152606401610365565b60018c01546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015611f1457600080fd5b505af1158015611f28573d6000803e3d6000fd5b5050505060005b88811015611f9d578b8181518110611f4957611f49613c4d565b6020026020010151600014611f8b57611f8b338d8381518110611f6e57611f6e613c4d565b60200260200101518f6000018481548110610a5757610a57613c4d565b80611f9581613cda565b915050611f2f565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c8385611fcd8e8d613cc3565b6040516111fc9493929190613e0e565b600080611fe9886128d4565b9050600088600201888154811061200257612002613c4d565b9060005260206000200154866120189190613d2c565b82898151811061202a5761202a613c4d565b602002602001015161203c9190613cab565b9050600061204d8a8a8a8587612e1d565b90506000600182858b8151811061206657612066613c4d565b60200260200101516120789190613cc3565b6120829190613cc3565b905060006402540be4008c600401548361209c9190613d2c565b6120a69190613d69565b90508b6002018a815481106120bd576120bd613c4d565b906000526020600020015481836120d49190613cc3565b6120de9190613d69565b9150878210156121305760405162461bcd60e51b815260206004820152600a60248201527f3e20736c697070616765000000000000000000000000000000000000000000006044820152606401610365565b60008c6002018b8154811061214757612147613c4d565b90600052602060002001546402540be4008e60050154846121689190613d2c565b6121729190613d69565b61217c9190613d69565b9050898d6003018d8154811061219457612194613c4d565b9060005260206000200160008282546121ad9190613cab565b909155506121bd90508184613cab565b8d6003018c815481106121d2576121d2613c4d565b9060005260206000200160008282546121eb9190613cc3565b9250508190555061220c88848f6000018e81548110610a5757610a57613c4d565b604080518d8152602081018c90529081018c90526060810184905273ffffffffffffffffffffffffffffffffffffffff8916907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a250909b9a5050505050505050505050565b60008061229a61228c846128d4565b612295856127fb565b612982565b905060008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561230d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123319190613d13565b9050806123406012600a613f9d565b61234a9084613d2c565b6123549190613d69565b949350505050565b815460009082106123af5760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e676500000000000000000000000000000000006044820152606401610365565b8260030182815481106123c4576123c4613c4d565b90600052602060002001548360000183815481106123e4576123e4613c4d565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561245b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247f9190613d13565b61067e9190613cc3565b606061235484848461327d565b8354600090819083106124eb5760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e676500000000000000000000000000000000006044820152606401610365565b60006124f6876127fb565b90506000612503886128d4565b905060006125118284612982565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a89190613d13565b6125b2838a613d2c565b6125bc9190613d69565b6125c69083613cc3565b905060006125d78b868a8786613529565b90508360006125e58d612c75565b905060005b8d548110156126ed5760008b82141561263f578487878a858151811061261257612612613c4d565b60200260200101516126249190613d2c565b61262e9190613d69565b6126389190613cc3565b9050612696565b868689848151811061265357612653613c4d565b60200260200101516126659190613d2c565b61266f9190613d69565b88838151811061268157612681613c4d565b60200260200101516126939190613cc3565b90505b6402540be4006126a68285613d2c565b6126b09190613d69565b8483815181106126c2576126c2613c4d565b602002602001018181516126d69190613cc3565b9052508190506126e581613cda565b9150506125ea565b506126fb8d888c8588613529565b828b8151811061270d5761270d613c4d565b602002602001015161271f9190613cc3565b98508c6002018a8154811061273657612736613c4d565b906000526020600020015460018a61274e9190613cc3565b6127589190613d69565b9850888d6002018b8154811061277057612770613c4d565b906000526020600020015484888d8151811061278e5761278e613c4d565b60200260200101516127a09190613cc3565b6127aa9190613d69565b6127b49190613cc3565b97506402540be4006127c68e8e613463565b6127d5906402540be400613cc3565b6127df908b613d2c565b6127e99190613d69565b98505050505050505094509492505050565b60008160090154421061281057506007015490565b81600601548260070154111561287a57816008015482600901546128349190613cc3565b60088301546128439042613cc3565b836006015484600701546128579190613cc3565b6128619190613d2c565b61286b9190613d69565b826006015461121e9190613cab565b8160080154826009015461288e9190613cc3565b600883015461289d9042613cc3565b836007015484600601546128b19190613cc3565b6128bb9190613d2c565b6128c59190613d69565b826006015461121e9190613cc3565b606061121e8260030180548060200260200160405190810160405280929190818152602001828054801561292757602002820191906000526020600020905b815481526020019060010190808311612913575b5050505050836002018054806020026020016040519081016040528092919081815260200182805480156104ef57602002820191906000526020600020908154815260200190600101908083116104db575050505050612b1e565b8151600090816129918561369d565b9050806129a35760009250505061121e565b600081816129b18588613d2c565b905060005b610100811015612ad5578260005b8a51811015612a1a57878b82815181106129e0576129e0613c4d565b60200260200101516129f29190613d2c565b6129fc8684613d2c565b612a069190613d69565b915080612a1281613cda565b9150506129c4565b5083945080876001612a2c9190613cab565b612a369190613d2c565b606485612a438287613cc3565b612a4d9190613d2c565b612a579190613d69565b612a619190613cab565b84612a6c8984613d2c565b6064612a788a88613d2c565b612a829190613d69565b612a8c9190613cab565b612a969190613d2c565b612aa09190613d69565b93506001612aae8587612dfb565b11612ac2578397505050505050505061121e565b5080612acd81613cda565b9150506129b6565b5060405162461bcd60e51b815260206004820152601a60248201527f696e76617269616e7443616c63756c6174696f6e4661696c65640000000000006044820152606401610365565b606060005b8351811015612b9957838181518110612b3e57612b3e613c4d565b6020026020010151838281518110612b5857612b58613c4d565b6020026020010151612b6a9190613d2c565b838281518110612b7c57612b7c613c4d565b602090810291909101015280612b9181613cda565b915050612b23565b509092915050565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261162c9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526136e9565b8054600090612c85600182613cc3565b612c90906004613d2c565b818460040154612ca09190613d2c565b61067e9190613d69565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015612d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3d9190613d13565b9050612d6173ffffffffffffffffffffffffffffffffffffffff851633308661379b565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015612dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df19190613d13565b6123549190613cc3565b6000818311612e1357612e0e8383613cc3565b61067e565b61067e8284613cc3565b600083851415612e6f5760405162461bcd60e51b815260206004820152600960248201527f73616d65546f6b656e00000000000000000000000000000000000000000000006044820152606401610365565b85548086108015612e7f57508085105b612ecb5760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e676500000000000000000000000000000000006044820152606401610365565b6000612ed6886127fb565b90506000612ee48383613d2c565b90506000612ef28684612982565b9050600081815b86811015612f7a578a811415612f0e57612f68565b60008c8214612f3657898281518110612f2957612f29613c4d565b6020026020010151612f38565b8a5b9050612f448185613cab565b9350612f508882613d2c565b612f5a8685613d2c565b612f649190613d69565b9250505b80612f7281613cda565b915050612ef9565b50612f858685613d2c565b6064612f918584613d2c565b612f9b9190613d2c565b612fa59190613d69565b9050600084612fb5606486613d2c565b612fbf9190613d69565b612fc99084613cab565b9050600084815b610100811015613055578192508684836002612fec9190613d2c565b612ff69190613cab565b6130009190613cc3565b8561300b8480613d2c565b6130159190613cab565b61301f9190613d69565b9150600161302d8484612dfb565b116130435750985061309e975050505050505050565b8061304d81613cda565b915050612fd0565b5060405162461bcd60e51b815260206004820152601260248201527f7943616c63756c6174696f6e4661696c656400000000000000000000000000006044820152606401610365565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff82166130c757505050565b600a8301546131045773ffffffffffffffffffffffffffffffffffffffff82166000908152600c8401602052604090206402540be4009055613250565b60006131108484613463565b60018501546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152929350600092909116906370a0823190602401602060405180830381865afa158015613188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ac9190613d13565b600a8601549091506131be8285613cab565b6131c89190613d2c565b1561324d57600a8501546131dc8285613cab565b6131e69190613d2c565b6402540be40086600a0154856131fc9190613d2c565b6132068585613d2c565b6132109190613cab565b61321a9190613d2c565b6132249190613d69565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600c870160205260409020555b50505b5073ffffffffffffffffffffffffffffffffffffffff166000908152600b90910160205260409020429055565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133149190613d13565b9050808311156133665760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742065786365656420746f74616c20737570706c790000000000006044820152606401610365565b60006402540be4006133788787613463565b613387906402540be400613cc3565b6133919086613d2c565b61339b9190613d69565b865490915060009067ffffffffffffffff8111156133bb576133bb613922565b6040519080825280602002602001820160405280156133e4578160200160208202803683370190505b50905060005b875481101561345857838389600301838154811061340a5761340a613c4d565b906000526020600020015461341f9190613d2c565b6134299190613d69565b82828151811061343b5761343b613c4d565b60209081029190910101528061345081613cda565b9150506133ea565b509695505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600b83016020526040812054819061349a906224ea00613cab565b90504281111561351f5760006134b04283613cc3565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600c87016020526040902054600a8701549192506402540be400916224ea009184916134f89190613d2c565b6135029190613d2c565b61350c9190613d69565b6135169190613d69565b9250505061121e565b5060009392505050565b845460009080851061353d5761353d613da4565b60006135498288613d2c565b90508360008080805b868110156135c4578a811415613567576135b2565b89818151811061357957613579613c4d565b60200260200101519250828461358f9190613cab565b935061359b8784613d2c565b6135a58a87613d2c565b6135af9190613d69565b94505b806135bc81613cda565b915050613552565b506135cf8686613d2c565b60646135db8a87613d2c565b6135e59190613d2c565b6135ef9190613d69565b93506000856135ff60648b613d2c565b6136099190613d69565b6136139085613cab565b90508860005b610100811015612ad5578193508a838360026136359190613d2c565b61363f9190613cab565b6136499190613cc3565b876136548480613d2c565b61365e9190613cab565b6136689190613d69565b915060016136768584612dfb565b1161368b5750975061309e9650505050505050565b8061369581613cda565b915050613619565b6000805b82518110156136e3578281815181106136bc576136bc613c4d565b6020026020010151826136cf9190613cab565b9150806136db81613cda565b9150506136a1565b50919050565b6000808373ffffffffffffffffffffffffffffffffffffffff16836040516137119190613fa9565b6000604051808303816000865af19150503d806000811461374e576040519150601f19603f3d011682016040523d82523d6000602084013e613753565b606091505b5091509150600082141561376b573d6000803e3d6000fd5b61379581516000148061378d57508180602001905181019061378d9190613fe4565b6101a26137f9565b50505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526137959085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612bf3565b81613807576138078161380b565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b828054828255906000526020600020908101928215613899579160200282015b8281111561389957825182559160200191906001019061387e565b506138a59291506138a9565b5090565b5b808211156138a557600081556001016138aa565b803573ffffffffffffffffffffffffffffffffffffffff811681146138e257600080fd5b919050565b600080600080608085870312156138fd57600080fd5b8435935061390d602086016138be565b93969395505050506040820135916060013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261396257600080fd5b8135602067ffffffffffffffff8083111561397f5761397f613922565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811084821117156139c2576139c2613922565b6040529384528581018301938381019250878511156139e057600080fd5b83870191505b848210156139ff578135835291830191908301906139e6565b979650505050505050565b8015158114613a1857600080fd5b50565b600080600060608486031215613a3057600080fd5b83359250602084013567ffffffffffffffff811115613a4e57600080fd5b613a5a86828701613951565b9250506040840135613a6b81613a0a565b809150509250925092565b60008060008060808587031215613a8c57600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060608486031215613abd57600080fd5b83359250602084013567ffffffffffffffff811115613adb57600080fd5b613ae786828701613951565b925050604084013590509250925092565b600060208284031215613b0a57600080fd5b5035919050565b60008060008060008060c08789031215613b2a57600080fd5b8635955060208701359450604087013593506060870135925060808701359150613b5660a088016138be565b90509295509295509295565b600080600060608486031215613b7757600080fd5b83359250613b87602085016138be565b9150604084013590509250925092565b600080600060608486031215613bac57600080fd5b8335925060208401359150604084013567ffffffffffffffff811115613bd157600080fd5b613bdd86828701613951565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015613c1f57835183529284019291840191600101613c03565b50909695505050505050565b60008060408385031215613c3e57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115613cbe57613cbe613c7c565b500190565b600082821015613cd557613cd5613c7c565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613d0c57613d0c613c7c565b5060010190565b600060208284031215613d2557600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613d6457613d64613c7c565b500290565b600082613d9f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600081518084526020808501945080840160005b83811015613e0357815187529582019590820190600101613de7565b509495945050505050565b608081526000613e216080830187613dd3565b8281036020840152613e338187613dd3565b604084019590955250506060015292915050565b606081526000613e5a6060830186613dd3565b8281036020840152613e6c8186613dd3565b915050826040830152949350505050565b600181815b80851115613ed657817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613ebc57613ebc613c7c565b80851615613ec957918102915b93841c9390800290613e82565b509250929050565b600082613eed5750600161121e565b81613efa5750600061121e565b8160018114613f105760028114613f1a57613f36565b600191505061121e565b60ff841115613f2b57613f2b613c7c565b50506001821b61121e565b5060208310610133831016604e8410600b8410161715613f59575081810a61121e565b613f638383613e7d565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613f9557613f95613c7c565b029392505050565b600061067e8383613ede565b6000825160005b81811015613fca5760208186018101518583015201613fb0565b81811115613fd9576000828501525b509190910192915050565b600060208284031215613ff657600080fd5b815161067e81613a0a56fea26469706673582212201e84711310b7d2cab81f8cf26c3dd2d18f43e2af667b38e7007c37674bd3566d64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "params": {
          "amounts": "List of amounts of coins to deposit",
          "minMintAmount": "Minimum amount of LP tokens to mint from the deposit"
        },
        "returns": {
          "mintAmount": "Amount of LP tokens received by depositing"
        }
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "params": {
          "self": "Swap struct to read from and write to",
          "toMint": "amount of pool tokens to be minted",
          "user": "address of the user depositing tokens"
        }
      }
    },
    "stateVariables": {
      "A_PRECISION": {
        "details": "protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration"
      },
      "MAX_ITERATION": {
        "details": "max iteration of converge calccuate"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "notice": "Deposit coins into the pool"
      },
      "calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)": {
        "notice": "Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account"
      },
      "getAPrecise(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "VIEW FUNCTIONS"
      },
      "getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "Returns portfolio virtual price (for calculating profit) scaled up by 1e18"
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "notice": "Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit."
      }
    },
    "notice": "StableSwap main algorithm",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}