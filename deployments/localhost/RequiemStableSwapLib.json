{
  "address": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IFlashLoanRecipient",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "FlashLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coin_amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sold_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bought_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        }
      ],
      "name": "TokenExchange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "A_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_TOKEN_COMMON_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3770240051b02cae9ab264006f2b4aa186f53b460e62d282c1b60a6b78da7f70",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
    "transactionIndex": 0,
    "gasUsed": "4210584",
    "logsBloom": "0x
    "blockHash": "0x3aae2a753bcf278c341374b9b724d1b00d1417971cdb2d639e102fbce899dbb0",
    "transactionHash": "0x3770240051b02cae9ab264006f2b4aa186f53b460e62d282c1b60a6b78da7f70",
    "logs": [],
    "blockNumber": 35,
    "cumulativeGasUsed": "4210584",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "238606047f22772c3f8250a1182ecfba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coin_amount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sold_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_sold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bought_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_bought\",\"type\":\"uint256\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_TOKEN_COMMON_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FlashLoan(address,address,uint256,uint256)\":{\"details\":\"Emitted for each individual flash loan performed by `flashLoan`.\"}},\"kind\":\"dev\",\"methods\":{\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"params\":{\"amounts\":\"List of amounts of coins to deposit\",\"minMintAmount\":\"Minimum amount of LP tokens to mint from the deposit\"},\"returns\":{\"mintAmount\":\"Amount of LP tokens received by depositing\"}},\"onSwap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i\":\"token index in\",\"j\":\"token index out\",\"outAmount\":\"the target out amount - only a cap at the decimalplaces of the lower one, the rest is taken as fee                  - that fee is always about the lowes amount possible of the one with the lower decimal number                  this will have a negative\"}},\"onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i\":\"token index in\",\"j\":\"token index out\"}},\"onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i\":\"token index in\",\"j\":\"token index out\"}},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"params\":{\"self\":\"Swap struct to read from and write to\",\"toMint\":\"amount of pool tokens to be minted\",\"user\":\"address of the user depositing tokens\"}}},\"stateVariables\":{\"A_PRECISION\":{\"details\":\"protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration\"},\"MAX_ITERATION\":{\"details\":\"max iteration of converge calccuate\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"notice\":\"Deposit coins into the pool\"},\"calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)\":{\"notice\":\"Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account\"},\"flashLoan(RequiemStableSwapLib.SwapStorage storage,IFlashLoanRecipient,IERC20[],uint256[],bytes)\":{\"notice\":\"Flash Loan\"},\"getAPrecise(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"VIEW FUNCTIONS\"},\"getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"Returns portfolio virtual price (for calculating profit) scaled up by 1e18\"},\"onSwap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output and caps it at outAmount to   - this is to avoid issues with the rounding when using the calculateSwapGivenOut function to determine the input          -> that is because e.g. a 6 digit input can never exactly hit a 18 digit output, so the input is selected slightly higher              such that the output also is essentially rounded up at the sixth digit          -> the outAmount can only be lower than the actual calculated dy   - viable function for batch swapping\"},\"onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output, in this case simple as the output is the calculated value   - viable function for batch swapping\"},\"onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"the same function as swap, but it espects that amounts already have been sent to the contract and it requires the output to be provided  - designed to be used in the requirem swap framework  - deducts the fees from the output, that means that the    output has to be increased by the fee to then create a highe input\"},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"notice\":\"Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit.\"}},\"notice\":\"StableSwap main algorithm\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemStableSwapLib.sol\":\"RequiemStableSwapLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/RequiemStableSwapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./tokens/LPToken.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./libraries/math/FullMath.sol\\\";\\nimport \\\"./interfaces/IFlashLoanRecipient.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\n/**\\n * StableSwap main algorithm\\n */\\nlibrary RequiemStableSwapLib {\\n    using SafeERC20 for IERC20;\\n\\n    event AddLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 invariant, uint256 token_supply);\\n\\n    event TokenExchange(address indexed buyer, uint256 sold_id, uint256 tokens_sold, uint256 bought_id, uint256 tokens_bought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 token_supply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 invariant, uint256 token_supply);\\n    /**\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\n     */\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\n\\n    uint256 public constant FEE_DENOMINATOR = 1e10;\\n    // uint256 public constant PRECISION = 1e18;\\n\\n    /// @dev protect from division loss when run approximation loop. We cannot divide at the end because of overflow,\\n    /// so we add some (small) PRECISION when divide in each iteration\\n    uint256 public constant A_PRECISION = 100;\\n    /// @dev max iteration of converge calccuate\\n    uint256 internal constant MAX_ITERATION = 256;\\n    uint256 public constant POOL_TOKEN_COMMON_DECIMALS = 18;\\n\\n    struct SwapStorage {\\n        IERC20[] pooledTokens;\\n        LPToken lpToken;\\n        /// @dev token i multiplier to reach POOL_TOKEN_COMMON_DECIMALS\\n        uint256[] tokenMultipliers;\\n        /// @dev effective balance which might different from token balance of the contract 'cause it hold admin fee as well\\n        uint256[] balances;\\n        /// @dev swap fee ratio. Charge on any action which move balance state far from the ideal state\\n        uint256 fee;\\n        /// @dev flash loan fee ratio. Charge on any action which move balance state far from the ideal state\\n        uint256 flashFee;\\n        /// @dev admin fee in ratio of swap fee.\\n        uint256 adminFee;\\n        /// @dev observation of A, multiplied with A_PRECISION\\n        uint256 initialA;\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n        // withdrawal fee control\\n        uint256 defaultWithdrawFee;\\n        mapping(address => uint256) depositTimestamp;\\n        mapping(address => uint256) withdrawFeeMultiplier;\\n    }\\n\\n    /**\\n     * @notice Deposit coins into the pool\\n     * @param amounts List of amounts of coins to deposit\\n     * @param minMintAmount Minimum amount of LP tokens to mint from the deposit\\n     * @return mintAmount Amount of LP tokens received by depositing\\n     */\\n    function addLiquidity(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 minMintAmount\\n    ) external returns (uint256 mintAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"length\\\");\\n        uint256[] memory fees = new uint256[](nCoins);\\n        uint256 _fee = _feePerToken(self);\\n\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256 D0 = 0;\\n        if (tokenSupply > 0) {\\n            D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\\n        }\\n\\n        uint256[] memory newBalances = self.balances;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (tokenSupply == 0) {\\n                require(amounts[i] > 0, \\\"tokens\\\");\\n            }\\n            // get real transfer in amount\\n            newBalances[i] += _doTransferIn(self.pooledTokens[i], amounts[i]);\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        assert(D1 > D0); // double check\\n\\n        if (tokenSupply == 0) {\\n            self.balances = newBalances;\\n            mintAmount = D1;\\n        } else {\\n            uint256 diff = 0;\\n            for (uint256 i = 0; i < nCoins; i++) {\\n                diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\\n                fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n                self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n                newBalances[i] -= fees[i];\\n            }\\n            D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n            mintAmount = (tokenSupply * (D1 - D0)) / D0;\\n        }\\n\\n        require(mintAmount >= minMintAmount, \\\"> s\\\");\\n\\n        self.lpToken.mint(msg.sender, mintAmount);\\n        emit AddLiquidity(msg.sender, amounts, fees, D1, mintAmount);\\n    }\\n\\n    // implements classic swap function a la compound\\n    // here the regular calculations such as balance values are implemented\\n    // funds are transferred in in that function and are not required to be sent\\n    // to the contract\\n    function swap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256) {\\n        IERC20 inCoin = self.pooledTokens[i];\\n        uint256[] memory normalizedBalances = _xp(self);\\n        inAmount = _doTransferIn(inCoin, inAmount);\\n\\n        uint256 y = _getY(self, i, j, normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]), normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> s\\\");\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n        return dy;\\n    }\\n\\n    /**\\n     *  the same function as swap, but it expects that amounts already have been\\n     *  sent to the contract\\n     *   - designed to be used in the Requiem Swap framework\\n     *   - deducts the fee from the output and caps it at outAmount to\\n     *   - this is to avoid issues with the rounding when using the calculateSwapGivenOut function to determine the input\\n     *          -> that is because e.g. a 6 digit input can never exactly hit a 18 digit output, so the input is selected slightly higher\\n     *              such that the output also is essentially rounded up at the sixth digit\\n     *          -> the outAmount can only be lower than the actual calculated dy\\n     *   - viable function for batch swapping\\n     * @param i token index in\\n     * @param j token index out\\n     * @param outAmount the target out amount - only a cap at the decimalplaces of the lower one, the rest is taken as fee\\n     *                  - that fee is always about the lowes amount possible of the one with the lower decimal number\\n     *                  this will have a negative\\n     */\\n    function onSwap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 outAmount,\\n        address to\\n    ) external returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n\\n        uint256 y = _getY(self, i, j, normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]), normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y; // iliminate rouding errors\\n        uint256 dy_fee = FullMath.mulDiv(dy , self.fee,FEE_DENOMINATOR);\\n\\n        dy = divUp(dy - dy_fee, self.tokenMultipliers[j]); // denormalize and round up\\n\\n        // the control outAmount has to be lower or equal than the \\\"actual\\\" one\\n        require(outAmount <= dy, \\\"dy too low\\\");\\n\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        self.pooledTokens[j].safeTransfer(to, outAmount);\\n        emit TokenExchange(to, i, inAmount, j, outAmount);\\n        return dy;\\n    }\\n\\n    /**\\n     *  the same function as swap, but it expects that amounts already have been\\n     *  sent to the contract\\n     *   - designed to be used in the Requiem Swap framework\\n     *   - deducts the fee from the output, in this case simple as the output is the calculated value\\n     *   - viable function for batch swapping\\n     * @param i token index in\\n     * @param j token index out\\n     */\\n    function onSwapGivenIn(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256 dy) {\\n        // we check whether the balance has increased by the suggested inAmount\\n        require(self.balances[i] + inAmount <= IERC20(self.pooledTokens[i]).balanceOf(address(this)), \\\"input\\\");\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\\n        uint256 y = _getY(self, i, j, x, normalizedBalances);\\n\\n        dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> s\\\");\\n\\n        uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + _adminFee;\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n\\n        // returns final output amount\\n        return dy;\\n    }\\n\\n    /**\\n     * the same function as swap, but it espects that amounts already have been\\n     * sent to the contract and it requires the output to be provided\\n     *  - designed to be used in the requirem swap framework\\n     *  - deducts the fees from the output, that means that the\\n     *    output has to be increased by the fee to then create a highe input\\n     * @param i token index in\\n     * @param j token index out\\n     */\\n    function onSwapGivenOut(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 outAmount,\\n        uint256 maxInAmount,\\n        address to\\n    ) external returns (uint256 dx) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n\\n        // the fee is a percentage from the \\\"actual\\\" amountOut, we have to use the quotient because of that\\n        uint256 _amountOutInclFee = FullMath.mulDiv(outAmount, FEE_DENOMINATOR, FEE_DENOMINATOR - self.fee);\\n\\n        // calculate out balance\\n        uint256 y = normalizedBalances[j] - (_amountOutInclFee * self.tokenMultipliers[j]);\\n\\n        // calculate in balance\\n        uint256 x = _getY(self, j, i, y, normalizedBalances);\\n\\n        // calculate normalized in balance\\n        dx = x - normalizedBalances[i]; // no rounding adjustment\\n\\n        dx = dx / self.tokenMultipliers[i]; // denormalize\\n\\n        require(dx <= maxInAmount, \\\"> s\\\");\\n\\n        // update balances\\n        self.balances[i] -= dx;\\n        self.balances[j] -= _amountOutInclFee;\\n\\n        // do the transfer after all calculations\\n        IERC20 inCoin = self.pooledTokens[i];\\n        dx = _doTransferIn(inCoin, dx); // transfer the calculated amount in\\n\\n        self.pooledTokens[j].safeTransfer(to, outAmount); // transfer the desired amount out\\n        emit TokenExchange(to, i, dx, j, outAmount);\\n\\n        // returns final input amount\\n        return dx;\\n    }\\n\\n    /**\\n     * Flash Loan\\n     */\\n\\n    function flashLoan(\\n        SwapStorage storage self,\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external {\\n        require(tokens.length == amounts.length, \\\"inputs\\\");\\n        uint256[] memory feeAmounts = new uint256[](tokens.length);\\n        uint256[] memory preLoanBalances = new uint256[](tokens.length);\\n\\n        // Used to ensure `tokens` is sorted in ascending order, which ensures token uniqueness.\\n        IERC20 previousToken = IERC20(address(0));\\n\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            IERC20 token = tokens[i];\\n            uint256 amount = amounts[i];\\n\\n            require(token > previousToken, token == IERC20(address(0)) ? \\\"token\\\" : \\\"unsorted\\\");\\n            previousToken = token;\\n\\n            preLoanBalances[i] = token.balanceOf(address(this));\\n            feeAmounts[i] = (amount * self.flashFee) / FEE_DENOMINATOR;\\n\\n            require(preLoanBalances[i] >= amount, \\\"insufficient balance\\\");\\n            token.safeTransfer(address(recipient), amount);\\n        }\\n\\n        recipient.receiveFlashLoan(tokens, amounts, feeAmounts, userData);\\n\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            IERC20 token = tokens[i];\\n            uint256 preLoanBalance = preLoanBalances[i];\\n\\n            // Checking for loan repayment first (without accounting for fees) makes for simpler debugging, and results\\n            // in more accurate revert reasons if the flash loan protocol fee percentage is zero.\\n            uint256 postLoanBalance = token.balanceOf(address(this));\\n            require(postLoanBalance >= preLoanBalance, \\\"invalid post loan balance\\\");\\n\\n            // No need for checked arithmetic since we know the loan was fully repaid.\\n            uint256 receivedFeeAmount = postLoanBalance - preLoanBalance;\\n            require(receivedFeeAmount >= feeAmounts[i], \\\"insufficient loan fee\\\");\\n\\n            // _payFeeAmount(token, receivedFeeAmount);\\n            emit FlashLoan(recipient, token, amounts[i], receivedFeeAmount);\\n        }\\n    }\\n\\n    function removeLiquidity(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256[] memory minAmounts\\n    ) external returns (uint256[] memory amounts) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(lpAmount <= totalSupply);\\n        uint256 nCoins = self.pooledTokens.length;\\n\\n        uint256[] memory fees = new uint256[](nCoins);\\n        amounts = _calculateRemoveLiquidity(self, msg.sender, lpAmount);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] >= minAmounts[i], \\\"> s\\\");\\n            self.balances[i] = self.balances[i] - amounts[i];\\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        emit RemoveLiquidity(msg.sender, amounts, fees, totalSupply - lpAmount);\\n    }\\n\\n    function removeLiquidityOneToken(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256 index,\\n        uint256 minAmount\\n    ) external returns (uint256) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply > 0, \\\"totalSupply = 0\\\");\\n        uint256 numTokens = self.pooledTokens.length;\\n        require(lpAmount <= self.lpToken.balanceOf(msg.sender), \\\"> balance\\\");\\n        require(lpAmount <= totalSupply, \\\"> totalSupply\\\");\\n        require(index < numTokens, \\\"tokenNotFound\\\");\\n\\n        uint256 dyFee;\\n        uint256 dy;\\n\\n        (dy, dyFee) = _calculateRemoveLiquidityOneToken(self, msg.sender, lpAmount, index);\\n\\n        require(dy >= minAmount, \\\"> s\\\");\\n\\n        self.balances[index] -= (dy + (dyFee * self.adminFee) / FEE_DENOMINATOR);\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        self.pooledTokens[index].safeTransfer(msg.sender, dy);\\n\\n        emit RemoveLiquidityOne(msg.sender, index, lpAmount, dy);\\n\\n        return dy;\\n    }\\n\\n    function removeLiquidityImbalance(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 maxBurnAmount\\n    ) external returns (uint256 burnAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"length\\\");\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply != 0, \\\"totalSupply = 0\\\");\\n        uint256 _fee = _feePerToken(self);\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256[] memory newBalances = self.balances;\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            newBalances[i] -= amounts[i];\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256[] memory fees = new uint256[](nCoins);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            uint256 idealBalance = (D1 * self.balances[i]) / D0;\\n            uint256 diff = _distance(newBalances[i], idealBalance);\\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n            newBalances[i] -= fees[i];\\n        }\\n\\n        // recalculate invariant with fee charged balances\\n        D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        burnAmount = ((D0 - D1) * totalSupply) / D0;\\n        assert(burnAmount > 0);\\n        burnAmount = (burnAmount + 1) * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, msg.sender)); //In case of rounding errors - make it unfavorable for the \\\"attacker\\\"\\n        require(burnAmount <= maxBurnAmount, \\\"> s\\\");\\n\\n        self.lpToken.burnFrom(msg.sender, burnAmount);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (amounts[i] != 0) {\\n                self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, totalSupply - burnAmount);\\n    }\\n\\n    /// VIEW FUNCTIONS\\n    function getAPrecise(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self);\\n    }\\n\\n    /**\\n     * Returns portfolio virtual price (for calculating profit)\\n     * scaled up by 1e18\\n     */\\n    function getVirtualPrice(SwapStorage storage self) external view returns (uint256) {\\n        uint256 D = _getD(_xp(self), _getAPrecise(self));\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        return (D * 10**POOL_TOKEN_COMMON_DECIMALS) / tokenSupply;\\n    }\\n\\n    function getAdminBalance(SwapStorage storage self, uint256 index) external view returns (uint256) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        return self.pooledTokens[index].balanceOf(address(this)) - (self.balances[index]);\\n    }\\n\\n    /**\\n     * Estimate amount of LP token minted or burned at deposit or withdrawal\\n     * without taking fees into account\\n     */\\n    function calculateTokenAmount(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"length\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        uint256[] memory newBalances = self.balances;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (deposit) {\\n                newBalances[i] += amounts[i];\\n            } else {\\n                newBalances[i] -= amounts[i];\\n            }\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n\\n        if (totalSupply == 0) {\\n            return D1; // first depositor take it all\\n        }\\n\\n        uint256 diff = deposit ? D1 - D0 : D0 - D1;\\n        return (diff * self.lpToken.totalSupply()) / D0;\\n    }\\n\\n    function getA(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self) / A_PRECISION;\\n    }\\n\\n    // implements calculation of stable swap interface\\n    // represents calculateSwapGivenIn function\\n    function calculateSwap(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 newInBalance = normalizedBalances[inIndex] + (inAmount * self.tokenMultipliers[inIndex]);\\n        uint256 outBalance = _getY(self, inIndex, outIndex, newInBalance, normalizedBalances);\\n        uint256 outAmount = (normalizedBalances[outIndex] - outBalance) / self.tokenMultipliers[outIndex];\\n        uint256 _fee = (self.fee * outAmount) / FEE_DENOMINATOR;\\n        return outAmount - _fee;\\n    }\\n\\n    // implements calculation for Requiem interface\\n    // note that due to the fact that the structure is not symmetric (unlike pairs)\\n    // we require a separate function to calculate the input for a given output\\n    function calculateSwapGivenOut(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 outAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        // fee has to be deducted on the output\\n        uint256 _amountOutInclFee = FullMath.mulDiv(outAmount, FEE_DENOMINATOR, FEE_DENOMINATOR - self.fee);\\n        uint256 newOutBalance = normalizedBalances[outIndex] - (_amountOutInclFee * self.tokenMultipliers[outIndex]);\\n        // switch index on regulat _getY function\\n        uint256 inBalance = _getY(self, outIndex, inIndex, newOutBalance, normalizedBalances);\\n        uint256 inAmount = divUp(inBalance - normalizedBalances[inIndex], self.tokenMultipliers[inIndex]);\\n\\n        return inAmount;\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) external view returns (uint256[] memory) {\\n        return _calculateRemoveLiquidity(self, account, amount);\\n    }\\n\\n    function calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 lpAmount,\\n        uint256 tokenIndex\\n    ) external view returns (uint256 amount) {\\n        (amount, ) = _calculateRemoveLiquidityOneToken(self, account, lpAmount, tokenIndex);\\n    }\\n\\n    /**\\n     * @notice Update the withdraw fee for `user`. If the user is currently\\n     * not providing liquidity in the pool, sets to default value. If not, recalculate\\n     * the starting withdraw fee based on the last deposit's time & amount relative\\n     * to the new deposit.\\n     *\\n     * @param self Swap struct to read from and write to\\n     * @param user address of the user depositing tokens\\n     * @param toMint amount of pool tokens to be minted\\n     */\\n    function updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) external {\\n        _updateUserWithdrawFee(self, user, toMint);\\n    }\\n\\n    /// INTERNAL FUNCTIONS\\n\\n    /**\\n     * Ramping A up or down, return A with precision of A_PRECISION\\n     */\\n    function _getAPrecise(SwapStorage storage self) internal view returns (uint256) {\\n        if (block.timestamp >= self.futureATime) {\\n            return self.futureA;\\n        }\\n\\n        if (self.futureA > self.initialA) {\\n            return self.initialA + ((self.futureA - self.initialA) * (block.timestamp - self.initialATime)) / (self.futureATime - self.initialATime);\\n        }\\n\\n        return self.initialA - ((self.initialA - self.futureA) * (block.timestamp - self.initialATime)) / (self.futureATime - self.initialATime);\\n    }\\n\\n    /**\\n     * normalized balances of each tokens.\\n     */\\n    function _xp(uint256[] memory balances, uint256[] memory rates) internal pure returns (uint256[] memory) {\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            rates[i] = (rates[i] * balances[i]);\\n        }\\n\\n        return rates;\\n    }\\n\\n    function _xp(SwapStorage storage self) internal view returns (uint256[] memory) {\\n        return _xp(self.balances, self.tokenMultipliers);\\n    }\\n\\n    /**\\n     * Calculate D for *NORMALIZED* balances of each tokens\\n     * @param xp normalized balances of token\\n     */\\n    function _getD(uint256[] memory xp, uint256 amp) internal pure returns (uint256) {\\n        uint256 nCoins = xp.length;\\n        uint256 sum = _sumOf(xp);\\n        if (sum == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev = 0;\\n        uint256 D = sum;\\n        uint256 Ann = amp * nCoins;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            uint256 D_P = D;\\n            for (uint256 j = 0; j < xp.length; j++) {\\n                D_P = (D_P * D) / (xp[j] * nCoins);\\n            }\\n            Dprev = D;\\n            D = (((Ann * sum) / A_PRECISION + D_P * nCoins) * D) / (((Ann - A_PRECISION) * D) / A_PRECISION + (nCoins + 1) * D_P);\\n            if (_distance(D, Dprev) <= 1) {\\n                return D;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    /**\\n     * calculate new balance of when swap\\n     * Done by solving quadratic equation iteratively.\\n     *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     *  x_1**2 + b*x_1 = c\\n     *  x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     * @param inIndex index of token to swap in\\n     * @param outIndex index of token to swap out\\n     * @param inBalance new balance (normalized) of input token if the swap is successful\\n     * @return NORMALIZED balance of output token if the swap is successful\\n     */\\n    function _getY(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inBalance,\\n        uint256[] memory normalizedBalances\\n    ) internal view returns (uint256) {\\n        require(inIndex != outIndex, \\\"sameToken\\\");\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(inIndex < nCoins && outIndex < nCoins, \\\"indexOutOfRange\\\");\\n\\n        uint256 amp = _getAPrecise(self);\\n        uint256 Ann = amp * nCoins;\\n        uint256 D = _getD(normalizedBalances, amp); // calculate invariant\\n\\n        uint256 sum = 0; // sum of new balances except output token\\n        uint256 c = D;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == outIndex) {\\n                continue;\\n            }\\n\\n            uint256 x = i == inIndex ? inBalance : normalizedBalances[i];\\n            sum += x;\\n            c = (c * D) / (x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = sum + (D * A_PRECISION) / Ann;\\n\\n        uint256 lastY = 0;\\n        uint256 y = D;\\n\\n        for (uint256 index = 0; index < MAX_ITERATION; index++) {\\n            lastY = y;\\n            y = divUp(y * y + c, 2 * y + b - D);\\n            if (_distance(lastY, y) <= 1) {\\n                return y;\\n            }\\n        }\\n\\n        revert(\\\"yCalculationFailed\\\");\\n    }\\n\\n    function _calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) internal view returns (uint256[] memory) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(amount <= totalSupply, \\\"total supply\\\");\\n\\n        uint256 feeAdjustedAmount = (amount * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n\\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            amounts[i] = (self.balances[i] * (feeAdjustedAmount)) / (totalSupply);\\n        }\\n        return amounts;\\n    }\\n\\n    function _calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 tokenAmount,\\n        uint256 index\\n    ) internal view returns (uint256 dy, uint256 fee) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256[] memory xp = _xp(self);\\n        uint256 D0 = _getD(xp, amp);\\n        uint256 D1 = D0 - (tokenAmount * D0) / self.lpToken.totalSupply();\\n        uint256 newY = _getYD(self, amp, index, xp, D1);\\n        uint256[] memory reducedXP = xp;\\n        uint256 _fee = _feePerToken(self);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            uint256 expectedDx = 0;\\n            if (i == index) {\\n                expectedDx = (xp[i] * D1) / D0 - newY;\\n            } else {\\n                expectedDx = xp[i] - (xp[i] * D1) / D0;\\n            }\\n            reducedXP[i] -= (_fee * expectedDx) / FEE_DENOMINATOR;\\n        }\\n\\n        dy = reducedXP[index] - _getYD(self, amp, index, reducedXP, D1);\\n        dy = (dy - 1) / self.tokenMultipliers[index];\\n        fee = ((xp[index] - newY) / self.tokenMultipliers[index]) - dy;\\n        dy = (dy * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n    }\\n\\n    function _feePerToken(SwapStorage storage self) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        return (self.fee * nCoins) / (4 * (nCoins - 1));\\n    }\\n\\n    function _getYD(\\n        SwapStorage storage self,\\n        uint256 A,\\n        uint256 index,\\n        uint256[] memory xp,\\n        uint256 D\\n    ) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        assert(index < nCoins);\\n        uint256 Ann = A * nCoins;\\n        uint256 c = D;\\n        uint256 s = 0;\\n        uint256 _x = 0;\\n        uint256 yPrev = 0;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == index) {\\n                continue;\\n            }\\n            _x = xp[i];\\n            s += _x;\\n            c = (c * D) / (_x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = s + (D * A_PRECISION) / Ann;\\n        uint256 y = D;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(yPrev, y) <= 1) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    function _updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) internal {\\n        // If token is transferred to address 0 (or burned), don't update the fee.\\n        if (user == address(0)) {\\n            return;\\n        }\\n        if (self.defaultWithdrawFee == 0) {\\n            // If current fee is set to 0%, set multiplier to FEE_DENOMINATOR\\n            self.withdrawFeeMultiplier[user] = FEE_DENOMINATOR;\\n        } else {\\n            // Otherwise, calculate appropriate discount based on last deposit amount\\n            uint256 currentFee = _calculateCurrentWithdrawFee(self, user);\\n            uint256 currentBalance = self.lpToken.balanceOf(user);\\n\\n            // ((currentBalance * currentFee) + (toMint * defaultWithdrawFee)) * FEE_DENOMINATOR /\\n            // ((toMint + currentBalance) * defaultWithdrawFee)\\n            if ((toMint + currentBalance) * self.defaultWithdrawFee != 0) {\\n                self.withdrawFeeMultiplier[user] = (((currentBalance * currentFee) + (toMint * self.defaultWithdrawFee)) * (FEE_DENOMINATOR)) / ((toMint + currentBalance) * self.defaultWithdrawFee);\\n            }\\n        }\\n        self.depositTimestamp[user] = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Calculate the fee that is applied when the given user withdraws.\\n     * Withdraw fee decays linearly over 4 weeks.\\n     * @param user address you want to calculate withdraw fee of\\n     * @return current withdraw fee of the user\\n     */\\n    function _calculateCurrentWithdrawFee(SwapStorage storage self, address user) internal view returns (uint256) {\\n        uint256 endTime = self.depositTimestamp[user] + (4 weeks);\\n        if (endTime > block.timestamp) {\\n            uint256 timeLeftover = endTime - block.timestamp;\\n            return (self.defaultWithdrawFee * self.withdrawFeeMultiplier[user] * timeLeftover) / (4 weeks) / FEE_DENOMINATOR;\\n        }\\n        return 0;\\n    }\\n\\n    function _doTransferIn(IERC20 token, uint256 amount) internal returns (uint256) {\\n        uint256 priorBalance = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        return token.balanceOf(address(this)) - priorBalance;\\n    }\\n\\n    function _sumOf(uint256[] memory x) internal pure returns (uint256 sum) {\\n        sum = 0;\\n        for (uint256 i = 0; i < x.length; i++) {\\n            sum += x[i];\\n        }\\n    }\\n\\n    function _distance(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x - y : y - x;\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"div\\\");\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"div\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return 1 + (a - 1) / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x68b8645b0d439dbae1a13565028e00e6abf76b1e2d2b7f82e7de39ca07fee3a6\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xa67a41e5fda599c131836b335224ff7a7b9ca413fd4e50eebf094010a92f2ed6\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x8953c281afce43278a1654e00deebff3141ad67faa26238843068f62f20a2e90\",\"license\":\"MIT\"},\"contracts/interfaces/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.13;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0b4b58556ab45ed60f0c1a71afcd654eb68d95abf3e8428b90db1ae9da2ed9e2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event TokenExchange(address indexed buyer, uint256 soldId, uint256 tokensSold, uint256 boughtId, uint256 tokensBought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 flashFee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0x95d4a839cdc7330d7dde45912fbe94fae2e099b37dbab297f27512e934064986\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x120a788e5a65b0fd09c3095fd9a7e6d537e1febaf9597c354ac566784f42552a\",\"license\":\"MIT\"},\"contracts/libraries/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ERC20/IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x1182d5b7d8d28b5ee79fe685d7f97e832306bf6814304ad243dc0fa3ec5213b9\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n// solhint-disable reason-string\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: burn amount exceeds allowance\\\"\\n        );\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x629105091d7ab767b44e7adbd935eef90c519371cde4a33e0ca0d81371722433\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0x59e02b5f3787999017ae9f91e04ea9397d779df128804ed661efc2c9a71ba211\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SAFE_ERC20_CALL_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf19e5c0648254052a70c105d5255f753e10b371308458b8001c264ae8b175d1e\",\"license\":\"MIT\"},\"contracts/libraries/math/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.13;\\n\\n// solhint-disable no-inline-assembly, reason-string\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            // EDIT for 0.8 compatibility:\\n            // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint256\\n            uint256 twos = denominator & (~denominator + 1);\\n\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\",\"keccak256\":\"0x8bf85401543870c3d526a22738715e985caec01c91c9d0ab2c612c3779a00d74\",\"license\":\"MIT\"},\"contracts/tokens/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\nimport \\\"../libraries/ERC20Burnable.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../interfaces/IRequiemStableSwap.sol\\\";\\n\\ncontract LPToken is Ownable, ERC20Burnable {\\n    IRequiemStableSwap public swap;\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n        swap = IRequiemStableSwap(msg.sender);\\n    }\\n\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"zeroMintAmount\\\");\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n     * minting and burning. This ensures that swap.updateUserWithdrawFees are called everytime.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20) {\\n        super._beforeTokenTransfer(from, to, amount);\\n        swap.updateUserWithdrawFee(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7b8705a64ce109861ef3fde76a98d25e6f61a47c70aaeaaec16fce97b70e7048\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x614b5361003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061018c5760003560e01c8063c188e4be116100e2578063ce055b8d11610096578063d73792a911610070578063d73792a914610388578063e2eba89b14610394578063fa563597146103a757600080fd5b8063ce055b8d1461034d578063d011f9181461036d578063d36604ac1461037557600080fd5b8063c685696c116100c7578063c685696c146102e0578063c82325011461030d578063c8344c061461032d57600080fd5b8063c188e4be146102b6578063c20aace8146102d857600080fd5b80638e6da7b611610144578063ad30093f1161011e578063ad30093f14610270578063b52e146f14610290578063ba2998d9146102a357600080fd5b80638e6da7b61461022a578063a30355851461024a578063aa054aee1461025d57600080fd5b80631e7e95d3116101755780631e7e95d3146101d75780632bfe30d0146101ea5780637a6cba3c1461020a57600080fd5b80630da350f614610191578063159763bb146101c4575b600080fd5b81801561019d57600080fd5b506101b16101ac3660046142ab565b6103ba565b6040519081526020015b60405180910390f35b6101b16101d2366004614300565b610755565b6101b16101e5366004614416565b61076d565b8180156101f657600080fd5b506101b1610205366004614471565b610a8f565b81801561021657600080fd5b506101b16102253660046144a3565b610e30565b81801561023657600080fd5b506101b16102453660046142ab565b611502565b6101b16102583660046144f3565b611734565b6101b161026b366004614471565b611745565b81801561027c57600080fd5b506101b161028b3660046142ab565b611837565b6101b161029e3660046144f3565b611adc565b6101b16102b1366004614471565b611af3565b8180156102c257600080fd5b506102d66102d136600461450c565b611be6565b005b6101b1601281565b8180156102ec57600080fd5b506103006102fb366004614544565b611bf6565b6040516101bb9190614594565b81801561031957600080fd5b506102d6610328366004614648565b611eb1565b81801561033957600080fd5b506101b16103483660046144a3565b612481565b81801561035957600080fd5b506101b16103683660046142ab565b612ab4565b6101b1606481565b6101b16103833660046144f3565b612cf7565b6101b16402540be40081565b6101b16103a236600461474d565b612dbc565b6103006103b536600461450c565b612eb5565b60008660000186815481106103d1576103d161476f565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610422573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104469190614785565b8488600301888154811061045c5761045c61476f565b906000526020600020015461047191906147b4565b11156104c45760405162461bcd60e51b815260206004820152600560248201527f696e70757400000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60006104cf88612ec2565b905060008860020188815481106104e8576104e861476f565b9060005260206000200154866104fe91906147cc565b8289815181106105105761051061476f565b602002602001015161052291906147b4565b905060006105338a8a8a8587612f70565b9050600181848a8151811061054a5761054a61476f565b602002602001015161055c91906147eb565b61056691906147eb565b935060006402540be4008b600401548661058091906147cc565b61058a9190614802565b90508a60020189815481106105a1576105a161476f565b906000526020600020015481866105b891906147eb565b6105c29190614802565b9450868510156105fa5760405162461bcd60e51b81526020600482015260036024820152623e207360e81b60448201526064016104bb565b60008b6002018a815481106106115761061161476f565b90600052602060002001546402540be4008d600601548461063291906147cc565b61063c9190614802565b6106469190614802565b9050888c6003018c8154811061065e5761065e61476f565b90600052602060002001600082825461067791906147b4565b90915550610687905081876147b4565b8c6003018b8154811061069c5761069c61476f565b9060005260206000200160008282546106b591906147eb565b925050819055506106f287878e6000018d815481106106d6576106d661476f565b6000918252602090912001546001600160a01b031691906131ea565b604080518c8152602081018b90529081018b9052606081018790526001600160a01b038816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc98906080015b60405180910390a250505050509695505050505050565b600061076385858585613293565b5095945050505050565b825482516000919081146107ac5760405162461bcd60e51b81526020600482015260066024820152650d8cadccee8d60d31b60448201526064016104bb565b60006107b7866135d0565b905060006107cd6107c788612ec2565b836136a9565b905060008760030180548060200260200160405190810160405280929190818152602001828054801561081f57602002820191906000526020600020905b81548152602001906001019080831161080b575b5050505050905060005b848110156108d557861561087f578781815181106108495761084961476f565b60200260200101518282815181106108635761086361476f565b6020026020010181815161087791906147b4565b9052506108c3565b8781815181106108915761089161476f565b60200260200101518282815181106108ab576108ab61476f565b602002602001018181516108bf91906147eb565b9052505b806108cd81614824565b915050610829565b50600061093d610937838b60020180548060200260200160405190810160405280929190818152602001828054801561092d57602002820191906000526020600020905b815481526020019060010190808311610919575b5050505050613845565b856136a9565b905060008960010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ba9190614785565b9050806109ce57509450610a889350505050565b6000886109e4576109df83866147eb565b6109ee565b6109ee85846147eb565b9050848b60010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6a9190614785565b610a7490836147cc565b610a7e9190614802565b9750505050505050505b9392505050565b6000808560010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0b9190614785565b905060008111610b5d5760405162461bcd60e51b815260206004820152600f60248201527f746f74616c537570706c79203d2030000000000000000000000000000000000060448201526064016104bb565b855460018701546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd9190614785565b861115610c1c5760405162461bcd60e51b815260206004820152600960248201527f3e2062616c616e6365000000000000000000000000000000000000000000000060448201526064016104bb565b81861115610c6c5760405162461bcd60e51b815260206004820152600d60248201527f3e20746f74616c537570706c790000000000000000000000000000000000000060448201526064016104bb565b808510610cbb5760405162461bcd60e51b815260206004820152600d60248201527f746f6b656e4e6f74466f756e640000000000000000000000000000000000000060448201526064016104bb565b600080610cca89338a8a613293565b9250905085811015610d045760405162461bcd60e51b81526020600482015260036024820152623e207360e81b60448201526064016104bb565b6402540be400896006015483610d1a91906147cc565b610d249190614802565b610d2e90826147b4565b896003018881548110610d4357610d4361476f565b906000526020600020016000828254610d5c91906147eb565b9091555050600189015460405163079cc67960e41b8152336004820152602481018a90526001600160a01b03909116906379cc679090604401600060405180830381600087803b158015610daf57600080fd5b505af1158015610dc3573d6000803e3d6000fd5b50505050610de133828b6000018a815481106106d6576106d661476f565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b82548251600091908114610e6f5760405162461bcd60e51b81526020600482015260066024820152650d8cadccee8d60d31b60448201526064016104bb565b60008167ffffffffffffffff811115610e8a57610e8a61433d565b604051908082528060200260200182016040528015610eb3578160200160208202803683370190505b5090506000610ec1876138c8565b905060008760010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3e9190614785565b90506000610f4b896135d0565b905060008215611007576110046107c78b600301805480602002602001604051908101604052809291908181526020018280548015610fa957602002820191906000526020600020905b815481526020019060010190808311610f95575b50505050508c60020180548060200260200160405190810160405280929190818152602001828054801561092d5760200282019190600052602060002090815481526020019060010190808311610919575050505050613845565b90505b60008a60030180548060200260200160405190810160405280929190818152602001828054801561105757602002820191906000526020600020905b815481526020019060010190808311611043575b5050505050905060005b8781101561116757846110d75760008b82815181106110825761108261476f565b6020026020010151116110d75760405162461bcd60e51b815260206004820152600660248201527f746f6b656e73000000000000000000000000000000000000000000000000000060448201526064016104bb565b61112c8c60000182815481106110ef576110ef61476f565b9060005260206000200160009054906101000a90046001600160a01b03168c838151811061111f5761111f61476f565b60200260200101516138fd565b82828151811061113e5761113e61476f565b6020026020010181815161115291906147b4565b9052508061115f81614824565b915050611061565b5060006111c7610937838e60020180548060200260200160405190810160405280929190818152602001828054801561092d5760200282019190600052602060002090815481526020019060010190808311610919575050505050613845565b90508281116111d8576111d861483f565b846111fb5781516111f29060038e01906020850190614233565b508098506113f7565b6000805b8981101561136e5761125f858f60030183815481106112205761122061476f565b90600052602060002001548561123691906147cc565b6112409190614802565b8583815181106112525761125261476f565b60200260200101516139f5565b91506402540be400611271838a6147cc565b61127b9190614802565b89828151811061128d5761128d61476f565b6020026020010181815250506402540be4008e600601548a83815181106112b6576112b661476f565b60200260200101516112c891906147cc565b6112d29190614802565b8482815181106112e4576112e461476f565b60200260200101516112f691906147eb565b8e600301828154811061130b5761130b61476f565b906000526020600020018190555088818151811061132b5761132b61476f565b60200260200101518482815181106113455761134561476f565b6020026020010181815161135991906147eb565b9052508061136681614824565b9150506111ff565b506113d26113cc848f60020180548060200260200160405190810160405280929190818152602001828054801561092d5760200282019190600052602060002090815481526020019060010190808311610919575050505050613845565b866136a9565b9150836113df81846147eb565b6113e990886147cc565b6113f39190614802565b9950505b8989101561142d5760405162461bcd60e51b81526020600482015260036024820152623e207360e81b60448201526064016104bb565b60018c01546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018b90526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561149457600080fd5b505af11580156114a8573d6000803e3d6000fd5b50505050336001600160a01b03167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d6040516114eb9493929190614890565b60405180910390a250505050505050509392505050565b60008061150e88612ec2565b90506000611536866402540be4008b600401546402540be40061153191906147eb565b613a17565b9050600089600201888154811061154f5761154f61476f565b90600052602060002001548261156591906147cc565b8389815181106115775761157761476f565b602002602001015161158991906147eb565b9050600061159a8b8a8c8588612f70565b9050838a815181106115ae576115ae61476f565b6020026020010151816115c191906147eb565b94508a6002018a815481106115d8576115d861476f565b9060005260206000200154856115ee9190614802565b9450868511156116265760405162461bcd60e51b81526020600482015260036024820152623e207360e81b60448201526064016104bb565b848b6003018b8154811061163c5761163c61476f565b90600052602060002001600082825461165591906147eb565b92505081905550828b6003018a815481106116725761167261476f565b90600052602060002001600082825461168b91906147eb565b90915550508a546000908c908c9081106116a7576116a761476f565b6000918252602090912001546001600160a01b031690506116c881876138fd565b95506116e4878a8e6000018d815481106106d6576106d661476f565b604080518c8152602081018890529081018b9052606081018a90526001600160a01b038816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800161073e565b600061173f826135d0565b92915050565b60008061175186612ec2565b90506000611774846402540be40089600401546402540be40061153191906147eb565b9050600087600201868154811061178d5761178d61476f565b9060005260206000200154826117a391906147cc565b8387815181106117b5576117b561476f565b60200260200101516117c791906147eb565b905060006117d889888a8588612f70565b90506000611829858a815181106117f1576117f161476f565b60200260200101518361180491906147eb565b8b6002018b815481106118195761181961476f565b9060005260206000200154613ac6565b9a9950505050505050505050565b60008087600001878154811061184f5761184f61476f565b60009182526020822001546001600160a01b0316915061186e89612ec2565b905061187a82876138fd565b955060006118d98a8a8a8d6002018d815481106118995761189961476f565b90600052602060002001548b6118af91906147cc565b868e815181106118c1576118c161476f565b60200260200101516118d391906147b4565b86612f70565b90506000600182848b815181106118f2576118f261476f565b602002602001015161190491906147eb565b61190e91906147eb565b905060006402540be4008c600401548361192891906147cc565b6119329190614802565b90508b6002018a815481106119495761194961476f565b9060005260206000200154818361196091906147eb565b61196a9190614802565b9150878210156119a25760405162461bcd60e51b81526020600482015260036024820152623e207360e81b60448201526064016104bb565b888c6003018c815481106119b8576119b861476f565b9060005260206000200160008282546119d191906147b4565b909155505060028c0180548b9081106119ec576119ec61476f565b90600052602060002001546402540be4008d6006015483611a0d91906147cc565b611a179190614802565b611a219190614802565b611a2b90836147b4565b8c6003018b81548110611a4057611a4061476f565b906000526020600020016000828254611a5991906147eb565b92505081905550611a7a87838e6000018d815481106106d6576106d661476f565b604080518c8152602081018b90529081018b9052606081018390526001600160a01b038816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a2509a9950505050505050505050565b60006064611ae9836135d0565b61173f9190614802565b600080611aff86612ec2565b90506000866002018681548110611b1857611b1861476f565b906000526020600020015484611b2e91906147cc565b828781518110611b4057611b4061476f565b6020026020010151611b5291906147b4565b90506000611b638888888587612f70565b90506000886002018781548110611b7c57611b7c61476f565b906000526020600020015482858981518110611b9a57611b9a61476f565b6020026020010151611bac91906147eb565b611bb69190614802565b905060006402540be400828b60040154611bd091906147cc565b611bda9190614802565b905061182981836147eb565b611bf1838383613b4a565b505050565b606060008460010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c739190614785565b905080841115611c8257600080fd5b845460008167ffffffffffffffff811115611c9f57611c9f61433d565b604051908082528060200260200182016040528015611cc8578160200160208202803683370190505b509050611cd6873388613cc6565b935060005b8451811015611df857858181518110611cf657611cf661476f565b6020026020010151858281518110611d1057611d1061476f565b60200260200101511015611d4c5760405162461bcd60e51b81526020600482015260036024820152623e207360e81b60448201526064016104bb565b848181518110611d5e57611d5e61476f565b6020026020010151886003018281548110611d7b57611d7b61476f565b9060005260206000200154611d9091906147eb565b886003018281548110611da557611da561476f565b9060005260206000200181905550611de633868381518110611dc957611dc961476f565b60200260200101518a60000184815481106106d6576106d661476f565b80611df081614824565b915050611cdb565b50600187015460405163079cc67960e41b8152336004820152602481018890526001600160a01b03909116906379cc679090604401600060405180830381600087803b158015611e4757600080fd5b505af1158015611e5b573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea915086905083611e908a886147eb565b604051611e9f939291906148c9565b60405180910390a25050509392505050565b8151835114611f025760405162461bcd60e51b815260206004820152600660248201527f696e70757473000000000000000000000000000000000000000000000000000060448201526064016104bb565b6000835167ffffffffffffffff811115611f1e57611f1e61433d565b604051908082528060200260200182016040528015611f47578160200160208202803683370190505b5090506000845167ffffffffffffffff811115611f6657611f6661433d565b604051908082528060200260200182016040528015611f8f578160200160208202803683370190505b5090506000805b86518110156121f4576000878281518110611fb357611fb361476f565b602002602001015190506000878381518110611fd157611fd161476f565b60200260200101519050836001600160a01b0316826001600160a01b03161160006001600160a01b0316836001600160a01b031614612045576040518060400160405280600881526020017f756e736f7274656400000000000000000000000000000000000000000000000081525061207c565b6040518060400160405280600581526020017f746f6b656e0000000000000000000000000000000000000000000000000000008152505b9061209a5760405162461bcd60e51b81526004016104bb9190614957565b506040516370a0823160e01b815230600482015291935083916001600160a01b038316906370a0823190602401602060405180830381865afa1580156120e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121089190614785565b85848151811061211a5761211a61476f565b6020026020010181815250506402540be4008b600501548261213c91906147cc565b6121469190614802565b8684815181106121585761215861476f565b602002602001018181525050808584815181106121775761217761476f565b602002602001015110156121cd5760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e636500000000000000000000000060448201526064016104bb565b6121e16001600160a01b0383168b836131ea565b5050806121ed90614824565b9050611f96565b506040517ff04f27070000000000000000000000000000000000000000000000000000000081526001600160a01b0388169063f04f270790612240908990899088908a9060040161496a565b600060405180830381600087803b15801561225a57600080fd5b505af115801561226e573d6000803e3d6000fd5b5050505060005b86518110156124765760008782815181106122925761229261476f565b6020026020010151905060008483815181106122b0576122b061476f565b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015612305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123299190614785565b90508181101561237b5760405162461bcd60e51b815260206004820152601960248201527f696e76616c696420706f7374206c6f616e2062616c616e63650000000000000060448201526064016104bb565b600061238783836147eb565b905087858151811061239b5761239b61476f565b60200260200101518110156123f25760405162461bcd60e51b815260206004820152601560248201527f696e73756666696369656e74206c6f616e20666565000000000000000000000060448201526064016104bb565b836001600160a01b03168c6001600160a01b03167f0d7d75e01ab95780d3cd1c8ec0dd6c2ce19e3a20427eec8bf53283b6fb8e95f08c88815181106124395761243961476f565b602002602001015184604051612459929190918252602082015260400190565b60405180910390a3505050508061246f90614824565b9050612275565b505050505050505050565b825482516000919081146124c05760405162461bcd60e51b81526020600482015260066024820152650d8cadccee8d60d31b60448201526064016104bb565b6001850154604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015612525573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125499190614785565b9050806125985760405162461bcd60e51b815260206004820152600f60248201527f746f74616c537570706c79203d2030000000000000000000000000000000000060448201526064016104bb565b60006125a3876138c8565b905060006125b0886135d0565b905060008860030180548060200260200160405190810160405280929190818152602001828054801561260257602002820191906000526020600020905b8154815260200190600101908083116125ee575b50505050509050600061261d6126178b612ec2565b846136a9565b905060005b8681101561267f5789818151811061263c5761263c61476f565b60200260200101518382815181106126565761265661476f565b6020026020010181815161266a91906147eb565b9052508061267781614824565b915050612622565b5060006126df610937848d60020180548060200260200160405190810160405280929190818152602001828054801561092d5760200282019190600052602060002090815481526020019060010190808311610919575050505050613845565b905060008767ffffffffffffffff8111156126fc576126fc61433d565b604051908082528060200260200182016040528015612725578160200160208202803683370190505b50905060005b888110156128a5576000848e600301838154811061274b5761274b61476f565b90600052602060002001548561276191906147cc565b61276b9190614802565b905060006127928784815181106127845761278461476f565b6020026020010151836139f5565b90506402540be4006127a4828b6147cc565b6127ae9190614802565b8484815181106127c0576127c061476f565b6020026020010181815250506402540be4008f600601548585815181106127e9576127e961476f565b60200260200101516127fb91906147cc565b6128059190614802565b8784815181106128175761281761476f565b602002602001015161282991906147eb565b8f600301848154811061283e5761283e61476f565b906000526020600020018190555083838151811061285e5761285e61476f565b60200260200101518784815181106128785761287861476f565b6020026020010181815161288c91906147eb565b90525082915061289d905081614824565b91505061272b565b506129036113cc858e60020180548060200260200160405190810160405280929190818152602001828054801561092d5760200282019190600052602060002090815481526020019060010190808311610919575050505050613845565b9150828761291184836147eb565b61291b91906147cc565b6129259190614802565b9850600089116129375761293761483f565b6129418c33613e92565b612950906402540be4006147eb565b61295b8a60016147b4565b61296591906147cc565b98508989111561299d5760405162461bcd60e51b81526020600482015260036024820152623e207360e81b60448201526064016104bb565b60018c015460405163079cc67960e41b8152336004820152602481018b90526001600160a01b03909116906379cc679090604401600060405180830381600087803b1580156129eb57600080fd5b505af11580156129ff573d6000803e3d6000fd5b5050505060005b88811015612a74578b8181518110612a2057612a2061476f565b6020026020010151600014612a6257612a62338d8381518110612a4557612a4561476f565b60200260200101518f60000184815481106106d6576106d661476f565b80612a6c81614824565b915050612a06565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c8385612aa48e8d6147eb565b6040516114eb9493929190614890565b600080612ac088612ec2565b90506000612b078989898c6002018c81548110612adf57612adf61476f565b90600052602060002001548a612af591906147cc565b868d815181106118c1576118c161476f565b9050600081838981518110612b1e57612b1e61476f565b6020026020010151612b3091906147eb565b90506000612b48828c600401546402540be400613a17565b9050612b6c612b5782846147eb565b8c6002018b815481106118195761181961476f565b915081871115612bbe5760405162461bcd60e51b815260206004820152600a60248201527f647920746f6f206c6f770000000000000000000000000000000000000000000060448201526064016104bb565b878b6003018b81548110612bd457612bd461476f565b906000526020600020016000828254612bed91906147b4565b909155505060028b0180548a908110612c0857612c0861476f565b90600052602060002001546402540be4008c6006015483612c2991906147cc565b612c339190614802565b612c3d9190614802565b612c4790836147b4565b8b6003018a81548110612c5c57612c5c61476f565b906000526020600020016000828254612c7591906147eb565b92505081905550612c9686888d6000018c815481106106d6576106d661476f565b604080518b8152602081018a90529081018a9052606081018890526001600160a01b038716907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a2509998505050505050505050565b600080612d14612d0684612ec2565b612d0f856135d0565b6136a9565b905060008360010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d919190614785565b905080612da06012600a614ad8565b612daa90846147cc565b612db49190614802565b949350505050565b81546000908210612e015760405162461bcd60e51b815260206004820152600f60248201526e696e6465784f75744f6652616e676560881b60448201526064016104bb565b826003018281548110612e1657612e1661476f565b9060005260206000200154836000018381548110612e3657612e3661476f565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612e87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eab9190614785565b610a8891906147eb565b6060612db4848484613cc6565b606061173f82600301805480602002602001604051908101604052809291908181526020018280548015612f1557602002820191906000526020600020905b815481526020019060010190808311612f01575b50505050508360020180548060200260200160405190810160405280929190818152602001828054801561092d5760200282019190600052602060002090815481526020019060010190808311610919575050505050613845565b600083851415612fc25760405162461bcd60e51b815260206004820152600960248201527f73616d65546f6b656e000000000000000000000000000000000000000000000060448201526064016104bb565b85548086108015612fd257508085105b6130105760405162461bcd60e51b815260206004820152600f60248201526e696e6465784f75744f6652616e676560881b60448201526064016104bb565b600061301b886135d0565b9050600061302983836147cc565b9050600061303786846136a9565b9050600081815b868110156130bf578a811415613053576130ad565b60008c821461307b5789828151811061306e5761306e61476f565b602002602001015161307d565b8a5b905061308981856147b4565b935061309588826147cc565b61309f86856147cc565b6130a99190614802565b9250505b806130b781614824565b91505061303e565b506130ca86856147cc565b60646130d685846147cc565b6130e091906147cc565b6130ea9190614802565b90506000846130fa6064866147cc565b6131049190614802565b61310e90846147b4565b9050600084815b6101008110156131985781925061316285838461313291906147cc565b61313c91906147b4565b88866131498660026147cc565b61315391906147b4565b61315d91906147eb565b613ac6565b9150600161317084846139f5565b11613186575098506131e1975050505050505050565b8061319081614824565b915050613115565b5060405162461bcd60e51b815260206004820152601260248201527f7943616c63756c6174696f6e4661696c6564000000000000000000000000000060448201526064016104bb565b95945050505050565b6040516001600160a01b038316602482015260448101829052611bf19084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613f3e565b8354600090819083106132da5760405162461bcd60e51b815260206004820152600f60248201526e696e6465784f75744f6652616e676560881b60448201526064016104bb565b60006132e5876135d0565b905060006132f288612ec2565b9050600061330082846136a9565b905060008960010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061337d9190614785565b613387838a6147cc565b6133919190614802565b61339b90836147eb565b905060006133ac8b868a8786614022565b90508360006133ba8d6138c8565b905060005b8d548110156134c25760008b821415613414578487878a85815181106133e7576133e761476f565b60200260200101516133f991906147cc565b6134039190614802565b61340d91906147eb565b905061346b565b86868984815181106134285761342861476f565b602002602001015161343a91906147cc565b6134449190614802565b8883815181106134565761345661476f565b602002602001015161346891906147eb565b90505b6402540be40061347b82856147cc565b6134859190614802565b8483815181106134975761349761476f565b602002602001018181516134ab91906147eb565b9052508190506134ba81614824565b9150506133bf565b506134d08d888c8588614022565b828b815181106134e2576134e261476f565b60200260200101516134f491906147eb565b98508c6002018a8154811061350b5761350b61476f565b906000526020600020015460018a61352391906147eb565b61352d9190614802565b9850888d6002018b815481106135455761354561476f565b906000526020600020015484888d815181106135635761356361476f565b602002602001015161357591906147eb565b61357f9190614802565b61358991906147eb565b97506402540be40061359b8e8e613e92565b6135aa906402540be4006147eb565b6135b4908b6147cc565b6135be9190614802565b98505050505050505094509492505050565b600081600a015442106135e557506008015490565b81600701548260080154111561364f57816009015482600a015461360991906147eb565b600983015461361890426147eb565b8360070154846008015461362c91906147eb565b61363691906147cc565b6136409190614802565b826007015461173f91906147b4565b816009015482600a015461366391906147eb565b600983015461367290426147eb565b8360080154846007015461368691906147eb565b61369091906147cc565b61369a9190614802565b826007015461173f91906147eb565b8151600090816136b885614196565b9050806136ca5760009250505061173f565b600081816136d885886147cc565b905060005b6101008110156137fc578260005b8a5181101561374157878b82815181106137075761370761476f565b602002602001015161371991906147cc565b61372386846147cc565b61372d9190614802565b91508061373981614824565b9150506136eb565b508394508087600161375391906147b4565b61375d91906147cc565b60648561376a82876147eb565b61377491906147cc565b61377e9190614802565b61378891906147b4565b8461379389846147cc565b606461379f8a886147cc565b6137a99190614802565b6137b391906147b4565b6137bd91906147cc565b6137c79190614802565b935060016137d585876139f5565b116137e9578397505050505050505061173f565b50806137f481614824565b9150506136dd565b5060405162461bcd60e51b815260206004820152601a60248201527f696e76617269616e7443616c63756c6174696f6e4661696c656400000000000060448201526064016104bb565b606060005b83518110156138c0578381815181106138655761386561476f565b602002602001015183828151811061387f5761387f61476f565b602002602001015161389191906147cc565b8382815181106138a3576138a361476f565b6020908102919091010152806138b881614824565b91505061384a565b509092915050565b80546000906138d86001826147eb565b6138e39060046147cc565b8184600401546138f391906147cc565b610a889190614802565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a0823190602401602060405180830381865afa158015613946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061396a9190614785565b90506139816001600160a01b0385163330866141e2565b6040516370a0823160e01b815230600482015281906001600160a01b038616906370a0823190602401602060405180830381865afa1580156139c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139eb9190614785565b612db491906147eb565b6000818311613a0d57613a0883836147eb565b610a88565b610a8882846147eb565b600080806000198587098587029250828110838203039150508060001415613a515760008411613a4657600080fd5b508290049050610a88565b808411613a5d57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600081613b155760405162461bcd60e51b815260206004820152600360248201527f646976000000000000000000000000000000000000000000000000000000000060448201526064016104bb565b82613b225750600061173f565b81613b2e6001856147eb565b613b389190614802565b613b439060016147b4565b905061173f565b6001600160a01b038216613b5d57505050565b600b830154613b8d576001600160a01b0382166000908152600d8401602052604090206402540be4009055613ca6565b6000613b998484613e92565b60018501546040516370a0823160e01b81526001600160a01b038681166004830152929350600092909116906370a0823190602401602060405180830381865afa158015613beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c0f9190614785565b600b860154909150613c2182856147b4565b613c2b91906147cc565b15613ca357600b850154613c3f82856147b4565b613c4991906147cc565b6402540be40086600b015485613c5f91906147cc565b613c6985856147cc565b613c7391906147b4565b613c7d91906147cc565b613c879190614802565b6001600160a01b0385166000908152600d870160205260409020555b50505b506001600160a01b03166000908152600c90910160205260409020429055565b606060008460010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d439190614785565b905080831115613d955760405162461bcd60e51b815260206004820152600c60248201527f746f74616c20737570706c79000000000000000000000000000000000000000060448201526064016104bb565b60006402540be400613da78787613e92565b613db6906402540be4006147eb565b613dc090866147cc565b613dca9190614802565b865490915060009067ffffffffffffffff811115613dea57613dea61433d565b604051908082528060200260200182016040528015613e13578160200160208202803683370190505b50905060005b8754811015613e87578383896003018381548110613e3957613e3961476f565b9060005260206000200154613e4e91906147cc565b613e589190614802565b828281518110613e6a57613e6a61476f565b602090810291909101015280613e7f81614824565b915050613e19565b509695505050505050565b6001600160a01b0381166000908152600c830160205260408120548190613ebc906224ea006147b4565b905042811115613f34576000613ed242836147eb565b6001600160a01b0385166000908152600d87016020526040902054600b8701549192506402540be400916224ea00918491613f0d91906147cc565b613f1791906147cc565b613f219190614802565b613f2b9190614802565b9250505061173f565b5060009392505050565b600080836001600160a01b031683604051613f599190614ae4565b6000604051808303816000865af19150503d8060008114613f96576040519150601f19603f3d011682016040523d82523d6000602084013e613f9b565b606091505b50915091506000821415613fb3573d6000803e3d6000fd5b80511580613fd0575080806020019051810190613fd09190614b00565b61401c5760405162461bcd60e51b815260206004820152601660248201527f534146455f45524332305f43414c4c5f4641494c45440000000000000000000060448201526064016104bb565b50505050565b84546000908085106140365761403661483f565b600061404282886147cc565b90508360008080805b868110156140bd578a811415614060576140ab565b8981815181106140725761407261476f565b60200260200101519250828461408891906147b4565b935061409487846147cc565b61409e8a876147cc565b6140a89190614802565b94505b806140b581614824565b91505061404b565b506140c886866147cc565b60646140d48a876147cc565b6140de91906147cc565b6140e89190614802565b93506000856140f860648b6147cc565b6141029190614802565b61410c90856147b4565b90508860005b6101008110156137fc578193508a8383600261412e91906147cc565b61413891906147b4565b61414291906147eb565b8761414d84806147cc565b61415791906147b4565b6141619190614802565b9150600161416f85846139f5565b11614184575097506131e19650505050505050565b8061418e81614824565b915050614112565b6000805b82518110156141dc578281815181106141b5576141b561476f565b6020026020010151826141c891906147b4565b9150806141d481614824565b91505061419a565b50919050565b6040516001600160a01b038085166024830152831660448201526064810182905261401c9085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161322f565b82805482825590600052602060002090810192821561426e579160200282015b8281111561426e578251825591602001919060010190614253565b5061427a92915061427e565b5090565b5b8082111561427a576000815560010161427f565b6001600160a01b03811681146142a857600080fd5b50565b60008060008060008060c087890312156142c457600080fd5b863595506020870135945060408701359350606087013592506080870135915060a08701356142f281614293565b809150509295509295509295565b6000806000806080858703121561431657600080fd5b84359350602085013561432881614293565b93969395505050506040820135916060013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561437c5761437c61433d565b604052919050565b600067ffffffffffffffff82111561439e5761439e61433d565b5060051b60200190565b600082601f8301126143b957600080fd5b813560206143ce6143c983614384565b614353565b82815260059290921b840181019181810190868411156143ed57600080fd5b8286015b84811015613e8757803583529183019183016143f1565b80151581146142a857600080fd5b60008060006060848603121561442b57600080fd5b83359250602084013567ffffffffffffffff81111561444957600080fd5b614455868287016143a8565b925050604084013561446681614408565b809150509250925092565b6000806000806080858703121561448757600080fd5b5050823594602084013594506040840135936060013592509050565b6000806000606084860312156144b857600080fd5b83359250602084013567ffffffffffffffff8111156144d657600080fd5b6144e2868287016143a8565b925050604084013590509250925092565b60006020828403121561450557600080fd5b5035919050565b60008060006060848603121561452157600080fd5b83359250602084013561453381614293565b929592945050506040919091013590565b60008060006060848603121561455957600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561457e57600080fd5b61458a868287016143a8565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156145cc578351835292840192918401916001016145b0565b50909695505050505050565b600082601f8301126145e957600080fd5b813567ffffffffffffffff8111156146035761460361433d565b614616601f8201601f1916602001614353565b81815284602083860101111561462b57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561466057600080fd5b8535945060208087013561467381614293565b9450604087013567ffffffffffffffff8082111561469057600080fd5b818901915089601f8301126146a457600080fd5b81356146b26143c982614384565b81815260059190911b8301840190848101908c8311156146d157600080fd5b938501935b828510156146f85784356146e981614293565b825293850193908501906146d6565b97505050606089013592508083111561471057600080fd5b61471c8a848b016143a8565b9450608089013592508083111561473257600080fd5b5050614740888289016145d8565b9150509295509295909350565b6000806040838503121561476057600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561479757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156147c7576147c761479e565b500190565b60008160001904831182151516156147e6576147e661479e565b500290565b6000828210156147fd576147fd61479e565b500390565b60008261481f57634e487b7160e01b600052601260045260246000fd5b500490565b60006000198214156148385761483861479e565b5060010190565b634e487b7160e01b600052600160045260246000fd5b600081518084526020808501945080840160005b8381101561488557815187529582019590820190600101614869565b509495945050505050565b6080815260006148a36080830187614855565b82810360208401526148b58187614855565b604084019590955250506060015292915050565b6060815260006148dc6060830186614855565b82810360208401526148ee8186614855565b915050826040830152949350505050565b60005b8381101561491a578181015183820152602001614902565b8381111561401c5750506000910152565b600081518084526149438160208601602086016148ff565b601f01601f19169290920160200192915050565b602081526000610a88602083018461492b565b6080808252855190820181905260009060209060a0840190828901845b828110156149ac5781516001600160a01b031684529284019290840190600101614987565b505050838103828501526149c08188614855565b91505082810360408401526149d58186614855565b905082810360608401526149e9818561492b565b979650505050505050565b600181815b80851115614a2f578160001904821115614a1557614a1561479e565b80851615614a2257918102915b93841c93908002906149f9565b509250929050565b600082614a465750600161173f565b81614a535750600061173f565b8160018114614a695760028114614a7357614a8f565b600191505061173f565b60ff841115614a8457614a8461479e565b50506001821b61173f565b5060208310610133831016604e8410600b8410161715614ab2575081810a61173f565b614abc83836149f4565b8060001904821115614ad057614ad061479e565b029392505050565b6000610a888383614a37565b60008251614af68184602087016148ff565b9190910192915050565b600060208284031215614b1257600080fd5b8151610a888161440856fea26469706673582212205d69a964168ce5a57868f215a68fe0533301dd8d26f8042bf796f11392f2889264736f6c634300080c0033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "FlashLoan(address,address,uint256,uint256)": {
        "details": "Emitted for each individual flash loan performed by `flashLoan`."
      }
    },
    "kind": "dev",
    "methods": {
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "params": {
          "amounts": "List of amounts of coins to deposit",
          "minMintAmount": "Minimum amount of LP tokens to mint from the deposit"
        },
        "returns": {
          "mintAmount": "Amount of LP tokens received by depositing"
        }
      },
      "onSwap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i": "token index in",
          "j": "token index out",
          "outAmount": "the target out amount - only a cap at the decimalplaces of the lower one, the rest is taken as fee                  - that fee is always about the lowes amount possible of the one with the lower decimal number                  this will have a negative"
        }
      },
      "onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i": "token index in",
          "j": "token index out"
        }
      },
      "onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i": "token index in",
          "j": "token index out"
        }
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "params": {
          "self": "Swap struct to read from and write to",
          "toMint": "amount of pool tokens to be minted",
          "user": "address of the user depositing tokens"
        }
      }
    },
    "stateVariables": {
      "A_PRECISION": {
        "details": "protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration"
      },
      "MAX_ITERATION": {
        "details": "max iteration of converge calccuate"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "notice": "Deposit coins into the pool"
      },
      "calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)": {
        "notice": "Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account"
      },
      "flashLoan(RequiemStableSwapLib.SwapStorage storage,IFlashLoanRecipient,IERC20[],uint256[],bytes)": {
        "notice": "Flash Loan"
      },
      "getAPrecise(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "VIEW FUNCTIONS"
      },
      "getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "Returns portfolio virtual price (for calculating profit) scaled up by 1e18"
      },
      "onSwap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "notice": "the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output and caps it at outAmount to   - this is to avoid issues with the rounding when using the calculateSwapGivenOut function to determine the input          -> that is because e.g. a 6 digit input can never exactly hit a 18 digit output, so the input is selected slightly higher              such that the output also is essentially rounded up at the sixth digit          -> the outAmount can only be lower than the actual calculated dy   - viable function for batch swapping"
      },
      "onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "notice": "the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output, in this case simple as the output is the calculated value   - viable function for batch swapping"
      },
      "onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "notice": "the same function as swap, but it espects that amounts already have been sent to the contract and it requires the output to be provided  - designed to be used in the requirem swap framework  - deducts the fees from the output, that means that the    output has to be increased by the fee to then create a highe input"
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "notice": "Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit."
      }
    },
    "notice": "StableSwap main algorithm",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}