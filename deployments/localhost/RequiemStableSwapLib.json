{
  "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coin_amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sold_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bought_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        }
      ],
      "name": "TokenExchange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "A_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_TOKEN_COMMON_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4957447475a1f8c54a48a99d2aacc3cc9710452e9a7620980bb1338a201d7620",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
    "transactionIndex": 0,
    "gasUsed": "4114319",
    "logsBloom": "0x
    "blockHash": "0xd080a920f14936b772dd7fbfca6da3c5f8cf7762fc4972827654a322d0d1a4ec",
    "transactionHash": "0x4957447475a1f8c54a48a99d2aacc3cc9710452e9a7620980bb1338a201d7620",
    "logs": [],
    "blockNumber": 13,
    "cumulativeGasUsed": "4114319",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a0595fde7a6d5989d6b7f3ba1bfb1deb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coin_amount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sold_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_sold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bought_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_bought\",\"type\":\"uint256\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_TOKEN_COMMON_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"params\":{\"amounts\":\"List of amounts of coins to deposit\",\"minMintAmount\":\"Minimum amount of LP tokens to mint from the deposit\"},\"returns\":{\"mintAmount\":\"Amount of LP tokens received by depositing\"}},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"params\":{\"self\":\"Swap struct to read from and write to\",\"toMint\":\"amount of pool tokens to be minted\",\"user\":\"address of the user depositing tokens\"}}},\"stateVariables\":{\"A_PRECISION\":{\"details\":\"protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration\"},\"MAX_ITERATION\":{\"details\":\"max iteration of converge calccuate\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"notice\":\"Deposit coins into the pool\"},\"calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)\":{\"notice\":\"Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account\"},\"getAPrecise(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"VIEW FUNCTIONS\"},\"getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"Returns portfolio virtual price (for calculating profit) scaled up by 1e18\"},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"notice\":\"Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit.\"}},\"notice\":\"StableSwap main algorithm\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemStableSwapLib.sol\":\"RequiemStableSwapLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":12500},\"remappings\":[]},\"sources\":{\"contracts/RequiemStableSwapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./tokens/LPToken.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\n/**\\n * StableSwap main algorithm\\n */\\nlibrary RequiemStableSwapLib {\\n    using SafeERC20 for IERC20;\\n\\n    event AddLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 invariant, uint256 token_supply);\\n\\n    event TokenExchange(address indexed buyer, uint256 sold_id, uint256 tokens_sold, uint256 bought_id, uint256 tokens_bought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 token_supply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 invariant, uint256 token_supply);\\n\\n    uint256 public constant FEE_DENOMINATOR = 1e10;\\n    // uint256 public constant PRECISION = 1e18;\\n\\n    /// @dev protect from division loss when run approximation loop. We cannot divide at the end because of overflow,\\n    /// so we add some (small) PRECISION when divide in each iteration\\n    uint256 public constant A_PRECISION = 100;\\n    /// @dev max iteration of converge calccuate\\n    uint256 internal constant MAX_ITERATION = 256;\\n    uint256 public constant POOL_TOKEN_COMMON_DECIMALS = 18;\\n\\n    struct SwapStorage {\\n        IERC20[] pooledTokens;\\n        LPToken lpToken;\\n        /// @dev token i multiplier to reach POOL_TOKEN_COMMON_DECIMALS\\n        uint256[] tokenMultipliers;\\n        /// @dev effective balance which might different from token balance of the contract 'cause it hold admin fee as well\\n        uint256[] balances;\\n        /// @dev swap fee ratio. Charge on any action which move balance state far from the ideal state\\n        uint256 fee;\\n        /// @dev admin fee in ratio of swap fee.\\n        uint256 adminFee;\\n        /// @dev observation of A, multiplied with A_PRECISION\\n        uint256 initialA;\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n        // withdrawal fee control\\n        uint256 defaultWithdrawFee;\\n        mapping(address => uint256) depositTimestamp;\\n        mapping(address => uint256) withdrawFeeMultiplier;\\n    }\\n\\n    /**\\n     * @notice Deposit coins into the pool\\n     * @param amounts List of amounts of coins to deposit\\n     * @param minMintAmount Minimum amount of LP tokens to mint from the deposit\\n     * @return mintAmount Amount of LP tokens received by depositing\\n     */\\n    function addLiquidity(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 minMintAmount\\n    ) external returns (uint256 mintAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256[] memory fees = new uint256[](nCoins);\\n        uint256 _fee = _feePerToken(self);\\n\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256 D0 = 0;\\n        if (tokenSupply > 0) {\\n            D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\\n        }\\n\\n        uint256[] memory newBalances = self.balances;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (tokenSupply == 0) {\\n                require(amounts[i] > 0, \\\"initialDepositRequireAllTokens\\\");\\n            }\\n            // get real transfer in amount\\n            newBalances[i] += _doTransferIn(self.pooledTokens[i], amounts[i]);\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        assert(D1 > D0); // double check\\n\\n        if (tokenSupply == 0) {\\n            self.balances = newBalances;\\n            mintAmount = D1;\\n        } else {\\n            uint256 diff = 0;\\n            for (uint256 i = 0; i < nCoins; i++) {\\n                diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\\n                fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n                self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n                newBalances[i] -= fees[i];\\n            }\\n            D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n            mintAmount = (tokenSupply * (D1 - D0)) / D0;\\n        }\\n\\n        require(mintAmount >= minMintAmount, \\\"> slippage\\\");\\n\\n        self.lpToken.mint(msg.sender, mintAmount);\\n        emit AddLiquidity(msg.sender, amounts, fees, D1, mintAmount);\\n    }\\n\\n    // implements classic swap function a la compound\\n    function swap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256) {\\n        IERC20 inCoin = self.pooledTokens[i];\\n        uint256[] memory normalizedBalances = _xp(self);\\n        inAmount = _doTransferIn(inCoin, inAmount);\\n\\n        // uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\\n        uint256 y = _getY(self, i, j, normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]), normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> slippage\\\");\\n\\n        // uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n        \\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n        return dy;\\n    }\\n\\n\\n    // implements classic swap function a la compound\\n    // here the amounts are provided and just validated via the invariant\\n    // out amount is supposed to not include the fees\\n    // inAmount is supposd to be sent already to this address\\n    function _swap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 outAmount,\\n        address to\\n    ) external returns (uint256) {\\n        // check whether at least the input amount has been sent here\\n        require(self.balances[i] + inAmount <= self.pooledTokens[i].balanceOf(address(this)), \\\"INSUFFICIENT_INPUT\\\");\\n        // adjust output amount for fees\\n        uint256 amountOutInclFee = divDown(outAmount * FEE_DENOMINATOR, FEE_DENOMINATOR - self.fee);\\n        uint256 amp = _getAPrecise(self);\\n        // calculate invariant before trade\\n        uint256 D0 = _getD(_xp(self), amp);\\n        //calculate new balance\\n        uint256[] memory newBalances = self.balances;\\n        newBalances[i] += inAmount;\\n        newBalances[j] -= amountOutInclFee;\\n        // calculate invariant after trade\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n\\n        require(D1 >= D0, \\\"INVARIANT\\\");\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= amountOutInclFee;\\n\\n        self.pooledTokens[j].safeTransfer(to, amountOutInclFee);\\n        emit TokenExchange(to, i, inAmount, j, amountOutInclFee);\\n        return outAmount;\\n    }\\n\\n    // the same function as swap, but it espects that amounts already have been\\n    // sent to the contract\\n    // - designed to be used in the Requiem Swap framework\\n    function onSwapGivenIn(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256) {\\n        // we check whether the balance has increased by the suggested inAmount\\n        require(self.balances[i] + inAmount <= IERC20(self.pooledTokens[i]).balanceOf(address(this)), \\\"INSUFFICIENT_INPUT\\\");\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\\n        uint256 y = _getY(self, i, j, x, normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> slippage\\\");\\n\\n        uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + _adminFee;\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n        return dy;\\n    }\\n\\n    // the same function as swap, but it espects that amounts already have been\\n    // sent to the contract and it requires the output to be provided\\n    //  - designed to be used in the requirem swap framework\\n    function onSwapGivenOut(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 outAmount,\\n        uint256 maxInAmount,\\n        address to\\n    ) external returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n\\n        uint256 y = normalizedBalances[j] - (outAmount * self.tokenMultipliers[j]);\\n        uint256 x = _getY(self, j, i, y, normalizedBalances);\\n\\n        uint256 dx = normalizedBalances[i] - x - 1; // iliminate rouding errors\\n        uint256 dx_fee = (dx * self.fee) / FEE_DENOMINATOR;\\n\\n        dx = (dx - dx_fee) / self.tokenMultipliers[i]; // denormalize\\n\\n        require(dx >= maxInAmount, \\\"> slippage\\\");\\n\\n        uint256 _adminFee = (dx_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        // update balances\\n        self.balances[i] -= dx + _adminFee;\\n        self.balances[j] -= outAmount;\\n\\n        self.pooledTokens[i].safeTransfer(to, dx);\\n        emit TokenExchange(to, i, outAmount, j, dx);\\n        return dx;\\n    }\\n\\n    function removeLiquidity(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256[] memory minAmounts\\n    ) external returns (uint256[] memory amounts) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(lpAmount <= totalSupply);\\n        uint256 nCoins = self.pooledTokens.length;\\n\\n        uint256[] memory fees = new uint256[](nCoins);\\n        amounts = _calculateRemoveLiquidity(self, msg.sender, lpAmount);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] >= minAmounts[i], \\\"> slippage\\\");\\n            self.balances[i] = self.balances[i] - amounts[i];\\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        emit RemoveLiquidity(msg.sender, amounts, fees, totalSupply - lpAmount);\\n    }\\n\\n    function removeLiquidityOneToken(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256 index,\\n        uint256 minAmount\\n    ) external returns (uint256) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply > 0, \\\"totalSupply = 0\\\");\\n        uint256 numTokens = self.pooledTokens.length;\\n        require(lpAmount <= self.lpToken.balanceOf(msg.sender), \\\"> balance\\\");\\n        require(lpAmount <= totalSupply, \\\"> totalSupply\\\");\\n        require(index < numTokens, \\\"tokenNotFound\\\");\\n\\n        uint256 dyFee;\\n        uint256 dy;\\n\\n        (dy, dyFee) = _calculateRemoveLiquidityOneToken(self, msg.sender, lpAmount, index);\\n\\n        require(dy >= minAmount, \\\"> slippage\\\");\\n\\n        self.balances[index] -= (dy + (dyFee * self.adminFee) / FEE_DENOMINATOR);\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        self.pooledTokens[index].safeTransfer(msg.sender, dy);\\n\\n        emit RemoveLiquidityOne(msg.sender, index, lpAmount, dy);\\n\\n        return dy;\\n    }\\n\\n    function removeLiquidityImbalance(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 maxBurnAmount\\n    ) external returns (uint256 burnAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply != 0, \\\"totalSupply = 0\\\");\\n        uint256 _fee = _feePerToken(self);\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256[] memory newBalances = self.balances;\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            newBalances[i] -= amounts[i];\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256[] memory fees = new uint256[](nCoins);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            uint256 idealBalance = (D1 * self.balances[i]) / D0;\\n            uint256 diff = _distance(newBalances[i], idealBalance);\\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n            newBalances[i] -= fees[i];\\n        }\\n\\n        // recalculate invariant with fee charged balances\\n        D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        burnAmount = ((D0 - D1) * totalSupply) / D0;\\n        assert(burnAmount > 0);\\n        burnAmount = (burnAmount + 1) * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, msg.sender)); //In case of rounding errors - make it unfavorable for the \\\"attacker\\\"\\n        require(burnAmount <= maxBurnAmount, \\\"> slippage\\\");\\n\\n        self.lpToken.burnFrom(msg.sender, burnAmount);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (amounts[i] != 0) {\\n                self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, totalSupply - burnAmount);\\n    }\\n\\n    /// VIEW FUNCTIONS\\n    function getAPrecise(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self);\\n    }\\n\\n    /**\\n     * Returns portfolio virtual price (for calculating profit)\\n     * scaled up by 1e18\\n     */\\n    function getVirtualPrice(SwapStorage storage self) external view returns (uint256) {\\n        uint256 D = _getD(_xp(self), _getAPrecise(self));\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        return (D * 10**POOL_TOKEN_COMMON_DECIMALS) / tokenSupply;\\n    }\\n\\n    function getAdminBalance(SwapStorage storage self, uint256 index) external view returns (uint256) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        return self.pooledTokens[index].balanceOf(address(this)) - (self.balances[index]);\\n    }\\n\\n    /**\\n     * Estimate amount of LP token minted or burned at deposit or withdrawal\\n     * without taking fees into account\\n     */\\n    function calculateTokenAmount(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        uint256[] memory newBalances = self.balances;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (deposit) {\\n                newBalances[i] += amounts[i];\\n            } else {\\n                newBalances[i] -= amounts[i];\\n            }\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n\\n        if (totalSupply == 0) {\\n            return D1; // first depositor take it all\\n        }\\n\\n        uint256 diff = deposit ? D1 - D0 : D0 - D1;\\n        return (diff * self.lpToken.totalSupply()) / D0;\\n    }\\n\\n    function getA(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self) / A_PRECISION;\\n    }\\n\\n    // implements calculation of stable swap interface\\n    function calculateSwap(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 newInBalance = normalizedBalances[inIndex] + (inAmount * self.tokenMultipliers[inIndex]);\\n        uint256 outBalance = _getY(self, inIndex, outIndex, newInBalance, normalizedBalances);\\n        uint256 outAmount = divDown(normalizedBalances[outIndex] - outBalance , self.tokenMultipliers[outIndex]);\\n        uint256 _fee = self.fee * outAmount / FEE_DENOMINATOR;\\n        return outAmount - _fee;\\n    }\\n\\n    // implements calculation for Requiem interface\\n    // note that due to the fact that the structure is not symmetric (unlike pairs)\\n    // we require a separate function to calculate the input for a given output\\n    function calculateSwapGivenOut(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 outAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        // fee has to be deducted on the output\\n        uint256 _amountOutInclFee = divDown(outAmount * FEE_DENOMINATOR, FEE_DENOMINATOR - self.fee);\\n        uint256 newOutBalance = normalizedBalances[outIndex] - (_amountOutInclFee * self.tokenMultipliers[outIndex]);\\n        uint256 inBalance = _getY(self, outIndex, inIndex, newOutBalance, normalizedBalances);\\n        // _getYOrig(self, outIndex, inIndex, newOutBalance, normalizedBalances);_getX(self, inIndex, outIndex, newOutBalance, normalizedBalances);\\n        uint256 inAmount = divUp(inBalance - normalizedBalances[inIndex] , self.tokenMultipliers[inIndex]);\\n        return inAmount;\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) external view returns (uint256[] memory) {\\n        return _calculateRemoveLiquidity(self, account, amount);\\n    }\\n\\n    function calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 lpAmount,\\n        uint256 tokenIndex\\n    ) external view returns (uint256 amount) {\\n        (amount, ) = _calculateRemoveLiquidityOneToken(self, account, lpAmount, tokenIndex);\\n    }\\n\\n    /**\\n     * @notice Update the withdraw fee for `user`. If the user is currently\\n     * not providing liquidity in the pool, sets to default value. If not, recalculate\\n     * the starting withdraw fee based on the last deposit's time & amount relative\\n     * to the new deposit.\\n     *\\n     * @param self Swap struct to read from and write to\\n     * @param user address of the user depositing tokens\\n     * @param toMint amount of pool tokens to be minted\\n     */\\n    function updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) external {\\n        _updateUserWithdrawFee(self, user, toMint);\\n    }\\n\\n    /// INTERNAL FUNCTIONS\\n\\n    /**\\n     * Ramping A up or down, return A with precision of A_PRECISION\\n     */\\n    function _getAPrecise(SwapStorage storage self) internal view returns (uint256) {\\n        if (block.timestamp >= self.futureATime) {\\n            return self.futureA;\\n        }\\n\\n        if (self.futureA > self.initialA) {\\n            return self.initialA + ((self.futureA - self.initialA) * (block.timestamp - self.initialATime)) / (self.futureATime - self.initialATime);\\n        }\\n\\n        return self.initialA - ((self.initialA - self.futureA) * (block.timestamp - self.initialATime)) / (self.futureATime - self.initialATime);\\n    }\\n\\n    /**\\n     * normalized balances of each tokens.\\n     */\\n    function _xp(uint256[] memory balances, uint256[] memory rates) internal pure returns (uint256[] memory) {\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            rates[i] = (rates[i] * balances[i]);\\n        }\\n\\n        return rates;\\n    }\\n\\n    function _xp(SwapStorage storage self) internal view returns (uint256[] memory) {\\n        return _xp(self.balances, self.tokenMultipliers);\\n    }\\n\\n    /**\\n     * Calculate D for *NORMALIZED* balances of each tokens\\n     * @param xp normalized balances of token\\n     */\\n    function _getD(uint256[] memory xp, uint256 amp) internal pure returns (uint256) {\\n        uint256 nCoins = xp.length;\\n        uint256 sum = _sumOf(xp);\\n        if (sum == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev = 0;\\n        uint256 D = sum;\\n        uint256 Ann = amp * nCoins;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            uint256 D_P = D;\\n            for (uint256 j = 0; j < xp.length; j++) {\\n                D_P = (D_P * D) / (xp[j] * nCoins);\\n            }\\n            Dprev = D;\\n            D = (((Ann * sum) / A_PRECISION + D_P * nCoins) * D) / (((Ann - A_PRECISION) * D) / A_PRECISION + (nCoins + 1) * D_P);\\n            if (_distance(D, Dprev) <= 1) {\\n                return D;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    /**\\n     * Calculate D for *NORMALIZED* balances of each tokens\\n     * @param xp normalized balances of token\\n     */\\n    function _getInvariant(\\n        uint256[] memory xp,\\n        uint256 amp,\\n        bool roundUp\\n    ) internal pure returns (uint256) {\\n        uint256 nCoins = xp.length;\\n        uint256 sum = _sumOf(xp);\\n        if (sum == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev = 0;\\n        uint256 D = sum;\\n        uint256 Ann = amp * nCoins;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            uint256 D_P = D;\\n            for (uint256 j = 0; j < xp.length; j++) {\\n                D_P = div((D_P * D), (xp[j] * nCoins), roundUp);\\n            }\\n            Dprev = D;\\n            D = div(((div((Ann * sum), A_PRECISION, roundUp) + D_P * nCoins) * D), (div(((Ann - A_PRECISION) * D), A_PRECISION, !roundUp) + (nCoins + 1) * D_P), roundUp);\\n            if (_distance(D, Dprev) <= 1) {\\n                return D;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    /**\\n     * calculate new balance of when swap\\n     * Done by solving quadratic equation iteratively.\\n     *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     *  x_1**2 + b*x_1 = c\\n     *  x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     * @param inIndex index of token to swap in\\n     * @param outIndex index of token to swap out\\n     * @param inBalance new balance (normalized) of input token if the swap is successful\\n     * @return NORMALIZED balance of output token if the swap is successful\\n     */\\n    function _getY(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inBalance,\\n        uint256[] memory normalizedBalances\\n    ) internal view returns (uint256) {\\n        require(inIndex != outIndex, \\\"sameToken\\\");\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(inIndex < nCoins && outIndex < nCoins, \\\"indexOutOfRange\\\");\\n\\n        uint256 amp = _getAPrecise(self);\\n        uint256 Ann = amp * nCoins;\\n        uint256 D = _getD(normalizedBalances, amp); // calculate invariant\\n\\n        uint256 sum = 0; // sum of new balances except output token\\n        uint256 c = D;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == outIndex) {\\n                continue;\\n            }\\n\\n            uint256 x = i == inIndex ? inBalance : normalizedBalances[i];\\n            sum += x;\\n            c = (c * D) / (x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = sum + (D * A_PRECISION) / Ann;\\n\\n        uint256 lastY = 0;\\n        uint256 y = D;\\n\\n        for (uint256 index = 0; index < MAX_ITERATION; index++) {\\n            lastY = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(lastY, y) <= 1) {\\n                return y;\\n            }\\n        }\\n\\n        revert(\\\"yCalculationFailed\\\");\\n    }\\n\\n    // /**\\n    //  * calculate new balance of when swap\\n    //  * Done by solving quadratic equation iteratively.\\n    //  *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n    //  *  x_1**2 + b*x_1 = c\\n    //  *  x_1 = (x_1**2 + c) / (2*x_1 + b)\\n    //  * @param inIndex index of token to swap in\\n    //  * @param outIndex index of token to swap out\\n    //  * @param inBalance new balance (normalized) of input token if the swap is successful\\n    //  * @return NORMALIZED balance of output token if the swap is successful\\n    //  */\\n    // function _getY(\\n    //     SwapStorage storage self,\\n    //     uint256 inIndex,\\n    //     uint256 outIndex,\\n    //     uint256 inBalance,\\n    //     uint256[] memory normalizedBalances\\n    // ) internal view returns (uint256) {\\n    //     require(inIndex != outIndex, \\\"sameToken\\\");\\n    //     uint256 nCoins = self.pooledTokens.length;\\n    //     require(inIndex < nCoins && outIndex < nCoins, \\\"indexOutOfRange\\\");\\n\\n    //     uint256 amp = _getAPrecise(self);\\n    //     uint256 Ann = amp * nCoins;\\n    //     uint256 D = _getInvariant(normalizedBalances, amp, true); // calculate invariant\\n\\n    //     uint256 sum = 0; // sum of new balances except output token\\n    //     uint256 c = D;\\n    //     for (uint256 i = 0; i < nCoins; i++) {\\n    //         if (i == outIndex) {\\n    //             continue;\\n    //         }\\n\\n    //         uint256 x = i == inIndex ? inBalance : normalizedBalances[i];\\n    //         sum += x;\\n    //         c = divUp((c * D), (x * nCoins));\\n    //     }\\n\\n    //     c = divUp((c * D * A_PRECISION), (Ann * nCoins));\\n    //     uint256 b = sum + divDown((D * A_PRECISION), Ann);\\n\\n    //     uint256 lastY = 0;\\n    //     uint256 y = D;\\n\\n    //     for (uint256 index = 0; index < MAX_ITERATION; index++) {\\n    //         lastY = y;\\n    //         y = divUp((y * y + c), (2 * y + b - D));\\n    //         if (_distance(lastY, y) <= 1) {\\n    //             return y;\\n    //         }\\n    //     }\\n\\n    //     revert(\\\"yCalculationFailed\\\");\\n    // }\\n\\n    // /**\\n    //  * calculate new balance of when swap\\n    //  * Done by solving quadratic equation iteratively.\\n    //  *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n    //  *  x_1**2 + b*x_1 = c\\n    //  *  x_1 = (x_1**2 + c) / (2*x_1 + b)\\n    //  * @param inIndex index of token to swap in\\n    //  * @param outIndex index of token to swap out\\n    //  * @param outBalance new balance (normalized) of input token if the swap is successful\\n    //  * @return NORMALIZED balance of output token if the swap is successful\\n    //  */\\n    // function _getX(\\n    //     SwapStorage storage self,\\n    //     uint256 inIndex,\\n    //     uint256 outIndex,\\n    //     uint256 outBalance,\\n    //     uint256[] memory normalizedBalances\\n    // ) internal view returns (uint256) {\\n    //     require(inIndex != outIndex, \\\"sameToken\\\");\\n    //     uint256 nCoins = self.pooledTokens.length;\\n    //     require(inIndex < nCoins && outIndex < nCoins, \\\"indexOutOfRange\\\");\\n\\n    //     uint256 amp = _getAPrecise(self);\\n    //     uint256 Ann = amp * nCoins;\\n    //     uint256 D = _getInvariant(normalizedBalances, amp, true);\\n\\n    //     uint256 sum = 0; // sum of new balances except output token\\n    //     uint256 c = D;\\n    //     for (uint256 i = 0; i < nCoins; i++) {\\n    //         if (i == inIndex) {\\n    //             continue;\\n    //         }\\n\\n    //         uint256 y = i == outIndex ? outBalance : normalizedBalances[i];\\n    //         sum += y;\\n    //         c = divDown((c * D), (y * nCoins));\\n    //     }\\n\\n    //     c = divDown((c * D * A_PRECISION), (Ann * nCoins));\\n    //     uint256 b = sum + divUp((D * A_PRECISION), Ann);\\n\\n    //     uint256 lastX = 0;\\n    //     uint256 x = D;\\n\\n    //     for (uint256 index = 0; index < MAX_ITERATION; index++) {\\n    //         lastX = x;\\n    //         x = divDown((x * x + c), (2 * x + b - D));\\n    //         if (_distance(lastX, x) <= 1) {\\n    //             return x;\\n    //         }\\n    //     }\\n\\n    //     revert(\\\"xCalculationFailed\\\");\\n    // }\\n\\n    function _calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) internal view returns (uint256[] memory) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(amount <= totalSupply, \\\"Cannot exceed total supply\\\");\\n\\n        uint256 feeAdjustedAmount = (amount * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n\\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            amounts[i] = (self.balances[i] * (feeAdjustedAmount)) / (totalSupply);\\n        }\\n        return amounts;\\n    }\\n\\n    function _calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 tokenAmount,\\n        uint256 index\\n    ) internal view returns (uint256 dy, uint256 fee) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256[] memory xp = _xp(self);\\n        uint256 D0 = _getD(xp, amp);\\n        uint256 D1 = D0 - (tokenAmount * D0) / self.lpToken.totalSupply();\\n        uint256 newY = _getYD(self, amp, index, xp, D1);\\n        uint256[] memory reducedXP = xp;\\n        uint256 _fee = _feePerToken(self);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            uint256 expectedDx = 0;\\n            if (i == index) {\\n                expectedDx = (xp[i] * D1) / D0 - newY;\\n            } else {\\n                expectedDx = xp[i] - (xp[i] * D1) / D0;\\n            }\\n            reducedXP[i] -= (_fee * expectedDx) / FEE_DENOMINATOR;\\n        }\\n\\n        dy = reducedXP[index] - _getYD(self, amp, index, reducedXP, D1);\\n        dy = (dy - 1) / self.tokenMultipliers[index];\\n        fee = ((xp[index] - newY) / self.tokenMultipliers[index]) - dy;\\n        dy = (dy * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n    }\\n\\n    function _feePerToken(SwapStorage storage self) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        return (self.fee * nCoins) / (4 * (nCoins - 1));\\n    }\\n\\n    function _getYD(\\n        SwapStorage storage self,\\n        uint256 A,\\n        uint256 index,\\n        uint256[] memory xp,\\n        uint256 D\\n    ) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        assert(index < nCoins);\\n        uint256 Ann = A * nCoins;\\n        uint256 c = D;\\n        uint256 s = 0;\\n        uint256 _x = 0;\\n        uint256 yPrev = 0;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == index) {\\n                continue;\\n            }\\n            _x = xp[i];\\n            s += _x;\\n            c = (c * D) / (_x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = s + (D * A_PRECISION) / Ann;\\n        uint256 y = D;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(yPrev, y) <= 1) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    function _updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) internal {\\n        // If token is transferred to address 0 (or burned), don't update the fee.\\n        if (user == address(0)) {\\n            return;\\n        }\\n        if (self.defaultWithdrawFee == 0) {\\n            // If current fee is set to 0%, set multiplier to FEE_DENOMINATOR\\n            self.withdrawFeeMultiplier[user] = FEE_DENOMINATOR;\\n        } else {\\n            // Otherwise, calculate appropriate discount based on last deposit amount\\n            uint256 currentFee = _calculateCurrentWithdrawFee(self, user);\\n            uint256 currentBalance = self.lpToken.balanceOf(user);\\n\\n            // ((currentBalance * currentFee) + (toMint * defaultWithdrawFee)) * FEE_DENOMINATOR /\\n            // ((toMint + currentBalance) * defaultWithdrawFee)\\n            if ((toMint + currentBalance) * self.defaultWithdrawFee != 0) {\\n                self.withdrawFeeMultiplier[user] = (((currentBalance * currentFee) + (toMint * self.defaultWithdrawFee)) * (FEE_DENOMINATOR)) / ((toMint + currentBalance) * self.defaultWithdrawFee);\\n            }\\n        }\\n        self.depositTimestamp[user] = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Calculate the fee that is applied when the given user withdraws.\\n     * Withdraw fee decays linearly over 4 weeks.\\n     * @param user address you want to calculate withdraw fee of\\n     * @return current withdraw fee of the user\\n     */\\n    function _calculateCurrentWithdrawFee(SwapStorage storage self, address user) internal view returns (uint256) {\\n        uint256 endTime = self.depositTimestamp[user] + (4 weeks);\\n        if (endTime > block.timestamp) {\\n            uint256 timeLeftover = endTime - block.timestamp;\\n            return (self.defaultWithdrawFee * self.withdrawFeeMultiplier[user] * timeLeftover) / (4 weeks) / FEE_DENOMINATOR;\\n        }\\n        return 0;\\n    }\\n\\n    function _doTransferIn(IERC20 token, uint256 amount) internal returns (uint256) {\\n        uint256 priorBalance = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        return token.balanceOf(address(this)) - priorBalance;\\n    }\\n\\n    function _sumOf(uint256[] memory x) internal pure returns (uint256 sum) {\\n        sum = 0;\\n        for (uint256 i = 0; i < x.length; i++) {\\n            sum += x[i];\\n        }\\n    }\\n\\n    function _distance(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x - y : y - x;\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        bool roundUp\\n    ) internal pure returns (uint256) {\\n        return roundUp ? divUp(a, b) : divDown(a, b);\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return 1 + (a - 1) / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcba986624de2e0d3647ec57ac037303f2954ff0e5fc6a31590d3b4879ab6df70\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb7230835a4efbbbebcb5371d121977e859388b33f3ee5d9a7a44fc4de8d6b970\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0xc92c369d1363b5cbec9337ea8921578bd4acd272af2ac9eaf7227a17689f29e9\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event TokenExchange(address indexed buyer, uint256 soldId, uint256 tokensSold, uint256 boughtId, uint256 tokensBought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0xe47d45ba36e1a5e9e044ebb0815b1c4ced235dc5c7b38d30f9fe6d3768d5749f\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xd5f49ed9e5ab4471a4c25f3730f50ed4c29a9bfa9637306f227c2a59a18bbe81\",\"license\":\"MIT\"},\"contracts/libraries/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ERC20/IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7bf66daeb140a455a28ab3c1e03f4eebb5948ccf6000dbb700f6c57bba03a9d4\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, msg.sender).sub(amount, Errors.ERC20_BURN_EXCEEDS_ALLOWANCE);\\n\\n        _approve(account, msg.sender, decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x82fe5fb385cfe74b417e3aaace26a64aa5190b36ea0716ad441484fb444087f8\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xd978150fb13e68cd0b2b4b237d65306f55397437127bea72622d5cd4244ba92b\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        RequiemErrors._require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\n    }\\n}\\n\",\"keccak256\":\"0xa39a2c090cd9727eeca0658c5a3c382f9dcfe581f4d323bb388776c3237c72fd\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        RequiemErrors._require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        uint256 errorCode\\n    ) internal pure returns (uint256) {\\n        RequiemErrors._require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc82c3356797b0e56c4ac77d5554343f66b3b436a18537bdb146e10921605d729\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x37ebaca1c58a9daf307229c45122f12d603a95d1d92c1a8e7648b1910755bfa0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/tokens/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\nimport \\\"../libraries/ERC20Burnable.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../interfaces/IRequiemStableSwap.sol\\\";\\n\\ncontract LPToken is Ownable, ERC20Burnable {\\n    IRequiemStableSwap public swap;\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n        swap = IRequiemStableSwap(msg.sender);\\n    }\\n\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"zeroMintAmount\\\");\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n     * minting and burning. This ensures that swap.updateUserWithdrawFees are called everytime.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20) {\\n        super._beforeTokenTransfer(from, to, amount);\\n        swap.updateUserWithdrawFee(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2f4e27227aca77ab9543f1f7ea0a45e5b14b62177b414e47f18248c49613aac3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6149af61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101815760003560e01c8063b52e146f116100e2578063c8344c0611610096578063d73792a911610070578063d73792a91461035d578063e2eba89b14610369578063fa5635971461037c57600080fd5b8063c8344c0614610322578063d011f91814610342578063d36604ac1461034a57600080fd5b8063c188e4be116100c7578063c188e4be146102cb578063c20aace8146102ed578063c685696c146102f557600080fd5b8063b52e146f146102a5578063ba2998d9146102b857600080fd5b80637a6cba3c11610139578063a30355851161011e578063a30355851461025f578063aa054aee14610272578063ad30093f1461028557600080fd5b80637a6cba3c1461021f5780638e6da7b61461023f57600080fd5b80631e7e95d31161016a5780631e7e95d3146101cc5780632bfe30d0146101df5780632fcdda4f146101ff57600080fd5b80630da350f614610186578063159763bb146101b9575b600080fd5b81801561019257600080fd5b506101a66101a136600461425f565b61038f565b6040519081526020015b60405180910390f35b6101a66101c73660046142b0565b610787565b6101a66101da3660046143e4565b61079f565b8180156101eb57600080fd5b506101a66101fa36600461443f565b610b0c565b81801561020b57600080fd5b506101a661021a36600461425f565b610f2d565b81801561022b57600080fd5b506101a661023a366004614471565b6112fd565b81801561024b57600080fd5b506101a661025a36600461425f565b611a41565b6101a661026d3660046144c1565b611c71565b6101a661028036600461443f565b611c82565b81801561029157600080fd5b506101a66102a036600461425f565b611d7b565b6101a66102b33660046144c1565b612054565b6101a66102c636600461443f565b61206b565b8180156102d757600080fd5b506102eb6102e63660046144da565b61215c565b005b6101a6601281565b81801561030157600080fd5b5061031561031036600461450f565b61216c565b6040516101b0919061455f565b81801561032e57600080fd5b506101a661033d366004614471565b612481565b6101a6606481565b6101a66103583660046144c1565b612b18565b6101a66402540be40081565b6101a66103773660046145a3565b612bf7565b61031561038a3660046144da565b612d24565b60008660000186815481106103a6576103a66145c5565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561041d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044191906145f4565b84886003018881548110610457576104576145c5565b906000526020600020015461046c919061463c565b11156104bf5760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f494e505554000000000000000000000000000060448201526064015b60405180910390fd5b60006104ca88612d31565b905060008860020188815481106104e3576104e36145c5565b9060005260206000200154866104f99190614654565b82898151811061050b5761050b6145c5565b602002602001015161051d919061463c565b9050600061052e8a8a8a8587612ddf565b90506000600182858b81518110610547576105476145c5565b60200260200101516105599190614691565b6105639190614691565b905060006402540be4008c600401548361057d9190614654565b61058791906146a8565b90508b6002018a8154811061059e5761059e6145c5565b906000526020600020015481836105b59190614691565b6105bf91906146a8565b9150878210156106115760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b60008c6002018b81548110610628576106286145c5565b90600052602060002001546402540be4008e60050154846106499190614654565b61065391906146a8565b61065d91906146a8565b9050898d6003018d81548110610675576106756145c5565b90600052602060002001600082825461068e919061463c565b9091555061069e9050818461463c565b8d6003018c815481106106b3576106b36145c5565b9060005260206000200160008282546106cc9190614691565b9250508190555061071688848f6000018e815481106106ed576106ed6145c5565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169190613069565b604080518d8152602081018c90529081018c90526060810184905273ffffffffffffffffffffffffffffffffffffffff8916907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a250909b9a5050505050505050505050565b60006107958585858561313d565b5095945050505050565b825482516000919081146107f55760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964416d6f756e74734c656e67746800000000000000000000000060448201526064016104b6565b6000610800866134a2565b9050600061081661081088612d31565b8361357b565b905060008760030180548060200260200160405190810160405280929190818152602001828054801561086857602002820191906000526020600020905b815481526020019060010190808311610854575b5050505050905060005b8481101561091e5786156108c857878181518110610892576108926145c5565b60200260200101518282815181106108ac576108ac6145c5565b602002602001018181516108c0919061463c565b90525061090c565b8781815181106108da576108da6145c5565b60200260200101518282815181106108f4576108f46145c5565b602002602001018181516109089190614691565b9052505b80610916816146e3565b915050610872565b506000610986610980838b60020180548060200260200160405190810160405280929190818152602001828054801561097657602002820191906000526020600020905b815481526020019060010190808311610962575b5050505050613717565b8561357b565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d91906145f4565b905080610a3157509450610b059350505050565b600088610a4757610a428386614691565b610a51565b610a518584614691565b9050848b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae791906145f4565b610af19083614654565b610afb91906146a8565b9750505050505050505b9392505050565b6000808560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba291906145f4565b905060008111610bf45760405162461bcd60e51b815260206004820152600f60248201527f746f74616c537570706c79203d2030000000000000000000000000000000000060448201526064016104b6565b855460018701546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8a91906145f4565b861115610cd95760405162461bcd60e51b815260206004820152600960248201527f3e2062616c616e6365000000000000000000000000000000000000000000000060448201526064016104b6565b81861115610d295760405162461bcd60e51b815260206004820152600d60248201527f3e20746f74616c537570706c790000000000000000000000000000000000000060448201526064016104b6565b808510610d785760405162461bcd60e51b815260206004820152600d60248201527f746f6b656e4e6f74466f756e640000000000000000000000000000000000000060448201526064016104b6565b600080610d8789338a8a61313d565b9250905085811015610ddb5760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b6402540be400896005015483610df19190614654565b610dfb91906146a8565b610e05908261463c565b896003018881548110610e1a57610e1a6145c5565b906000526020600020016000828254610e339190614691565b909155505060018901546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018a905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015610eac57600080fd5b505af1158015610ec0573d6000803e3d6000fd5b50505050610ede33828b6000018a815481106106ed576106ed6145c5565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b6000866000018681548110610f4457610f446145c5565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdf91906145f4565b84886003018881548110610ff557610ff56145c5565b906000526020600020015461100a919061463c565b11156110585760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f494e505554000000000000000000000000000060448201526064016104b6565b600061108561106c6402540be40086614654565b60048a0154611080906402540be400614691565b61379a565b90506000611092896134a2565b905060006110a26108108b612d31565b905060008a6003018054806020026020016040519081016040528092919081815260200182805480156110f457602002820191906000526020600020905b8154815260200190600101908083116110e0575b5050505050905087818b8151811061110e5761110e6145c5565b60200260200101818151611122919061463c565b9052508051849082908b90811061113b5761113b6145c5565b6020026020010181815161114f9190614691565b9150818152505060006111b5610980838e6002018054806020026020016040519081016040528092919081815260200182805480156109765760200282019190600052602060002090815481526020019060010190808311610962575050505050613717565b9050828110156112075760405162461bcd60e51b815260206004820152600960248201527f494e56415249414e54000000000000000000000000000000000000000000000060448201526064016104b6565b888c6003018c8154811061121d5761121d6145c5565b906000526020600020016000828254611236919061463c565b92505081905550848c6003018b81548110611253576112536145c5565b90600052602060002001600082825461126c9190614691565b9250508190555061128d87868e6000018d815481106106ed576106ed6145c5565b604080518c8152602081018b90529081018b90526060810186905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a250959a9950505050505050505050565b825482516000919081146113535760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964416d6f756e74734c656e67746800000000000000000000000060448201526064016104b6565b60008167ffffffffffffffff81111561136e5761136e6142eb565b604051908082528060200260200182016040528015611397578160200160208202803683370190505b50905060006113a5876137f3565b905060008760010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143c91906145f4565b90506000611449896134a2565b905060008215611505576115026108108b6003018054806020026020016040519081016040528092919081815260200182805480156114a757602002820191906000526020600020905b815481526020019060010190808311611493575b50505050508c6002018054806020026020016040519081016040528092919081815260200182805480156109765760200282019190600052602060002090815481526020019060010190808311610962575050505050613717565b90505b60008a60030180548060200260200160405190810160405280929190818152602001828054801561155557602002820191906000526020600020905b815481526020019060010190808311611541575b5050505050905060005b8781101561167257846115d55760008b8281518110611580576115806145c5565b6020026020010151116115d55760405162461bcd60e51b815260206004820152601e60248201527f696e697469616c4465706f73697452657175697265416c6c546f6b656e73000060448201526064016104b6565b6116378c60000182815481106115ed576115ed6145c5565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c838151811061162a5761162a6145c5565b6020026020010151613828565b828281518110611649576116496145c5565b6020026020010181815161165d919061463c565b9052508061166a816146e3565b91505061155f565b5060006116d2610980838e6002018054806020026020016040519081016040528092919081815260200182805480156109765760200282019190600052602060002090815481526020019060010190808311610962575050505050613717565b90508281116116e3576116e361471c565b846117065781516116fd9060038e019060208501906141d6565b50809850611902565b6000805b898110156118795761176a858f600301838154811061172b5761172b6145c5565b9060005260206000200154856117419190614654565b61174b91906146a8565b85838151811061175d5761175d6145c5565b6020026020010151613979565b91506402540be40061177c838a614654565b61178691906146a8565b898281518110611798576117986145c5565b6020026020010181815250506402540be4008e600501548a83815181106117c1576117c16145c5565b60200260200101516117d39190614654565b6117dd91906146a8565b8482815181106117ef576117ef6145c5565b60200260200101516118019190614691565b8e6003018281548110611816576118166145c5565b9060005260206000200181905550888181518110611836576118366145c5565b6020026020010151848281518110611850576118506145c5565b602002602001018181516118649190614691565b90525080611871816146e3565b91505061170a565b506118dd6118d7848f6002018054806020026020016040519081016040528092919081815260200182805480156109765760200282019190600052602060002090815481526020019060010190808311610962575050505050613717565b8661357b565b9150836118ea8184614691565b6118f49088614654565b6118fe91906146a8565b9950505b898910156119525760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b60018c01546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906340c10f1990604401600060405180830381600087803b1580156119c657600080fd5b505af11580156119da573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d604051611a2a9493929190614786565b60405180910390a250505050505050509392505050565b600080611a4d88612d31565b90506000886002018781548110611a6657611a666145c5565b906000526020600020015486611a7c9190614654565b828881518110611a8e57611a8e6145c5565b6020026020010151611aa09190614691565b90506000611ab18a898b8587612ddf565b90506000600182858c81518110611aca57611aca6145c5565b6020026020010151611adc9190614691565b611ae69190614691565b905060006402540be4008c6004015483611b009190614654565b611b0a91906146a8565b90508b6002018b81548110611b2157611b216145c5565b90600052602060002001548183611b389190614691565b611b4291906146a8565b915087821015611b945760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b60008c6002018b81548110611bab57611bab6145c5565b90600052602060002001546402540be4008e6005015484611bcc9190614654565b611bd691906146a8565b611be091906146a8565b9050611bec818461463c565b8d6003018d81548110611c0157611c016145c5565b906000526020600020016000828254611c1a9190614691565b92505081905550898d6003018c81548110611c3757611c376145c5565b906000526020600020016000828254611c509190614691565b9250508190555061071688848f6000018f815481106106ed576106ed6145c5565b6000611c7c826134a2565b92915050565b600080611c8e86612d31565b90506000611cb8611ca46402540be40086614654565b6004890154611080906402540be400614691565b90506000876002018681548110611cd157611cd16145c5565b906000526020600020015482611ce79190614654565b838781518110611cf957611cf96145c5565b6020026020010151611d0b9190614691565b90506000611d1c89888a8588612ddf565b90506000611d6d858a81518110611d3557611d356145c5565b602002602001015183611d489190614691565b8b6002018b81548110611d5d57611d5d6145c5565b906000526020600020015461399b565b9a9950505050505050505050565b600080876000018781548110611d9357611d936145c5565b600091825260208220015473ffffffffffffffffffffffffffffffffffffffff169150611dbf89612d31565b9050611dcb8287613828565b95506000611e2a8a8a8a8d6002018d81548110611dea57611dea6145c5565b90600052602060002001548b611e009190614654565b868e81518110611e1257611e126145c5565b6020026020010151611e24919061463c565b86612ddf565b90506000600182848b81518110611e4357611e436145c5565b6020026020010151611e559190614691565b611e5f9190614691565b905060006402540be4008c6004015483611e799190614654565b611e8391906146a8565b90508b6002018a81548110611e9a57611e9a6145c5565b90600052602060002001548183611eb19190614691565b611ebb91906146a8565b915087821015611f0d5760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b888c6003018c81548110611f2357611f236145c5565b906000526020600020016000828254611f3c919061463c565b909155505060028c0180548b908110611f5757611f576145c5565b90600052602060002001546402540be4008d6005015483611f789190614654565b611f8291906146a8565b611f8c91906146a8565b611f96908361463c565b8c6003018b81548110611fab57611fab6145c5565b906000526020600020016000828254611fc49190614691565b92505081905550611fe587838e6000018d815481106106ed576106ed6145c5565b604080518c8152602081018b90529081018b90526060810183905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a2509a9950505050505050505050565b60006064612061836134a2565b611c7c91906146a8565b60008061207786612d31565b90506000866002018681548110612090576120906145c5565b9060005260206000200154846120a69190614654565b8287815181106120b8576120b86145c5565b60200260200101516120ca919061463c565b905060006120db8888888587612ddf565b9050600061212c828589815181106120f5576120f56145c5565b60200260200101516121079190614691565b8a600201898154811061211c5761211c6145c5565b906000526020600020015461379a565b905060006402540be400828b600401546121469190614654565b61215091906146a8565b9050611d6d8183614691565b612167838383613a1f565b505050565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220391906145f4565b90508084111561221257600080fd5b845460008167ffffffffffffffff81111561222f5761222f6142eb565b604051908082528060200260200182016040528015612258578160200160208202803683370190505b509050612266873388613bf5565b935060005b84518110156123a257858181518110612286576122866145c5565b60200260200101518582815181106122a0576122a06145c5565b602002602001015110156122f65760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b848181518110612308576123086145c5565b6020026020010151886003018281548110612325576123256145c5565b906000526020600020015461233a9190614691565b88600301828154811061234f5761234f6145c5565b906000526020600020018190555061239033868381518110612373576123736145c5565b60200260200101518a60000184815481106106ed576106ed6145c5565b8061239a816146e3565b91505061226b565b5060018701546040517f79cc67900000000000000000000000000000000000000000000000000000000081523360048201526024810188905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b15801561241757600080fd5b505af115801561242b573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea9150869050836124608a88614691565b60405161246f939291906147bf565b60405180910390a25050509392505050565b825482516000919081146124d75760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964416d6f756e74734c656e67746800000000000000000000000060448201526064016104b6565b6001850154604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916318160ddd9160048083019260209291908290030181865afa158015612549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256d91906145f4565b9050806125bc5760405162461bcd60e51b815260206004820152600f60248201527f746f74616c537570706c79203d2030000000000000000000000000000000000060448201526064016104b6565b60006125c7876137f3565b905060006125d4886134a2565b905060008860030180548060200260200160405190810160405280929190818152602001828054801561262657602002820191906000526020600020905b815481526020019060010190808311612612575b50505050509050600061264161263b8b612d31565b8461357b565b905060005b868110156126a357898181518110612660576126606145c5565b602002602001015183828151811061267a5761267a6145c5565b6020026020010181815161268e9190614691565b9052508061269b816146e3565b915050612646565b506000612703610980848d6002018054806020026020016040519081016040528092919081815260200182805480156109765760200282019190600052602060002090815481526020019060010190808311610962575050505050613717565b905060008767ffffffffffffffff811115612720576127206142eb565b604051908082528060200260200182016040528015612749578160200160208202803683370190505b50905060005b888110156128c9576000848e600301838154811061276f5761276f6145c5565b9060005260206000200154856127859190614654565b61278f91906146a8565b905060006127b68784815181106127a8576127a86145c5565b602002602001015183613979565b90506402540be4006127c8828b614654565b6127d291906146a8565b8484815181106127e4576127e46145c5565b6020026020010181815250506402540be4008f6005015485858151811061280d5761280d6145c5565b602002602001015161281f9190614654565b61282991906146a8565b87848151811061283b5761283b6145c5565b602002602001015161284d9190614691565b8f6003018481548110612862576128626145c5565b9060005260206000200181905550838381518110612882576128826145c5565b602002602001015187848151811061289c5761289c6145c5565b602002602001018181516128b09190614691565b9052508291506128c19050816146e3565b91505061274f565b506129276118d7858e6002018054806020026020016040519081016040528092919081815260200182805480156109765760200282019190600052602060002090815481526020019060010190808311610962575050505050613717565b915082876129358483614691565b61293f9190614654565b61294991906146a8565b98506000891161295b5761295b61471c565b6129658c33613ddb565b612974906402540be400614691565b61297f8a600161463c565b6129899190614654565b9850898911156129db5760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b60018c01546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015612a4f57600080fd5b505af1158015612a63573d6000803e3d6000fd5b5050505060005b88811015612ad8578b8181518110612a8457612a846145c5565b6020026020010151600014612ac657612ac6338d8381518110612aa957612aa96145c5565b60200260200101518f60000184815481106106ed576106ed6145c5565b80612ad0816146e3565b915050612a6a565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c8385612b088e8d614691565b604051611a2a9493929190614786565b600080612b35612b2784612d31565b612b30856134a2565b61357b565b905060008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bcc91906145f4565b905080612bdb6012600a614915565b612be59084614654565b612bef91906146a8565b949350505050565b81546000908210612c4a5760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e6765000000000000000000000000000000000060448201526064016104b6565b826003018281548110612c5f57612c5f6145c5565b9060005260206000200154836000018381548110612c7f57612c7f6145c5565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1a91906145f4565b610b059190614691565b6060612bef848484613bf5565b6060611c7c82600301805480602002602001604051908101604052809291908181526020018280548015612d8457602002820191906000526020600020905b815481526020019060010190808311612d70575b5050505050836002018054806020026020016040519081016040528092919081815260200182805480156109765760200282019190600052602060002090815481526020019060010190808311610962575050505050613717565b600083851415612e315760405162461bcd60e51b815260206004820152600960248201527f73616d65546f6b656e000000000000000000000000000000000000000000000060448201526064016104b6565b85548086108015612e4157508085105b612e8d5760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e6765000000000000000000000000000000000060448201526064016104b6565b6000612e98886134a2565b90506000612ea68383614654565b90506000612eb4868461357b565b9050600081815b86811015612f3c578a811415612ed057612f2a565b60008c8214612ef857898281518110612eeb57612eeb6145c5565b6020026020010151612efa565b8a5b9050612f06818561463c565b9350612f128882614654565b612f1c8685614654565b612f2691906146a8565b9250505b80612f34816146e3565b915050612ebb565b50612f478685614654565b6064612f538584614654565b612f5d9190614654565b612f6791906146a8565b9050600084612f77606486614654565b612f8191906146a8565b612f8b908461463c565b9050600084815b610100811015613017578192508684836002612fae9190614654565b612fb8919061463c565b612fc29190614691565b85612fcd8480614654565b612fd7919061463c565b612fe191906146a8565b91506001612fef8484613979565b1161300557509850613060975050505050505050565b8061300f816146e3565b915050612f92565b5060405162461bcd60e51b815260206004820152601260248201527f7943616c63756c6174696f6e4661696c6564000000000000000000000000000060448201526064016104b6565b95945050505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526121679084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613ea1565b8354600090819083106131925760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e6765000000000000000000000000000000000060448201526064016104b6565b600061319d876134a2565b905060006131aa88612d31565b905060006131b8828461357b565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561322b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061324f91906145f4565b613259838a614654565b61326391906146a8565b61326d9083614691565b9050600061327e8b868a8786613f53565b905083600061328c8d6137f3565b905060005b8d548110156133945760008b8214156132e6578487878a85815181106132b9576132b96145c5565b60200260200101516132cb9190614654565b6132d591906146a8565b6132df9190614691565b905061333d565b86868984815181106132fa576132fa6145c5565b602002602001015161330c9190614654565b61331691906146a8565b888381518110613328576133286145c5565b602002602001015161333a9190614691565b90505b6402540be40061334d8285614654565b61335791906146a8565b848381518110613369576133696145c5565b6020026020010181815161337d9190614691565b90525081905061338c816146e3565b915050613291565b506133a28d888c8588613f53565b828b815181106133b4576133b46145c5565b60200260200101516133c69190614691565b98508c6002018a815481106133dd576133dd6145c5565b906000526020600020015460018a6133f59190614691565b6133ff91906146a8565b9850888d6002018b81548110613417576134176145c5565b906000526020600020015484888d81518110613435576134356145c5565b60200260200101516134479190614691565b61345191906146a8565b61345b9190614691565b97506402540be40061346d8e8e613ddb565b61347c906402540be400614691565b613486908b614654565b61349091906146a8565b98505050505050505094509492505050565b6000816009015442106134b757506007015490565b81600601548260070154111561352157816008015482600901546134db9190614691565b60088301546134ea9042614691565b836006015484600701546134fe9190614691565b6135089190614654565b61351291906146a8565b8260060154611c7c919061463c565b816008015482600901546135359190614691565b60088301546135449042614691565b836007015484600601546135589190614691565b6135629190614654565b61356c91906146a8565b8260060154611c7c9190614691565b81516000908161358a856140c7565b90508061359c57600092505050611c7c565b600081816135aa8588614654565b905060005b6101008110156136ce578260005b8a5181101561361357878b82815181106135d9576135d96145c5565b60200260200101516135eb9190614654565b6135f58684614654565b6135ff91906146a8565b91508061360b816146e3565b9150506135bd565b5083945080876001613625919061463c565b61362f9190614654565b60648561363c8287614691565b6136469190614654565b61365091906146a8565b61365a919061463c565b846136658984614654565b60646136718a88614654565b61367b91906146a8565b613685919061463c565b61368f9190614654565b61369991906146a8565b935060016136a78587613979565b116136bb5783975050505050505050611c7c565b50806136c6816146e3565b9150506135af565b5060405162461bcd60e51b815260206004820152601a60248201527f696e76617269616e7443616c63756c6174696f6e4661696c656400000000000060448201526064016104b6565b606060005b835181101561379257838181518110613737576137376145c5565b6020026020010151838281518110613751576137516145c5565b60200260200101516137639190614654565b838281518110613775576137756145c5565b60209081029190910101528061378a816146e3565b91505061371c565b509092915050565b6000816137e95760405162461bcd60e51b815260206004820152600d60248201527f5a45524f5f4449564953494f4e0000000000000000000000000000000000000060448201526064016104b6565b610b0582846146a8565b8054600090613803600182614691565b61380e906004614654565b81846004015461381e9190614654565b610b0591906146a8565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015613897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138bb91906145f4565b90506138df73ffffffffffffffffffffffffffffffffffffffff8516333086614113565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa15801561394b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061396f91906145f4565b612bef9190614691565b60008183116139915761398c8383614691565b610b05565b610b058284614691565b6000816139ea5760405162461bcd60e51b815260206004820152600d60248201527f5a45524f5f4449564953494f4e0000000000000000000000000000000000000060448201526064016104b6565b826139f757506000611c7c565b81613a03600185614691565b613a0d91906146a8565b613a1890600161463c565b9050611c7c565b73ffffffffffffffffffffffffffffffffffffffff8216613a3f57505050565b600a830154613a7c5773ffffffffffffffffffffffffffffffffffffffff82166000908152600c8401602052604090206402540be4009055613bc8565b6000613a888484613ddb565b60018501546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152929350600092909116906370a0823190602401602060405180830381865afa158015613b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b2491906145f4565b600a860154909150613b36828561463c565b613b409190614654565b15613bc557600a850154613b54828561463c565b613b5e9190614654565b6402540be40086600a015485613b749190614654565b613b7e8585614654565b613b88919061463c565b613b929190614654565b613b9c91906146a8565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600c870160205260409020555b50505b5073ffffffffffffffffffffffffffffffffffffffff166000908152600b90910160205260409020429055565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c8c91906145f4565b905080831115613cde5760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742065786365656420746f74616c20737570706c7900000000000060448201526064016104b6565b60006402540be400613cf08787613ddb565b613cff906402540be400614691565b613d099086614654565b613d1391906146a8565b865490915060009067ffffffffffffffff811115613d3357613d336142eb565b604051908082528060200260200182016040528015613d5c578160200160208202803683370190505b50905060005b8754811015613dd0578383896003018381548110613d8257613d826145c5565b9060005260206000200154613d979190614654565b613da191906146a8565b828281518110613db357613db36145c5565b602090810291909101015280613dc8816146e3565b915050613d62565b509695505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600b830160205260408120548190613e12906224ea0061463c565b905042811115613e97576000613e284283614691565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600c87016020526040902054600a8701549192506402540be400916224ea00918491613e709190614654565b613e7a9190614654565b613e8491906146a8565b613e8e91906146a8565b92505050611c7c565b5060009392505050565b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051613ec99190614921565b6000604051808303816000865af19150503d8060008114613f06576040519150601f19603f3d011682016040523d82523d6000602084013e613f0b565b606091505b50915091506000821415613f23573d6000803e3d6000fd5b613f4d815160001480613f45575081806020019051810190613f45919061495c565b6101a2614171565b50505050565b8454600090808510613f6757613f6761471c565b6000613f738288614654565b90508360008080805b86811015613fee578a811415613f9157613fdc565b898181518110613fa357613fa36145c5565b602002602001015192508284613fb9919061463c565b9350613fc58784614654565b613fcf8a87614654565b613fd991906146a8565b94505b80613fe6816146e3565b915050613f7c565b50613ff98686614654565b60646140058a87614654565b61400f9190614654565b61401991906146a8565b935060008561402960648b614654565b61403391906146a8565b61403d908561463c565b90508860005b6101008110156136ce578193508a8383600261405f9190614654565b614069919061463c565b6140739190614691565b8761407e8480614654565b614088919061463c565b61409291906146a8565b915060016140a08584613979565b116140b5575097506130609650505050505050565b806140bf816146e3565b915050614043565b6000805b825181101561410d578281815181106140e6576140e66145c5565b6020026020010151826140f9919061463c565b915080614105816146e3565b9150506140cb565b50919050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052613f4d9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016130bb565b8161417f5761417f81614183565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b828054828255906000526020600020908101928215614211579160200282015b828111156142115782518255916020019190600101906141f6565b5061421d929150614221565b5090565b5b8082111561421d5760008155600101614222565b803573ffffffffffffffffffffffffffffffffffffffff8116811461425a57600080fd5b919050565b60008060008060008060c0878903121561427857600080fd5b86359550602087013594506040870135935060608701359250608087013591506142a460a08801614236565b90509295509295509295565b600080600080608085870312156142c657600080fd5b843593506142d660208601614236565b93969395505050506040820135916060013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261432b57600080fd5b8135602067ffffffffffffffff80831115614348576143486142eb565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110848211171561438b5761438b6142eb565b6040529384528581018301938381019250878511156143a957600080fd5b83870191505b848210156143c8578135835291830191908301906143af565b979650505050505050565b80151581146143e157600080fd5b50565b6000806000606084860312156143f957600080fd5b83359250602084013567ffffffffffffffff81111561441757600080fd5b6144238682870161431a565b9250506040840135614434816143d3565b809150509250925092565b6000806000806080858703121561445557600080fd5b5050823594602084013594506040840135936060013592509050565b60008060006060848603121561448657600080fd5b83359250602084013567ffffffffffffffff8111156144a457600080fd5b6144b08682870161431a565b925050604084013590509250925092565b6000602082840312156144d357600080fd5b5035919050565b6000806000606084860312156144ef57600080fd5b833592506144ff60208501614236565b9150604084013590509250925092565b60008060006060848603121561452457600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561454957600080fd5b6145558682870161431a565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156145975783518352928401929184019160010161457b565b50909695505050505050565b600080604083850312156145b657600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561460657600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561464f5761464f61460d565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561468c5761468c61460d565b500290565b6000828210156146a3576146a361460d565b500390565b6000826146de577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156147155761471561460d565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600081518084526020808501945080840160005b8381101561477b5781518752958201959082019060010161475f565b509495945050505050565b608081526000614799608083018761474b565b82810360208401526147ab818761474b565b604084019590955250506060015292915050565b6060815260006147d2606083018661474b565b82810360208401526147e4818661474b565b915050826040830152949350505050565b600181815b8085111561484e57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156148345761483461460d565b8085161561484157918102915b93841c93908002906147fa565b509250929050565b60008261486557506001611c7c565b8161487257506000611c7c565b81600181146148885760028114614892576148ae565b6001915050611c7c565b60ff8411156148a3576148a361460d565b50506001821b611c7c565b5060208310610133831016604e8410600b84101617156148d1575081810a611c7c565b6148db83836147f5565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561490d5761490d61460d565b029392505050565b6000610b058383614856565b6000825160005b818110156149425760208186018101518583015201614928565b81811115614951576000828501525b509190910192915050565b60006020828403121561496e57600080fd5b8151610b05816143d356fea264697066735822122011456a8f6b2adbbd7159f4ddd0b6c45e19ea506995d34e7bf483b1a5687d47fd64736f6c634300080a0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101815760003560e01c8063b52e146f116100e2578063c8344c0611610096578063d73792a911610070578063d73792a91461035d578063e2eba89b14610369578063fa5635971461037c57600080fd5b8063c8344c0614610322578063d011f91814610342578063d36604ac1461034a57600080fd5b8063c188e4be116100c7578063c188e4be146102cb578063c20aace8146102ed578063c685696c146102f557600080fd5b8063b52e146f146102a5578063ba2998d9146102b857600080fd5b80637a6cba3c11610139578063a30355851161011e578063a30355851461025f578063aa054aee14610272578063ad30093f1461028557600080fd5b80637a6cba3c1461021f5780638e6da7b61461023f57600080fd5b80631e7e95d31161016a5780631e7e95d3146101cc5780632bfe30d0146101df5780632fcdda4f146101ff57600080fd5b80630da350f614610186578063159763bb146101b9575b600080fd5b81801561019257600080fd5b506101a66101a136600461425f565b61038f565b6040519081526020015b60405180910390f35b6101a66101c73660046142b0565b610787565b6101a66101da3660046143e4565b61079f565b8180156101eb57600080fd5b506101a66101fa36600461443f565b610b0c565b81801561020b57600080fd5b506101a661021a36600461425f565b610f2d565b81801561022b57600080fd5b506101a661023a366004614471565b6112fd565b81801561024b57600080fd5b506101a661025a36600461425f565b611a41565b6101a661026d3660046144c1565b611c71565b6101a661028036600461443f565b611c82565b81801561029157600080fd5b506101a66102a036600461425f565b611d7b565b6101a66102b33660046144c1565b612054565b6101a66102c636600461443f565b61206b565b8180156102d757600080fd5b506102eb6102e63660046144da565b61215c565b005b6101a6601281565b81801561030157600080fd5b5061031561031036600461450f565b61216c565b6040516101b0919061455f565b81801561032e57600080fd5b506101a661033d366004614471565b612481565b6101a6606481565b6101a66103583660046144c1565b612b18565b6101a66402540be40081565b6101a66103773660046145a3565b612bf7565b61031561038a3660046144da565b612d24565b60008660000186815481106103a6576103a66145c5565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561041d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044191906145f4565b84886003018881548110610457576104576145c5565b906000526020600020015461046c919061463c565b11156104bf5760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f494e505554000000000000000000000000000060448201526064015b60405180910390fd5b60006104ca88612d31565b905060008860020188815481106104e3576104e36145c5565b9060005260206000200154866104f99190614654565b82898151811061050b5761050b6145c5565b602002602001015161051d919061463c565b9050600061052e8a8a8a8587612ddf565b90506000600182858b81518110610547576105476145c5565b60200260200101516105599190614691565b6105639190614691565b905060006402540be4008c600401548361057d9190614654565b61058791906146a8565b90508b6002018a8154811061059e5761059e6145c5565b906000526020600020015481836105b59190614691565b6105bf91906146a8565b9150878210156106115760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b60008c6002018b81548110610628576106286145c5565b90600052602060002001546402540be4008e60050154846106499190614654565b61065391906146a8565b61065d91906146a8565b9050898d6003018d81548110610675576106756145c5565b90600052602060002001600082825461068e919061463c565b9091555061069e9050818461463c565b8d6003018c815481106106b3576106b36145c5565b9060005260206000200160008282546106cc9190614691565b9250508190555061071688848f6000018e815481106106ed576106ed6145c5565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169190613069565b604080518d8152602081018c90529081018c90526060810184905273ffffffffffffffffffffffffffffffffffffffff8916907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a250909b9a5050505050505050505050565b60006107958585858561313d565b5095945050505050565b825482516000919081146107f55760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964416d6f756e74734c656e67746800000000000000000000000060448201526064016104b6565b6000610800866134a2565b9050600061081661081088612d31565b8361357b565b905060008760030180548060200260200160405190810160405280929190818152602001828054801561086857602002820191906000526020600020905b815481526020019060010190808311610854575b5050505050905060005b8481101561091e5786156108c857878181518110610892576108926145c5565b60200260200101518282815181106108ac576108ac6145c5565b602002602001018181516108c0919061463c565b90525061090c565b8781815181106108da576108da6145c5565b60200260200101518282815181106108f4576108f46145c5565b602002602001018181516109089190614691565b9052505b80610916816146e3565b915050610872565b506000610986610980838b60020180548060200260200160405190810160405280929190818152602001828054801561097657602002820191906000526020600020905b815481526020019060010190808311610962575b5050505050613717565b8561357b565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d91906145f4565b905080610a3157509450610b059350505050565b600088610a4757610a428386614691565b610a51565b610a518584614691565b9050848b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae791906145f4565b610af19083614654565b610afb91906146a8565b9750505050505050505b9392505050565b6000808560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba291906145f4565b905060008111610bf45760405162461bcd60e51b815260206004820152600f60248201527f746f74616c537570706c79203d2030000000000000000000000000000000000060448201526064016104b6565b855460018701546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8a91906145f4565b861115610cd95760405162461bcd60e51b815260206004820152600960248201527f3e2062616c616e6365000000000000000000000000000000000000000000000060448201526064016104b6565b81861115610d295760405162461bcd60e51b815260206004820152600d60248201527f3e20746f74616c537570706c790000000000000000000000000000000000000060448201526064016104b6565b808510610d785760405162461bcd60e51b815260206004820152600d60248201527f746f6b656e4e6f74466f756e640000000000000000000000000000000000000060448201526064016104b6565b600080610d8789338a8a61313d565b9250905085811015610ddb5760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b6402540be400896005015483610df19190614654565b610dfb91906146a8565b610e05908261463c565b896003018881548110610e1a57610e1a6145c5565b906000526020600020016000828254610e339190614691565b909155505060018901546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018a905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015610eac57600080fd5b505af1158015610ec0573d6000803e3d6000fd5b50505050610ede33828b6000018a815481106106ed576106ed6145c5565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b6000866000018681548110610f4457610f446145c5565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdf91906145f4565b84886003018881548110610ff557610ff56145c5565b906000526020600020015461100a919061463c565b11156110585760405162461bcd60e51b815260206004820152601260248201527f494e53554646494349454e545f494e505554000000000000000000000000000060448201526064016104b6565b600061108561106c6402540be40086614654565b60048a0154611080906402540be400614691565b61379a565b90506000611092896134a2565b905060006110a26108108b612d31565b905060008a6003018054806020026020016040519081016040528092919081815260200182805480156110f457602002820191906000526020600020905b8154815260200190600101908083116110e0575b5050505050905087818b8151811061110e5761110e6145c5565b60200260200101818151611122919061463c565b9052508051849082908b90811061113b5761113b6145c5565b6020026020010181815161114f9190614691565b9150818152505060006111b5610980838e6002018054806020026020016040519081016040528092919081815260200182805480156109765760200282019190600052602060002090815481526020019060010190808311610962575050505050613717565b9050828110156112075760405162461bcd60e51b815260206004820152600960248201527f494e56415249414e54000000000000000000000000000000000000000000000060448201526064016104b6565b888c6003018c8154811061121d5761121d6145c5565b906000526020600020016000828254611236919061463c565b92505081905550848c6003018b81548110611253576112536145c5565b90600052602060002001600082825461126c9190614691565b9250508190555061128d87868e6000018d815481106106ed576106ed6145c5565b604080518c8152602081018b90529081018b90526060810186905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a250959a9950505050505050505050565b825482516000919081146113535760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964416d6f756e74734c656e67746800000000000000000000000060448201526064016104b6565b60008167ffffffffffffffff81111561136e5761136e6142eb565b604051908082528060200260200182016040528015611397578160200160208202803683370190505b50905060006113a5876137f3565b905060008760010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143c91906145f4565b90506000611449896134a2565b905060008215611505576115026108108b6003018054806020026020016040519081016040528092919081815260200182805480156114a757602002820191906000526020600020905b815481526020019060010190808311611493575b50505050508c6002018054806020026020016040519081016040528092919081815260200182805480156109765760200282019190600052602060002090815481526020019060010190808311610962575050505050613717565b90505b60008a60030180548060200260200160405190810160405280929190818152602001828054801561155557602002820191906000526020600020905b815481526020019060010190808311611541575b5050505050905060005b8781101561167257846115d55760008b8281518110611580576115806145c5565b6020026020010151116115d55760405162461bcd60e51b815260206004820152601e60248201527f696e697469616c4465706f73697452657175697265416c6c546f6b656e73000060448201526064016104b6565b6116378c60000182815481106115ed576115ed6145c5565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c838151811061162a5761162a6145c5565b6020026020010151613828565b828281518110611649576116496145c5565b6020026020010181815161165d919061463c565b9052508061166a816146e3565b91505061155f565b5060006116d2610980838e6002018054806020026020016040519081016040528092919081815260200182805480156109765760200282019190600052602060002090815481526020019060010190808311610962575050505050613717565b90508281116116e3576116e361471c565b846117065781516116fd9060038e019060208501906141d6565b50809850611902565b6000805b898110156118795761176a858f600301838154811061172b5761172b6145c5565b9060005260206000200154856117419190614654565b61174b91906146a8565b85838151811061175d5761175d6145c5565b6020026020010151613979565b91506402540be40061177c838a614654565b61178691906146a8565b898281518110611798576117986145c5565b6020026020010181815250506402540be4008e600501548a83815181106117c1576117c16145c5565b60200260200101516117d39190614654565b6117dd91906146a8565b8482815181106117ef576117ef6145c5565b60200260200101516118019190614691565b8e6003018281548110611816576118166145c5565b9060005260206000200181905550888181518110611836576118366145c5565b6020026020010151848281518110611850576118506145c5565b602002602001018181516118649190614691565b90525080611871816146e3565b91505061170a565b506118dd6118d7848f6002018054806020026020016040519081016040528092919081815260200182805480156109765760200282019190600052602060002090815481526020019060010190808311610962575050505050613717565b8661357b565b9150836118ea8184614691565b6118f49088614654565b6118fe91906146a8565b9950505b898910156119525760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b60018c01546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906340c10f1990604401600060405180830381600087803b1580156119c657600080fd5b505af11580156119da573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d604051611a2a9493929190614786565b60405180910390a250505050505050509392505050565b600080611a4d88612d31565b90506000886002018781548110611a6657611a666145c5565b906000526020600020015486611a7c9190614654565b828881518110611a8e57611a8e6145c5565b6020026020010151611aa09190614691565b90506000611ab18a898b8587612ddf565b90506000600182858c81518110611aca57611aca6145c5565b6020026020010151611adc9190614691565b611ae69190614691565b905060006402540be4008c6004015483611b009190614654565b611b0a91906146a8565b90508b6002018b81548110611b2157611b216145c5565b90600052602060002001548183611b389190614691565b611b4291906146a8565b915087821015611b945760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b60008c6002018b81548110611bab57611bab6145c5565b90600052602060002001546402540be4008e6005015484611bcc9190614654565b611bd691906146a8565b611be091906146a8565b9050611bec818461463c565b8d6003018d81548110611c0157611c016145c5565b906000526020600020016000828254611c1a9190614691565b92505081905550898d6003018c81548110611c3757611c376145c5565b906000526020600020016000828254611c509190614691565b9250508190555061071688848f6000018f815481106106ed576106ed6145c5565b6000611c7c826134a2565b92915050565b600080611c8e86612d31565b90506000611cb8611ca46402540be40086614654565b6004890154611080906402540be400614691565b90506000876002018681548110611cd157611cd16145c5565b906000526020600020015482611ce79190614654565b838781518110611cf957611cf96145c5565b6020026020010151611d0b9190614691565b90506000611d1c89888a8588612ddf565b90506000611d6d858a81518110611d3557611d356145c5565b602002602001015183611d489190614691565b8b6002018b81548110611d5d57611d5d6145c5565b906000526020600020015461399b565b9a9950505050505050505050565b600080876000018781548110611d9357611d936145c5565b600091825260208220015473ffffffffffffffffffffffffffffffffffffffff169150611dbf89612d31565b9050611dcb8287613828565b95506000611e2a8a8a8a8d6002018d81548110611dea57611dea6145c5565b90600052602060002001548b611e009190614654565b868e81518110611e1257611e126145c5565b6020026020010151611e24919061463c565b86612ddf565b90506000600182848b81518110611e4357611e436145c5565b6020026020010151611e559190614691565b611e5f9190614691565b905060006402540be4008c6004015483611e799190614654565b611e8391906146a8565b90508b6002018a81548110611e9a57611e9a6145c5565b90600052602060002001548183611eb19190614691565b611ebb91906146a8565b915087821015611f0d5760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b888c6003018c81548110611f2357611f236145c5565b906000526020600020016000828254611f3c919061463c565b909155505060028c0180548b908110611f5757611f576145c5565b90600052602060002001546402540be4008d6005015483611f789190614654565b611f8291906146a8565b611f8c91906146a8565b611f96908361463c565b8c6003018b81548110611fab57611fab6145c5565b906000526020600020016000828254611fc49190614691565b92505081905550611fe587838e6000018d815481106106ed576106ed6145c5565b604080518c8152602081018b90529081018b90526060810183905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a2509a9950505050505050505050565b60006064612061836134a2565b611c7c91906146a8565b60008061207786612d31565b90506000866002018681548110612090576120906145c5565b9060005260206000200154846120a69190614654565b8287815181106120b8576120b86145c5565b60200260200101516120ca919061463c565b905060006120db8888888587612ddf565b9050600061212c828589815181106120f5576120f56145c5565b60200260200101516121079190614691565b8a600201898154811061211c5761211c6145c5565b906000526020600020015461379a565b905060006402540be400828b600401546121469190614654565b61215091906146a8565b9050611d6d8183614691565b612167838383613a1f565b505050565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220391906145f4565b90508084111561221257600080fd5b845460008167ffffffffffffffff81111561222f5761222f6142eb565b604051908082528060200260200182016040528015612258578160200160208202803683370190505b509050612266873388613bf5565b935060005b84518110156123a257858181518110612286576122866145c5565b60200260200101518582815181106122a0576122a06145c5565b602002602001015110156122f65760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b848181518110612308576123086145c5565b6020026020010151886003018281548110612325576123256145c5565b906000526020600020015461233a9190614691565b88600301828154811061234f5761234f6145c5565b906000526020600020018190555061239033868381518110612373576123736145c5565b60200260200101518a60000184815481106106ed576106ed6145c5565b8061239a816146e3565b91505061226b565b5060018701546040517f79cc67900000000000000000000000000000000000000000000000000000000081523360048201526024810188905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b15801561241757600080fd5b505af115801561242b573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea9150869050836124608a88614691565b60405161246f939291906147bf565b60405180910390a25050509392505050565b825482516000919081146124d75760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964416d6f756e74734c656e67746800000000000000000000000060448201526064016104b6565b6001850154604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916318160ddd9160048083019260209291908290030181865afa158015612549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256d91906145f4565b9050806125bc5760405162461bcd60e51b815260206004820152600f60248201527f746f74616c537570706c79203d2030000000000000000000000000000000000060448201526064016104b6565b60006125c7876137f3565b905060006125d4886134a2565b905060008860030180548060200260200160405190810160405280929190818152602001828054801561262657602002820191906000526020600020905b815481526020019060010190808311612612575b50505050509050600061264161263b8b612d31565b8461357b565b905060005b868110156126a357898181518110612660576126606145c5565b602002602001015183828151811061267a5761267a6145c5565b6020026020010181815161268e9190614691565b9052508061269b816146e3565b915050612646565b506000612703610980848d6002018054806020026020016040519081016040528092919081815260200182805480156109765760200282019190600052602060002090815481526020019060010190808311610962575050505050613717565b905060008767ffffffffffffffff811115612720576127206142eb565b604051908082528060200260200182016040528015612749578160200160208202803683370190505b50905060005b888110156128c9576000848e600301838154811061276f5761276f6145c5565b9060005260206000200154856127859190614654565b61278f91906146a8565b905060006127b68784815181106127a8576127a86145c5565b602002602001015183613979565b90506402540be4006127c8828b614654565b6127d291906146a8565b8484815181106127e4576127e46145c5565b6020026020010181815250506402540be4008f6005015485858151811061280d5761280d6145c5565b602002602001015161281f9190614654565b61282991906146a8565b87848151811061283b5761283b6145c5565b602002602001015161284d9190614691565b8f6003018481548110612862576128626145c5565b9060005260206000200181905550838381518110612882576128826145c5565b602002602001015187848151811061289c5761289c6145c5565b602002602001018181516128b09190614691565b9052508291506128c19050816146e3565b91505061274f565b506129276118d7858e6002018054806020026020016040519081016040528092919081815260200182805480156109765760200282019190600052602060002090815481526020019060010190808311610962575050505050613717565b915082876129358483614691565b61293f9190614654565b61294991906146a8565b98506000891161295b5761295b61471c565b6129658c33613ddb565b612974906402540be400614691565b61297f8a600161463c565b6129899190614654565b9850898911156129db5760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b60018c01546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015612a4f57600080fd5b505af1158015612a63573d6000803e3d6000fd5b5050505060005b88811015612ad8578b8181518110612a8457612a846145c5565b6020026020010151600014612ac657612ac6338d8381518110612aa957612aa96145c5565b60200260200101518f60000184815481106106ed576106ed6145c5565b80612ad0816146e3565b915050612a6a565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c8385612b088e8d614691565b604051611a2a9493929190614786565b600080612b35612b2784612d31565b612b30856134a2565b61357b565b905060008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bcc91906145f4565b905080612bdb6012600a614915565b612be59084614654565b612bef91906146a8565b949350505050565b81546000908210612c4a5760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e6765000000000000000000000000000000000060448201526064016104b6565b826003018281548110612c5f57612c5f6145c5565b9060005260206000200154836000018381548110612c7f57612c7f6145c5565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1a91906145f4565b610b059190614691565b6060612bef848484613bf5565b6060611c7c82600301805480602002602001604051908101604052809291908181526020018280548015612d8457602002820191906000526020600020905b815481526020019060010190808311612d70575b5050505050836002018054806020026020016040519081016040528092919081815260200182805480156109765760200282019190600052602060002090815481526020019060010190808311610962575050505050613717565b600083851415612e315760405162461bcd60e51b815260206004820152600960248201527f73616d65546f6b656e000000000000000000000000000000000000000000000060448201526064016104b6565b85548086108015612e4157508085105b612e8d5760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e6765000000000000000000000000000000000060448201526064016104b6565b6000612e98886134a2565b90506000612ea68383614654565b90506000612eb4868461357b565b9050600081815b86811015612f3c578a811415612ed057612f2a565b60008c8214612ef857898281518110612eeb57612eeb6145c5565b6020026020010151612efa565b8a5b9050612f06818561463c565b9350612f128882614654565b612f1c8685614654565b612f2691906146a8565b9250505b80612f34816146e3565b915050612ebb565b50612f478685614654565b6064612f538584614654565b612f5d9190614654565b612f6791906146a8565b9050600084612f77606486614654565b612f8191906146a8565b612f8b908461463c565b9050600084815b610100811015613017578192508684836002612fae9190614654565b612fb8919061463c565b612fc29190614691565b85612fcd8480614654565b612fd7919061463c565b612fe191906146a8565b91506001612fef8484613979565b1161300557509850613060975050505050505050565b8061300f816146e3565b915050612f92565b5060405162461bcd60e51b815260206004820152601260248201527f7943616c63756c6174696f6e4661696c6564000000000000000000000000000060448201526064016104b6565b95945050505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526121679084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613ea1565b8354600090819083106131925760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e6765000000000000000000000000000000000060448201526064016104b6565b600061319d876134a2565b905060006131aa88612d31565b905060006131b8828461357b565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561322b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061324f91906145f4565b613259838a614654565b61326391906146a8565b61326d9083614691565b9050600061327e8b868a8786613f53565b905083600061328c8d6137f3565b905060005b8d548110156133945760008b8214156132e6578487878a85815181106132b9576132b96145c5565b60200260200101516132cb9190614654565b6132d591906146a8565b6132df9190614691565b905061333d565b86868984815181106132fa576132fa6145c5565b602002602001015161330c9190614654565b61331691906146a8565b888381518110613328576133286145c5565b602002602001015161333a9190614691565b90505b6402540be40061334d8285614654565b61335791906146a8565b848381518110613369576133696145c5565b6020026020010181815161337d9190614691565b90525081905061338c816146e3565b915050613291565b506133a28d888c8588613f53565b828b815181106133b4576133b46145c5565b60200260200101516133c69190614691565b98508c6002018a815481106133dd576133dd6145c5565b906000526020600020015460018a6133f59190614691565b6133ff91906146a8565b9850888d6002018b81548110613417576134176145c5565b906000526020600020015484888d81518110613435576134356145c5565b60200260200101516134479190614691565b61345191906146a8565b61345b9190614691565b97506402540be40061346d8e8e613ddb565b61347c906402540be400614691565b613486908b614654565b61349091906146a8565b98505050505050505094509492505050565b6000816009015442106134b757506007015490565b81600601548260070154111561352157816008015482600901546134db9190614691565b60088301546134ea9042614691565b836006015484600701546134fe9190614691565b6135089190614654565b61351291906146a8565b8260060154611c7c919061463c565b816008015482600901546135359190614691565b60088301546135449042614691565b836007015484600601546135589190614691565b6135629190614654565b61356c91906146a8565b8260060154611c7c9190614691565b81516000908161358a856140c7565b90508061359c57600092505050611c7c565b600081816135aa8588614654565b905060005b6101008110156136ce578260005b8a5181101561361357878b82815181106135d9576135d96145c5565b60200260200101516135eb9190614654565b6135f58684614654565b6135ff91906146a8565b91508061360b816146e3565b9150506135bd565b5083945080876001613625919061463c565b61362f9190614654565b60648561363c8287614691565b6136469190614654565b61365091906146a8565b61365a919061463c565b846136658984614654565b60646136718a88614654565b61367b91906146a8565b613685919061463c565b61368f9190614654565b61369991906146a8565b935060016136a78587613979565b116136bb5783975050505050505050611c7c565b50806136c6816146e3565b9150506135af565b5060405162461bcd60e51b815260206004820152601a60248201527f696e76617269616e7443616c63756c6174696f6e4661696c656400000000000060448201526064016104b6565b606060005b835181101561379257838181518110613737576137376145c5565b6020026020010151838281518110613751576137516145c5565b60200260200101516137639190614654565b838281518110613775576137756145c5565b60209081029190910101528061378a816146e3565b91505061371c565b509092915050565b6000816137e95760405162461bcd60e51b815260206004820152600d60248201527f5a45524f5f4449564953494f4e0000000000000000000000000000000000000060448201526064016104b6565b610b0582846146a8565b8054600090613803600182614691565b61380e906004614654565b81846004015461381e9190614654565b610b0591906146a8565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015613897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138bb91906145f4565b90506138df73ffffffffffffffffffffffffffffffffffffffff8516333086614113565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa15801561394b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061396f91906145f4565b612bef9190614691565b60008183116139915761398c8383614691565b610b05565b610b058284614691565b6000816139ea5760405162461bcd60e51b815260206004820152600d60248201527f5a45524f5f4449564953494f4e0000000000000000000000000000000000000060448201526064016104b6565b826139f757506000611c7c565b81613a03600185614691565b613a0d91906146a8565b613a1890600161463c565b9050611c7c565b73ffffffffffffffffffffffffffffffffffffffff8216613a3f57505050565b600a830154613a7c5773ffffffffffffffffffffffffffffffffffffffff82166000908152600c8401602052604090206402540be4009055613bc8565b6000613a888484613ddb565b60018501546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152929350600092909116906370a0823190602401602060405180830381865afa158015613b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b2491906145f4565b600a860154909150613b36828561463c565b613b409190614654565b15613bc557600a850154613b54828561463c565b613b5e9190614654565b6402540be40086600a015485613b749190614654565b613b7e8585614654565b613b88919061463c565b613b929190614654565b613b9c91906146a8565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600c870160205260409020555b50505b5073ffffffffffffffffffffffffffffffffffffffff166000908152600b90910160205260409020429055565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c8c91906145f4565b905080831115613cde5760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742065786365656420746f74616c20737570706c7900000000000060448201526064016104b6565b60006402540be400613cf08787613ddb565b613cff906402540be400614691565b613d099086614654565b613d1391906146a8565b865490915060009067ffffffffffffffff811115613d3357613d336142eb565b604051908082528060200260200182016040528015613d5c578160200160208202803683370190505b50905060005b8754811015613dd0578383896003018381548110613d8257613d826145c5565b9060005260206000200154613d979190614654565b613da191906146a8565b828281518110613db357613db36145c5565b602090810291909101015280613dc8816146e3565b915050613d62565b509695505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600b830160205260408120548190613e12906224ea0061463c565b905042811115613e97576000613e284283614691565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600c87016020526040902054600a8701549192506402540be400916224ea00918491613e709190614654565b613e7a9190614654565b613e8491906146a8565b613e8e91906146a8565b92505050611c7c565b5060009392505050565b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051613ec99190614921565b6000604051808303816000865af19150503d8060008114613f06576040519150601f19603f3d011682016040523d82523d6000602084013e613f0b565b606091505b50915091506000821415613f23573d6000803e3d6000fd5b613f4d815160001480613f45575081806020019051810190613f45919061495c565b6101a2614171565b50505050565b8454600090808510613f6757613f6761471c565b6000613f738288614654565b90508360008080805b86811015613fee578a811415613f9157613fdc565b898181518110613fa357613fa36145c5565b602002602001015192508284613fb9919061463c565b9350613fc58784614654565b613fcf8a87614654565b613fd991906146a8565b94505b80613fe6816146e3565b915050613f7c565b50613ff98686614654565b60646140058a87614654565b61400f9190614654565b61401991906146a8565b935060008561402960648b614654565b61403391906146a8565b61403d908561463c565b90508860005b6101008110156136ce578193508a8383600261405f9190614654565b614069919061463c565b6140739190614691565b8761407e8480614654565b614088919061463c565b61409291906146a8565b915060016140a08584613979565b116140b5575097506130609650505050505050565b806140bf816146e3565b915050614043565b6000805b825181101561410d578281815181106140e6576140e66145c5565b6020026020010151826140f9919061463c565b915080614105816146e3565b9150506140cb565b50919050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052613f4d9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016130bb565b8161417f5761417f81614183565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b828054828255906000526020600020908101928215614211579160200282015b828111156142115782518255916020019190600101906141f6565b5061421d929150614221565b5090565b5b8082111561421d5760008155600101614222565b803573ffffffffffffffffffffffffffffffffffffffff8116811461425a57600080fd5b919050565b60008060008060008060c0878903121561427857600080fd5b86359550602087013594506040870135935060608701359250608087013591506142a460a08801614236565b90509295509295509295565b600080600080608085870312156142c657600080fd5b843593506142d660208601614236565b93969395505050506040820135916060013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261432b57600080fd5b8135602067ffffffffffffffff80831115614348576143486142eb565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110848211171561438b5761438b6142eb565b6040529384528581018301938381019250878511156143a957600080fd5b83870191505b848210156143c8578135835291830191908301906143af565b979650505050505050565b80151581146143e157600080fd5b50565b6000806000606084860312156143f957600080fd5b83359250602084013567ffffffffffffffff81111561441757600080fd5b6144238682870161431a565b9250506040840135614434816143d3565b809150509250925092565b6000806000806080858703121561445557600080fd5b5050823594602084013594506040840135936060013592509050565b60008060006060848603121561448657600080fd5b83359250602084013567ffffffffffffffff8111156144a457600080fd5b6144b08682870161431a565b925050604084013590509250925092565b6000602082840312156144d357600080fd5b5035919050565b6000806000606084860312156144ef57600080fd5b833592506144ff60208501614236565b9150604084013590509250925092565b60008060006060848603121561452457600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561454957600080fd5b6145558682870161431a565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156145975783518352928401929184019160010161457b565b50909695505050505050565b600080604083850312156145b657600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561460657600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561464f5761464f61460d565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561468c5761468c61460d565b500290565b6000828210156146a3576146a361460d565b500390565b6000826146de577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156147155761471561460d565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600081518084526020808501945080840160005b8381101561477b5781518752958201959082019060010161475f565b509495945050505050565b608081526000614799608083018761474b565b82810360208401526147ab818761474b565b604084019590955250506060015292915050565b6060815260006147d2606083018661474b565b82810360208401526147e4818661474b565b915050826040830152949350505050565b600181815b8085111561484e57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156148345761483461460d565b8085161561484157918102915b93841c93908002906147fa565b509250929050565b60008261486557506001611c7c565b8161487257506000611c7c565b81600181146148885760028114614892576148ae565b6001915050611c7c565b60ff8411156148a3576148a361460d565b50506001821b611c7c565b5060208310610133831016604e8410600b84101617156148d1575081810a611c7c565b6148db83836147f5565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561490d5761490d61460d565b029392505050565b6000610b058383614856565b6000825160005b818110156149425760208186018101518583015201614928565b81811115614951576000828501525b509190910192915050565b60006020828403121561496e57600080fd5b8151610b05816143d356fea264697066735822122011456a8f6b2adbbd7159f4ddd0b6c45e19ea506995d34e7bf483b1a5687d47fd64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "params": {
          "amounts": "List of amounts of coins to deposit",
          "minMintAmount": "Minimum amount of LP tokens to mint from the deposit"
        },
        "returns": {
          "mintAmount": "Amount of LP tokens received by depositing"
        }
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "params": {
          "self": "Swap struct to read from and write to",
          "toMint": "amount of pool tokens to be minted",
          "user": "address of the user depositing tokens"
        }
      }
    },
    "stateVariables": {
      "A_PRECISION": {
        "details": "protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration"
      },
      "MAX_ITERATION": {
        "details": "max iteration of converge calccuate"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "notice": "Deposit coins into the pool"
      },
      "calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)": {
        "notice": "Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account"
      },
      "getAPrecise(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "VIEW FUNCTIONS"
      },
      "getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "Returns portfolio virtual price (for calculating profit) scaled up by 1e18"
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "notice": "Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit."
      }
    },
    "notice": "StableSwap main algorithm",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}