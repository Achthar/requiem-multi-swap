{
  "address": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IFlashLoanRecipient",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "FlashLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coin_amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sold_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bought_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        }
      ],
      "name": "TokenExchange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "A_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_TOKEN_COMMON_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x02514f9e9d931f5f4ec564f19d93983f511dfcb551bb9c799b57276e3cd9a955",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
    "transactionIndex": 0,
    "gasUsed": "4503961",
    "logsBloom": "0x
    "blockHash": "0x004c850d7ed61131a293a1f2dff588c3fa172cf4c9db7617e703b822aa19ac53",
    "transactionHash": "0x02514f9e9d931f5f4ec564f19d93983f511dfcb551bb9c799b57276e3cd9a955",
    "logs": [],
    "blockNumber": 35,
    "cumulativeGasUsed": "4503961",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8290fa77de4ad21ef1293cae3f9f4a1b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coin_amount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sold_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_sold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bought_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_bought\",\"type\":\"uint256\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_TOKEN_COMMON_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FlashLoan(address,address,uint256,uint256)\":{\"details\":\"Emitted for each individual flash loan performed by `flashLoan`.\"}},\"kind\":\"dev\",\"methods\":{\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"params\":{\"amounts\":\"List of amounts of coins to deposit\",\"minMintAmount\":\"Minimum amount of LP tokens to mint from the deposit\"},\"returns\":{\"mintAmount\":\"Amount of LP tokens received by depositing\"}},\"onSwap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i\":\"token index in\",\"j\":\"token index out\",\"outAmount\":\"the target out amount - only a cap at the decimalplaces of the lower one, the rest is taken as fee                  - that fee is always about the lowes amount possible of the one with the lower decimal number                  this will have a negative\"}},\"onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i\":\"token index in\",\"j\":\"token index out\"}},\"onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i\":\"token index in\",\"j\":\"token index out\"}},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"params\":{\"self\":\"Swap struct to read from and write to\",\"toMint\":\"amount of pool tokens to be minted\",\"user\":\"address of the user depositing tokens\"}}},\"stateVariables\":{\"A_PRECISION\":{\"details\":\"protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration\"},\"MAX_ITERATION\":{\"details\":\"max iteration of converge calccuate\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"notice\":\"Deposit coins into the pool\"},\"calculateSwap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256)\":{\"notice\":\"pre-implements calculation for Requiem interface for exat in swap \"},\"calculateSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256)\":{\"notice\":\"pre-implements calculation for Requiem interface for exat out swap that due to the fact that the structure is not symmetric (unlike 50/50 pairs) we require a separate function to calculate the input for a given output\"},\"calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)\":{\"notice\":\"Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account\"},\"flashLoan(RequiemStableSwapLib.SwapStorage storage,IFlashLoanRecipient,IERC20[],uint256[],bytes)\":{\"notice\":\"Flash Loan using the stable swap balances\"},\"getAPrecise(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"VIEW FUNCTIONS\"},\"getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"Returns portfolio virtual price (for calculating profit) scaled up by 1e18\"},\"onSwap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output and caps it at outAmount to   - this is to avoid issues with the rounding when using the calculateSwapGivenOut function to determine the input          -> that is because e.g. a 6 digit input can never exactly hit a 18 digit output, so the input is selected slightly higher              such that the output also is essentially rounded up at the sixth digit          -> the outAmount can only be lower than the actual calculated dy   - viable function for batch swapping\"},\"onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output, in this case simple as the output is the calculated value   - viable function for batch swapping\"},\"onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"the same function as swap, but it espects that amounts already have been sent to the contract and it requires the output to be provided  - designed to be used in the requirem swap framework  - deducts the fees from the output, that means that the    output has to be increased by the fee to then create a highe input\"},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"notice\":\"Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit.\"}},\"notice\":\"StableSwap main algorithm\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemStableSwapLib.sol\":\"RequiemStableSwapLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999999},\"remappings\":[]},\"sources\":{\"contracts/RequiemStableSwapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./tokens/LPToken.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IFlashLoanRecipient.sol\\\";\\n\\n\\nusing SafeERC20 for IERC20 global;\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\n/**\\n * StableSwap main algorithm\\n */\\nlibrary RequiemStableSwapLib {\\n\\n    event AddLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 invariant, uint256 token_supply);\\n\\n    event TokenExchange(address indexed buyer, uint256 sold_id, uint256 tokens_sold, uint256 bought_id, uint256 tokens_bought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 token_supply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 invariant, uint256 token_supply);\\n    /**\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\n     */\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\n\\n    uint256 public constant FEE_DENOMINATOR = 1e10;\\n    // uint256 public constant PRECISION = 1e18;\\n\\n    /// @dev protect from division loss when run approximation loop. We cannot divide at the end because of overflow,\\n    /// so we add some (small) PRECISION when divide in each iteration\\n    uint256 public constant A_PRECISION = 100;\\n    /// @dev max iteration of converge calccuate\\n    uint256 internal constant MAX_ITERATION = 256;\\n    uint256 public constant POOL_TOKEN_COMMON_DECIMALS = 18;\\n\\n    // errors\\n    string internal constant tokenError = \\\"token(s)\\\";\\n    string internal constant dyError = \\\"dy\\\";\\n    string internal constant arrayError = \\\"array\\\";\\n    string internal constant supplyError = \\\"ts\\\";\\n    string internal constant balanceError = \\\"b\\\";\\n    string internal constant calcError = \\\"calc\\\";\\n    string internal constant slippageError = \\\"s\\\";\\n\\n\\n    struct SwapStorage {\\n        IERC20[] pooledTokens;\\n        LPToken lpToken;\\n        /// @dev token i multiplier to reach POOL_TOKEN_COMMON_DECIMALS\\n        uint256[] tokenMultipliers;\\n        /// @dev effective balance which might different from token balance of the contract 'cause it hold admin fee as well\\n        uint256[] balances;\\n        /// @dev swap fee ratio. Charge on any action which move balance state far from the ideal state\\n        uint256 fee;\\n        /// @dev flash loan fee ratio. Charge on any action which move balance state far from the ideal state\\n        uint256 flashFee;\\n        /// @dev admin fee in ratio of swap fee.\\n        uint256 adminFee;\\n        /// @dev observation of A, multiplied with A_PRECISION\\n        uint256 initialA;\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n        // withdrawal fee control\\n        uint256 defaultWithdrawFee;\\n        mapping(address => uint256) depositTimestamp;\\n        mapping(address => uint256) withdrawFeeMultiplier;\\n        /// @dev swap fee ratio. Charge on any action which move balance state far from the ideal state\\n    }\\n\\n    /**\\n     * @notice Deposit coins into the pool\\n     * @param amounts List of amounts of coins to deposit\\n     * @param minMintAmount Minimum amount of LP tokens to mint from the deposit\\n     * @return mintAmount Amount of LP tokens received by depositing\\n     */\\n    function addLiquidity(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 minMintAmount\\n    ) external returns (uint256 mintAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, arrayError);\\n        uint256[] memory fees = new uint256[](nCoins);\\n        uint256 _fee = _feePerToken(self);\\n\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256 D0 = 0;\\n        if (tokenSupply > 0) {\\n            D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\\n        }\\n\\n        uint256[] memory newBalances = self.balances;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (tokenSupply == 0) {\\n                require(amounts[i] > 0, tokenError);\\n            }\\n            // get real transfer in amount\\n            newBalances[i] += _doTransferIn(self.pooledTokens[i], amounts[i]);\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        assert(D1 > D0); // double check\\n\\n        if (tokenSupply == 0) {\\n            self.balances = newBalances;\\n            mintAmount = D1;\\n        } else {\\n            uint256 diff = 0;\\n            for (uint256 i = 0; i < nCoins; i++) {\\n                diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\\n                fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n                self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n                newBalances[i] -= fees[i];\\n            }\\n            D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n            mintAmount = (tokenSupply * (D1 - D0)) / D0;\\n        }\\n\\n        require(mintAmount >= minMintAmount, slippageError);\\n\\n        self.lpToken.mint(msg.sender, mintAmount);\\n        emit AddLiquidity(msg.sender, amounts, fees, D1, mintAmount);\\n    }\\n\\n    /**\\n     *  the same function as swap, but it expects that amounts already have been\\n     *  sent to the contract\\n     *   - designed to be used in the Requiem Swap framework\\n     *   - deducts the fee from the output and caps it at outAmount to\\n     *   - this is to avoid issues with the rounding when using the calculateSwapGivenOut function to determine the input\\n     *          -> that is because e.g. a 6 digit input can never exactly hit a 18 digit output, so the input is selected slightly higher\\n     *              such that the output also is essentially rounded up at the sixth digit\\n     *          -> the outAmount can only be lower than the actual calculated dy\\n     *   - viable function for batch swapping\\n     * @param i token index in\\n     * @param j token index out\\n     * @param outAmount the target out amount - only a cap at the decimalplaces of the lower one, the rest is taken as fee\\n     *                  - that fee is always about the lowes amount possible of the one with the lower decimal number\\n     *                  this will have a negative\\n     */\\n    function onSwap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 outAmount,\\n        address to\\n    ) external returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n\\n        uint256 y = _getY(self, i, j, normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]), normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y; // eliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) /  FEE_DENOMINATOR;\\n\\n        dy = divUp(dy - dy_fee, self.tokenMultipliers[j]); // denormalize and round up\\n\\n        // the control outAmount has to be lower or equal than the \\\"actual\\\" one\\n        require(outAmount <= dy, dyError);\\n\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        self.pooledTokens[j].safeTransfer(to, outAmount);\\n        emit TokenExchange(to, i, inAmount, j, outAmount);\\n        return dy;\\n    }\\n\\n    /**\\n     *  the same function as swap, but it expects that amounts already have been\\n     *  sent to the contract\\n     *   - designed to be used in the Requiem Swap framework\\n     *   - deducts the fee from the output, in this case simple as the output is the calculated value\\n     *   - viable function for batch swapping\\n     * @param i token index in\\n     * @param j token index out\\n     */\\n    function onSwapGivenIn(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256 dy) {\\n        // we check whether the balance has increased by the suggested inAmount\\n        require(self.balances[i] + inAmount <= IERC20(self.pooledTokens[i]).balanceOf(address(this)),  balanceError);\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\\n        uint256 y = _getY(self, i, j, x, normalizedBalances);\\n\\n        dy = normalizedBalances[j] - y - 1; // eliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, slippageError);\\n\\n        uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + _adminFee;\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n\\n        // returns final output amount\\n        return dy;\\n    }\\n\\n    /**\\n     * the same function as swap, but it espects that amounts already have been\\n     * sent to the contract and it requires the output to be provided\\n     *  - designed to be used in the requirem swap framework\\n     *  - deducts the fees from the output, that means that the\\n     *    output has to be increased by the fee to then create a highe input\\n     * @param i token index in\\n     * @param j token index out\\n     */\\n    function onSwapGivenOut(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 outAmount,\\n        uint256 maxInAmount,\\n        address to\\n    ) external returns (uint256 dx) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n\\n        // the fee is a percentage from the \\\"actual\\\" amountOut, we have to use the quotient because of that\\n        uint256 _amountOutInclFee = (outAmount *  FEE_DENOMINATOR) / ( FEE_DENOMINATOR - self.fee);\\n\\n        // calculate out balance\\n        uint256 y = normalizedBalances[j] - (_amountOutInclFee * self.tokenMultipliers[j]);\\n\\n        // calculate in balance\\n        uint256 x = _getY(self, j, i, y, normalizedBalances);\\n\\n        // calculate normalized in balance\\n        dx = x - normalizedBalances[i]; // no rounding adjustment\\n\\n        dx = dx / self.tokenMultipliers[i]; // denormalize\\n\\n        require(dx <= maxInAmount, slippageError);\\n\\n        // update balances\\n        self.balances[i] -= dx;\\n        self.balances[j] -= _amountOutInclFee;\\n\\n        // do the transfer after all calculations\\n        IERC20 inCoin = self.pooledTokens[i];\\n        dx = _doTransferIn(inCoin, dx); // transfer the calculated amount in\\n\\n        self.pooledTokens[j].safeTransfer(to, outAmount); // transfer the desired amount out\\n        emit TokenExchange(to, i, dx, j, outAmount);\\n\\n        // returns final input amount\\n        return dx;\\n    }\\n\\n    /**  @notice Flash Loan using the stable swap balances*/\\n    function flashLoan(\\n        SwapStorage storage self,\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external {\\n        require(tokens.length == amounts.length, arrayError);\\n        uint256[] memory feeAmounts = new uint256[](tokens.length);\\n        uint256[] memory preLoanBalances = new uint256[](tokens.length);\\n\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            IERC20 token = tokens[i];\\n            uint256 amount = amounts[i];\\n\\n            preLoanBalances[i] = token.balanceOf(address(this));\\n            feeAmounts[i] = (amount * self.flashFee) / FEE_DENOMINATOR;\\n\\n            require(preLoanBalances[i] >= amount, balanceError);\\n            token.safeTransfer(address(recipient), amount);\\n        }\\n\\n        recipient.receiveFlashLoan(tokens, amounts, feeAmounts, userData);\\n\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            IERC20 token = tokens[i];\\n            uint256 preLoanBalance = preLoanBalances[i];\\n\\n            // Checking for loan repayment first (without accounting for fees) makes for simpler debugging, and results\\n            // in more accurate revert reasons if the flash loan protocol fee percentage is zero.\\n            uint256 postLoanBalance = token.balanceOf(address(this));\\n            require(postLoanBalance >= preLoanBalance, balanceError);\\n\\n            // No need for checked arithmetic since we know the loan was fully repaid.\\n            uint256 receivedFeeAmount = postLoanBalance - preLoanBalance;\\n            require(receivedFeeAmount >= feeAmounts[i], \\\"insufficient loan fee\\\");\\n\\n            // _payFeeAmount(token, receivedFeeAmount);\\n            emit FlashLoan(recipient, token, amounts[i], receivedFeeAmount);\\n        }\\n    }\\n\\n    function removeLiquidity(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256[] memory minAmounts\\n    ) external returns (uint256[] memory amounts) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(lpAmount <= totalSupply);\\n        uint256 nCoins = self.pooledTokens.length;\\n\\n        uint256[] memory fees = new uint256[](nCoins);\\n        amounts = _calculateRemoveLiquidity(self, msg.sender, lpAmount);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] >= minAmounts[i], slippageError);\\n            self.balances[i] = self.balances[i] - amounts[i];\\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        emit RemoveLiquidity(msg.sender, amounts, fees, totalSupply - lpAmount);\\n    }\\n\\n    function removeLiquidityOneToken(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256 index,\\n        uint256 minAmount\\n    ) external returns (uint256) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply > 0, supplyError);\\n        uint256 numTokens = self.pooledTokens.length;\\n        require(lpAmount <= self.lpToken.balanceOf(msg.sender), balanceError);\\n        require(lpAmount <= totalSupply, supplyError);\\n        require(index < numTokens, tokenError);\\n\\n        uint256 dyFee;\\n        uint256 dy;\\n\\n        (dy, dyFee) = _calculateRemoveLiquidityOneToken(self, msg.sender, lpAmount, index);\\n\\n        require(dy >= minAmount, slippageError);\\n\\n        self.balances[index] -= (dy + (dyFee * self.adminFee) / FEE_DENOMINATOR);\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        self.pooledTokens[index].safeTransfer(msg.sender, dy);\\n\\n        emit RemoveLiquidityOne(msg.sender, index, lpAmount, dy);\\n\\n        return dy;\\n    }\\n\\n    function removeLiquidityImbalance(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 maxBurnAmount\\n    ) external returns (uint256 burnAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, arrayError);\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply != 0, supplyError);\\n        uint256 _fee = _feePerToken(self);\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256[] memory newBalances = self.balances;\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            newBalances[i] -= amounts[i];\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256[] memory fees = new uint256[](nCoins);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            uint256 idealBalance = (D1 * self.balances[i]) / D0;\\n            uint256 diff = _distance(newBalances[i], idealBalance);\\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n            newBalances[i] -= fees[i];\\n        }\\n\\n        // recalculate invariant with fee charged balances\\n        D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        burnAmount = ((D0 - D1) * totalSupply) / D0;\\n        assert(burnAmount > 0);\\n        burnAmount = (burnAmount + 1) * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, msg.sender)); //In case of rounding errors - make it unfavorable for the \\\"attacker\\\"\\n        require(burnAmount <= maxBurnAmount, slippageError);\\n\\n        self.lpToken.burnFrom(msg.sender, burnAmount);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (amounts[i] != 0) {\\n                self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, totalSupply - burnAmount);\\n    }\\n\\n    /// VIEW FUNCTIONS\\n    function getAPrecise(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self);\\n    }\\n\\n    /**\\n     * Returns portfolio virtual price (for calculating profit)\\n     * scaled up by 1e18\\n     */\\n    function getVirtualPrice(SwapStorage storage self) external view returns (uint256) {\\n        uint256 D = _getD(_xp(self), _getAPrecise(self));\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        return (D * 10**POOL_TOKEN_COMMON_DECIMALS) / tokenSupply;\\n    }\\n\\n    function getAdminBalance(SwapStorage storage self, uint256 index) external view returns (uint256) {\\n        require(index < self.pooledTokens.length, arrayError);\\n        return self.pooledTokens[index].balanceOf(address(this)) - (self.balances[index]);\\n    }\\n\\n    /**\\n     * Estimate amount of LP token minted or burned at deposit or withdrawal\\n     * without taking fees into account\\n     */\\n    function calculateTokenAmount(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, arrayError);\\n        uint256 amp = _getAPrecise(self);\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        uint256[] memory newBalances = self.balances;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (deposit) {\\n                newBalances[i] += amounts[i];\\n            } else {\\n                newBalances[i] -= amounts[i];\\n            }\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n\\n        if (totalSupply == 0) {\\n            return D1; // first depositor take it all\\n        }\\n\\n        uint256 diff = deposit ? D1 - D0 : D0 - D1;\\n        return (diff * self.lpToken.totalSupply()) / D0;\\n    }\\n\\n    function getA(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self) / A_PRECISION;\\n    }\\n\\n    /**  @notice pre-implements calculation for Requiem interface for exat in swap */\\n    function calculateSwap(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 newInBalance = normalizedBalances[inIndex] + (inAmount * self.tokenMultipliers[inIndex]);\\n        uint256 outBalance = _getY(self, inIndex, outIndex, newInBalance, normalizedBalances);\\n        uint256 outAmount = (normalizedBalances[outIndex] - outBalance) / self.tokenMultipliers[outIndex];\\n        uint256 _fee = (self.fee * outAmount) / FEE_DENOMINATOR;\\n        return outAmount - _fee;\\n    }\\n\\n    /**\\n    * @notice pre-implements calculation for Requiem interface for exat out swap\\n    * that due to the fact that the structure is not symmetric (unlike 50/50 pairs)\\n    * we require a separate function to calculate the input for a given output\\n    */\\n    function calculateSwapGivenOut(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 outAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        // fee has to be deducted on the output\\n        uint256 _amountOutInclFee = (outAmount *  FEE_DENOMINATOR) / ( FEE_DENOMINATOR - self.fee);\\n        uint256 newOutBalance = normalizedBalances[outIndex] - (_amountOutInclFee * self.tokenMultipliers[outIndex]);\\n        // switch index on regulat _getY function\\n        uint256 inBalance = _getY(self, outIndex, inIndex, newOutBalance, normalizedBalances);\\n        uint256 inAmount = divUp(inBalance - normalizedBalances[inIndex], self.tokenMultipliers[inIndex]);\\n\\n        return inAmount;\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) external view returns (uint256[] memory) {\\n        return _calculateRemoveLiquidity(self, account, amount);\\n    }\\n\\n    function calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 lpAmount,\\n        uint256 tokenIndex\\n    ) external view returns (uint256 amount) {\\n        (amount, ) = _calculateRemoveLiquidityOneToken(self, account, lpAmount, tokenIndex);\\n    }\\n\\n    /**\\n     * @notice Update the withdraw fee for `user`. If the user is currently\\n     * not providing liquidity in the pool, sets to default value. If not, recalculate\\n     * the starting withdraw fee based on the last deposit's time & amount relative\\n     * to the new deposit.\\n     *\\n     * @param self Swap struct to read from and write to\\n     * @param user address of the user depositing tokens\\n     * @param toMint amount of pool tokens to be minted\\n     */\\n    function updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) external {\\n        _updateUserWithdrawFee(self, user, toMint);\\n    }\\n\\n    /// INTERNAL FUNCTIONS\\n\\n    /**\\n     * Ramping A up or down, return A with precision of A_PRECISION\\n     */\\n    function _getAPrecise(SwapStorage storage self) internal view returns (uint256) {\\n        if (block.timestamp >= self.futureATime) {\\n            return self.futureA;\\n        }\\n\\n        if (self.futureA > self.initialA) {\\n            return self.initialA + ((self.futureA - self.initialA) * (block.timestamp - self.initialATime)) / (self.futureATime - self.initialATime);\\n        }\\n\\n        return self.initialA - ((self.initialA - self.futureA) * (block.timestamp - self.initialATime)) / (self.futureATime - self.initialATime);\\n    }\\n\\n    /**\\n     * normalized balances of each tokens.\\n     */\\n    function _xp(uint256[] memory balances, uint256[] memory rates) internal pure returns (uint256[] memory) {\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            rates[i] = (rates[i] * balances[i]);\\n        }\\n\\n        return rates;\\n    }\\n\\n    function _xp(SwapStorage storage self) internal view returns (uint256[] memory) {\\n        return _xp(self.balances, self.tokenMultipliers);\\n    }\\n\\n    /**\\n     * Calculate D for *NORMALIZED* balances of each tokens\\n     * @param xp normalized balances of token\\n     */\\n    function _getD(uint256[] memory xp, uint256 amp) internal pure returns (uint256) {\\n        uint256 nCoins = xp.length;\\n        uint256 sum = _sumOf(xp);\\n        if (sum == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev = 0;\\n        uint256 D = sum;\\n        uint256 Ann = amp * nCoins;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            uint256 D_P = D;\\n            for (uint256 j = 0; j < xp.length; j++) {\\n                D_P = (D_P * D) / (xp[j] * nCoins);\\n            }\\n            Dprev = D;\\n            D = (((Ann * sum) / A_PRECISION + D_P * nCoins) * D) / (((Ann - A_PRECISION) * D) / A_PRECISION + (nCoins + 1) * D_P);\\n            if (_distance(D, Dprev) <= 1) {\\n                return D;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(calcError);\\n    }\\n\\n    /**\\n     * calculate new balance of when swap\\n     * Done by solving quadratic equation iteratively.\\n     *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     *  x_1**2 + b*x_1 = c\\n     *  x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     * @param inIndex index of token to swap in\\n     * @param outIndex index of token to swap out\\n     * @param inBalance new balance (normalized) of input token if the swap is successful\\n     * @return NORMALIZED balance of output token if the swap is successful\\n     */\\n    function _getY(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inBalance,\\n        uint256[] memory normalizedBalances\\n    ) internal view returns (uint256) {\\n        require(inIndex != outIndex, tokenError);\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(inIndex < nCoins && outIndex < nCoins, arrayError);\\n\\n        uint256 amp = _getAPrecise(self);\\n        uint256 Ann = amp * nCoins;\\n        uint256 D = _getD(normalizedBalances, amp); // calculate invariant\\n\\n        uint256 sum = 0; // sum of new balances except output token\\n        uint256 c = D;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == outIndex) {\\n                continue;\\n            }\\n\\n            uint256 x = i == inIndex ? inBalance : normalizedBalances[i];\\n            sum += x;\\n            c = (c * D) / (x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = sum + (D * A_PRECISION) / Ann;\\n\\n        uint256 lastY = 0;\\n        uint256 y = D;\\n\\n        for (uint256 index = 0; index < MAX_ITERATION; index++) {\\n            lastY = y;\\n            y = divUp(y * y + c, 2 * y + b - D);\\n            if (_distance(lastY, y) <= 1) {\\n                return y;\\n            }\\n        }\\n\\n        revert(calcError);\\n    }\\n\\n    function _calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) internal view returns (uint256[] memory) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(amount <= totalSupply, supplyError);\\n\\n        uint256 feeAdjustedAmount = (amount * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n\\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            amounts[i] = (self.balances[i] * (feeAdjustedAmount)) / (totalSupply);\\n        }\\n        return amounts;\\n    }\\n\\n    function _calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 tokenAmount,\\n        uint256 index\\n    ) internal view returns (uint256 dy, uint256 fee) {\\n        require(index < self.pooledTokens.length, arrayError);\\n        uint256 amp = _getAPrecise(self);\\n        uint256[] memory xp = _xp(self);\\n        uint256 D0 = _getD(xp, amp);\\n        uint256 D1 = D0 - (tokenAmount * D0) / self.lpToken.totalSupply();\\n        uint256 newY = _getYD(self, amp, index, xp, D1);\\n        uint256[] memory reducedXP = xp;\\n        uint256 _fee = _feePerToken(self);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            uint256 expectedDx = 0;\\n            if (i == index) {\\n                expectedDx = (xp[i] * D1) / D0 - newY;\\n            } else {\\n                expectedDx = xp[i] - (xp[i] * D1) / D0;\\n            }\\n            reducedXP[i] -= (_fee * expectedDx) / FEE_DENOMINATOR;\\n        }\\n\\n        dy = reducedXP[index] - _getYD(self, amp, index, reducedXP, D1);\\n        dy = (dy - 1) / self.tokenMultipliers[index];\\n        fee = ((xp[index] - newY) / self.tokenMultipliers[index]) - dy;\\n        dy = (dy * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n    }\\n\\n    function _feePerToken(SwapStorage storage self) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        return (self.fee * nCoins) / (4 * (nCoins - 1));\\n    }\\n\\n    function _getYD(\\n        SwapStorage storage self,\\n        uint256 A,\\n        uint256 index,\\n        uint256[] memory xp,\\n        uint256 D\\n    ) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        assert(index < nCoins);\\n        uint256 Ann = A * nCoins;\\n        uint256 c = D;\\n        uint256 s = 0;\\n        uint256 _x = 0;\\n        uint256 yPrev = 0;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == index) {\\n                continue;\\n            }\\n            _x = xp[i];\\n            s += _x;\\n            c = (c * D) / (_x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = s + (D * A_PRECISION) / Ann;\\n        uint256 y = D;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(yPrev, y) <= 1) {\\n                return y;\\n            }\\n        }\\n        revert(calcError);\\n    }\\n\\n    function _updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) internal {\\n        // If token is transferred to address 0 (or burned), don't update the fee.\\n        if (user == address(0)) {\\n            return;\\n        }\\n        if (self.defaultWithdrawFee == 0) {\\n            // If current fee is set to 0%, set multiplier to FEE_DENOMINATOR\\n            self.withdrawFeeMultiplier[user] = FEE_DENOMINATOR;\\n        } else {\\n            // Otherwise, calculate appropriate discount based on last deposit amount\\n            uint256 currentFee = _calculateCurrentWithdrawFee(self, user);\\n            uint256 currentBalance = self.lpToken.balanceOf(user);\\n\\n            // ((currentBalance * currentFee) + (toMint * defaultWithdrawFee)) * FEE_DENOMINATOR /\\n            // ((toMint + currentBalance) * defaultWithdrawFee)\\n            if ((toMint + currentBalance) * self.defaultWithdrawFee != 0) {\\n                self.withdrawFeeMultiplier[user] = (((currentBalance * currentFee) + (toMint * self.defaultWithdrawFee)) * (FEE_DENOMINATOR)) / ((toMint + currentBalance) * self.defaultWithdrawFee);\\n            }\\n        }\\n        self.depositTimestamp[user] = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Calculate the fee that is applied when the given user withdraws.\\n     * Withdraw fee decays linearly over 4 weeks.\\n     * @param user address you want to calculate withdraw fee of\\n     * @return current withdraw fee of the user\\n     */\\n    function _calculateCurrentWithdrawFee(SwapStorage storage self, address user) internal view returns (uint256) {\\n        uint256 endTime = self.depositTimestamp[user] + (4 weeks);\\n        if (endTime > block.timestamp) {\\n            uint256 timeLeftover = endTime - block.timestamp;\\n            return (self.defaultWithdrawFee * self.withdrawFeeMultiplier[user] * timeLeftover) / (4 weeks) / FEE_DENOMINATOR;\\n        }\\n        return 0;\\n    }\\n\\n    function _doTransferIn(IERC20 token, uint256 amount) internal returns (uint256) {\\n        uint256 priorBalance = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        return token.balanceOf(address(this)) - priorBalance;\\n    }\\n\\n    function _sumOf(uint256[] memory x) internal pure returns (uint256 sum) {\\n        sum = 0;\\n        for (uint256 i = 0; i < x.length; i++) {\\n            sum += x[i];\\n        }\\n    }\\n\\n    function _distance(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x - y : y - x;\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, calcError);\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, calcError);\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return 1 + (a - 1) / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1883e44199e17591b640bc4640e75499d47e1f339789425bfab0adbb92427f23\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xab442747ba7fbbe95ce3e26fac7ff53c7ed1f2ddb11ee665905bcd85593ac42e\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0xec988a6ff5da4cdef6378a3f8320e39027f557912ba73c92004a467d8a6cd5fe\",\"license\":\"MIT\"},\"contracts/interfaces/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.17;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdc804530ff03ec48ca5792c4c18a0ed0950c18f6f3cf31d8b6be25d5de492b66\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event TokenExchange(address indexed buyer, uint256 soldId, uint256 tokensSold, uint256 boughtId, uint256 tokensBought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 flashFee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0xbae15b6941fabfc280c110c65d6bbca64e29eb5144d79d1c0ffb9d539d577249\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x1e37be1406d40b13daaba8dd730eab1303311bb780625d791f8d3f724f3153f6\",\"license\":\"MIT\"},\"contracts/libraries/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ERC20/IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa7312d13ed0bf9af9bba19440f46e5312bc354760295075580cc6e497c29092c\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n// solhint-disable reason-string\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: burn amount exceeds allowance\\\"\\n        );\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x165c521f87ff6c50d700da5dca7e8ff9a1432b8528369c9fe7e50668f381773c\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xf65378dbd07bb0ad967fa83e97dc41e9bc9e9148aad564c7cd994b81a98fbc2b\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SAFE_ERC20_CALL_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe6c94e57fa5a447d7a1a5063122a99751b7072ce6de3ae1a14594d525daaa401\",\"license\":\"MIT\"},\"contracts/tokens/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\nimport \\\"../libraries/ERC20Burnable.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../interfaces/IRequiemStableSwap.sol\\\";\\n\\ncontract LPToken is Ownable, ERC20Burnable {\\n    IRequiemStableSwap public swap;\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n        swap = IRequiemStableSwap(msg.sender);\\n    }\\n\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"zeroMintAmount\\\");\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n     * minting and burning. This ensures that swap.updateUserWithdrawFees are called everytime.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20) {\\n        super._beforeTokenTransfer(from, to, amount);\\n        swap.updateUserWithdrawFee(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa7bd02e0facd203261af070460eea2e89e0f5ee0f7096a7116a2992bfc8036d2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6150fb61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101815760003560e01c8063c188e4be116100e2578063ce055b8d11610096578063d73792a911610070578063d73792a91461035d578063e2eba89b14610369578063fa5635971461037c57600080fd5b8063ce055b8d14610322578063d011f91814610342578063d36604ac1461034a57600080fd5b8063c685696c116100c7578063c685696c146102b5578063c8232501146102e2578063c8344c061461030257600080fd5b8063c188e4be1461028b578063c20aace8146102ad57600080fd5b80638e6da7b611610139578063aa054aee1161011e578063aa054aee14610252578063b52e146f14610265578063ba2998d91461027857600080fd5b80638e6da7b61461021f578063a30355851461023f57600080fd5b80631e7e95d31161016a5780631e7e95d3146101cc5780632bfe30d0146101df5780637a6cba3c146101ff57600080fd5b80630da350f614610186578063159763bb146101b9575b600080fd5b81801561019257600080fd5b506101a66101a13660046146f8565b61038f565b6040519081526020015b60405180910390f35b6101a66101c736600461474d565b6107ce565b6101a66101da36600461489a565b6107e6565b8180156101eb57600080fd5b506101a66101fa3660046148f5565b610b76565b81801561020b57600080fd5b506101a661021a366004614927565b61103f565b81801561022b57600080fd5b506101a661023a3660046146f8565b6117ed565b6101a661024d366004614977565b611a80565b6101a66102603660046148f5565b611a91565b6101a6610273366004614977565b611b92565b6101a66102863660046148f5565b611ba9565b81801561029757600080fd5b506102ab6102a6366004614990565b611c9c565b005b6101a6601281565b8180156102c157600080fd5b506102d56102d03660046149c8565b611cac565b6040516101b09190614a18565b8180156102ee57600080fd5b506102ab6102fd366004614aea565b611fe4565b81801561030e57600080fd5b506101a661031d366004614927565b6125f4565b81801561032e57600080fd5b506101a661033d3660046146f8565b612cef565b6101a6606481565b6101a6610358366004614977565b612f86565b6101a66402540be40081565b6101a6610377366004614bef565b613065565b6102d561038a366004614990565b6131b2565b60008660000186815481106103a6576103a6614c11565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561041d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104419190614c40565b8488600301888154811061045757610457614c11565b906000526020600020015461046c9190614c88565b11156040518060400160405280600181526020017f6200000000000000000000000000000000000000000000000000000000000000815250906104e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b60405180910390fd5b5060006104f1886131bf565b9050600088600201888154811061050a5761050a614c11565b9060005260206000200154866105209190614d29565b82898151811061053257610532614c11565b60200260200101516105449190614c88565b905060006105558a8a8a858761326d565b9050600181848a8151811061056c5761056c614c11565b602002602001015161057e9190614d66565b6105889190614d66565b935060006402540be4008b60040154866105a29190614d29565b6105ac9190614d7d565b90508a60020189815481106105c3576105c3614c11565b906000526020600020015481866105da9190614d66565b6105e49190614d7d565b9450868510156040518060400160405280600181526020017f730000000000000000000000000000000000000000000000000000000000000081525090610658576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5060008b6002018a8154811061067057610670614c11565b90600052602060002001546402540be4008d60060154846106919190614d29565b61069b9190614d7d565b6106a59190614d7d565b9050888c6003018c815481106106bd576106bd614c11565b9060005260206000200160008282546106d69190614c88565b909155506106e690508187614c88565b8c6003018b815481106106fb576106fb614c11565b9060005260206000200160008282546107149190614d66565b9250508190555061075e87878e6000018d8154811061073557610735614c11565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169190613550565b604080518c8152602081018b90529081018b90526060810187905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc98906080015b60405180910390a250505050509695505050505050565b60006107dc85858585613624565b5095945050505050565b8254825160408051808201909152600581527f6172726179000000000000000000000000000000000000000000000000000000602082015260009291821461085b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b506000610867866139a9565b9050600061087d610877886131bf565b83613a82565b90506000876003018054806020026020016040519081016040528092919081815260200182805480156108cf57602002820191906000526020600020905b8154815260200190600101908083116108bb575b5050505050905060005b8481101561098557861561092f578781815181106108f9576108f9614c11565b602002602001015182828151811061091357610913614c11565b602002602001018181516109279190614c88565b905250610973565b87818151811061094157610941614c11565b602002602001015182828151811061095b5761095b614c11565b6020026020010181815161096f9190614d66565b9052505b8061097d81614db8565b9150506108d9565b5060006109ed6109e7838b6002018054806020026020016040519081016040528092919081815260200182805480156109dd57602002820191906000526020600020905b8154815260200190600101908083116109c9575b5050505050613bd8565b85613a82565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a849190614c40565b905080600003610a9b57509450610b6f9350505050565b600088610ab157610aac8386614d66565b610abb565b610abb8584614d66565b9050848b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b519190614c40565b610b5b9083614d29565b610b659190614d7d565b9750505050505050505b9392505050565b6000808560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0c9190614c40565b9050600081116040518060400160405280600281526020017f747300000000000000000000000000000000000000000000000000000000000081525090610c80576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b50855460018701546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d179190614c40565b8611156040518060400160405280600181526020017f620000000000000000000000000000000000000000000000000000000000000081525090610d88576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5060408051808201909152600281527f7473000000000000000000000000000000000000000000000000000000000000602082015282871115610df8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5060408051808201909152600881527f746f6b656e2873290000000000000000000000000000000000000000000000006020820152818610610e67576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b50600080610e7789338a8a613624565b60408051808201909152600181527f7300000000000000000000000000000000000000000000000000000000000000602082015290935090915086821015610eec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b506402540be400896006015483610f039190614d29565b610f0d9190614d7d565b610f179082614c88565b896003018881548110610f2c57610f2c614c11565b906000526020600020016000828254610f459190614d66565b909155505060018901546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018a905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015610fbe57600080fd5b505af1158015610fd2573d6000803e3d6000fd5b50505050610ff033828b6000018a8154811061073557610735614c11565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b8254825160408051808201909152600581527f617272617900000000000000000000000000000000000000000000000000000060208201526000929182146110b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5060008167ffffffffffffffff8111156110d0576110d061478a565b6040519080825280602002602001820160405280156110f9578160200160208202803683370190505b509050600061110787613c5b565b905060008760010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561117a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119e9190614c40565b905060006111ab896139a9565b905060008215611267576112646108778b60030180548060200260200160405190810160405280929190818152602001828054801561120957602002820191906000526020600020905b8154815260200190600101908083116111f5575b50505050508c6002018054806020026020016040519081016040528092919081815260200182805480156109dd57602002820191906000526020600020908154815260200190600101908083116109c9575050505050613bd8565b90505b60008a6003018054806020026020016040519081016040528092919081815260200182805480156112b757602002820191906000526020600020905b8154815260200190600101908083116112a3575b5050505050905060005b878110156113fb578460000361135e5760008b82815181106112e5576112e5614c11565b6020026020010151116040518060400160405280600881526020017f746f6b656e2873290000000000000000000000000000000000000000000000008152509061135c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b505b6113c08c600001828154811061137657611376614c11565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c83815181106113b3576113b3614c11565b6020026020010151613c90565b8282815181106113d2576113d2614c11565b602002602001018181516113e69190614c88565b905250806113f381614db8565b9150506112c1565b50600061145b6109e7838e6002018054806020026020016040519081016040528092919081815260200182805480156109dd57602002820191906000526020600020908154815260200190600101908083116109c9575050505050613bd8565b905082811161146c5761146c614df0565b846000036114925781516114899060038e01906020850190614673565b5080985061168e565b6000805b89811015611605576114f6858f60030183815481106114b7576114b7614c11565b9060005260206000200154856114cd9190614d29565b6114d79190614d7d565b8583815181106114e9576114e9614c11565b6020026020010151613de1565b91506402540be400611508838a614d29565b6115129190614d7d565b89828151811061152457611524614c11565b6020026020010181815250506402540be4008e600601548a838151811061154d5761154d614c11565b602002602001015161155f9190614d29565b6115699190614d7d565b84828151811061157b5761157b614c11565b602002602001015161158d9190614d66565b8e60030182815481106115a2576115a2614c11565b90600052602060002001819055508881815181106115c2576115c2614c11565b60200260200101518482815181106115dc576115dc614c11565b602002602001018181516115f09190614d66565b905250806115fd81614db8565b915050611496565b50611669611663848f6002018054806020026020016040519081016040528092919081815260200182805480156109dd57602002820191906000526020600020908154815260200190600101908083116109c9575050505050613bd8565b86613a82565b9150836116768184614d66565b6116809088614d29565b61168a9190614d7d565b9950505b60408051808201909152600181527f730000000000000000000000000000000000000000000000000000000000000060208201528a8a10156116fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5060018c01546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906340c10f1990604401600060405180830381600087803b15801561177257600080fd5b505af1158015611786573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d6040516117d69493929190614e5a565b60405180910390a250505050505050509392505050565b6000806117f9886131bf565b9050600088600401546402540be4006118129190614d66565b6118216402540be40088614d29565b61182b9190614d7d565b9050600089600201888154811061184457611844614c11565b90600052602060002001548261185a9190614d29565b83898151811061186c5761186c614c11565b602002602001015161187e9190614d66565b9050600061188f8b8a8c858861326d565b9050838a815181106118a3576118a3614c11565b6020026020010151816118b69190614d66565b94508a6002018a815481106118cd576118cd614c11565b9060005260206000200154856118e39190614d7d565b9450868511156040518060400160405280600181526020017f730000000000000000000000000000000000000000000000000000000000000081525090611957576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b50848b6003018b8154811061196e5761196e614c11565b9060005260206000200160008282546119879190614d66565b92505081905550828b6003018a815481106119a4576119a4614c11565b9060005260206000200160008282546119bd9190614d66565b90915550508a546000908c908c9081106119d9576119d9614c11565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169050611a078187613c90565b9550611a23878a8e6000018d8154811061073557610735614c11565b604080518c8152602081018890529081018b9052606081018a905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc98906080016107b7565b6000611a8b826139a9565b92915050565b600080611a9d866131bf565b9050600086600401546402540be400611ab69190614d66565b611ac56402540be40086614d29565b611acf9190614d7d565b90506000876002018681548110611ae857611ae8614c11565b906000526020600020015482611afe9190614d29565b838781518110611b1057611b10614c11565b6020026020010151611b229190614d66565b90506000611b3389888a858861326d565b90506000611b84858a81518110611b4c57611b4c614c11565b602002602001015183611b5f9190614d66565b8b6002018b81548110611b7457611b74614c11565b9060005260206000200154613e03565b9a9950505050505050505050565b60006064611b9f836139a9565b611a8b9190614d7d565b600080611bb5866131bf565b90506000866002018681548110611bce57611bce614c11565b906000526020600020015484611be49190614d29565b828781518110611bf657611bf6614c11565b6020026020010151611c089190614c88565b90506000611c19888888858761326d565b90506000886002018781548110611c3257611c32614c11565b906000526020600020015482858981518110611c5057611c50614c11565b6020026020010151611c629190614d66565b611c6c9190614d7d565b905060006402540be400828b60040154611c869190614d29565b611c909190614d7d565b9050611b848183614d66565b611ca7838383613eab565b505050565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d439190614c40565b905080841115611d5257600080fd5b845460008167ffffffffffffffff811115611d6f57611d6f61478a565b604051908082528060200260200182016040528015611d98578160200160208202803683370190505b509050611da6873388614084565b935060005b8451811015611f0557858181518110611dc657611dc6614c11565b6020026020010151858281518110611de057611de0614c11565b602002602001015110156040518060400160405280600181526020017f730000000000000000000000000000000000000000000000000000000000000081525090611e58576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b50848181518110611e6b57611e6b614c11565b6020026020010151886003018281548110611e8857611e88614c11565b9060005260206000200154611e9d9190614d66565b886003018281548110611eb257611eb2614c11565b9060005260206000200181905550611ef333868381518110611ed657611ed6614c11565b60200260200101518a600001848154811061073557610735614c11565b80611efd81614db8565b915050611dab565b5060018701546040517f79cc67900000000000000000000000000000000000000000000000000000000081523360048201526024810188905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015611f7a57600080fd5b505af1158015611f8e573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea915086905083611fc38a88614d66565b604051611fd293929190614e93565b60405180910390a25050509392505050565b81518351146040518060400160405280600581526020017f617272617900000000000000000000000000000000000000000000000000000081525090612057576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b506000835167ffffffffffffffff8111156120745761207461478a565b60405190808252806020026020018201604052801561209d578160200160208202803683370190505b5090506000845167ffffffffffffffff8111156120bc576120bc61478a565b6040519080825280602002602001820160405280156120e5578160200160208202803683370190505b50905060005b85518110156122de57600086828151811061210857612108614c11565b60200260200101519050600086838151811061212657612126614c11565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa15801561219e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c29190614c40565b8484815181106121d4576121d4614c11565b6020026020010181815250506402540be4008a60050154826121f69190614d29565b6122009190614d7d565b85848151811061221257612212614c11565b6020026020010181815250508084848151811061223157612231614c11565b602002602001015110156040518060400160405280600181526020017f6200000000000000000000000000000000000000000000000000000000000000815250906122a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b506122cb73ffffffffffffffffffffffffffffffffffffffff83168a83613550565b5050806122d790614db8565b90506120eb565b506040517ff04f270700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87169063f04f270790612337908890889087908990600401614ec9565b600060405180830381600087803b15801561235157600080fd5b505af1158015612365573d6000803e3d6000fd5b5050505060005b85518110156125ea57600086828151811061238957612389614c11565b6020026020010151905060008383815181106123a7576123a7614c11565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015612422573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124469190614c40565b9050818110156040518060400160405280600181526020017f6200000000000000000000000000000000000000000000000000000000000000815250906124ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5060006124c78383614d66565b90508685815181106124db576124db614c11565b602002602001015181101561254c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e73756666696369656e74206c6f616e20666565000000000000000000000060448201526064016104dc565b8373ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167f0d7d75e01ab95780d3cd1c8ec0dd6c2ce19e3a20427eec8bf53283b6fb8e95f08b88815181106125ad576125ad614c11565b6020026020010151846040516125cd929190918252602082015260400190565b60405180910390a350505050806125e390614db8565b905061236c565b5050505050505050565b8254825160408051808201909152600581527f61727261790000000000000000000000000000000000000000000000000000006020820152600092918214612669576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b506001850154604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916318160ddd9160048083019260209291908290030181865afa1580156126dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127009190614c40565b60408051808201909152600281527f747300000000000000000000000000000000000000000000000000000000000060208201529091508161276f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b50600061277b87613c5b565b90506000612788886139a9565b90506000886003018054806020026020016040519081016040528092919081815260200182805480156127da57602002820191906000526020600020905b8154815260200190600101908083116127c6575b5050505050905060006127f56127ef8b6131bf565b84613a82565b905060005b868110156128575789818151811061281457612814614c11565b602002602001015183828151811061282e5761282e614c11565b602002602001018181516128429190614d66565b9052508061284f81614db8565b9150506127fa565b5060006128b76109e7848d6002018054806020026020016040519081016040528092919081815260200182805480156109dd57602002820191906000526020600020908154815260200190600101908083116109c9575050505050613bd8565b905060008767ffffffffffffffff8111156128d4576128d461478a565b6040519080825280602002602001820160405280156128fd578160200160208202803683370190505b50905060005b88811015612a7d576000848e600301838154811061292357612923614c11565b9060005260206000200154856129399190614d29565b6129439190614d7d565b9050600061296a87848151811061295c5761295c614c11565b602002602001015183613de1565b90506402540be40061297c828b614d29565b6129869190614d7d565b84848151811061299857612998614c11565b6020026020010181815250506402540be4008f600601548585815181106129c1576129c1614c11565b60200260200101516129d39190614d29565b6129dd9190614d7d565b8784815181106129ef576129ef614c11565b6020026020010151612a019190614d66565b8f6003018481548110612a1657612a16614c11565b9060005260206000200181905550838381518110612a3657612a36614c11565b6020026020010151878481518110612a5057612a50614c11565b60200260200101818151612a649190614d66565b905250829150612a75905081614db8565b915050612903565b50612adb611663858e6002018054806020026020016040519081016040528092919081815260200182805480156109dd57602002820191906000526020600020908154815260200190600101908083116109c9575050505050613bd8565b91508287612ae98483614d66565b612af39190614d29565b612afd9190614d7d565b985060008911612b0f57612b0f614df0565b612b198c3361428d565b612b28906402540be400614d66565b612b338a6001614c88565b612b3d9190614d29565b9850898911156040518060400160405280600181526020017f730000000000000000000000000000000000000000000000000000000000000081525090612bb1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5060018c01546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015612c2657600080fd5b505af1158015612c3a573d6000803e3d6000fd5b5050505060005b88811015612caf578b8181518110612c5b57612c5b614c11565b6020026020010151600014612c9d57612c9d338d8381518110612c8057612c80614c11565b60200260200101518f600001848154811061073557610735614c11565b80612ca781614db8565b915050612c41565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c8385612cdf8e8d614d66565b6040516117d69493929190614e5a565b600080612cfb886131bf565b90506000612d5a8989898c6002018c81548110612d1a57612d1a614c11565b90600052602060002001548a612d309190614d29565b868d81518110612d4257612d42614c11565b6020026020010151612d549190614c88565b8661326d565b9050600081838981518110612d7157612d71614c11565b6020026020010151612d839190614d66565b905060006402540be4008b6004015483612d9d9190614d29565b612da79190614d7d565b9050612dcb612db68284614d66565b8c6002018b81548110611b7457611b74614c11565b9150818711156040518060400160405280600281526020017f647900000000000000000000000000000000000000000000000000000000000081525090612e3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b50878b6003018b81548110612e5657612e56614c11565b906000526020600020016000828254612e6f9190614c88565b909155505060028b0180548a908110612e8a57612e8a614c11565b90600052602060002001546402540be4008c6006015483612eab9190614d29565b612eb59190614d7d565b612ebf9190614d7d565b612ec99083614c88565b8b6003018a81548110612ede57612ede614c11565b906000526020600020016000828254612ef79190614d66565b92505081905550612f1886888d6000018c8154811061073557610735614c11565b604080518b8152602081018a90529081018a90526060810188905273ffffffffffffffffffffffffffffffffffffffff8716907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a2509998505050505050505050565b600080612fa3612f95846131bf565b612f9e856139a9565b613a82565b905060008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613016573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303a9190614c40565b9050806130496012600a615080565b6130539084614d29565b61305d9190614d7d565b949350505050565b815460408051808201909152600581527f6172726179000000000000000000000000000000000000000000000000000000602082015260009183106130d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b508260030182815481106130ed576130ed614c11565b906000526020600020015483600001838154811061310d5761310d614c11565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015613184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a89190614c40565b610b6f9190614d66565b606061305d848484614084565b6060611a8b8260030180548060200260200160405190810160405280929190818152602001828054801561321257602002820191906000526020600020905b8154815260200190600101908083116131fe575b5050505050836002018054806020026020016040519081016040528092919081815260200182805480156109dd57602002820191906000526020600020908154815260200190600101908083116109c9575050505050613bd8565b6000838514156040518060400160405280600881526020017f746f6b656e287329000000000000000000000000000000000000000000000000815250906132e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b50855480861080156132f257508085105b6040518060400160405280600581526020017f617272617900000000000000000000000000000000000000000000000000000081525090613360576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b50600061336c886139a9565b9050600061337a8383614d29565b905060006133888684613a82565b9050600081815b8681101561340a57808b146133f85760008c82146133c6578982815181106133b9576133b9614c11565b60200260200101516133c8565b8a5b90506133d48185614c88565b93506133e08882614d29565b6133ea8685614d29565b6133f49190614d7d565b9250505b8061340281614db8565b91505061338f565b506134158685614d29565b60646134218584614d29565b61342b9190614d29565b6134359190614d7d565b9050600084613445606486614d29565b61344f9190614d7d565b6134599084614c88565b9050600084815b6101008110156134e3578192506134ad85838461347d9190614d29565b6134879190614c88565b8886613494866002614d29565b61349e9190614c88565b6134a89190614d66565b613e03565b915060016134bb8484613de1565b116134d157509850613547975050505050505050565b806134db81614db8565b915050613460565b5060408051808201825260048082527f63616c6300000000000000000000000000000000000000000000000000000000602083015291517f08c379a00000000000000000000000000000000000000000000000000000000081526104dc9201614d16565b95945050505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611ca79084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614353565b835460408051808201909152600581527f617272617900000000000000000000000000000000000000000000000000000060208201526000918291908410613699576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5060006136a5876139a9565b905060006136b2886131bf565b905060006136c08284613a82565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137579190614c40565b613761838a614d29565b61376b9190614d7d565b6137759083614d66565b905060006137868b868a878661445b565b90508360006137948d613c5b565b905060005b8d5481101561389b5760008b82036137ed578487878a85815181106137c0576137c0614c11565b60200260200101516137d29190614d29565b6137dc9190614d7d565b6137e69190614d66565b9050613844565b868689848151811061380157613801614c11565b60200260200101516138139190614d29565b61381d9190614d7d565b88838151811061382f5761382f614c11565b60200260200101516138419190614d66565b90505b6402540be4006138548285614d29565b61385e9190614d7d565b84838151811061387057613870614c11565b602002602001018181516138849190614d66565b90525081905061389381614db8565b915050613799565b506138a98d888c858861445b565b828b815181106138bb576138bb614c11565b60200260200101516138cd9190614d66565b98508c6002018a815481106138e4576138e4614c11565b906000526020600020015460018a6138fc9190614d66565b6139069190614d7d565b9850888d6002018b8154811061391e5761391e614c11565b906000526020600020015484888d8151811061393c5761393c614c11565b602002602001015161394e9190614d66565b6139589190614d7d565b6139629190614d66565b97506402540be4006139748e8e61428d565b613983906402540be400614d66565b61398d908b614d29565b6139979190614d7d565b98505050505050505094509492505050565b600081600a015442106139be57506008015490565b816007015482600801541115613a2857816009015482600a01546139e29190614d66565b60098301546139f19042614d66565b83600701548460080154613a059190614d66565b613a0f9190614d29565b613a199190614d7d565b8260070154611a8b9190614c88565b816009015482600a0154613a3c9190614d66565b6009830154613a4b9042614d66565b83600801548460070154613a5f9190614d66565b613a699190614d29565b613a739190614d7d565b8260070154611a8b9190614d66565b815160009081613a91856145c9565b905080600003613aa657600092505050611a8b565b60008181613ab48588614d29565b905060005b6101008110156134e3578260005b8a51811015613b1d57878b8281518110613ae357613ae3614c11565b6020026020010151613af59190614d29565b613aff8684614d29565b613b099190614d7d565b915080613b1581614db8565b915050613ac7565b5083945080876001613b2f9190614c88565b613b399190614d29565b606485613b468287614d66565b613b509190614d29565b613b5a9190614d7d565b613b649190614c88565b84613b6f8984614d29565b6064613b7b8a88614d29565b613b859190614d7d565b613b8f9190614c88565b613b999190614d29565b613ba39190614d7d565b93506001613bb18587613de1565b11613bc55783975050505050505050611a8b565b5080613bd081614db8565b915050613ab9565b606060005b8351811015613c5357838181518110613bf857613bf8614c11565b6020026020010151838281518110613c1257613c12614c11565b6020026020010151613c249190614d29565b838281518110613c3657613c36614c11565b602090810291909101015280613c4b81614db8565b915050613bdd565b509092915050565b8054600090613c6b600182614d66565b613c76906004614d29565b818460040154613c869190614d29565b610b6f9190614d7d565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015613cff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d239190614c40565b9050613d4773ffffffffffffffffffffffffffffffffffffffff8516333086614615565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015613db3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dd79190614c40565b61305d9190614d66565b6000818311613df957613df48383614d66565b610b6f565b610b6f8284614d66565b60408051808201909152600481527f63616c6300000000000000000000000000000000000000000000000000000000602082015260009082613e72576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5082600003613e8357506000611a8b565b81613e8f600185614d66565b613e999190614d7d565b613ea4906001614c88565b9050611a8b565b73ffffffffffffffffffffffffffffffffffffffff8216613ecb57505050565b82600b0154600003613f0b5773ffffffffffffffffffffffffffffffffffffffff82166000908152600d8401602052604090206402540be4009055614057565b6000613f17848461428d565b60018501546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152929350600092909116906370a0823190602401602060405180830381865afa158015613f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fb39190614c40565b600b860154909150613fc58285614c88565b613fcf9190614d29565b1561405457600b850154613fe38285614c88565b613fed9190614d29565b6402540be40086600b0154856140039190614d29565b61400d8585614d29565b6140179190614c88565b6140219190614d29565b61402b9190614d7d565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600d870160205260409020555b50505b5073ffffffffffffffffffffffffffffffffffffffff166000908152600c90910160205260409020429055565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156140f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061411b9190614c40565b9050808311156040518060400160405280600281526020017f74730000000000000000000000000000000000000000000000000000000000008152509061418f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5060006402540be4006141a2878761428d565b6141b1906402540be400614d66565b6141bb9086614d29565b6141c59190614d7d565b865490915060009067ffffffffffffffff8111156141e5576141e561478a565b60405190808252806020026020018201604052801561420e578160200160208202803683370190505b50905060005b875481101561428257838389600301838154811061423457614234614c11565b90600052602060002001546142499190614d29565b6142539190614d7d565b82828151811061426557614265614c11565b60209081029190910101528061427a81614db8565b915050614214565b509695505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600c8301602052604081205481906142c4906224ea00614c88565b9050428111156143495760006142da4283614d66565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600d87016020526040902054600b8701549192506402540be400916224ea009184916143229190614d29565b61432c9190614d29565b6143369190614d7d565b6143409190614d7d565b92505050611a8b565b5060009392505050565b6000808373ffffffffffffffffffffffffffffffffffffffff168360405161437b919061508c565b6000604051808303816000865af19150503d80600081146143b8576040519150601f19603f3d011682016040523d82523d6000602084013e6143bd565b606091505b509092509050816143d2573d6000803e3d6000fd5b805115806143ef5750808060200190518101906143ef91906150a8565b614455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f534146455f45524332305f43414c4c5f4641494c45440000000000000000000060448201526064016104dc565b50505050565b845460009080851061446f5761446f614df0565b600061447b8288614d29565b90508360008080805b868110156144f057808b146144de578981815181106144a5576144a5614c11565b6020026020010151925082846144bb9190614c88565b93506144c78784614d29565b6144d18a87614d29565b6144db9190614d7d565b94505b806144e881614db8565b915050614484565b506144fb8686614d29565b60646145078a87614d29565b6145119190614d29565b61451b9190614d7d565b935060008561452b60648b614d29565b6145359190614d7d565b61453f9085614c88565b90508860005b6101008110156134e3578193508a838360026145619190614d29565b61456b9190614c88565b6145759190614d66565b876145808480614d29565b61458a9190614c88565b6145949190614d7d565b915060016145a28584613de1565b116145b7575097506135479650505050505050565b806145c181614db8565b915050614545565b6000805b825181101561460f578281815181106145e8576145e8614c11565b6020026020010151826145fb9190614c88565b91508061460781614db8565b9150506145cd565b50919050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526144559085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016135a2565b8280548282559060005260206000209081019282156146ae579160200282015b828111156146ae578251825591602001919060010190614693565b506146ba9291506146be565b5090565b5b808211156146ba57600081556001016146bf565b73ffffffffffffffffffffffffffffffffffffffff811681146146f557600080fd5b50565b60008060008060008060c0878903121561471157600080fd5b863595506020870135945060408701359350606087013592506080870135915060a087013561473f816146d3565b809150509295509295509295565b6000806000806080858703121561476357600080fd5b843593506020850135614775816146d3565b93969395505050506040820135916060013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156148005761480061478a565b604052919050565b600067ffffffffffffffff8211156148225761482261478a565b5060051b60200190565b600082601f83011261483d57600080fd5b8135602061485261484d83614808565b6147b9565b82815260059290921b8401810191818101908684111561487157600080fd5b8286015b848110156142825780358352918301918301614875565b80151581146146f557600080fd5b6000806000606084860312156148af57600080fd5b83359250602084013567ffffffffffffffff8111156148cd57600080fd5b6148d98682870161482c565b92505060408401356148ea8161488c565b809150509250925092565b6000806000806080858703121561490b57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060006060848603121561493c57600080fd5b83359250602084013567ffffffffffffffff81111561495a57600080fd5b6149668682870161482c565b925050604084013590509250925092565b60006020828403121561498957600080fd5b5035919050565b6000806000606084860312156149a557600080fd5b8335925060208401356149b7816146d3565b929592945050506040919091013590565b6000806000606084860312156149dd57600080fd5b8335925060208401359150604084013567ffffffffffffffff811115614a0257600080fd5b614a0e8682870161482c565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015614a5057835183529284019291840191600101614a34565b50909695505050505050565b600082601f830112614a6d57600080fd5b813567ffffffffffffffff811115614a8757614a8761478a565b614ab860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016147b9565b818152846020838601011115614acd57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215614b0257600080fd5b85359450602080870135614b15816146d3565b9450604087013567ffffffffffffffff80821115614b3257600080fd5b818901915089601f830112614b4657600080fd5b8135614b5461484d82614808565b81815260059190911b8301840190848101908c831115614b7357600080fd5b938501935b82851015614b9a578435614b8b816146d3565b82529385019390850190614b78565b975050506060890135925080831115614bb257600080fd5b614bbe8a848b0161482c565b94506080890135925080831115614bd457600080fd5b5050614be288828901614a5c565b9150509295509295909350565b60008060408385031215614c0257600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215614c5257600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115614c9b57614c9b614c59565b500190565b60005b83811015614cbb578181015183820152602001614ca3565b838111156144555750506000910152565b60008151808452614ce4816020860160208601614ca0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610b6f6020830184614ccc565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614d6157614d61614c59565b500290565b600082821015614d7857614d78614c59565b500390565b600082614db3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614de957614de9614c59565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600081518084526020808501945080840160005b83811015614e4f57815187529582019590820190600101614e33565b509495945050505050565b608081526000614e6d6080830187614e1f565b8281036020840152614e7f8187614e1f565b604084019590955250506060015292915050565b606081526000614ea66060830186614e1f565b8281036020840152614eb88186614e1f565b915050826040830152949350505050565b6080808252855190820181905260009060209060a0840190828901845b82811015614f1857815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101614ee6565b50505083810382850152614f2c8188614e1f565b9150508281036040840152614f418186614e1f565b90508281036060840152614f558185614ccc565b979650505050505050565b600181815b80851115614fb957817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115614f9f57614f9f614c59565b80851615614fac57918102915b93841c9390800290614f65565b509250929050565b600082614fd057506001611a8b565b81614fdd57506000611a8b565b8160018114614ff35760028114614ffd57615019565b6001915050611a8b565b60ff84111561500e5761500e614c59565b50506001821b611a8b565b5060208310610133831016604e8410600b841016171561503c575081810a611a8b565b6150468383614f60565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561507857615078614c59565b029392505050565b6000610b6f8383614fc1565b6000825161509e818460208701614ca0565b9190910192915050565b6000602082840312156150ba57600080fd5b8151610b6f8161488c56fea2646970667358221220d2b1331655ba0234b095ee0458cb97b77b442dcaaa9b24538f4222587927957b64736f6c634300080d0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101815760003560e01c8063c188e4be116100e2578063ce055b8d11610096578063d73792a911610070578063d73792a91461035d578063e2eba89b14610369578063fa5635971461037c57600080fd5b8063ce055b8d14610322578063d011f91814610342578063d36604ac1461034a57600080fd5b8063c685696c116100c7578063c685696c146102b5578063c8232501146102e2578063c8344c061461030257600080fd5b8063c188e4be1461028b578063c20aace8146102ad57600080fd5b80638e6da7b611610139578063aa054aee1161011e578063aa054aee14610252578063b52e146f14610265578063ba2998d91461027857600080fd5b80638e6da7b61461021f578063a30355851461023f57600080fd5b80631e7e95d31161016a5780631e7e95d3146101cc5780632bfe30d0146101df5780637a6cba3c146101ff57600080fd5b80630da350f614610186578063159763bb146101b9575b600080fd5b81801561019257600080fd5b506101a66101a13660046146f8565b61038f565b6040519081526020015b60405180910390f35b6101a66101c736600461474d565b6107ce565b6101a66101da36600461489a565b6107e6565b8180156101eb57600080fd5b506101a66101fa3660046148f5565b610b76565b81801561020b57600080fd5b506101a661021a366004614927565b61103f565b81801561022b57600080fd5b506101a661023a3660046146f8565b6117ed565b6101a661024d366004614977565b611a80565b6101a66102603660046148f5565b611a91565b6101a6610273366004614977565b611b92565b6101a66102863660046148f5565b611ba9565b81801561029757600080fd5b506102ab6102a6366004614990565b611c9c565b005b6101a6601281565b8180156102c157600080fd5b506102d56102d03660046149c8565b611cac565b6040516101b09190614a18565b8180156102ee57600080fd5b506102ab6102fd366004614aea565b611fe4565b81801561030e57600080fd5b506101a661031d366004614927565b6125f4565b81801561032e57600080fd5b506101a661033d3660046146f8565b612cef565b6101a6606481565b6101a6610358366004614977565b612f86565b6101a66402540be40081565b6101a6610377366004614bef565b613065565b6102d561038a366004614990565b6131b2565b60008660000186815481106103a6576103a6614c11565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561041d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104419190614c40565b8488600301888154811061045757610457614c11565b906000526020600020015461046c9190614c88565b11156040518060400160405280600181526020017f6200000000000000000000000000000000000000000000000000000000000000815250906104e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b60405180910390fd5b5060006104f1886131bf565b9050600088600201888154811061050a5761050a614c11565b9060005260206000200154866105209190614d29565b82898151811061053257610532614c11565b60200260200101516105449190614c88565b905060006105558a8a8a858761326d565b9050600181848a8151811061056c5761056c614c11565b602002602001015161057e9190614d66565b6105889190614d66565b935060006402540be4008b60040154866105a29190614d29565b6105ac9190614d7d565b90508a60020189815481106105c3576105c3614c11565b906000526020600020015481866105da9190614d66565b6105e49190614d7d565b9450868510156040518060400160405280600181526020017f730000000000000000000000000000000000000000000000000000000000000081525090610658576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5060008b6002018a8154811061067057610670614c11565b90600052602060002001546402540be4008d60060154846106919190614d29565b61069b9190614d7d565b6106a59190614d7d565b9050888c6003018c815481106106bd576106bd614c11565b9060005260206000200160008282546106d69190614c88565b909155506106e690508187614c88565b8c6003018b815481106106fb576106fb614c11565b9060005260206000200160008282546107149190614d66565b9250508190555061075e87878e6000018d8154811061073557610735614c11565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169190613550565b604080518c8152602081018b90529081018b90526060810187905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc98906080015b60405180910390a250505050509695505050505050565b60006107dc85858585613624565b5095945050505050565b8254825160408051808201909152600581527f6172726179000000000000000000000000000000000000000000000000000000602082015260009291821461085b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b506000610867866139a9565b9050600061087d610877886131bf565b83613a82565b90506000876003018054806020026020016040519081016040528092919081815260200182805480156108cf57602002820191906000526020600020905b8154815260200190600101908083116108bb575b5050505050905060005b8481101561098557861561092f578781815181106108f9576108f9614c11565b602002602001015182828151811061091357610913614c11565b602002602001018181516109279190614c88565b905250610973565b87818151811061094157610941614c11565b602002602001015182828151811061095b5761095b614c11565b6020026020010181815161096f9190614d66565b9052505b8061097d81614db8565b9150506108d9565b5060006109ed6109e7838b6002018054806020026020016040519081016040528092919081815260200182805480156109dd57602002820191906000526020600020905b8154815260200190600101908083116109c9575b5050505050613bd8565b85613a82565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a849190614c40565b905080600003610a9b57509450610b6f9350505050565b600088610ab157610aac8386614d66565b610abb565b610abb8584614d66565b9050848b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b519190614c40565b610b5b9083614d29565b610b659190614d7d565b9750505050505050505b9392505050565b6000808560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0c9190614c40565b9050600081116040518060400160405280600281526020017f747300000000000000000000000000000000000000000000000000000000000081525090610c80576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b50855460018701546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d179190614c40565b8611156040518060400160405280600181526020017f620000000000000000000000000000000000000000000000000000000000000081525090610d88576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5060408051808201909152600281527f7473000000000000000000000000000000000000000000000000000000000000602082015282871115610df8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5060408051808201909152600881527f746f6b656e2873290000000000000000000000000000000000000000000000006020820152818610610e67576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b50600080610e7789338a8a613624565b60408051808201909152600181527f7300000000000000000000000000000000000000000000000000000000000000602082015290935090915086821015610eec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b506402540be400896006015483610f039190614d29565b610f0d9190614d7d565b610f179082614c88565b896003018881548110610f2c57610f2c614c11565b906000526020600020016000828254610f459190614d66565b909155505060018901546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018a905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015610fbe57600080fd5b505af1158015610fd2573d6000803e3d6000fd5b50505050610ff033828b6000018a8154811061073557610735614c11565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b8254825160408051808201909152600581527f617272617900000000000000000000000000000000000000000000000000000060208201526000929182146110b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5060008167ffffffffffffffff8111156110d0576110d061478a565b6040519080825280602002602001820160405280156110f9578160200160208202803683370190505b509050600061110787613c5b565b905060008760010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561117a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119e9190614c40565b905060006111ab896139a9565b905060008215611267576112646108778b60030180548060200260200160405190810160405280929190818152602001828054801561120957602002820191906000526020600020905b8154815260200190600101908083116111f5575b50505050508c6002018054806020026020016040519081016040528092919081815260200182805480156109dd57602002820191906000526020600020908154815260200190600101908083116109c9575050505050613bd8565b90505b60008a6003018054806020026020016040519081016040528092919081815260200182805480156112b757602002820191906000526020600020905b8154815260200190600101908083116112a3575b5050505050905060005b878110156113fb578460000361135e5760008b82815181106112e5576112e5614c11565b6020026020010151116040518060400160405280600881526020017f746f6b656e2873290000000000000000000000000000000000000000000000008152509061135c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b505b6113c08c600001828154811061137657611376614c11565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c83815181106113b3576113b3614c11565b6020026020010151613c90565b8282815181106113d2576113d2614c11565b602002602001018181516113e69190614c88565b905250806113f381614db8565b9150506112c1565b50600061145b6109e7838e6002018054806020026020016040519081016040528092919081815260200182805480156109dd57602002820191906000526020600020908154815260200190600101908083116109c9575050505050613bd8565b905082811161146c5761146c614df0565b846000036114925781516114899060038e01906020850190614673565b5080985061168e565b6000805b89811015611605576114f6858f60030183815481106114b7576114b7614c11565b9060005260206000200154856114cd9190614d29565b6114d79190614d7d565b8583815181106114e9576114e9614c11565b6020026020010151613de1565b91506402540be400611508838a614d29565b6115129190614d7d565b89828151811061152457611524614c11565b6020026020010181815250506402540be4008e600601548a838151811061154d5761154d614c11565b602002602001015161155f9190614d29565b6115699190614d7d565b84828151811061157b5761157b614c11565b602002602001015161158d9190614d66565b8e60030182815481106115a2576115a2614c11565b90600052602060002001819055508881815181106115c2576115c2614c11565b60200260200101518482815181106115dc576115dc614c11565b602002602001018181516115f09190614d66565b905250806115fd81614db8565b915050611496565b50611669611663848f6002018054806020026020016040519081016040528092919081815260200182805480156109dd57602002820191906000526020600020908154815260200190600101908083116109c9575050505050613bd8565b86613a82565b9150836116768184614d66565b6116809088614d29565b61168a9190614d7d565b9950505b60408051808201909152600181527f730000000000000000000000000000000000000000000000000000000000000060208201528a8a10156116fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5060018c01546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906340c10f1990604401600060405180830381600087803b15801561177257600080fd5b505af1158015611786573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d6040516117d69493929190614e5a565b60405180910390a250505050505050509392505050565b6000806117f9886131bf565b9050600088600401546402540be4006118129190614d66565b6118216402540be40088614d29565b61182b9190614d7d565b9050600089600201888154811061184457611844614c11565b90600052602060002001548261185a9190614d29565b83898151811061186c5761186c614c11565b602002602001015161187e9190614d66565b9050600061188f8b8a8c858861326d565b9050838a815181106118a3576118a3614c11565b6020026020010151816118b69190614d66565b94508a6002018a815481106118cd576118cd614c11565b9060005260206000200154856118e39190614d7d565b9450868511156040518060400160405280600181526020017f730000000000000000000000000000000000000000000000000000000000000081525090611957576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b50848b6003018b8154811061196e5761196e614c11565b9060005260206000200160008282546119879190614d66565b92505081905550828b6003018a815481106119a4576119a4614c11565b9060005260206000200160008282546119bd9190614d66565b90915550508a546000908c908c9081106119d9576119d9614c11565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169050611a078187613c90565b9550611a23878a8e6000018d8154811061073557610735614c11565b604080518c8152602081018890529081018b9052606081018a905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc98906080016107b7565b6000611a8b826139a9565b92915050565b600080611a9d866131bf565b9050600086600401546402540be400611ab69190614d66565b611ac56402540be40086614d29565b611acf9190614d7d565b90506000876002018681548110611ae857611ae8614c11565b906000526020600020015482611afe9190614d29565b838781518110611b1057611b10614c11565b6020026020010151611b229190614d66565b90506000611b3389888a858861326d565b90506000611b84858a81518110611b4c57611b4c614c11565b602002602001015183611b5f9190614d66565b8b6002018b81548110611b7457611b74614c11565b9060005260206000200154613e03565b9a9950505050505050505050565b60006064611b9f836139a9565b611a8b9190614d7d565b600080611bb5866131bf565b90506000866002018681548110611bce57611bce614c11565b906000526020600020015484611be49190614d29565b828781518110611bf657611bf6614c11565b6020026020010151611c089190614c88565b90506000611c19888888858761326d565b90506000886002018781548110611c3257611c32614c11565b906000526020600020015482858981518110611c5057611c50614c11565b6020026020010151611c629190614d66565b611c6c9190614d7d565b905060006402540be400828b60040154611c869190614d29565b611c909190614d7d565b9050611b848183614d66565b611ca7838383613eab565b505050565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d439190614c40565b905080841115611d5257600080fd5b845460008167ffffffffffffffff811115611d6f57611d6f61478a565b604051908082528060200260200182016040528015611d98578160200160208202803683370190505b509050611da6873388614084565b935060005b8451811015611f0557858181518110611dc657611dc6614c11565b6020026020010151858281518110611de057611de0614c11565b602002602001015110156040518060400160405280600181526020017f730000000000000000000000000000000000000000000000000000000000000081525090611e58576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b50848181518110611e6b57611e6b614c11565b6020026020010151886003018281548110611e8857611e88614c11565b9060005260206000200154611e9d9190614d66565b886003018281548110611eb257611eb2614c11565b9060005260206000200181905550611ef333868381518110611ed657611ed6614c11565b60200260200101518a600001848154811061073557610735614c11565b80611efd81614db8565b915050611dab565b5060018701546040517f79cc67900000000000000000000000000000000000000000000000000000000081523360048201526024810188905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015611f7a57600080fd5b505af1158015611f8e573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea915086905083611fc38a88614d66565b604051611fd293929190614e93565b60405180910390a25050509392505050565b81518351146040518060400160405280600581526020017f617272617900000000000000000000000000000000000000000000000000000081525090612057576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b506000835167ffffffffffffffff8111156120745761207461478a565b60405190808252806020026020018201604052801561209d578160200160208202803683370190505b5090506000845167ffffffffffffffff8111156120bc576120bc61478a565b6040519080825280602002602001820160405280156120e5578160200160208202803683370190505b50905060005b85518110156122de57600086828151811061210857612108614c11565b60200260200101519050600086838151811061212657612126614c11565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa15801561219e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c29190614c40565b8484815181106121d4576121d4614c11565b6020026020010181815250506402540be4008a60050154826121f69190614d29565b6122009190614d7d565b85848151811061221257612212614c11565b6020026020010181815250508084848151811061223157612231614c11565b602002602001015110156040518060400160405280600181526020017f6200000000000000000000000000000000000000000000000000000000000000815250906122a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b506122cb73ffffffffffffffffffffffffffffffffffffffff83168a83613550565b5050806122d790614db8565b90506120eb565b506040517ff04f270700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87169063f04f270790612337908890889087908990600401614ec9565b600060405180830381600087803b15801561235157600080fd5b505af1158015612365573d6000803e3d6000fd5b5050505060005b85518110156125ea57600086828151811061238957612389614c11565b6020026020010151905060008383815181106123a7576123a7614c11565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015612422573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124469190614c40565b9050818110156040518060400160405280600181526020017f6200000000000000000000000000000000000000000000000000000000000000815250906124ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5060006124c78383614d66565b90508685815181106124db576124db614c11565b602002602001015181101561254c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e73756666696369656e74206c6f616e20666565000000000000000000000060448201526064016104dc565b8373ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff167f0d7d75e01ab95780d3cd1c8ec0dd6c2ce19e3a20427eec8bf53283b6fb8e95f08b88815181106125ad576125ad614c11565b6020026020010151846040516125cd929190918252602082015260400190565b60405180910390a350505050806125e390614db8565b905061236c565b5050505050505050565b8254825160408051808201909152600581527f61727261790000000000000000000000000000000000000000000000000000006020820152600092918214612669576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b506001850154604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916318160ddd9160048083019260209291908290030181865afa1580156126dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127009190614c40565b60408051808201909152600281527f747300000000000000000000000000000000000000000000000000000000000060208201529091508161276f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b50600061277b87613c5b565b90506000612788886139a9565b90506000886003018054806020026020016040519081016040528092919081815260200182805480156127da57602002820191906000526020600020905b8154815260200190600101908083116127c6575b5050505050905060006127f56127ef8b6131bf565b84613a82565b905060005b868110156128575789818151811061281457612814614c11565b602002602001015183828151811061282e5761282e614c11565b602002602001018181516128429190614d66565b9052508061284f81614db8565b9150506127fa565b5060006128b76109e7848d6002018054806020026020016040519081016040528092919081815260200182805480156109dd57602002820191906000526020600020908154815260200190600101908083116109c9575050505050613bd8565b905060008767ffffffffffffffff8111156128d4576128d461478a565b6040519080825280602002602001820160405280156128fd578160200160208202803683370190505b50905060005b88811015612a7d576000848e600301838154811061292357612923614c11565b9060005260206000200154856129399190614d29565b6129439190614d7d565b9050600061296a87848151811061295c5761295c614c11565b602002602001015183613de1565b90506402540be40061297c828b614d29565b6129869190614d7d565b84848151811061299857612998614c11565b6020026020010181815250506402540be4008f600601548585815181106129c1576129c1614c11565b60200260200101516129d39190614d29565b6129dd9190614d7d565b8784815181106129ef576129ef614c11565b6020026020010151612a019190614d66565b8f6003018481548110612a1657612a16614c11565b9060005260206000200181905550838381518110612a3657612a36614c11565b6020026020010151878481518110612a5057612a50614c11565b60200260200101818151612a649190614d66565b905250829150612a75905081614db8565b915050612903565b50612adb611663858e6002018054806020026020016040519081016040528092919081815260200182805480156109dd57602002820191906000526020600020908154815260200190600101908083116109c9575050505050613bd8565b91508287612ae98483614d66565b612af39190614d29565b612afd9190614d7d565b985060008911612b0f57612b0f614df0565b612b198c3361428d565b612b28906402540be400614d66565b612b338a6001614c88565b612b3d9190614d29565b9850898911156040518060400160405280600181526020017f730000000000000000000000000000000000000000000000000000000000000081525090612bb1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5060018c01546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015612c2657600080fd5b505af1158015612c3a573d6000803e3d6000fd5b5050505060005b88811015612caf578b8181518110612c5b57612c5b614c11565b6020026020010151600014612c9d57612c9d338d8381518110612c8057612c80614c11565b60200260200101518f600001848154811061073557610735614c11565b80612ca781614db8565b915050612c41565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c8385612cdf8e8d614d66565b6040516117d69493929190614e5a565b600080612cfb886131bf565b90506000612d5a8989898c6002018c81548110612d1a57612d1a614c11565b90600052602060002001548a612d309190614d29565b868d81518110612d4257612d42614c11565b6020026020010151612d549190614c88565b8661326d565b9050600081838981518110612d7157612d71614c11565b6020026020010151612d839190614d66565b905060006402540be4008b6004015483612d9d9190614d29565b612da79190614d7d565b9050612dcb612db68284614d66565b8c6002018b81548110611b7457611b74614c11565b9150818711156040518060400160405280600281526020017f647900000000000000000000000000000000000000000000000000000000000081525090612e3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b50878b6003018b81548110612e5657612e56614c11565b906000526020600020016000828254612e6f9190614c88565b909155505060028b0180548a908110612e8a57612e8a614c11565b90600052602060002001546402540be4008c6006015483612eab9190614d29565b612eb59190614d7d565b612ebf9190614d7d565b612ec99083614c88565b8b6003018a81548110612ede57612ede614c11565b906000526020600020016000828254612ef79190614d66565b92505081905550612f1886888d6000018c8154811061073557610735614c11565b604080518b8152602081018a90529081018a90526060810188905273ffffffffffffffffffffffffffffffffffffffff8716907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a2509998505050505050505050565b600080612fa3612f95846131bf565b612f9e856139a9565b613a82565b905060008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613016573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303a9190614c40565b9050806130496012600a615080565b6130539084614d29565b61305d9190614d7d565b949350505050565b815460408051808201909152600581527f6172726179000000000000000000000000000000000000000000000000000000602082015260009183106130d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b508260030182815481106130ed576130ed614c11565b906000526020600020015483600001838154811061310d5761310d614c11565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015613184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a89190614c40565b610b6f9190614d66565b606061305d848484614084565b6060611a8b8260030180548060200260200160405190810160405280929190818152602001828054801561321257602002820191906000526020600020905b8154815260200190600101908083116131fe575b5050505050836002018054806020026020016040519081016040528092919081815260200182805480156109dd57602002820191906000526020600020908154815260200190600101908083116109c9575050505050613bd8565b6000838514156040518060400160405280600881526020017f746f6b656e287329000000000000000000000000000000000000000000000000815250906132e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b50855480861080156132f257508085105b6040518060400160405280600581526020017f617272617900000000000000000000000000000000000000000000000000000081525090613360576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b50600061336c886139a9565b9050600061337a8383614d29565b905060006133888684613a82565b9050600081815b8681101561340a57808b146133f85760008c82146133c6578982815181106133b9576133b9614c11565b60200260200101516133c8565b8a5b90506133d48185614c88565b93506133e08882614d29565b6133ea8685614d29565b6133f49190614d7d565b9250505b8061340281614db8565b91505061338f565b506134158685614d29565b60646134218584614d29565b61342b9190614d29565b6134359190614d7d565b9050600084613445606486614d29565b61344f9190614d7d565b6134599084614c88565b9050600084815b6101008110156134e3578192506134ad85838461347d9190614d29565b6134879190614c88565b8886613494866002614d29565b61349e9190614c88565b6134a89190614d66565b613e03565b915060016134bb8484613de1565b116134d157509850613547975050505050505050565b806134db81614db8565b915050613460565b5060408051808201825260048082527f63616c6300000000000000000000000000000000000000000000000000000000602083015291517f08c379a00000000000000000000000000000000000000000000000000000000081526104dc9201614d16565b95945050505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611ca79084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614353565b835460408051808201909152600581527f617272617900000000000000000000000000000000000000000000000000000060208201526000918291908410613699576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5060006136a5876139a9565b905060006136b2886131bf565b905060006136c08284613a82565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137579190614c40565b613761838a614d29565b61376b9190614d7d565b6137759083614d66565b905060006137868b868a878661445b565b90508360006137948d613c5b565b905060005b8d5481101561389b5760008b82036137ed578487878a85815181106137c0576137c0614c11565b60200260200101516137d29190614d29565b6137dc9190614d7d565b6137e69190614d66565b9050613844565b868689848151811061380157613801614c11565b60200260200101516138139190614d29565b61381d9190614d7d565b88838151811061382f5761382f614c11565b60200260200101516138419190614d66565b90505b6402540be4006138548285614d29565b61385e9190614d7d565b84838151811061387057613870614c11565b602002602001018181516138849190614d66565b90525081905061389381614db8565b915050613799565b506138a98d888c858861445b565b828b815181106138bb576138bb614c11565b60200260200101516138cd9190614d66565b98508c6002018a815481106138e4576138e4614c11565b906000526020600020015460018a6138fc9190614d66565b6139069190614d7d565b9850888d6002018b8154811061391e5761391e614c11565b906000526020600020015484888d8151811061393c5761393c614c11565b602002602001015161394e9190614d66565b6139589190614d7d565b6139629190614d66565b97506402540be4006139748e8e61428d565b613983906402540be400614d66565b61398d908b614d29565b6139979190614d7d565b98505050505050505094509492505050565b600081600a015442106139be57506008015490565b816007015482600801541115613a2857816009015482600a01546139e29190614d66565b60098301546139f19042614d66565b83600701548460080154613a059190614d66565b613a0f9190614d29565b613a199190614d7d565b8260070154611a8b9190614c88565b816009015482600a0154613a3c9190614d66565b6009830154613a4b9042614d66565b83600801548460070154613a5f9190614d66565b613a699190614d29565b613a739190614d7d565b8260070154611a8b9190614d66565b815160009081613a91856145c9565b905080600003613aa657600092505050611a8b565b60008181613ab48588614d29565b905060005b6101008110156134e3578260005b8a51811015613b1d57878b8281518110613ae357613ae3614c11565b6020026020010151613af59190614d29565b613aff8684614d29565b613b099190614d7d565b915080613b1581614db8565b915050613ac7565b5083945080876001613b2f9190614c88565b613b399190614d29565b606485613b468287614d66565b613b509190614d29565b613b5a9190614d7d565b613b649190614c88565b84613b6f8984614d29565b6064613b7b8a88614d29565b613b859190614d7d565b613b8f9190614c88565b613b999190614d29565b613ba39190614d7d565b93506001613bb18587613de1565b11613bc55783975050505050505050611a8b565b5080613bd081614db8565b915050613ab9565b606060005b8351811015613c5357838181518110613bf857613bf8614c11565b6020026020010151838281518110613c1257613c12614c11565b6020026020010151613c249190614d29565b838281518110613c3657613c36614c11565b602090810291909101015280613c4b81614db8565b915050613bdd565b509092915050565b8054600090613c6b600182614d66565b613c76906004614d29565b818460040154613c869190614d29565b610b6f9190614d7d565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015613cff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d239190614c40565b9050613d4773ffffffffffffffffffffffffffffffffffffffff8516333086614615565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015613db3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dd79190614c40565b61305d9190614d66565b6000818311613df957613df48383614d66565b610b6f565b610b6f8284614d66565b60408051808201909152600481527f63616c6300000000000000000000000000000000000000000000000000000000602082015260009082613e72576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5082600003613e8357506000611a8b565b81613e8f600185614d66565b613e999190614d7d565b613ea4906001614c88565b9050611a8b565b73ffffffffffffffffffffffffffffffffffffffff8216613ecb57505050565b82600b0154600003613f0b5773ffffffffffffffffffffffffffffffffffffffff82166000908152600d8401602052604090206402540be4009055614057565b6000613f17848461428d565b60018501546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152929350600092909116906370a0823190602401602060405180830381865afa158015613f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fb39190614c40565b600b860154909150613fc58285614c88565b613fcf9190614d29565b1561405457600b850154613fe38285614c88565b613fed9190614d29565b6402540be40086600b0154856140039190614d29565b61400d8585614d29565b6140179190614c88565b6140219190614d29565b61402b9190614d7d565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600d870160205260409020555b50505b5073ffffffffffffffffffffffffffffffffffffffff166000908152600c90910160205260409020429055565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156140f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061411b9190614c40565b9050808311156040518060400160405280600281526020017f74730000000000000000000000000000000000000000000000000000000000008152509061418f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc9190614d16565b5060006402540be4006141a2878761428d565b6141b1906402540be400614d66565b6141bb9086614d29565b6141c59190614d7d565b865490915060009067ffffffffffffffff8111156141e5576141e561478a565b60405190808252806020026020018201604052801561420e578160200160208202803683370190505b50905060005b875481101561428257838389600301838154811061423457614234614c11565b90600052602060002001546142499190614d29565b6142539190614d7d565b82828151811061426557614265614c11565b60209081029190910101528061427a81614db8565b915050614214565b509695505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600c8301602052604081205481906142c4906224ea00614c88565b9050428111156143495760006142da4283614d66565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600d87016020526040902054600b8701549192506402540be400916224ea009184916143229190614d29565b61432c9190614d29565b6143369190614d7d565b6143409190614d7d565b92505050611a8b565b5060009392505050565b6000808373ffffffffffffffffffffffffffffffffffffffff168360405161437b919061508c565b6000604051808303816000865af19150503d80600081146143b8576040519150601f19603f3d011682016040523d82523d6000602084013e6143bd565b606091505b509092509050816143d2573d6000803e3d6000fd5b805115806143ef5750808060200190518101906143ef91906150a8565b614455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f534146455f45524332305f43414c4c5f4641494c45440000000000000000000060448201526064016104dc565b50505050565b845460009080851061446f5761446f614df0565b600061447b8288614d29565b90508360008080805b868110156144f057808b146144de578981815181106144a5576144a5614c11565b6020026020010151925082846144bb9190614c88565b93506144c78784614d29565b6144d18a87614d29565b6144db9190614d7d565b94505b806144e881614db8565b915050614484565b506144fb8686614d29565b60646145078a87614d29565b6145119190614d29565b61451b9190614d7d565b935060008561452b60648b614d29565b6145359190614d7d565b61453f9085614c88565b90508860005b6101008110156134e3578193508a838360026145619190614d29565b61456b9190614c88565b6145759190614d66565b876145808480614d29565b61458a9190614c88565b6145949190614d7d565b915060016145a28584613de1565b116145b7575097506135479650505050505050565b806145c181614db8565b915050614545565b6000805b825181101561460f578281815181106145e8576145e8614c11565b6020026020010151826145fb9190614c88565b91508061460781614db8565b9150506145cd565b50919050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526144559085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016135a2565b8280548282559060005260206000209081019282156146ae579160200282015b828111156146ae578251825591602001919060010190614693565b506146ba9291506146be565b5090565b5b808211156146ba57600081556001016146bf565b73ffffffffffffffffffffffffffffffffffffffff811681146146f557600080fd5b50565b60008060008060008060c0878903121561471157600080fd5b863595506020870135945060408701359350606087013592506080870135915060a087013561473f816146d3565b809150509295509295509295565b6000806000806080858703121561476357600080fd5b843593506020850135614775816146d3565b93969395505050506040820135916060013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156148005761480061478a565b604052919050565b600067ffffffffffffffff8211156148225761482261478a565b5060051b60200190565b600082601f83011261483d57600080fd5b8135602061485261484d83614808565b6147b9565b82815260059290921b8401810191818101908684111561487157600080fd5b8286015b848110156142825780358352918301918301614875565b80151581146146f557600080fd5b6000806000606084860312156148af57600080fd5b83359250602084013567ffffffffffffffff8111156148cd57600080fd5b6148d98682870161482c565b92505060408401356148ea8161488c565b809150509250925092565b6000806000806080858703121561490b57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060006060848603121561493c57600080fd5b83359250602084013567ffffffffffffffff81111561495a57600080fd5b6149668682870161482c565b925050604084013590509250925092565b60006020828403121561498957600080fd5b5035919050565b6000806000606084860312156149a557600080fd5b8335925060208401356149b7816146d3565b929592945050506040919091013590565b6000806000606084860312156149dd57600080fd5b8335925060208401359150604084013567ffffffffffffffff811115614a0257600080fd5b614a0e8682870161482c565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015614a5057835183529284019291840191600101614a34565b50909695505050505050565b600082601f830112614a6d57600080fd5b813567ffffffffffffffff811115614a8757614a8761478a565b614ab860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016147b9565b818152846020838601011115614acd57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215614b0257600080fd5b85359450602080870135614b15816146d3565b9450604087013567ffffffffffffffff80821115614b3257600080fd5b818901915089601f830112614b4657600080fd5b8135614b5461484d82614808565b81815260059190911b8301840190848101908c831115614b7357600080fd5b938501935b82851015614b9a578435614b8b816146d3565b82529385019390850190614b78565b975050506060890135925080831115614bb257600080fd5b614bbe8a848b0161482c565b94506080890135925080831115614bd457600080fd5b5050614be288828901614a5c565b9150509295509295909350565b60008060408385031215614c0257600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215614c5257600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115614c9b57614c9b614c59565b500190565b60005b83811015614cbb578181015183820152602001614ca3565b838111156144555750506000910152565b60008151808452614ce4816020860160208601614ca0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610b6f6020830184614ccc565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614d6157614d61614c59565b500290565b600082821015614d7857614d78614c59565b500390565b600082614db3577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614de957614de9614c59565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600081518084526020808501945080840160005b83811015614e4f57815187529582019590820190600101614e33565b509495945050505050565b608081526000614e6d6080830187614e1f565b8281036020840152614e7f8187614e1f565b604084019590955250506060015292915050565b606081526000614ea66060830186614e1f565b8281036020840152614eb88186614e1f565b915050826040830152949350505050565b6080808252855190820181905260009060209060a0840190828901845b82811015614f1857815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101614ee6565b50505083810382850152614f2c8188614e1f565b9150508281036040840152614f418186614e1f565b90508281036060840152614f558185614ccc565b979650505050505050565b600181815b80851115614fb957817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115614f9f57614f9f614c59565b80851615614fac57918102915b93841c9390800290614f65565b509250929050565b600082614fd057506001611a8b565b81614fdd57506000611a8b565b8160018114614ff35760028114614ffd57615019565b6001915050611a8b565b60ff84111561500e5761500e614c59565b50506001821b611a8b565b5060208310610133831016604e8410600b841016171561503c575081810a611a8b565b6150468383614f60565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561507857615078614c59565b029392505050565b6000610b6f8383614fc1565b6000825161509e818460208701614ca0565b9190910192915050565b6000602082840312156150ba57600080fd5b8151610b6f8161488c56fea2646970667358221220d2b1331655ba0234b095ee0458cb97b77b442dcaaa9b24538f4222587927957b64736f6c634300080d0033",
  "devdoc": {
    "events": {
      "FlashLoan(address,address,uint256,uint256)": {
        "details": "Emitted for each individual flash loan performed by `flashLoan`."
      }
    },
    "kind": "dev",
    "methods": {
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "params": {
          "amounts": "List of amounts of coins to deposit",
          "minMintAmount": "Minimum amount of LP tokens to mint from the deposit"
        },
        "returns": {
          "mintAmount": "Amount of LP tokens received by depositing"
        }
      },
      "onSwap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i": "token index in",
          "j": "token index out",
          "outAmount": "the target out amount - only a cap at the decimalplaces of the lower one, the rest is taken as fee                  - that fee is always about the lowes amount possible of the one with the lower decimal number                  this will have a negative"
        }
      },
      "onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i": "token index in",
          "j": "token index out"
        }
      },
      "onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i": "token index in",
          "j": "token index out"
        }
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "params": {
          "self": "Swap struct to read from and write to",
          "toMint": "amount of pool tokens to be minted",
          "user": "address of the user depositing tokens"
        }
      }
    },
    "stateVariables": {
      "A_PRECISION": {
        "details": "protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration"
      },
      "MAX_ITERATION": {
        "details": "max iteration of converge calccuate"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "notice": "Deposit coins into the pool"
      },
      "calculateSwap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256)": {
        "notice": "pre-implements calculation for Requiem interface for exat in swap "
      },
      "calculateSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256)": {
        "notice": "pre-implements calculation for Requiem interface for exat out swap that due to the fact that the structure is not symmetric (unlike 50/50 pairs) we require a separate function to calculate the input for a given output"
      },
      "calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)": {
        "notice": "Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account"
      },
      "flashLoan(RequiemStableSwapLib.SwapStorage storage,IFlashLoanRecipient,IERC20[],uint256[],bytes)": {
        "notice": "Flash Loan using the stable swap balances"
      },
      "getAPrecise(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "VIEW FUNCTIONS"
      },
      "getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "Returns portfolio virtual price (for calculating profit) scaled up by 1e18"
      },
      "onSwap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "notice": "the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output and caps it at outAmount to   - this is to avoid issues with the rounding when using the calculateSwapGivenOut function to determine the input          -> that is because e.g. a 6 digit input can never exactly hit a 18 digit output, so the input is selected slightly higher              such that the output also is essentially rounded up at the sixth digit          -> the outAmount can only be lower than the actual calculated dy   - viable function for batch swapping"
      },
      "onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "notice": "the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output, in this case simple as the output is the calculated value   - viable function for batch swapping"
      },
      "onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "notice": "the same function as swap, but it espects that amounts already have been sent to the contract and it requires the output to be provided  - designed to be used in the requirem swap framework  - deducts the fees from the output, that means that the    output has to be increased by the fee to then create a highe input"
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "notice": "Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit."
      }
    },
    "notice": "StableSwap main algorithm",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}