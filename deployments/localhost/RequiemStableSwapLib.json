{
  "address": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coin_amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sold_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bought_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        }
      ],
      "name": "TokenExchange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "A_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_TOKEN_COMMON_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcadd57e8a9d3332c4afa99716e1635c7ffbf74731e81e3dad44686bdd5cb124a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
    "transactionIndex": 0,
    "gasUsed": "3615860",
    "logsBloom": "0x
    "blockHash": "0x125368b845de0fd6d8fd0bfa2d99f735803021ffe25b7fa5e3d2dc24365d02b1",
    "transactionHash": "0xcadd57e8a9d3332c4afa99716e1635c7ffbf74731e81e3dad44686bdd5cb124a",
    "logs": [],
    "blockNumber": 35,
    "cumulativeGasUsed": "3615860",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9a769b81686311ef795d1d45e3676d75",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coin_amount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sold_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_sold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bought_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_bought\",\"type\":\"uint256\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_TOKEN_COMMON_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"params\":{\"amounts\":\"List of amounts of coins to deposit\",\"minMintAmount\":\"Minimum amount of LP tokens to mint from the deposit\"},\"returns\":{\"mintAmount\":\"Amount of LP tokens received by depositing\"}},\"onSwap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i\":\"token index in\",\"j\":\"token index out\",\"outAmount\":\"the target out amount - only a cap at the decimalplaces of the lower one, the rest is taken as fee                  - that fee is always about the lowes amount possible of the one with the lower decimal number                  this will have a negative\"}},\"onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i\":\"token index in\",\"j\":\"token index out\"}},\"onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i\":\"token index in\",\"j\":\"token index out\"}},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"params\":{\"self\":\"Swap struct to read from and write to\",\"toMint\":\"amount of pool tokens to be minted\",\"user\":\"address of the user depositing tokens\"}}},\"stateVariables\":{\"A_PRECISION\":{\"details\":\"protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration\"},\"MAX_ITERATION\":{\"details\":\"max iteration of converge calccuate\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"notice\":\"Deposit coins into the pool\"},\"calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)\":{\"notice\":\"Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account\"},\"getAPrecise(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"VIEW FUNCTIONS\"},\"getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"Returns portfolio virtual price (for calculating profit) scaled up by 1e18\"},\"onSwap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output and caps it at outAmount to   - this is to avoid issues with the rounding when using the calculateSwapGivenOut function to determine the input          -> that is because e.g. a 6 digit input can never exactly hit a 18 digit output, so the input is selected slightly higher              such that the output also is essentially rounded up at the sixth digit          -> the outAmount can only be lower than the actual calculated dy   - viable function for batch swapping\"},\"onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output, in this case simple as the output is the calculated value   - viable function for batch swapping\"},\"onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"the same function as swap, but it espects that amounts already have been sent to the contract and it requires the output to be provided  - designed to be used in the requirem swap framework  - deducts the fees from the output, that means that the    output has to be increased by the fee to then create a highe input\"},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"notice\":\"Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit.\"}},\"notice\":\"StableSwap main algorithm\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemStableSwapLib.sol\":\"RequiemStableSwapLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RequiemStableSwapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./tokens/LPToken.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./libraries/math/FullMath.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\n/**\\n * StableSwap main algorithm\\n */\\nlibrary RequiemStableSwapLib {\\n    using SafeERC20 for IERC20;\\n\\n    event AddLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 invariant, uint256 token_supply);\\n\\n    event TokenExchange(address indexed buyer, uint256 sold_id, uint256 tokens_sold, uint256 bought_id, uint256 tokens_bought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 token_supply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 invariant, uint256 token_supply);\\n\\n    uint256 public constant FEE_DENOMINATOR = 1e10;\\n    // uint256 public constant PRECISION = 1e18;\\n\\n    /// @dev protect from division loss when run approximation loop. We cannot divide at the end because of overflow,\\n    /// so we add some (small) PRECISION when divide in each iteration\\n    uint256 public constant A_PRECISION = 100;\\n    /// @dev max iteration of converge calccuate\\n    uint256 internal constant MAX_ITERATION = 256;\\n    uint256 public constant POOL_TOKEN_COMMON_DECIMALS = 18;\\n\\n    struct SwapStorage {\\n        IERC20[] pooledTokens;\\n        LPToken lpToken;\\n        /// @dev token i multiplier to reach POOL_TOKEN_COMMON_DECIMALS\\n        uint256[] tokenMultipliers;\\n        /// @dev effective balance which might different from token balance of the contract 'cause it hold admin fee as well\\n        uint256[] balances;\\n        /// @dev swap fee ratio. Charge on any action which move balance state far from the ideal state\\n        uint256 fee;\\n        /// @dev admin fee in ratio of swap fee.\\n        uint256 adminFee;\\n        /// @dev observation of A, multiplied with A_PRECISION\\n        uint256 initialA;\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n        // withdrawal fee control\\n        uint256 defaultWithdrawFee;\\n        mapping(address => uint256) depositTimestamp;\\n        mapping(address => uint256) withdrawFeeMultiplier;\\n    }\\n\\n    /**\\n     * @notice Deposit coins into the pool\\n     * @param amounts List of amounts of coins to deposit\\n     * @param minMintAmount Minimum amount of LP tokens to mint from the deposit\\n     * @return mintAmount Amount of LP tokens received by depositing\\n     */\\n    function addLiquidity(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 minMintAmount\\n    ) external returns (uint256 mintAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"length\\\");\\n        uint256[] memory fees = new uint256[](nCoins);\\n        uint256 _fee = _feePerToken(self);\\n\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256 D0 = 0;\\n        if (tokenSupply > 0) {\\n            D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\\n        }\\n\\n        uint256[] memory newBalances = self.balances;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (tokenSupply == 0) {\\n                require(amounts[i] > 0, \\\"tokens\\\");\\n            }\\n            // get real transfer in amount\\n            newBalances[i] += _doTransferIn(self.pooledTokens[i], amounts[i]);\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        assert(D1 > D0); // double check\\n\\n        if (tokenSupply == 0) {\\n            self.balances = newBalances;\\n            mintAmount = D1;\\n        } else {\\n            uint256 diff = 0;\\n            for (uint256 i = 0; i < nCoins; i++) {\\n                diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\\n                fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n                self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n                newBalances[i] -= fees[i];\\n            }\\n            D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n            mintAmount = (tokenSupply * (D1 - D0)) / D0;\\n        }\\n\\n        require(mintAmount >= minMintAmount, \\\"> s\\\");\\n\\n        self.lpToken.mint(msg.sender, mintAmount);\\n        emit AddLiquidity(msg.sender, amounts, fees, D1, mintAmount);\\n    }\\n\\n    // implements classic swap function a la compound\\n    // here the regular calculations such as balance values are implemented\\n    // funds are transferred in in that function and are not required to be sent\\n    // to the contract\\n    function swap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256) {\\n        IERC20 inCoin = self.pooledTokens[i];\\n        uint256[] memory normalizedBalances = _xp(self);\\n        inAmount = _doTransferIn(inCoin, inAmount);\\n\\n        uint256 y = _getY(self, i, j, normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]), normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> s\\\");\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n        return dy;\\n    }\\n\\n    /**\\n     *  the same function as swap, but it expects that amounts already have been\\n     *  sent to the contract\\n     *   - designed to be used in the Requiem Swap framework\\n     *   - deducts the fee from the output and caps it at outAmount to\\n     *   - this is to avoid issues with the rounding when using the calculateSwapGivenOut function to determine the input\\n     *          -> that is because e.g. a 6 digit input can never exactly hit a 18 digit output, so the input is selected slightly higher\\n     *              such that the output also is essentially rounded up at the sixth digit\\n     *          -> the outAmount can only be lower than the actual calculated dy\\n     *   - viable function for batch swapping\\n     * @param i token index in\\n     * @param j token index out\\n     * @param outAmount the target out amount - only a cap at the decimalplaces of the lower one, the rest is taken as fee\\n     *                  - that fee is always about the lowes amount possible of the one with the lower decimal number\\n     *                  this will have a negative\\n     */\\n    function onSwap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 outAmount,\\n        address to\\n    ) external returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n\\n        uint256 y = _getY(self, i, j, normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]), normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = divUp(dy - dy_fee, self.tokenMultipliers[j]); // denormalize and round up\\n\\n        // the control outAmount has to be lower or equal than the \\\"actual\\\" one\\n        require(outAmount <= dy, \\\"dy too low\\\");\\n\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        self.pooledTokens[j].safeTransfer(to, outAmount);\\n        emit TokenExchange(to, i, inAmount, j, outAmount);\\n        return dy;\\n    }\\n\\n    /**\\n     *  the same function as swap, but it expects that amounts already have been\\n     *  sent to the contract\\n     *   - designed to be used in the Requiem Swap framework\\n     *   - deducts the fee from the output, in this case simple as the output is the calculated value\\n     *   - viable function for batch swapping\\n     * @param i token index in\\n     * @param j token index out\\n     */\\n    function onSwapGivenIn(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256 dy) {\\n        // we check whether the balance has increased by the suggested inAmount\\n        require(self.balances[i] + inAmount <= IERC20(self.pooledTokens[i]).balanceOf(address(this)), \\\"input\\\");\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\\n        uint256 y = _getY(self, i, j, x, normalizedBalances);\\n\\n        dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> s\\\");\\n\\n        uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + _adminFee;\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n\\n        // returns final output amount\\n        return dy;\\n    }\\n\\n    /**\\n     * the same function as swap, but it espects that amounts already have been\\n     * sent to the contract and it requires the output to be provided\\n     *  - designed to be used in the requirem swap framework\\n     *  - deducts the fees from the output, that means that the\\n     *    output has to be increased by the fee to then create a highe input\\n     * @param i token index in\\n     * @param j token index out\\n     */\\n    function onSwapGivenOut(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 outAmount,\\n        uint256 maxInAmount,\\n        address to\\n    ) external returns (uint256 dx) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n\\n        // thre fee is a percentage from the \\\"actual\\\" amountOut, we have to use the quotient because of that\\n        uint256 _amountOutInclFee = FullMath.mulDiv(outAmount, FEE_DENOMINATOR, FEE_DENOMINATOR - self.fee);\\n\\n        // calculate out balance\\n        uint256 y = normalizedBalances[j] - (_amountOutInclFee * self.tokenMultipliers[j]);\\n\\n        // calculate in balance\\n        uint256 x = _getY(self, j, i, y, normalizedBalances);\\n\\n        // calculate normalized in balance\\n        dx = x - normalizedBalances[i]; // no rounding adjustment\\n\\n        dx = dx / self.tokenMultipliers[i]; // denormalize\\n\\n        require(dx <= maxInAmount, \\\"> s\\\");\\n\\n        // update balances\\n        self.balances[i] -= dx;\\n        self.balances[j] -= _amountOutInclFee;\\n\\n        // do the transfer after all calculations\\n        IERC20 inCoin = self.pooledTokens[i];\\n        dx = _doTransferIn(inCoin, dx); // transfer the calculated amount in\\n\\n        self.pooledTokens[j].safeTransfer(to, outAmount); // transfer the desired amount out\\n        emit TokenExchange(to, i, dx, j, outAmount);\\n\\n        // returns final input amount\\n        return dx;\\n    }\\n\\n    function removeLiquidity(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256[] memory minAmounts\\n    ) external returns (uint256[] memory amounts) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(lpAmount <= totalSupply);\\n        uint256 nCoins = self.pooledTokens.length;\\n\\n        uint256[] memory fees = new uint256[](nCoins);\\n        amounts = _calculateRemoveLiquidity(self, msg.sender, lpAmount);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] >= minAmounts[i], \\\"> s\\\");\\n            self.balances[i] = self.balances[i] - amounts[i];\\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        emit RemoveLiquidity(msg.sender, amounts, fees, totalSupply - lpAmount);\\n    }\\n\\n    function removeLiquidityOneToken(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256 index,\\n        uint256 minAmount\\n    ) external returns (uint256) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply > 0, \\\"totalSupply = 0\\\");\\n        uint256 numTokens = self.pooledTokens.length;\\n        require(lpAmount <= self.lpToken.balanceOf(msg.sender), \\\"> balance\\\");\\n        require(lpAmount <= totalSupply, \\\"> totalSupply\\\");\\n        require(index < numTokens, \\\"tokenNotFound\\\");\\n\\n        uint256 dyFee;\\n        uint256 dy;\\n\\n        (dy, dyFee) = _calculateRemoveLiquidityOneToken(self, msg.sender, lpAmount, index);\\n\\n        require(dy >= minAmount, \\\"> s\\\");\\n\\n        self.balances[index] -= (dy + (dyFee * self.adminFee) / FEE_DENOMINATOR);\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        self.pooledTokens[index].safeTransfer(msg.sender, dy);\\n\\n        emit RemoveLiquidityOne(msg.sender, index, lpAmount, dy);\\n\\n        return dy;\\n    }\\n\\n    function removeLiquidityImbalance(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 maxBurnAmount\\n    ) external returns (uint256 burnAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"length\\\");\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply != 0, \\\"totalSupply = 0\\\");\\n        uint256 _fee = _feePerToken(self);\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256[] memory newBalances = self.balances;\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            newBalances[i] -= amounts[i];\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256[] memory fees = new uint256[](nCoins);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            uint256 idealBalance = (D1 * self.balances[i]) / D0;\\n            uint256 diff = _distance(newBalances[i], idealBalance);\\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n            newBalances[i] -= fees[i];\\n        }\\n\\n        // recalculate invariant with fee charged balances\\n        D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        burnAmount = ((D0 - D1) * totalSupply) / D0;\\n        assert(burnAmount > 0);\\n        burnAmount = (burnAmount + 1) * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, msg.sender)); //In case of rounding errors - make it unfavorable for the \\\"attacker\\\"\\n        require(burnAmount <= maxBurnAmount, \\\"> s\\\");\\n\\n        self.lpToken.burnFrom(msg.sender, burnAmount);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (amounts[i] != 0) {\\n                self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, totalSupply - burnAmount);\\n    }\\n\\n    /// VIEW FUNCTIONS\\n    function getAPrecise(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self);\\n    }\\n\\n    /**\\n     * Returns portfolio virtual price (for calculating profit)\\n     * scaled up by 1e18\\n     */\\n    function getVirtualPrice(SwapStorage storage self) external view returns (uint256) {\\n        uint256 D = _getD(_xp(self), _getAPrecise(self));\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        return (D * 10**POOL_TOKEN_COMMON_DECIMALS) / tokenSupply;\\n    }\\n\\n    function getAdminBalance(SwapStorage storage self, uint256 index) external view returns (uint256) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        return self.pooledTokens[index].balanceOf(address(this)) - (self.balances[index]);\\n    }\\n\\n    /**\\n     * Estimate amount of LP token minted or burned at deposit or withdrawal\\n     * without taking fees into account\\n     */\\n    function calculateTokenAmount(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"length\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        uint256[] memory newBalances = self.balances;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (deposit) {\\n                newBalances[i] += amounts[i];\\n            } else {\\n                newBalances[i] -= amounts[i];\\n            }\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n\\n        if (totalSupply == 0) {\\n            return D1; // first depositor take it all\\n        }\\n\\n        uint256 diff = deposit ? D1 - D0 : D0 - D1;\\n        return (diff * self.lpToken.totalSupply()) / D0;\\n    }\\n\\n    function getA(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self) / A_PRECISION;\\n    }\\n\\n    // implements calculation of stable swap interface\\n    // represents calculateSwapGivenIn function\\n    function calculateSwap(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 newInBalance = normalizedBalances[inIndex] + (inAmount * self.tokenMultipliers[inIndex]);\\n        uint256 outBalance = _getY(self, inIndex, outIndex, newInBalance, normalizedBalances);\\n        uint256 outAmount = (normalizedBalances[outIndex] - outBalance) / self.tokenMultipliers[outIndex];\\n        uint256 _fee = (self.fee * outAmount) / FEE_DENOMINATOR;\\n        return outAmount - _fee;\\n    }\\n\\n    // implements calculation for Requiem interface\\n    // note that due to the fact that the structure is not symmetric (unlike pairs)\\n    // we require a separate function to calculate the input for a given output\\n    function calculateSwapGivenOut(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 outAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        // fee has to be deducted on the output\\n        uint256 _amountOutInclFee = FullMath.mulDiv(outAmount, FEE_DENOMINATOR, FEE_DENOMINATOR - self.fee);\\n        uint256 newOutBalance = normalizedBalances[outIndex] - (_amountOutInclFee * self.tokenMultipliers[outIndex]);\\n        // switch index on regulat _getY function\\n        uint256 inBalance = _getY(self, outIndex, inIndex, newOutBalance, normalizedBalances);\\n        uint256 inAmount = divUp(inBalance - normalizedBalances[inIndex], self.tokenMultipliers[inIndex]);\\n\\n        return inAmount;\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) external view returns (uint256[] memory) {\\n        return _calculateRemoveLiquidity(self, account, amount);\\n    }\\n\\n    function calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 lpAmount,\\n        uint256 tokenIndex\\n    ) external view returns (uint256 amount) {\\n        (amount, ) = _calculateRemoveLiquidityOneToken(self, account, lpAmount, tokenIndex);\\n    }\\n\\n    /**\\n     * @notice Update the withdraw fee for `user`. If the user is currently\\n     * not providing liquidity in the pool, sets to default value. If not, recalculate\\n     * the starting withdraw fee based on the last deposit's time & amount relative\\n     * to the new deposit.\\n     *\\n     * @param self Swap struct to read from and write to\\n     * @param user address of the user depositing tokens\\n     * @param toMint amount of pool tokens to be minted\\n     */\\n    function updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) external {\\n        _updateUserWithdrawFee(self, user, toMint);\\n    }\\n\\n    /// INTERNAL FUNCTIONS\\n\\n    /**\\n     * Ramping A up or down, return A with precision of A_PRECISION\\n     */\\n    function _getAPrecise(SwapStorage storage self) internal view returns (uint256) {\\n        if (block.timestamp >= self.futureATime) {\\n            return self.futureA;\\n        }\\n\\n        if (self.futureA > self.initialA) {\\n            return self.initialA + ((self.futureA - self.initialA) * (block.timestamp - self.initialATime)) / (self.futureATime - self.initialATime);\\n        }\\n\\n        return self.initialA - ((self.initialA - self.futureA) * (block.timestamp - self.initialATime)) / (self.futureATime - self.initialATime);\\n    }\\n\\n    /**\\n     * normalized balances of each tokens.\\n     */\\n    function _xp(uint256[] memory balances, uint256[] memory rates) internal pure returns (uint256[] memory) {\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            rates[i] = (rates[i] * balances[i]);\\n        }\\n\\n        return rates;\\n    }\\n\\n    function _xp(SwapStorage storage self) internal view returns (uint256[] memory) {\\n        return _xp(self.balances, self.tokenMultipliers);\\n    }\\n\\n    /**\\n     * Calculate D for *NORMALIZED* balances of each tokens\\n     * @param xp normalized balances of token\\n     */\\n    function _getD(uint256[] memory xp, uint256 amp) internal pure returns (uint256) {\\n        uint256 nCoins = xp.length;\\n        uint256 sum = _sumOf(xp);\\n        if (sum == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev = 0;\\n        uint256 D = sum;\\n        uint256 Ann = amp * nCoins;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            uint256 D_P = D;\\n            for (uint256 j = 0; j < xp.length; j++) {\\n                D_P = (D_P * D) / (xp[j] * nCoins);\\n            }\\n            Dprev = D;\\n            D = (((Ann * sum) / A_PRECISION + D_P * nCoins) * D) / (((Ann - A_PRECISION) * D) / A_PRECISION + (nCoins + 1) * D_P);\\n            if (_distance(D, Dprev) <= 1) {\\n                return D;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    /**\\n     * calculate new balance of when swap\\n     * Done by solving quadratic equation iteratively.\\n     *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     *  x_1**2 + b*x_1 = c\\n     *  x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     * @param inIndex index of token to swap in\\n     * @param outIndex index of token to swap out\\n     * @param inBalance new balance (normalized) of input token if the swap is successful\\n     * @return NORMALIZED balance of output token if the swap is successful\\n     */\\n    function _getY(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inBalance,\\n        uint256[] memory normalizedBalances\\n    ) internal view returns (uint256) {\\n        require(inIndex != outIndex, \\\"sameToken\\\");\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(inIndex < nCoins && outIndex < nCoins, \\\"indexOutOfRange\\\");\\n\\n        uint256 amp = _getAPrecise(self);\\n        uint256 Ann = amp * nCoins;\\n        uint256 D = _getD(normalizedBalances, amp); // calculate invariant\\n\\n        uint256 sum = 0; // sum of new balances except output token\\n        uint256 c = D;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == outIndex) {\\n                continue;\\n            }\\n\\n            uint256 x = i == inIndex ? inBalance : normalizedBalances[i];\\n            sum += x;\\n            c = (c * D) / (x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = sum + (D * A_PRECISION) / Ann;\\n\\n        uint256 lastY = 0;\\n        uint256 y = D;\\n\\n        for (uint256 index = 0; index < MAX_ITERATION; index++) {\\n            lastY = y;\\n            y = divUp(y * y + c, 2 * y + b - D);\\n            if (_distance(lastY, y) <= 1) {\\n                return y;\\n            }\\n        }\\n\\n        revert(\\\"yCalculationFailed\\\");\\n    }\\n\\n    function _calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) internal view returns (uint256[] memory) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(amount <= totalSupply, \\\"total supply\\\");\\n\\n        uint256 feeAdjustedAmount = (amount * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n\\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            amounts[i] = (self.balances[i] * (feeAdjustedAmount)) / (totalSupply);\\n        }\\n        return amounts;\\n    }\\n\\n    function _calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 tokenAmount,\\n        uint256 index\\n    ) internal view returns (uint256 dy, uint256 fee) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256[] memory xp = _xp(self);\\n        uint256 D0 = _getD(xp, amp);\\n        uint256 D1 = D0 - (tokenAmount * D0) / self.lpToken.totalSupply();\\n        uint256 newY = _getYD(self, amp, index, xp, D1);\\n        uint256[] memory reducedXP = xp;\\n        uint256 _fee = _feePerToken(self);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            uint256 expectedDx = 0;\\n            if (i == index) {\\n                expectedDx = (xp[i] * D1) / D0 - newY;\\n            } else {\\n                expectedDx = xp[i] - (xp[i] * D1) / D0;\\n            }\\n            reducedXP[i] -= (_fee * expectedDx) / FEE_DENOMINATOR;\\n        }\\n\\n        dy = reducedXP[index] - _getYD(self, amp, index, reducedXP, D1);\\n        dy = (dy - 1) / self.tokenMultipliers[index];\\n        fee = ((xp[index] - newY) / self.tokenMultipliers[index]) - dy;\\n        dy = (dy * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n    }\\n\\n    function _feePerToken(SwapStorage storage self) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        return (self.fee * nCoins) / (4 * (nCoins - 1));\\n    }\\n\\n    function _getYD(\\n        SwapStorage storage self,\\n        uint256 A,\\n        uint256 index,\\n        uint256[] memory xp,\\n        uint256 D\\n    ) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        assert(index < nCoins);\\n        uint256 Ann = A * nCoins;\\n        uint256 c = D;\\n        uint256 s = 0;\\n        uint256 _x = 0;\\n        uint256 yPrev = 0;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == index) {\\n                continue;\\n            }\\n            _x = xp[i];\\n            s += _x;\\n            c = (c * D) / (_x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = s + (D * A_PRECISION) / Ann;\\n        uint256 y = D;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(yPrev, y) <= 1) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    function _updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) internal {\\n        // If token is transferred to address 0 (or burned), don't update the fee.\\n        if (user == address(0)) {\\n            return;\\n        }\\n        if (self.defaultWithdrawFee == 0) {\\n            // If current fee is set to 0%, set multiplier to FEE_DENOMINATOR\\n            self.withdrawFeeMultiplier[user] = FEE_DENOMINATOR;\\n        } else {\\n            // Otherwise, calculate appropriate discount based on last deposit amount\\n            uint256 currentFee = _calculateCurrentWithdrawFee(self, user);\\n            uint256 currentBalance = self.lpToken.balanceOf(user);\\n\\n            // ((currentBalance * currentFee) + (toMint * defaultWithdrawFee)) * FEE_DENOMINATOR /\\n            // ((toMint + currentBalance) * defaultWithdrawFee)\\n            if ((toMint + currentBalance) * self.defaultWithdrawFee != 0) {\\n                self.withdrawFeeMultiplier[user] = (((currentBalance * currentFee) + (toMint * self.defaultWithdrawFee)) * (FEE_DENOMINATOR)) / ((toMint + currentBalance) * self.defaultWithdrawFee);\\n            }\\n        }\\n        self.depositTimestamp[user] = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Calculate the fee that is applied when the given user withdraws.\\n     * Withdraw fee decays linearly over 4 weeks.\\n     * @param user address you want to calculate withdraw fee of\\n     * @return current withdraw fee of the user\\n     */\\n    function _calculateCurrentWithdrawFee(SwapStorage storage self, address user) internal view returns (uint256) {\\n        uint256 endTime = self.depositTimestamp[user] + (4 weeks);\\n        if (endTime > block.timestamp) {\\n            uint256 timeLeftover = endTime - block.timestamp;\\n            return (self.defaultWithdrawFee * self.withdrawFeeMultiplier[user] * timeLeftover) / (4 weeks) / FEE_DENOMINATOR;\\n        }\\n        return 0;\\n    }\\n\\n    function _doTransferIn(IERC20 token, uint256 amount) internal returns (uint256) {\\n        uint256 priorBalance = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        return token.balanceOf(address(this)) - priorBalance;\\n    }\\n\\n    function _sumOf(uint256[] memory x) internal pure returns (uint256 sum) {\\n        sum = 0;\\n        for (uint256 i = 0; i < x.length; i++) {\\n            sum += x[i];\\n        }\\n    }\\n\\n    function _distance(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x - y : y - x;\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"div\\\");\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"div\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return 1 + (a - 1) / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc324d4a960e5ef45f6e33f149b7ed4c083f529bc33ce7d82d9d8b2924780d90c\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb7230835a4efbbbebcb5371d121977e859388b33f3ee5d9a7a44fc4de8d6b970\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0xc92c369d1363b5cbec9337ea8921578bd4acd272af2ac9eaf7227a17689f29e9\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event TokenExchange(address indexed buyer, uint256 soldId, uint256 tokensSold, uint256 boughtId, uint256 tokensBought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0xb685b7aaf446335d700bbef1f6411e49c897d8f1d509cfdac256f2cf37b5f29b\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xd5f49ed9e5ab4471a4c25f3730f50ed4c29a9bfa9637306f227c2a59a18bbe81\",\"license\":\"MIT\"},\"contracts/libraries/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ERC20/IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7bf66daeb140a455a28ab3c1e03f4eebb5948ccf6000dbb700f6c57bba03a9d4\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, msg.sender).sub(amount, Errors.ERC20_BURN_EXCEEDS_ALLOWANCE);\\n\\n        _approve(account, msg.sender, decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x82fe5fb385cfe74b417e3aaace26a64aa5190b36ea0716ad441484fb444087f8\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xd978150fb13e68cd0b2b4b237d65306f55397437127bea72622d5cd4244ba92b\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        RequiemErrors._require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\n    }\\n}\\n\",\"keccak256\":\"0xa39a2c090cd9727eeca0658c5a3c382f9dcfe581f4d323bb388776c3237c72fd\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        RequiemErrors._require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        uint256 errorCode\\n    ) internal pure returns (uint256) {\\n        RequiemErrors._require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc82c3356797b0e56c4ac77d5554343f66b3b436a18537bdb146e10921605d729\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x37ebaca1c58a9daf307229c45122f12d603a95d1d92c1a8e7648b1910755bfa0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/math/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.10;\\n\\n// solhint-disable no-inline-assembly, reason-string\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            // EDIT for 0.8 compatibility:\\n            // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint256\\n            uint256 twos = denominator & (~denominator + 1);\\n\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\",\"keccak256\":\"0x19e12765c15662b29f40ac548b86fbde62ed00e32d81b14f895cacd2d4137d07\",\"license\":\"MIT\"},\"contracts/tokens/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\nimport \\\"../libraries/ERC20Burnable.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../interfaces/IRequiemStableSwap.sol\\\";\\n\\ncontract LPToken is Ownable, ERC20Burnable {\\n    IRequiemStableSwap public swap;\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n        swap = IRequiemStableSwap(msg.sender);\\n    }\\n\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"zeroMintAmount\\\");\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n     * minting and burning. This ensures that swap.updateUserWithdrawFees are called everytime.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20) {\\n        super._beforeTokenTransfer(from, to, amount);\\n        swap.updateUserWithdrawFee(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2f4e27227aca77ab9543f1f7ea0a45e5b14b62177b414e47f18248c49613aac3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61407561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101415760003560e01c8063ba2998d9116100c2578063ce055b8d11610086578063ce055b8d146102e2578063d011f91814610302578063d36604ac1461030a578063d73792a91461031d578063e2eba89b14610329578063fa5635971461033c57600080fd5b8063ba2998d914610258578063c188e4be1461026b578063c20aace81461028d578063c685696c14610295578063c8344c06146102c257600080fd5b80638e6da7b6116101095780638e6da7b6146101df578063a3035585146101ff578063aa054aee14610212578063ad30093f14610225578063b52e146f1461024557600080fd5b80630da350f614610146578063159763bb146101795780631e7e95d31461018c5780632bfe30d01461019f5780637a6cba3c146101bf575b600080fd5b81801561015257600080fd5b506101666101613660046139b2565b61034f565b6040519081526020015b60405180910390f35b610166610187366004613a03565b6106aa565b61016661019a366004613b00565b6106c2565b8180156101ab57600080fd5b506101666101ba366004613b5b565b6109cb565b8180156101cb57600080fd5b506101666101da366004613b8d565b610d14565b8180156101eb57600080fd5b506101666101fa3660046139b2565b611387565b61016661020d366004613bdd565b611591565b610166610220366004613b5b565b6115a2565b81801561023157600080fd5b506101666102403660046139b2565b611694565b610166610253366004613bdd565b611911565b610166610266366004613b5b565b611928565b81801561027757600080fd5b5061028b610286366004613bf6565b611a1b565b005b610166601281565b8180156102a157600080fd5b506102b56102b0366004613c2b565b611a2b565b6040516101709190613c7b565b8180156102ce57600080fd5b506101666102dd366004613b8d565b611cd0565b8180156102ee57600080fd5b506101666102fd3660046139b2565b6122ad565b610166606481565b610166610318366004613bdd565b6124e3565b6101666402540be40081565b610166610337366004613cbf565b6125a8565b6102b561034a366004613bf6565b61267f565b600086600001868154811061036657610366613ce1565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156103b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103db9190613cf7565b848860030188815481106103f1576103f1613ce1565b90600052602060002001546104069190613d26565b11156104415760405162461bcd60e51b81526020600482015260056024820152641a5b9c1d5d60da1b60448201526064015b60405180910390fd5b600061044c8861268c565b9050600088600201888154811061046557610465613ce1565b90600052602060002001548661047b9190613d3e565b82898151811061048d5761048d613ce1565b602002602001015161049f9190613d26565b905060006104b08a8a8a858761273a565b9050600181848a815181106104c7576104c7613ce1565b60200260200101516104d99190613d5d565b6104e39190613d5d565b935060006402540be4008b60040154866104fd9190613d3e565b6105079190613d74565b90508a600201898154811061051e5761051e613ce1565b906000526020600020015481866105359190613d5d565b61053f9190613d74565b9450868510156105615760405162461bcd60e51b815260040161043890613d96565b60008b6002018a8154811061057857610578613ce1565b90600052602060002001546402540be4008d60050154846105999190613d3e565b6105a39190613d74565b6105ad9190613d74565b9050888c6003018c815481106105c5576105c5613ce1565b9060005260206000200160008282546105de9190613d26565b909155506105ee90508187613d26565b8c6003018b8154811061060357610603613ce1565b90600052602060002001600082825461061c9190613d5d565b9250508190555061065987878e6000018d8154811061063d5761063d613ce1565b6000918252602090912001546001600160a01b03169190612973565b604080518c8152602081018b90529081018b9052606081018790526001600160a01b03881690600080516020614020833981519152906080015b60405180910390a250505050509695505050505050565b60006106b8858585856129d6565b5095945050505050565b825482516000919081146106e85760405162461bcd60e51b815260040161043890613db3565b60006106f386612cf1565b905060006107096107038861268c565b83612dca565b905060008760030180548060200260200160405190810160405280929190818152602001828054801561075b57602002820191906000526020600020905b815481526020019060010190808311610747575b5050505050905060005b848110156108115786156107bb5787818151811061078557610785613ce1565b602002602001015182828151811061079f5761079f613ce1565b602002602001018181516107b39190613d26565b9052506107ff565b8781815181106107cd576107cd613ce1565b60200260200101518282815181106107e7576107e7613ce1565b602002602001018181516107fb9190613d5d565b9052505b8061080981613dd3565b915050610765565b506000610879610873838b60020180548060200260200160405190810160405280929190818152602001828054801561086957602002820191906000526020600020905b815481526020019060010190808311610855575b5050505050612f66565b85612dca565b905060008960010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f69190613cf7565b90508061090a575094506109c49350505050565b6000886109205761091b8386613d5d565b61092a565b61092a8584613d5d565b9050848b60010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610982573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a69190613cf7565b6109b09083613d3e565b6109ba9190613d74565b9750505050505050505b9392505050565b6000808560010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a479190613cf7565b905060008111610a8b5760405162461bcd60e51b815260206004820152600f60248201526e0746f74616c537570706c79203d203608c1b6044820152606401610438565b855460018701546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610ad7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afb9190613cf7565b861115610b365760405162461bcd60e51b81526020600482015260096024820152683e2062616c616e636560b81b6044820152606401610438565b81861115610b765760405162461bcd60e51b815260206004820152600d60248201526c3e20746f74616c537570706c7960981b6044820152606401610438565b808510610bb55760405162461bcd60e51b815260206004820152600d60248201526c1d1bdad95b939bdd119bdd5b99609a1b6044820152606401610438565b600080610bc489338a8a6129d6565b9250905085811015610be85760405162461bcd60e51b815260040161043890613d96565b6402540be400896005015483610bfe9190613d3e565b610c089190613d74565b610c129082613d26565b896003018881548110610c2757610c27613ce1565b906000526020600020016000828254610c409190613d5d565b9091555050600189015460405163079cc67960e41b8152336004820152602481018a90526001600160a01b03909116906379cc679090604401600060405180830381600087803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b50505050610cc533828b6000018a8154811061063d5761063d613ce1565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b82548251600091908114610d3a5760405162461bcd60e51b815260040161043890613db3565b60008167ffffffffffffffff811115610d5557610d55613a3e565b604051908082528060200260200182016040528015610d7e578160200160208202803683370190505b5090506000610d8c87612fe9565b905060008760010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610de5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e099190613cf7565b90506000610e1689612cf1565b905060008215610ed257610ecf6107038b600301805480602002602001604051908101604052809291908181526020018280548015610e7457602002820191906000526020600020905b815481526020019060010190808311610e60575b50505050508c6002018054806020026020016040519081016040528092919081815260200182805480156108695760200282019190600052602060002090815481526020019060010190808311610855575050505050612f66565b90505b60008a600301805480602002602001604051908101604052809291908181526020018280548015610f2257602002820191906000526020600020905b815481526020019060010190808311610f0e575b5050505050905060005b8781101561101b5784610f8b5760008b8281518110610f4d57610f4d613ce1565b602002602001015111610f8b5760405162461bcd60e51b8152602060048201526006602482015265746f6b656e7360d01b6044820152606401610438565b610fe08c6000018281548110610fa357610fa3613ce1565b9060005260206000200160009054906101000a90046001600160a01b03168c8381518110610fd357610fd3613ce1565b602002602001015161301e565b828281518110610ff257610ff2613ce1565b602002602001018181516110069190613d26565b9052508061101381613dd3565b915050610f2c565b50600061107b610873838e6002018054806020026020016040519081016040528092919081815260200182805480156108695760200282019190600052602060002090815481526020019060010190808311610855575050505050612f66565b905082811161108c5761108c613dee565b846110af5781516110a69060038e01906020850190613936565b508098506112ab565b6000805b8981101561122257611113858f60030183815481106110d4576110d4613ce1565b9060005260206000200154856110ea9190613d3e565b6110f49190613d74565b85838151811061110657611106613ce1565b6020026020010151613116565b91506402540be400611125838a613d3e565b61112f9190613d74565b89828151811061114157611141613ce1565b6020026020010181815250506402540be4008e600501548a838151811061116a5761116a613ce1565b602002602001015161117c9190613d3e565b6111869190613d74565b84828151811061119857611198613ce1565b60200260200101516111aa9190613d5d565b8e60030182815481106111bf576111bf613ce1565b90600052602060002001819055508881815181106111df576111df613ce1565b60200260200101518482815181106111f9576111f9613ce1565b6020026020010181815161120d9190613d5d565b9052508061121a81613dd3565b9150506110b3565b50611286611280848f6002018054806020026020016040519081016040528092919081815260200182805480156108695760200282019190600052602060002090815481526020019060010190808311610855575050505050612f66565b86612dca565b9150836112938184613d5d565b61129d9088613d3e565b6112a79190613d74565b9950505b898910156112cb5760405162461bcd60e51b815260040161043890613d96565b60018c01546040516340c10f1960e01b8152336004820152602481018b90526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561131957600080fd5b505af115801561132d573d6000803e3d6000fd5b50505050336001600160a01b03167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d6040516113709493929190613e3f565b60405180910390a250505050505050509392505050565b6000806113938861268c565b905060006113bb866402540be4008b600401546402540be4006113b69190613d5d565b613138565b905060008960020188815481106113d4576113d4613ce1565b9060005260206000200154826113ea9190613d3e565b8389815181106113fc576113fc613ce1565b602002602001015161140e9190613d5d565b9050600061141f8b8a8c858861273a565b9050838a8151811061143357611433613ce1565b6020026020010151816114469190613d5d565b94508a6002018a8154811061145d5761145d613ce1565b9060005260206000200154856114739190613d74565b9450868511156114955760405162461bcd60e51b815260040161043890613d96565b848b6003018b815481106114ab576114ab613ce1565b9060005260206000200160008282546114c49190613d5d565b92505081905550828b6003018a815481106114e1576114e1613ce1565b9060005260206000200160008282546114fa9190613d5d565b90915550508a546000908c908c90811061151657611516613ce1565b6000918252602090912001546001600160a01b03169050611537818761301e565b9550611553878a8e6000018d8154811061063d5761063d613ce1565b604080518c8152602081018890529081018b9052606081018a90526001600160a01b0388169060008051602061402083398151915290608001610693565b600061159c82612cf1565b92915050565b6000806115ae8661268c565b905060006115d1846402540be40089600401546402540be4006113b69190613d5d565b905060008760020186815481106115ea576115ea613ce1565b9060005260206000200154826116009190613d3e565b83878151811061161257611612613ce1565b60200260200101516116249190613d5d565b9050600061163589888a858861273a565b90506000611686858a8151811061164e5761164e613ce1565b6020026020010151836116619190613d5d565b8b6002018b8154811061167657611676613ce1565b90600052602060002001546131e7565b9a9950505050505050505050565b6000808760000187815481106116ac576116ac613ce1565b60009182526020822001546001600160a01b031691506116cb8961268c565b90506116d7828761301e565b955060006117368a8a8a8d6002018d815481106116f6576116f6613ce1565b90600052602060002001548b61170c9190613d3e565b868e8151811061171e5761171e613ce1565b60200260200101516117309190613d26565b8661273a565b90506000600182848b8151811061174f5761174f613ce1565b60200260200101516117619190613d5d565b61176b9190613d5d565b905060006402540be4008c60040154836117859190613d3e565b61178f9190613d74565b90508b6002018a815481106117a6576117a6613ce1565b906000526020600020015481836117bd9190613d5d565b6117c79190613d74565b9150878210156117e95760405162461bcd60e51b815260040161043890613d96565b888c6003018c815481106117ff576117ff613ce1565b9060005260206000200160008282546118189190613d26565b909155505060028c0180548b90811061183357611833613ce1565b90600052602060002001546402540be4008d60050154836118549190613d3e565b61185e9190613d74565b6118689190613d74565b6118729083613d26565b8c6003018b8154811061188757611887613ce1565b9060005260206000200160008282546118a09190613d5d565b925050819055506118c187838e6000018d8154811061063d5761063d613ce1565b604080518c8152602081018b90529081018b9052606081018390526001600160a01b038816906000805160206140208339815191529060800160405180910390a2509a9950505050505050505050565b6000606461191e83612cf1565b61159c9190613d74565b6000806119348661268c565b9050600086600201868154811061194d5761194d613ce1565b9060005260206000200154846119639190613d3e565b82878151811061197557611975613ce1565b60200260200101516119879190613d26565b90506000611998888888858761273a565b905060008860020187815481106119b1576119b1613ce1565b9060005260206000200154828589815181106119cf576119cf613ce1565b60200260200101516119e19190613d5d565b6119eb9190613d74565b905060006402540be400828b60040154611a059190613d3e565b611a0f9190613d74565b90506116868183613d5d565b611a26838383613251565b505050565b606060008460010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa89190613cf7565b905080841115611ab757600080fd5b845460008167ffffffffffffffff811115611ad457611ad4613a3e565b604051908082528060200260200182016040528015611afd578160200160208202803683370190505b509050611b0b8733886133cd565b935060005b8451811015611c1757858181518110611b2b57611b2b613ce1565b6020026020010151858281518110611b4557611b45613ce1565b60200260200101511015611b6b5760405162461bcd60e51b815260040161043890613d96565b848181518110611b7d57611b7d613ce1565b6020026020010151886003018281548110611b9a57611b9a613ce1565b9060005260206000200154611baf9190613d5d565b886003018281548110611bc457611bc4613ce1565b9060005260206000200181905550611c0533868381518110611be857611be8613ce1565b60200260200101518a600001848154811061063d5761063d613ce1565b80611c0f81613dd3565b915050611b10565b50600187015460405163079cc67960e41b8152336004820152602481018890526001600160a01b03909116906379cc679090604401600060405180830381600087803b158015611c6657600080fd5b505af1158015611c7a573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea915086905083611caf8a88613d5d565b604051611cbe93929190613e78565b60405180910390a25050509392505050565b82548251600091908114611cf65760405162461bcd60e51b815260040161043890613db3565b6001850154604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015611d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d669190613cf7565b905080611da75760405162461bcd60e51b815260206004820152600f60248201526e0746f74616c537570706c79203d203608c1b6044820152606401610438565b6000611db287612fe9565b90506000611dbf88612cf1565b9050600088600301805480602002602001604051908101604052809291908181526020018280548015611e1157602002820191906000526020600020905b815481526020019060010190808311611dfd575b505050505090506000611e2c611e268b61268c565b84612dca565b905060005b86811015611e8e57898181518110611e4b57611e4b613ce1565b6020026020010151838281518110611e6557611e65613ce1565b60200260200101818151611e799190613d5d565b90525080611e8681613dd3565b915050611e31565b506000611eee610873848d6002018054806020026020016040519081016040528092919081815260200182805480156108695760200282019190600052602060002090815481526020019060010190808311610855575050505050612f66565b905060008767ffffffffffffffff811115611f0b57611f0b613a3e565b604051908082528060200260200182016040528015611f34578160200160208202803683370190505b50905060005b888110156120b4576000848e6003018381548110611f5a57611f5a613ce1565b906000526020600020015485611f709190613d3e565b611f7a9190613d74565b90506000611fa1878481518110611f9357611f93613ce1565b602002602001015183613116565b90506402540be400611fb3828b613d3e565b611fbd9190613d74565b848481518110611fcf57611fcf613ce1565b6020026020010181815250506402540be4008f60050154858581518110611ff857611ff8613ce1565b602002602001015161200a9190613d3e565b6120149190613d74565b87848151811061202657612026613ce1565b60200260200101516120389190613d5d565b8f600301848154811061204d5761204d613ce1565b906000526020600020018190555083838151811061206d5761206d613ce1565b602002602001015187848151811061208757612087613ce1565b6020026020010181815161209b9190613d5d565b9052508291506120ac905081613dd3565b915050611f3a565b50612112611280858e6002018054806020026020016040519081016040528092919081815260200182805480156108695760200282019190600052602060002090815481526020019060010190808311610855575050505050612f66565b915082876121208483613d5d565b61212a9190613d3e565b6121349190613d74565b98506000891161214657612146613dee565b6121508c33613588565b61215f906402540be400613d5d565b61216a8a6001613d26565b6121749190613d3e565b9850898911156121965760405162461bcd60e51b815260040161043890613d96565b60018c015460405163079cc67960e41b8152336004820152602481018b90526001600160a01b03909116906379cc679090604401600060405180830381600087803b1580156121e457600080fd5b505af11580156121f8573d6000803e3d6000fd5b5050505060005b8881101561226d578b818151811061221957612219613ce1565b602002602001015160001461225b5761225b338d838151811061223e5761223e613ce1565b60200260200101518f600001848154811061063d5761063d613ce1565b8061226581613dd3565b9150506121ff565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c838561229d8e8d613d5d565b6040516113709493929190613e3f565b6000806122b98861268c565b905060006123008989898c6002018c815481106122d8576122d8613ce1565b90600052602060002001548a6122ee9190613d3e565b868d8151811061171e5761171e613ce1565b90506000600182848a8151811061231957612319613ce1565b602002602001015161232b9190613d5d565b6123359190613d5d565b905060006402540be4008b600401548361234f9190613d3e565b6123599190613d74565b905061237d6123688284613d5d565b8c6002018b8154811061167657611676613ce1565b9150818711156123bc5760405162461bcd60e51b815260206004820152600a602482015269647920746f6f206c6f7760b01b6044820152606401610438565b878b6003018b815481106123d2576123d2613ce1565b9060005260206000200160008282546123eb9190613d26565b909155505060028b0180548a90811061240657612406613ce1565b90600052602060002001546402540be4008c60050154836124279190613d3e565b6124319190613d74565b61243b9190613d74565b6124459083613d26565b8b6003018a8154811061245a5761245a613ce1565b9060005260206000200160008282546124739190613d5d565b9250508190555061249486888d6000018c8154811061063d5761063d613ce1565b604080518b8152602081018a90529081018a9052606081018890526001600160a01b038716906000805160206140208339815191529060800160405180910390a2509998505050505050505050565b6000806125006124f28461268c565b6124fb85612cf1565b612dca565b905060008360010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257d9190613cf7565b90508061258c6012600a613f92565b6125969084613d3e565b6125a09190613d74565b949350505050565b815460009082106125cb5760405162461bcd60e51b815260040161043890613f9e565b8260030182815481106125e0576125e0613ce1565b906000526020600020015483600001838154811061260057612600613ce1565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126759190613cf7565b6109c49190613d5d565b60606125a08484846133cd565b606061159c826003018054806020026020016040519081016040528092919081815260200182805480156126df57602002820191906000526020600020905b8154815260200190600101908083116126cb575b5050505050836002018054806020026020016040519081016040528092919081815260200182805480156108695760200282019190600052602060002090815481526020019060010190808311610855575050505050612f66565b6000838514156127785760405162461bcd60e51b815260206004820152600960248201526839b0b6b2aa37b5b2b760b91b6044820152606401610438565b8554808610801561278857508085105b6127a45760405162461bcd60e51b815260040161043890613f9e565b60006127af88612cf1565b905060006127bd8383613d3e565b905060006127cb8684612dca565b9050600081815b86811015612853578a8114156127e757612841565b60008c821461280f5789828151811061280257612802613ce1565b6020026020010151612811565b8a5b905061281d8185613d26565b93506128298882613d3e565b6128338685613d3e565b61283d9190613d74565b9250505b8061284b81613dd3565b9150506127d2565b5061285e8685613d3e565b606461286a8584613d3e565b6128749190613d3e565b61287e9190613d74565b905060008461288e606486613d3e565b6128989190613d74565b6128a29084613d26565b9050600084815b61010081101561292c578192506128f68583846128c69190613d3e565b6128d09190613d26565b88866128dd866002613d3e565b6128e79190613d26565b6128f19190613d5d565b6131e7565b915060016129048484613116565b1161291a5750985061296a975050505050505050565b8061292481613dd3565b9150506128a9565b5060405162461bcd60e51b81526020600482015260126024820152711e50d85b18dd5b185d1a5bdb91985a5b195960721b6044820152606401610438565b95945050505050565b6040516001600160a01b038316602482015260448101829052611a2690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613634565b8354600090819083106129fb5760405162461bcd60e51b815260040161043890613f9e565b6000612a0687612cf1565b90506000612a138861268c565b90506000612a218284612dca565b905060008960010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9e9190613cf7565b612aa8838a613d3e565b612ab29190613d74565b612abc9083613d5d565b90506000612acd8b868a87866136d9565b9050836000612adb8d612fe9565b905060005b8d54811015612be35760008b821415612b35578487878a8581518110612b0857612b08613ce1565b6020026020010151612b1a9190613d3e565b612b249190613d74565b612b2e9190613d5d565b9050612b8c565b8686898481518110612b4957612b49613ce1565b6020026020010151612b5b9190613d3e565b612b659190613d74565b888381518110612b7757612b77613ce1565b6020026020010151612b899190613d5d565b90505b6402540be400612b9c8285613d3e565b612ba69190613d74565b848381518110612bb857612bb8613ce1565b60200260200101818151612bcc9190613d5d565b905250819050612bdb81613dd3565b915050612ae0565b50612bf18d888c85886136d9565b828b81518110612c0357612c03613ce1565b6020026020010151612c159190613d5d565b98508c6002018a81548110612c2c57612c2c613ce1565b906000526020600020015460018a612c449190613d5d565b612c4e9190613d74565b9850888d6002018b81548110612c6657612c66613ce1565b906000526020600020015484888d81518110612c8457612c84613ce1565b6020026020010151612c969190613d5d565b612ca09190613d74565b612caa9190613d5d565b97506402540be400612cbc8e8e613588565b612ccb906402540be400613d5d565b612cd5908b613d3e565b612cdf9190613d74565b98505050505050505094509492505050565b600081600901544210612d0657506007015490565b816006015482600701541115612d705781600801548260090154612d2a9190613d5d565b6008830154612d399042613d5d565b83600601548460070154612d4d9190613d5d565b612d579190613d3e565b612d619190613d74565b826006015461159c9190613d26565b81600801548260090154612d849190613d5d565b6008830154612d939042613d5d565b83600701548460060154612da79190613d5d565b612db19190613d3e565b612dbb9190613d74565b826006015461159c9190613d5d565b815160009081612dd98561384d565b905080612deb5760009250505061159c565b60008181612df98588613d3e565b905060005b610100811015612f1d578260005b8a51811015612e6257878b8281518110612e2857612e28613ce1565b6020026020010151612e3a9190613d3e565b612e448684613d3e565b612e4e9190613d74565b915080612e5a81613dd3565b915050612e0c565b5083945080876001612e749190613d26565b612e7e9190613d3e565b606485612e8b8287613d5d565b612e959190613d3e565b612e9f9190613d74565b612ea99190613d26565b84612eb48984613d3e565b6064612ec08a88613d3e565b612eca9190613d74565b612ed49190613d26565b612ede9190613d3e565b612ee89190613d74565b93506001612ef68587613116565b11612f0a578397505050505050505061159c565b5080612f1581613dd3565b915050612dfe565b5060405162461bcd60e51b815260206004820152601a60248201527f696e76617269616e7443616c63756c6174696f6e4661696c65640000000000006044820152606401610438565b606060005b8351811015612fe157838181518110612f8657612f86613ce1565b6020026020010151838281518110612fa057612fa0613ce1565b6020026020010151612fb29190613d3e565b838281518110612fc457612fc4613ce1565b602090810291909101015280612fd981613dd3565b915050612f6b565b509092915050565b8054600090612ff9600182613d5d565b613004906004613d3e565b8184600401546130149190613d3e565b6109c49190613d74565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a0823190602401602060405180830381865afa158015613067573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308b9190613cf7565b90506130a26001600160a01b038516333086613899565b6040516370a0823160e01b815230600482015281906001600160a01b038616906370a0823190602401602060405180830381865afa1580156130e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310c9190613cf7565b6125a09190613d5d565b600081831161312e576131298383613d5d565b6109c4565b6109c48284613d5d565b600080806000198587098587029250828110838203039150508060001415613172576000841161316757600080fd5b5082900490506109c4565b80841161317e57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60008161321c5760405162461bcd60e51b81526020600482015260036024820152623234bb60e91b6044820152606401610438565b826132295750600061159c565b81613235600185613d5d565b61323f9190613d74565b61324a906001613d26565b905061159c565b6001600160a01b03821661326457505050565b600a830154613294576001600160a01b0382166000908152600c8401602052604090206402540be40090556133ad565b60006132a08484613588565b60018501546040516370a0823160e01b81526001600160a01b038681166004830152929350600092909116906370a0823190602401602060405180830381865afa1580156132f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133169190613cf7565b600a8601549091506133288285613d26565b6133329190613d3e565b156133aa57600a8501546133468285613d26565b6133509190613d3e565b6402540be40086600a0154856133669190613d3e565b6133708585613d3e565b61337a9190613d26565b6133849190613d3e565b61338e9190613d74565b6001600160a01b0385166000908152600c870160205260409020555b50505b506001600160a01b03166000908152600b90910160205260409020429055565b606060008460010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344a9190613cf7565b90508083111561348b5760405162461bcd60e51b815260206004820152600c60248201526b746f74616c20737570706c7960a01b6044820152606401610438565b60006402540be40061349d8787613588565b6134ac906402540be400613d5d565b6134b69086613d3e565b6134c09190613d74565b865490915060009067ffffffffffffffff8111156134e0576134e0613a3e565b604051908082528060200260200182016040528015613509578160200160208202803683370190505b50905060005b875481101561357d57838389600301838154811061352f5761352f613ce1565b90600052602060002001546135449190613d3e565b61354e9190613d74565b82828151811061356057613560613ce1565b60209081029190910101528061357581613dd3565b91505061350f565b509695505050505050565b6001600160a01b0381166000908152600b8301602052604081205481906135b2906224ea00613d26565b90504281111561362a5760006135c84283613d5d565b6001600160a01b0385166000908152600c87016020526040902054600a8701549192506402540be400916224ea009184916136039190613d3e565b61360d9190613d3e565b6136179190613d74565b6136219190613d74565b9250505061159c565b5060009392505050565b600080836001600160a01b03168360405161364f9190613fc7565b6000604051808303816000865af19150503d806000811461368c576040519150601f19603f3d011682016040523d82523d6000602084013e613691565b606091505b509150915060008214156136a9573d6000803e3d6000fd5b6136d38151600014806136cb5750818060200190518101906136cb9190614002565b6101a26138d1565b50505050565b84546000908085106136ed576136ed613dee565b60006136f98288613d3e565b90508360008080805b86811015613774578a81141561371757613762565b89818151811061372957613729613ce1565b60200260200101519250828461373f9190613d26565b935061374b8784613d3e565b6137558a87613d3e565b61375f9190613d74565b94505b8061376c81613dd3565b915050613702565b5061377f8686613d3e565b606461378b8a87613d3e565b6137959190613d3e565b61379f9190613d74565b93506000856137af60648b613d3e565b6137b99190613d74565b6137c39085613d26565b90508860005b610100811015612f1d578193508a838360026137e59190613d3e565b6137ef9190613d26565b6137f99190613d5d565b876138048480613d3e565b61380e9190613d26565b6138189190613d74565b915060016138268584613116565b1161383b5750975061296a9650505050505050565b8061384581613dd3565b9150506137c9565b6000805b82518110156138935782818151811061386c5761386c613ce1565b60200260200101518261387f9190613d26565b91508061388b81613dd3565b915050613851565b50919050565b6040516001600160a01b03808516602483015283166044820152606481018290526136d39085906323b872dd60e01b9060840161299f565b816138df576138df816138e3565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b828054828255906000526020600020908101928215613971579160200282015b82811115613971578251825591602001919060010190613956565b5061397d929150613981565b5090565b5b8082111561397d5760008155600101613982565b80356001600160a01b03811681146139ad57600080fd5b919050565b60008060008060008060c087890312156139cb57600080fd5b86359550602087013594506040870135935060608701359250608087013591506139f760a08801613996565b90509295509295509295565b60008060008060808587031215613a1957600080fd5b84359350613a2960208601613996565b93969395505050506040820135916060013590565b634e487b7160e01b600052604160045260246000fd5b600082601f830112613a6557600080fd5b8135602067ffffffffffffffff80831115613a8257613a82613a3e565b8260051b604051601f19603f83011681018181108482111715613aa757613aa7613a3e565b604052938452858101830193838101925087851115613ac557600080fd5b83870191505b84821015613ae457813583529183019190830190613acb565b979650505050505050565b8015158114613afd57600080fd5b50565b600080600060608486031215613b1557600080fd5b83359250602084013567ffffffffffffffff811115613b3357600080fd5b613b3f86828701613a54565b9250506040840135613b5081613aef565b809150509250925092565b60008060008060808587031215613b7157600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060608486031215613ba257600080fd5b83359250602084013567ffffffffffffffff811115613bc057600080fd5b613bcc86828701613a54565b925050604084013590509250925092565b600060208284031215613bef57600080fd5b5035919050565b600080600060608486031215613c0b57600080fd5b83359250613c1b60208501613996565b9150604084013590509250925092565b600080600060608486031215613c4057600080fd5b8335925060208401359150604084013567ffffffffffffffff811115613c6557600080fd5b613c7186828701613a54565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015613cb357835183529284019291840191600101613c97565b50909695505050505050565b60008060408385031215613cd257600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613d0957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115613d3957613d39613d10565b500190565b6000816000190483118215151615613d5857613d58613d10565b500290565b600082821015613d6f57613d6f613d10565b500390565b600082613d9157634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600390820152623e207360e81b604082015260600190565b6020808252600690820152650d8cadccee8d60d31b604082015260600190565b6000600019821415613de757613de7613d10565b5060010190565b634e487b7160e01b600052600160045260246000fd5b600081518084526020808501945080840160005b83811015613e3457815187529582019590820190600101613e18565b509495945050505050565b608081526000613e526080830187613e04565b8281036020840152613e648187613e04565b604084019590955250506060015292915050565b606081526000613e8b6060830186613e04565b8281036020840152613e9d8186613e04565b915050826040830152949350505050565b600181815b80851115613ee9578160001904821115613ecf57613ecf613d10565b80851615613edc57918102915b93841c9390800290613eb3565b509250929050565b600082613f005750600161159c565b81613f0d5750600061159c565b8160018114613f235760028114613f2d57613f49565b600191505061159c565b60ff841115613f3e57613f3e613d10565b50506001821b61159c565b5060208310610133831016604e8410600b8410161715613f6c575081810a61159c565b613f768383613eae565b8060001904821115613f8a57613f8a613d10565b029392505050565b60006109c48383613ef1565b6020808252600f908201526e696e6465784f75744f6652616e676560881b604082015260600190565b6000825160005b81811015613fe85760208186018101518583015201613fce565b81811115613ff7576000828501525b509190910192915050565b60006020828403121561401457600080fd5b81516109c481613aef56feb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc98a2646970667358221220e6c78aa5e4b323ec01e7062abeba31ddd05dda2fa6c4f462b80078b68da6531d64736f6c634300080a0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101415760003560e01c8063ba2998d9116100c2578063ce055b8d11610086578063ce055b8d146102e2578063d011f91814610302578063d36604ac1461030a578063d73792a91461031d578063e2eba89b14610329578063fa5635971461033c57600080fd5b8063ba2998d914610258578063c188e4be1461026b578063c20aace81461028d578063c685696c14610295578063c8344c06146102c257600080fd5b80638e6da7b6116101095780638e6da7b6146101df578063a3035585146101ff578063aa054aee14610212578063ad30093f14610225578063b52e146f1461024557600080fd5b80630da350f614610146578063159763bb146101795780631e7e95d31461018c5780632bfe30d01461019f5780637a6cba3c146101bf575b600080fd5b81801561015257600080fd5b506101666101613660046139b2565b61034f565b6040519081526020015b60405180910390f35b610166610187366004613a03565b6106aa565b61016661019a366004613b00565b6106c2565b8180156101ab57600080fd5b506101666101ba366004613b5b565b6109cb565b8180156101cb57600080fd5b506101666101da366004613b8d565b610d14565b8180156101eb57600080fd5b506101666101fa3660046139b2565b611387565b61016661020d366004613bdd565b611591565b610166610220366004613b5b565b6115a2565b81801561023157600080fd5b506101666102403660046139b2565b611694565b610166610253366004613bdd565b611911565b610166610266366004613b5b565b611928565b81801561027757600080fd5b5061028b610286366004613bf6565b611a1b565b005b610166601281565b8180156102a157600080fd5b506102b56102b0366004613c2b565b611a2b565b6040516101709190613c7b565b8180156102ce57600080fd5b506101666102dd366004613b8d565b611cd0565b8180156102ee57600080fd5b506101666102fd3660046139b2565b6122ad565b610166606481565b610166610318366004613bdd565b6124e3565b6101666402540be40081565b610166610337366004613cbf565b6125a8565b6102b561034a366004613bf6565b61267f565b600086600001868154811061036657610366613ce1565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156103b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103db9190613cf7565b848860030188815481106103f1576103f1613ce1565b90600052602060002001546104069190613d26565b11156104415760405162461bcd60e51b81526020600482015260056024820152641a5b9c1d5d60da1b60448201526064015b60405180910390fd5b600061044c8861268c565b9050600088600201888154811061046557610465613ce1565b90600052602060002001548661047b9190613d3e565b82898151811061048d5761048d613ce1565b602002602001015161049f9190613d26565b905060006104b08a8a8a858761273a565b9050600181848a815181106104c7576104c7613ce1565b60200260200101516104d99190613d5d565b6104e39190613d5d565b935060006402540be4008b60040154866104fd9190613d3e565b6105079190613d74565b90508a600201898154811061051e5761051e613ce1565b906000526020600020015481866105359190613d5d565b61053f9190613d74565b9450868510156105615760405162461bcd60e51b815260040161043890613d96565b60008b6002018a8154811061057857610578613ce1565b90600052602060002001546402540be4008d60050154846105999190613d3e565b6105a39190613d74565b6105ad9190613d74565b9050888c6003018c815481106105c5576105c5613ce1565b9060005260206000200160008282546105de9190613d26565b909155506105ee90508187613d26565b8c6003018b8154811061060357610603613ce1565b90600052602060002001600082825461061c9190613d5d565b9250508190555061065987878e6000018d8154811061063d5761063d613ce1565b6000918252602090912001546001600160a01b03169190612973565b604080518c8152602081018b90529081018b9052606081018790526001600160a01b03881690600080516020614020833981519152906080015b60405180910390a250505050509695505050505050565b60006106b8858585856129d6565b5095945050505050565b825482516000919081146106e85760405162461bcd60e51b815260040161043890613db3565b60006106f386612cf1565b905060006107096107038861268c565b83612dca565b905060008760030180548060200260200160405190810160405280929190818152602001828054801561075b57602002820191906000526020600020905b815481526020019060010190808311610747575b5050505050905060005b848110156108115786156107bb5787818151811061078557610785613ce1565b602002602001015182828151811061079f5761079f613ce1565b602002602001018181516107b39190613d26565b9052506107ff565b8781815181106107cd576107cd613ce1565b60200260200101518282815181106107e7576107e7613ce1565b602002602001018181516107fb9190613d5d565b9052505b8061080981613dd3565b915050610765565b506000610879610873838b60020180548060200260200160405190810160405280929190818152602001828054801561086957602002820191906000526020600020905b815481526020019060010190808311610855575b5050505050612f66565b85612dca565b905060008960010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f69190613cf7565b90508061090a575094506109c49350505050565b6000886109205761091b8386613d5d565b61092a565b61092a8584613d5d565b9050848b60010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610982573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a69190613cf7565b6109b09083613d3e565b6109ba9190613d74565b9750505050505050505b9392505050565b6000808560010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a479190613cf7565b905060008111610a8b5760405162461bcd60e51b815260206004820152600f60248201526e0746f74616c537570706c79203d203608c1b6044820152606401610438565b855460018701546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610ad7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afb9190613cf7565b861115610b365760405162461bcd60e51b81526020600482015260096024820152683e2062616c616e636560b81b6044820152606401610438565b81861115610b765760405162461bcd60e51b815260206004820152600d60248201526c3e20746f74616c537570706c7960981b6044820152606401610438565b808510610bb55760405162461bcd60e51b815260206004820152600d60248201526c1d1bdad95b939bdd119bdd5b99609a1b6044820152606401610438565b600080610bc489338a8a6129d6565b9250905085811015610be85760405162461bcd60e51b815260040161043890613d96565b6402540be400896005015483610bfe9190613d3e565b610c089190613d74565b610c129082613d26565b896003018881548110610c2757610c27613ce1565b906000526020600020016000828254610c409190613d5d565b9091555050600189015460405163079cc67960e41b8152336004820152602481018a90526001600160a01b03909116906379cc679090604401600060405180830381600087803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b50505050610cc533828b6000018a8154811061063d5761063d613ce1565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b82548251600091908114610d3a5760405162461bcd60e51b815260040161043890613db3565b60008167ffffffffffffffff811115610d5557610d55613a3e565b604051908082528060200260200182016040528015610d7e578160200160208202803683370190505b5090506000610d8c87612fe9565b905060008760010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610de5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e099190613cf7565b90506000610e1689612cf1565b905060008215610ed257610ecf6107038b600301805480602002602001604051908101604052809291908181526020018280548015610e7457602002820191906000526020600020905b815481526020019060010190808311610e60575b50505050508c6002018054806020026020016040519081016040528092919081815260200182805480156108695760200282019190600052602060002090815481526020019060010190808311610855575050505050612f66565b90505b60008a600301805480602002602001604051908101604052809291908181526020018280548015610f2257602002820191906000526020600020905b815481526020019060010190808311610f0e575b5050505050905060005b8781101561101b5784610f8b5760008b8281518110610f4d57610f4d613ce1565b602002602001015111610f8b5760405162461bcd60e51b8152602060048201526006602482015265746f6b656e7360d01b6044820152606401610438565b610fe08c6000018281548110610fa357610fa3613ce1565b9060005260206000200160009054906101000a90046001600160a01b03168c8381518110610fd357610fd3613ce1565b602002602001015161301e565b828281518110610ff257610ff2613ce1565b602002602001018181516110069190613d26565b9052508061101381613dd3565b915050610f2c565b50600061107b610873838e6002018054806020026020016040519081016040528092919081815260200182805480156108695760200282019190600052602060002090815481526020019060010190808311610855575050505050612f66565b905082811161108c5761108c613dee565b846110af5781516110a69060038e01906020850190613936565b508098506112ab565b6000805b8981101561122257611113858f60030183815481106110d4576110d4613ce1565b9060005260206000200154856110ea9190613d3e565b6110f49190613d74565b85838151811061110657611106613ce1565b6020026020010151613116565b91506402540be400611125838a613d3e565b61112f9190613d74565b89828151811061114157611141613ce1565b6020026020010181815250506402540be4008e600501548a838151811061116a5761116a613ce1565b602002602001015161117c9190613d3e565b6111869190613d74565b84828151811061119857611198613ce1565b60200260200101516111aa9190613d5d565b8e60030182815481106111bf576111bf613ce1565b90600052602060002001819055508881815181106111df576111df613ce1565b60200260200101518482815181106111f9576111f9613ce1565b6020026020010181815161120d9190613d5d565b9052508061121a81613dd3565b9150506110b3565b50611286611280848f6002018054806020026020016040519081016040528092919081815260200182805480156108695760200282019190600052602060002090815481526020019060010190808311610855575050505050612f66565b86612dca565b9150836112938184613d5d565b61129d9088613d3e565b6112a79190613d74565b9950505b898910156112cb5760405162461bcd60e51b815260040161043890613d96565b60018c01546040516340c10f1960e01b8152336004820152602481018b90526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561131957600080fd5b505af115801561132d573d6000803e3d6000fd5b50505050336001600160a01b03167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d6040516113709493929190613e3f565b60405180910390a250505050505050509392505050565b6000806113938861268c565b905060006113bb866402540be4008b600401546402540be4006113b69190613d5d565b613138565b905060008960020188815481106113d4576113d4613ce1565b9060005260206000200154826113ea9190613d3e565b8389815181106113fc576113fc613ce1565b602002602001015161140e9190613d5d565b9050600061141f8b8a8c858861273a565b9050838a8151811061143357611433613ce1565b6020026020010151816114469190613d5d565b94508a6002018a8154811061145d5761145d613ce1565b9060005260206000200154856114739190613d74565b9450868511156114955760405162461bcd60e51b815260040161043890613d96565b848b6003018b815481106114ab576114ab613ce1565b9060005260206000200160008282546114c49190613d5d565b92505081905550828b6003018a815481106114e1576114e1613ce1565b9060005260206000200160008282546114fa9190613d5d565b90915550508a546000908c908c90811061151657611516613ce1565b6000918252602090912001546001600160a01b03169050611537818761301e565b9550611553878a8e6000018d8154811061063d5761063d613ce1565b604080518c8152602081018890529081018b9052606081018a90526001600160a01b0388169060008051602061402083398151915290608001610693565b600061159c82612cf1565b92915050565b6000806115ae8661268c565b905060006115d1846402540be40089600401546402540be4006113b69190613d5d565b905060008760020186815481106115ea576115ea613ce1565b9060005260206000200154826116009190613d3e565b83878151811061161257611612613ce1565b60200260200101516116249190613d5d565b9050600061163589888a858861273a565b90506000611686858a8151811061164e5761164e613ce1565b6020026020010151836116619190613d5d565b8b6002018b8154811061167657611676613ce1565b90600052602060002001546131e7565b9a9950505050505050505050565b6000808760000187815481106116ac576116ac613ce1565b60009182526020822001546001600160a01b031691506116cb8961268c565b90506116d7828761301e565b955060006117368a8a8a8d6002018d815481106116f6576116f6613ce1565b90600052602060002001548b61170c9190613d3e565b868e8151811061171e5761171e613ce1565b60200260200101516117309190613d26565b8661273a565b90506000600182848b8151811061174f5761174f613ce1565b60200260200101516117619190613d5d565b61176b9190613d5d565b905060006402540be4008c60040154836117859190613d3e565b61178f9190613d74565b90508b6002018a815481106117a6576117a6613ce1565b906000526020600020015481836117bd9190613d5d565b6117c79190613d74565b9150878210156117e95760405162461bcd60e51b815260040161043890613d96565b888c6003018c815481106117ff576117ff613ce1565b9060005260206000200160008282546118189190613d26565b909155505060028c0180548b90811061183357611833613ce1565b90600052602060002001546402540be4008d60050154836118549190613d3e565b61185e9190613d74565b6118689190613d74565b6118729083613d26565b8c6003018b8154811061188757611887613ce1565b9060005260206000200160008282546118a09190613d5d565b925050819055506118c187838e6000018d8154811061063d5761063d613ce1565b604080518c8152602081018b90529081018b9052606081018390526001600160a01b038816906000805160206140208339815191529060800160405180910390a2509a9950505050505050505050565b6000606461191e83612cf1565b61159c9190613d74565b6000806119348661268c565b9050600086600201868154811061194d5761194d613ce1565b9060005260206000200154846119639190613d3e565b82878151811061197557611975613ce1565b60200260200101516119879190613d26565b90506000611998888888858761273a565b905060008860020187815481106119b1576119b1613ce1565b9060005260206000200154828589815181106119cf576119cf613ce1565b60200260200101516119e19190613d5d565b6119eb9190613d74565b905060006402540be400828b60040154611a059190613d3e565b611a0f9190613d74565b90506116868183613d5d565b611a26838383613251565b505050565b606060008460010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa89190613cf7565b905080841115611ab757600080fd5b845460008167ffffffffffffffff811115611ad457611ad4613a3e565b604051908082528060200260200182016040528015611afd578160200160208202803683370190505b509050611b0b8733886133cd565b935060005b8451811015611c1757858181518110611b2b57611b2b613ce1565b6020026020010151858281518110611b4557611b45613ce1565b60200260200101511015611b6b5760405162461bcd60e51b815260040161043890613d96565b848181518110611b7d57611b7d613ce1565b6020026020010151886003018281548110611b9a57611b9a613ce1565b9060005260206000200154611baf9190613d5d565b886003018281548110611bc457611bc4613ce1565b9060005260206000200181905550611c0533868381518110611be857611be8613ce1565b60200260200101518a600001848154811061063d5761063d613ce1565b80611c0f81613dd3565b915050611b10565b50600187015460405163079cc67960e41b8152336004820152602481018890526001600160a01b03909116906379cc679090604401600060405180830381600087803b158015611c6657600080fd5b505af1158015611c7a573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea915086905083611caf8a88613d5d565b604051611cbe93929190613e78565b60405180910390a25050509392505050565b82548251600091908114611cf65760405162461bcd60e51b815260040161043890613db3565b6001850154604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015611d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d669190613cf7565b905080611da75760405162461bcd60e51b815260206004820152600f60248201526e0746f74616c537570706c79203d203608c1b6044820152606401610438565b6000611db287612fe9565b90506000611dbf88612cf1565b9050600088600301805480602002602001604051908101604052809291908181526020018280548015611e1157602002820191906000526020600020905b815481526020019060010190808311611dfd575b505050505090506000611e2c611e268b61268c565b84612dca565b905060005b86811015611e8e57898181518110611e4b57611e4b613ce1565b6020026020010151838281518110611e6557611e65613ce1565b60200260200101818151611e799190613d5d565b90525080611e8681613dd3565b915050611e31565b506000611eee610873848d6002018054806020026020016040519081016040528092919081815260200182805480156108695760200282019190600052602060002090815481526020019060010190808311610855575050505050612f66565b905060008767ffffffffffffffff811115611f0b57611f0b613a3e565b604051908082528060200260200182016040528015611f34578160200160208202803683370190505b50905060005b888110156120b4576000848e6003018381548110611f5a57611f5a613ce1565b906000526020600020015485611f709190613d3e565b611f7a9190613d74565b90506000611fa1878481518110611f9357611f93613ce1565b602002602001015183613116565b90506402540be400611fb3828b613d3e565b611fbd9190613d74565b848481518110611fcf57611fcf613ce1565b6020026020010181815250506402540be4008f60050154858581518110611ff857611ff8613ce1565b602002602001015161200a9190613d3e565b6120149190613d74565b87848151811061202657612026613ce1565b60200260200101516120389190613d5d565b8f600301848154811061204d5761204d613ce1565b906000526020600020018190555083838151811061206d5761206d613ce1565b602002602001015187848151811061208757612087613ce1565b6020026020010181815161209b9190613d5d565b9052508291506120ac905081613dd3565b915050611f3a565b50612112611280858e6002018054806020026020016040519081016040528092919081815260200182805480156108695760200282019190600052602060002090815481526020019060010190808311610855575050505050612f66565b915082876121208483613d5d565b61212a9190613d3e565b6121349190613d74565b98506000891161214657612146613dee565b6121508c33613588565b61215f906402540be400613d5d565b61216a8a6001613d26565b6121749190613d3e565b9850898911156121965760405162461bcd60e51b815260040161043890613d96565b60018c015460405163079cc67960e41b8152336004820152602481018b90526001600160a01b03909116906379cc679090604401600060405180830381600087803b1580156121e457600080fd5b505af11580156121f8573d6000803e3d6000fd5b5050505060005b8881101561226d578b818151811061221957612219613ce1565b602002602001015160001461225b5761225b338d838151811061223e5761223e613ce1565b60200260200101518f600001848154811061063d5761063d613ce1565b8061226581613dd3565b9150506121ff565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c838561229d8e8d613d5d565b6040516113709493929190613e3f565b6000806122b98861268c565b905060006123008989898c6002018c815481106122d8576122d8613ce1565b90600052602060002001548a6122ee9190613d3e565b868d8151811061171e5761171e613ce1565b90506000600182848a8151811061231957612319613ce1565b602002602001015161232b9190613d5d565b6123359190613d5d565b905060006402540be4008b600401548361234f9190613d3e565b6123599190613d74565b905061237d6123688284613d5d565b8c6002018b8154811061167657611676613ce1565b9150818711156123bc5760405162461bcd60e51b815260206004820152600a602482015269647920746f6f206c6f7760b01b6044820152606401610438565b878b6003018b815481106123d2576123d2613ce1565b9060005260206000200160008282546123eb9190613d26565b909155505060028b0180548a90811061240657612406613ce1565b90600052602060002001546402540be4008c60050154836124279190613d3e565b6124319190613d74565b61243b9190613d74565b6124459083613d26565b8b6003018a8154811061245a5761245a613ce1565b9060005260206000200160008282546124739190613d5d565b9250508190555061249486888d6000018c8154811061063d5761063d613ce1565b604080518b8152602081018a90529081018a9052606081018890526001600160a01b038716906000805160206140208339815191529060800160405180910390a2509998505050505050505050565b6000806125006124f28461268c565b6124fb85612cf1565b612dca565b905060008360010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257d9190613cf7565b90508061258c6012600a613f92565b6125969084613d3e565b6125a09190613d74565b949350505050565b815460009082106125cb5760405162461bcd60e51b815260040161043890613f9e565b8260030182815481106125e0576125e0613ce1565b906000526020600020015483600001838154811061260057612600613ce1565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126759190613cf7565b6109c49190613d5d565b60606125a08484846133cd565b606061159c826003018054806020026020016040519081016040528092919081815260200182805480156126df57602002820191906000526020600020905b8154815260200190600101908083116126cb575b5050505050836002018054806020026020016040519081016040528092919081815260200182805480156108695760200282019190600052602060002090815481526020019060010190808311610855575050505050612f66565b6000838514156127785760405162461bcd60e51b815260206004820152600960248201526839b0b6b2aa37b5b2b760b91b6044820152606401610438565b8554808610801561278857508085105b6127a45760405162461bcd60e51b815260040161043890613f9e565b60006127af88612cf1565b905060006127bd8383613d3e565b905060006127cb8684612dca565b9050600081815b86811015612853578a8114156127e757612841565b60008c821461280f5789828151811061280257612802613ce1565b6020026020010151612811565b8a5b905061281d8185613d26565b93506128298882613d3e565b6128338685613d3e565b61283d9190613d74565b9250505b8061284b81613dd3565b9150506127d2565b5061285e8685613d3e565b606461286a8584613d3e565b6128749190613d3e565b61287e9190613d74565b905060008461288e606486613d3e565b6128989190613d74565b6128a29084613d26565b9050600084815b61010081101561292c578192506128f68583846128c69190613d3e565b6128d09190613d26565b88866128dd866002613d3e565b6128e79190613d26565b6128f19190613d5d565b6131e7565b915060016129048484613116565b1161291a5750985061296a975050505050505050565b8061292481613dd3565b9150506128a9565b5060405162461bcd60e51b81526020600482015260126024820152711e50d85b18dd5b185d1a5bdb91985a5b195960721b6044820152606401610438565b95945050505050565b6040516001600160a01b038316602482015260448101829052611a2690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613634565b8354600090819083106129fb5760405162461bcd60e51b815260040161043890613f9e565b6000612a0687612cf1565b90506000612a138861268c565b90506000612a218284612dca565b905060008960010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9e9190613cf7565b612aa8838a613d3e565b612ab29190613d74565b612abc9083613d5d565b90506000612acd8b868a87866136d9565b9050836000612adb8d612fe9565b905060005b8d54811015612be35760008b821415612b35578487878a8581518110612b0857612b08613ce1565b6020026020010151612b1a9190613d3e565b612b249190613d74565b612b2e9190613d5d565b9050612b8c565b8686898481518110612b4957612b49613ce1565b6020026020010151612b5b9190613d3e565b612b659190613d74565b888381518110612b7757612b77613ce1565b6020026020010151612b899190613d5d565b90505b6402540be400612b9c8285613d3e565b612ba69190613d74565b848381518110612bb857612bb8613ce1565b60200260200101818151612bcc9190613d5d565b905250819050612bdb81613dd3565b915050612ae0565b50612bf18d888c85886136d9565b828b81518110612c0357612c03613ce1565b6020026020010151612c159190613d5d565b98508c6002018a81548110612c2c57612c2c613ce1565b906000526020600020015460018a612c449190613d5d565b612c4e9190613d74565b9850888d6002018b81548110612c6657612c66613ce1565b906000526020600020015484888d81518110612c8457612c84613ce1565b6020026020010151612c969190613d5d565b612ca09190613d74565b612caa9190613d5d565b97506402540be400612cbc8e8e613588565b612ccb906402540be400613d5d565b612cd5908b613d3e565b612cdf9190613d74565b98505050505050505094509492505050565b600081600901544210612d0657506007015490565b816006015482600701541115612d705781600801548260090154612d2a9190613d5d565b6008830154612d399042613d5d565b83600601548460070154612d4d9190613d5d565b612d579190613d3e565b612d619190613d74565b826006015461159c9190613d26565b81600801548260090154612d849190613d5d565b6008830154612d939042613d5d565b83600701548460060154612da79190613d5d565b612db19190613d3e565b612dbb9190613d74565b826006015461159c9190613d5d565b815160009081612dd98561384d565b905080612deb5760009250505061159c565b60008181612df98588613d3e565b905060005b610100811015612f1d578260005b8a51811015612e6257878b8281518110612e2857612e28613ce1565b6020026020010151612e3a9190613d3e565b612e448684613d3e565b612e4e9190613d74565b915080612e5a81613dd3565b915050612e0c565b5083945080876001612e749190613d26565b612e7e9190613d3e565b606485612e8b8287613d5d565b612e959190613d3e565b612e9f9190613d74565b612ea99190613d26565b84612eb48984613d3e565b6064612ec08a88613d3e565b612eca9190613d74565b612ed49190613d26565b612ede9190613d3e565b612ee89190613d74565b93506001612ef68587613116565b11612f0a578397505050505050505061159c565b5080612f1581613dd3565b915050612dfe565b5060405162461bcd60e51b815260206004820152601a60248201527f696e76617269616e7443616c63756c6174696f6e4661696c65640000000000006044820152606401610438565b606060005b8351811015612fe157838181518110612f8657612f86613ce1565b6020026020010151838281518110612fa057612fa0613ce1565b6020026020010151612fb29190613d3e565b838281518110612fc457612fc4613ce1565b602090810291909101015280612fd981613dd3565b915050612f6b565b509092915050565b8054600090612ff9600182613d5d565b613004906004613d3e565b8184600401546130149190613d3e565b6109c49190613d74565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a0823190602401602060405180830381865afa158015613067573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308b9190613cf7565b90506130a26001600160a01b038516333086613899565b6040516370a0823160e01b815230600482015281906001600160a01b038616906370a0823190602401602060405180830381865afa1580156130e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310c9190613cf7565b6125a09190613d5d565b600081831161312e576131298383613d5d565b6109c4565b6109c48284613d5d565b600080806000198587098587029250828110838203039150508060001415613172576000841161316757600080fd5b5082900490506109c4565b80841161317e57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60008161321c5760405162461bcd60e51b81526020600482015260036024820152623234bb60e91b6044820152606401610438565b826132295750600061159c565b81613235600185613d5d565b61323f9190613d74565b61324a906001613d26565b905061159c565b6001600160a01b03821661326457505050565b600a830154613294576001600160a01b0382166000908152600c8401602052604090206402540be40090556133ad565b60006132a08484613588565b60018501546040516370a0823160e01b81526001600160a01b038681166004830152929350600092909116906370a0823190602401602060405180830381865afa1580156132f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133169190613cf7565b600a8601549091506133288285613d26565b6133329190613d3e565b156133aa57600a8501546133468285613d26565b6133509190613d3e565b6402540be40086600a0154856133669190613d3e565b6133708585613d3e565b61337a9190613d26565b6133849190613d3e565b61338e9190613d74565b6001600160a01b0385166000908152600c870160205260409020555b50505b506001600160a01b03166000908152600b90910160205260409020429055565b606060008460010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344a9190613cf7565b90508083111561348b5760405162461bcd60e51b815260206004820152600c60248201526b746f74616c20737570706c7960a01b6044820152606401610438565b60006402540be40061349d8787613588565b6134ac906402540be400613d5d565b6134b69086613d3e565b6134c09190613d74565b865490915060009067ffffffffffffffff8111156134e0576134e0613a3e565b604051908082528060200260200182016040528015613509578160200160208202803683370190505b50905060005b875481101561357d57838389600301838154811061352f5761352f613ce1565b90600052602060002001546135449190613d3e565b61354e9190613d74565b82828151811061356057613560613ce1565b60209081029190910101528061357581613dd3565b91505061350f565b509695505050505050565b6001600160a01b0381166000908152600b8301602052604081205481906135b2906224ea00613d26565b90504281111561362a5760006135c84283613d5d565b6001600160a01b0385166000908152600c87016020526040902054600a8701549192506402540be400916224ea009184916136039190613d3e565b61360d9190613d3e565b6136179190613d74565b6136219190613d74565b9250505061159c565b5060009392505050565b600080836001600160a01b03168360405161364f9190613fc7565b6000604051808303816000865af19150503d806000811461368c576040519150601f19603f3d011682016040523d82523d6000602084013e613691565b606091505b509150915060008214156136a9573d6000803e3d6000fd5b6136d38151600014806136cb5750818060200190518101906136cb9190614002565b6101a26138d1565b50505050565b84546000908085106136ed576136ed613dee565b60006136f98288613d3e565b90508360008080805b86811015613774578a81141561371757613762565b89818151811061372957613729613ce1565b60200260200101519250828461373f9190613d26565b935061374b8784613d3e565b6137558a87613d3e565b61375f9190613d74565b94505b8061376c81613dd3565b915050613702565b5061377f8686613d3e565b606461378b8a87613d3e565b6137959190613d3e565b61379f9190613d74565b93506000856137af60648b613d3e565b6137b99190613d74565b6137c39085613d26565b90508860005b610100811015612f1d578193508a838360026137e59190613d3e565b6137ef9190613d26565b6137f99190613d5d565b876138048480613d3e565b61380e9190613d26565b6138189190613d74565b915060016138268584613116565b1161383b5750975061296a9650505050505050565b8061384581613dd3565b9150506137c9565b6000805b82518110156138935782818151811061386c5761386c613ce1565b60200260200101518261387f9190613d26565b91508061388b81613dd3565b915050613851565b50919050565b6040516001600160a01b03808516602483015283166044820152606481018290526136d39085906323b872dd60e01b9060840161299f565b816138df576138df816138e3565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b828054828255906000526020600020908101928215613971579160200282015b82811115613971578251825591602001919060010190613956565b5061397d929150613981565b5090565b5b8082111561397d5760008155600101613982565b80356001600160a01b03811681146139ad57600080fd5b919050565b60008060008060008060c087890312156139cb57600080fd5b86359550602087013594506040870135935060608701359250608087013591506139f760a08801613996565b90509295509295509295565b60008060008060808587031215613a1957600080fd5b84359350613a2960208601613996565b93969395505050506040820135916060013590565b634e487b7160e01b600052604160045260246000fd5b600082601f830112613a6557600080fd5b8135602067ffffffffffffffff80831115613a8257613a82613a3e565b8260051b604051601f19603f83011681018181108482111715613aa757613aa7613a3e565b604052938452858101830193838101925087851115613ac557600080fd5b83870191505b84821015613ae457813583529183019190830190613acb565b979650505050505050565b8015158114613afd57600080fd5b50565b600080600060608486031215613b1557600080fd5b83359250602084013567ffffffffffffffff811115613b3357600080fd5b613b3f86828701613a54565b9250506040840135613b5081613aef565b809150509250925092565b60008060008060808587031215613b7157600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060608486031215613ba257600080fd5b83359250602084013567ffffffffffffffff811115613bc057600080fd5b613bcc86828701613a54565b925050604084013590509250925092565b600060208284031215613bef57600080fd5b5035919050565b600080600060608486031215613c0b57600080fd5b83359250613c1b60208501613996565b9150604084013590509250925092565b600080600060608486031215613c4057600080fd5b8335925060208401359150604084013567ffffffffffffffff811115613c6557600080fd5b613c7186828701613a54565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015613cb357835183529284019291840191600101613c97565b50909695505050505050565b60008060408385031215613cd257600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613d0957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115613d3957613d39613d10565b500190565b6000816000190483118215151615613d5857613d58613d10565b500290565b600082821015613d6f57613d6f613d10565b500390565b600082613d9157634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600390820152623e207360e81b604082015260600190565b6020808252600690820152650d8cadccee8d60d31b604082015260600190565b6000600019821415613de757613de7613d10565b5060010190565b634e487b7160e01b600052600160045260246000fd5b600081518084526020808501945080840160005b83811015613e3457815187529582019590820190600101613e18565b509495945050505050565b608081526000613e526080830187613e04565b8281036020840152613e648187613e04565b604084019590955250506060015292915050565b606081526000613e8b6060830186613e04565b8281036020840152613e9d8186613e04565b915050826040830152949350505050565b600181815b80851115613ee9578160001904821115613ecf57613ecf613d10565b80851615613edc57918102915b93841c9390800290613eb3565b509250929050565b600082613f005750600161159c565b81613f0d5750600061159c565b8160018114613f235760028114613f2d57613f49565b600191505061159c565b60ff841115613f3e57613f3e613d10565b50506001821b61159c565b5060208310610133831016604e8410600b8410161715613f6c575081810a61159c565b613f768383613eae565b8060001904821115613f8a57613f8a613d10565b029392505050565b60006109c48383613ef1565b6020808252600f908201526e696e6465784f75744f6652616e676560881b604082015260600190565b6000825160005b81811015613fe85760208186018101518583015201613fce565b81811115613ff7576000828501525b509190910192915050565b60006020828403121561401457600080fd5b81516109c481613aef56feb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc98a2646970667358221220e6c78aa5e4b323ec01e7062abeba31ddd05dda2fa6c4f462b80078b68da6531d64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "params": {
          "amounts": "List of amounts of coins to deposit",
          "minMintAmount": "Minimum amount of LP tokens to mint from the deposit"
        },
        "returns": {
          "mintAmount": "Amount of LP tokens received by depositing"
        }
      },
      "onSwap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i": "token index in",
          "j": "token index out",
          "outAmount": "the target out amount - only a cap at the decimalplaces of the lower one, the rest is taken as fee                  - that fee is always about the lowes amount possible of the one with the lower decimal number                  this will have a negative"
        }
      },
      "onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i": "token index in",
          "j": "token index out"
        }
      },
      "onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i": "token index in",
          "j": "token index out"
        }
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "params": {
          "self": "Swap struct to read from and write to",
          "toMint": "amount of pool tokens to be minted",
          "user": "address of the user depositing tokens"
        }
      }
    },
    "stateVariables": {
      "A_PRECISION": {
        "details": "protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration"
      },
      "MAX_ITERATION": {
        "details": "max iteration of converge calccuate"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "notice": "Deposit coins into the pool"
      },
      "calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)": {
        "notice": "Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account"
      },
      "getAPrecise(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "VIEW FUNCTIONS"
      },
      "getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "Returns portfolio virtual price (for calculating profit) scaled up by 1e18"
      },
      "onSwap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "notice": "the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output and caps it at outAmount to   - this is to avoid issues with the rounding when using the calculateSwapGivenOut function to determine the input          -> that is because e.g. a 6 digit input can never exactly hit a 18 digit output, so the input is selected slightly higher              such that the output also is essentially rounded up at the sixth digit          -> the outAmount can only be lower than the actual calculated dy   - viable function for batch swapping"
      },
      "onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "notice": "the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output, in this case simple as the output is the calculated value   - viable function for batch swapping"
      },
      "onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "notice": "the same function as swap, but it espects that amounts already have been sent to the contract and it requires the output to be provided  - designed to be used in the requirem swap framework  - deducts the fees from the output, that means that the    output has to be increased by the fee to then create a highe input"
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "notice": "Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit."
      }
    },
    "notice": "StableSwap main algorithm",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}