{
  "address": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coin_amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sold_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bought_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        }
      ],
      "name": "TokenExchange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "A_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_TOKEN_COMMON_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc76462eb2be5e96a50d665106ab7dce9dd73c6f71c7795e138d65692e267b96f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
    "transactionIndex": 0,
    "gasUsed": "4125328",
    "logsBloom": "0x
    "blockHash": "0xc854a4c4d7a6a8ce5bce9ced571f0c852b0c603f9a70da2a172638f313fda5b8",
    "transactionHash": "0xc76462eb2be5e96a50d665106ab7dce9dd73c6f71c7795e138d65692e267b96f",
    "logs": [],
    "blockNumber": 35,
    "cumulativeGasUsed": "4125328",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5cda6a8053749c2e75fe3116749689e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coin_amount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sold_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_sold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bought_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_bought\",\"type\":\"uint256\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_TOKEN_COMMON_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_swap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i\":\"token in index\",\"inAmount\":\"exact in amount, povided or calculated using outAmount\",\"j\":\"token out index\",\"outAmount\":\"exact out amount, povided or calculated using inAmount\"}},\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"params\":{\"amounts\":\"List of amounts of coins to deposit\",\"minMintAmount\":\"Minimum amount of LP tokens to mint from the deposit\"},\"returns\":{\"mintAmount\":\"Amount of LP tokens received by depositing\"}},\"onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i\":\"token index in\",\"j\":\"token index out\"}},\"onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i\":\"token index in\",\"j\":\"token index out\"}},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"params\":{\"self\":\"Swap struct to read from and write to\",\"toMint\":\"amount of pool tokens to be minted\",\"user\":\"address of the user depositing tokens\"}}},\"stateVariables\":{\"A_PRECISION\":{\"details\":\"protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration\"},\"MAX_ITERATION\":{\"details\":\"max iteration of converge calccuate\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_swap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"implements classic swap function a la compound  here the amounts are provided and just validated via the invariant  - out amount is supposed to not include the fees  - inAmount is supposd to be sent already to this address\"},\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"notice\":\"Deposit coins into the pool\"},\"calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)\":{\"notice\":\"Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account\"},\"getAPrecise(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"VIEW FUNCTIONS\"},\"getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"Returns portfolio virtual price (for calculating profit) scaled up by 1e18\"},\"onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output, in this case simple as the output is the calculated value   - viable function for batch swapping\"},\"onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"the same function as swap, but it espects that amounts already have been sent to the contract and it requires the output to be provided  - designed to be used in the requirem swap framework  - deducts the fees from the output, that means that the    output has to be increased by the fee to then create a highe input\"},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"notice\":\"Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit.\"}},\"notice\":\"StableSwap main algorithm\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemStableSwapLib.sol\":\"RequiemStableSwapLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":12500},\"remappings\":[]},\"sources\":{\"contracts/RequiemStableSwapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./tokens/LPToken.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\n/**\\n * StableSwap main algorithm\\n */\\nlibrary RequiemStableSwapLib {\\n    using SafeERC20 for IERC20;\\n\\n    event AddLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 invariant, uint256 token_supply);\\n\\n    event TokenExchange(address indexed buyer, uint256 sold_id, uint256 tokens_sold, uint256 bought_id, uint256 tokens_bought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 token_supply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 invariant, uint256 token_supply);\\n\\n    uint256 public constant FEE_DENOMINATOR = 1e10;\\n    // uint256 public constant PRECISION = 1e18;\\n\\n    /// @dev protect from division loss when run approximation loop. We cannot divide at the end because of overflow,\\n    /// so we add some (small) PRECISION when divide in each iteration\\n    uint256 public constant A_PRECISION = 100;\\n    /// @dev max iteration of converge calccuate\\n    uint256 internal constant MAX_ITERATION = 256;\\n    uint256 public constant POOL_TOKEN_COMMON_DECIMALS = 18;\\n\\n    struct SwapStorage {\\n        IERC20[] pooledTokens;\\n        LPToken lpToken;\\n        /// @dev token i multiplier to reach POOL_TOKEN_COMMON_DECIMALS\\n        uint256[] tokenMultipliers;\\n        /// @dev effective balance which might different from token balance of the contract 'cause it hold admin fee as well\\n        uint256[] balances;\\n        /// @dev swap fee ratio. Charge on any action which move balance state far from the ideal state\\n        uint256 fee;\\n        /// @dev admin fee in ratio of swap fee.\\n        uint256 adminFee;\\n        /// @dev observation of A, multiplied with A_PRECISION\\n        uint256 initialA;\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n        // withdrawal fee control\\n        uint256 defaultWithdrawFee;\\n        mapping(address => uint256) depositTimestamp;\\n        mapping(address => uint256) withdrawFeeMultiplier;\\n    }\\n\\n    /**\\n     * @notice Deposit coins into the pool\\n     * @param amounts List of amounts of coins to deposit\\n     * @param minMintAmount Minimum amount of LP tokens to mint from the deposit\\n     * @return mintAmount Amount of LP tokens received by depositing\\n     */\\n    function addLiquidity(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 minMintAmount\\n    ) external returns (uint256 mintAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256[] memory fees = new uint256[](nCoins);\\n        uint256 _fee = _feePerToken(self);\\n\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256 D0 = 0;\\n        if (tokenSupply > 0) {\\n            D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\\n        }\\n\\n        uint256[] memory newBalances = self.balances;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (tokenSupply == 0) {\\n                require(amounts[i] > 0, \\\"initialDepositRequireAllTokens\\\");\\n            }\\n            // get real transfer in amount\\n            newBalances[i] += _doTransferIn(self.pooledTokens[i], amounts[i]);\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        assert(D1 > D0); // double check\\n\\n        if (tokenSupply == 0) {\\n            self.balances = newBalances;\\n            mintAmount = D1;\\n        } else {\\n            uint256 diff = 0;\\n            for (uint256 i = 0; i < nCoins; i++) {\\n                diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\\n                fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n                self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n                newBalances[i] -= fees[i];\\n            }\\n            D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n            mintAmount = (tokenSupply * (D1 - D0)) / D0;\\n        }\\n\\n        require(mintAmount >= minMintAmount, \\\"> slippage\\\");\\n\\n        self.lpToken.mint(msg.sender, mintAmount);\\n        emit AddLiquidity(msg.sender, amounts, fees, D1, mintAmount);\\n    }\\n\\n    // implements classic swap function a la compound\\n    // here the regular calculations such as balance values are implemented\\n    // funds are transferred in in that function and are not required to be sent\\n    // to the contract\\n    function swap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256) {\\n        IERC20 inCoin = self.pooledTokens[i];\\n        uint256[] memory normalizedBalances = _xp(self);\\n        inAmount = _doTransferIn(inCoin, inAmount);\\n\\n        uint256 y = _getY(self, i, j, normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]), normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> slippage\\\");\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n        return dy;\\n    }\\n\\n    /**\\n     *  implements classic swap function a la compound\\n     *  here the amounts are provided and just validated via the invariant\\n     *  - out amount is supposed to not include the fees\\n     *  - inAmount is supposd to be sent already to this address\\n     * @param i token in index\\n     * @param j token out index\\n     * @param inAmount exact in amount, povided or calculated using outAmount\\n     * @param outAmount exact out amount, povided or calculated using inAmount\\n     */\\n    function _swap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 outAmount,\\n        address to\\n    ) external returns (uint256) {\\n        // check whether at least the input amount has been sent here\\n        require(self.balances[i] + inAmount == self.pooledTokens[i].balanceOf(address(this)), \\\"input\\\");\\n        // adjust output amount for fees\\n        uint256 amountOutInclFee = divDown(outAmount * FEE_DENOMINATOR, FEE_DENOMINATOR - self.fee);\\n        uint256 amp = _getAPrecise(self);\\n        // calculate invariant before trade\\n        uint256 D0 = _getD(_xp(self), amp);\\n        //calculate new balance\\n        uint256[] memory newBalances = self.balances;\\n        newBalances[i] += inAmount;\\n        newBalances[j] -= amountOutInclFee;\\n        // calculate invariant after trade\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n\\n        require(D1 >= D0, \\\"invariant\\\");\\n\\n        // update balances after invariant validation\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= amountOutInclFee;\\n\\n        self.pooledTokens[j].safeTransfer(to, amountOutInclFee);\\n        emit TokenExchange(to, i, inAmount, j, amountOutInclFee);\\n        return outAmount;\\n    }\\n\\n    /**\\n     *  the same function as swap, but it expects that amounts already have been\\n     *  sent to the contract\\n     *   - designed to be used in the Requiem Swap framework\\n     *   - deducts the fee from the output, in this case simple as the output is the calculated value\\n     *   - viable function for batch swapping\\n     * @param i token index in\\n     * @param j token index out\\n     */\\n    function onSwapGivenIn(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256 dy) {\\n        // we check whether the balance has increased by the suggested inAmount\\n        require(self.balances[i] + inAmount <= IERC20(self.pooledTokens[i]).balanceOf(address(this)), \\\"input\\\");\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\\n        uint256 y = _getY(self, i, j, x, normalizedBalances);\\n\\n        dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> slippage\\\");\\n\\n        uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + _adminFee;\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n\\n        // returns final output amount\\n        return dy;\\n    }\\n\\n    /**\\n     * the same function as swap, but it espects that amounts already have been\\n     * sent to the contract and it requires the output to be provided\\n     *  - designed to be used in the requirem swap framework\\n     *  - deducts the fees from the output, that means that the\\n     *    output has to be increased by the fee to then create a highe input\\n     * @param i token index in\\n     * @param j token index out\\n     */\\n    function onSwapGivenOut(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 outAmount,\\n        uint256 maxInAmount,\\n        address to\\n    ) external returns (uint256 dx) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n\\n        // thre fee is a percentage from the \\\"actual\\\" amountOut, we have to use the quotient because of that\\n        uint256 _amountOutInclFee = divDown(outAmount * FEE_DENOMINATOR, FEE_DENOMINATOR - self.fee);\\n\\n        // calculate out balance\\n        uint256 y = normalizedBalances[j] - (_amountOutInclFee * self.tokenMultipliers[j]);\\n\\n        // calculate in balance\\n        uint256 x = _getY(self, j, i, y, normalizedBalances);\\n\\n        // calculate normalized in balance\\n        dx = x - normalizedBalances[i]; // no rounding adjustment\\n\\n        dx = dx / self.tokenMultipliers[i]; // denormalize\\n\\n        require(dx <= maxInAmount, \\\"> slippage\\\");\\n\\n        // update balances\\n        self.balances[i] -= dx;\\n        self.balances[j] -= _amountOutInclFee;\\n\\n        // do the transfer after all calculations\\n        IERC20 inCoin = self.pooledTokens[i];\\n        dx = _doTransferIn(inCoin, dx); // transfer the calculated amount in\\n\\n        self.pooledTokens[j].safeTransfer(to, outAmount); // transfer the desired amount out\\n        emit TokenExchange(to, i, dx, j, outAmount);\\n\\n        // returns final input amount\\n        return dx;\\n    }\\n\\n    function removeLiquidity(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256[] memory minAmounts\\n    ) external returns (uint256[] memory amounts) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(lpAmount <= totalSupply);\\n        uint256 nCoins = self.pooledTokens.length;\\n\\n        uint256[] memory fees = new uint256[](nCoins);\\n        amounts = _calculateRemoveLiquidity(self, msg.sender, lpAmount);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] >= minAmounts[i], \\\"> slippage\\\");\\n            self.balances[i] = self.balances[i] - amounts[i];\\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        emit RemoveLiquidity(msg.sender, amounts, fees, totalSupply - lpAmount);\\n    }\\n\\n    function removeLiquidityOneToken(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256 index,\\n        uint256 minAmount\\n    ) external returns (uint256) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply > 0, \\\"totalSupply = 0\\\");\\n        uint256 numTokens = self.pooledTokens.length;\\n        require(lpAmount <= self.lpToken.balanceOf(msg.sender), \\\"> balance\\\");\\n        require(lpAmount <= totalSupply, \\\"> totalSupply\\\");\\n        require(index < numTokens, \\\"tokenNotFound\\\");\\n\\n        uint256 dyFee;\\n        uint256 dy;\\n\\n        (dy, dyFee) = _calculateRemoveLiquidityOneToken(self, msg.sender, lpAmount, index);\\n\\n        require(dy >= minAmount, \\\"> slippage\\\");\\n\\n        self.balances[index] -= (dy + (dyFee * self.adminFee) / FEE_DENOMINATOR);\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        self.pooledTokens[index].safeTransfer(msg.sender, dy);\\n\\n        emit RemoveLiquidityOne(msg.sender, index, lpAmount, dy);\\n\\n        return dy;\\n    }\\n\\n    function removeLiquidityImbalance(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 maxBurnAmount\\n    ) external returns (uint256 burnAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply != 0, \\\"totalSupply = 0\\\");\\n        uint256 _fee = _feePerToken(self);\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256[] memory newBalances = self.balances;\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            newBalances[i] -= amounts[i];\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256[] memory fees = new uint256[](nCoins);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            uint256 idealBalance = (D1 * self.balances[i]) / D0;\\n            uint256 diff = _distance(newBalances[i], idealBalance);\\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n            newBalances[i] -= fees[i];\\n        }\\n\\n        // recalculate invariant with fee charged balances\\n        D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        burnAmount = ((D0 - D1) * totalSupply) / D0;\\n        assert(burnAmount > 0);\\n        burnAmount = (burnAmount + 1) * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, msg.sender)); //In case of rounding errors - make it unfavorable for the \\\"attacker\\\"\\n        require(burnAmount <= maxBurnAmount, \\\"> slippage\\\");\\n\\n        self.lpToken.burnFrom(msg.sender, burnAmount);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (amounts[i] != 0) {\\n                self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, totalSupply - burnAmount);\\n    }\\n\\n    /// VIEW FUNCTIONS\\n    function getAPrecise(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self);\\n    }\\n\\n    /**\\n     * Returns portfolio virtual price (for calculating profit)\\n     * scaled up by 1e18\\n     */\\n    function getVirtualPrice(SwapStorage storage self) external view returns (uint256) {\\n        uint256 D = _getD(_xp(self), _getAPrecise(self));\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        return (D * 10**POOL_TOKEN_COMMON_DECIMALS) / tokenSupply;\\n    }\\n\\n    function getAdminBalance(SwapStorage storage self, uint256 index) external view returns (uint256) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        return self.pooledTokens[index].balanceOf(address(this)) - (self.balances[index]);\\n    }\\n\\n    /**\\n     * Estimate amount of LP token minted or burned at deposit or withdrawal\\n     * without taking fees into account\\n     */\\n    function calculateTokenAmount(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        uint256[] memory newBalances = self.balances;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (deposit) {\\n                newBalances[i] += amounts[i];\\n            } else {\\n                newBalances[i] -= amounts[i];\\n            }\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n\\n        if (totalSupply == 0) {\\n            return D1; // first depositor take it all\\n        }\\n\\n        uint256 diff = deposit ? D1 - D0 : D0 - D1;\\n        return (diff * self.lpToken.totalSupply()) / D0;\\n    }\\n\\n    function getA(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self) / A_PRECISION;\\n    }\\n\\n    // implements calculation of stable swap interface\\n    // represents calculateSwapGivenIn function\\n    function calculateSwap(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 newInBalance = normalizedBalances[inIndex] + (inAmount * self.tokenMultipliers[inIndex]);\\n        uint256 outBalance = _getY(self, inIndex, outIndex, newInBalance, normalizedBalances);\\n        uint256 outAmount = divDown(normalizedBalances[outIndex] - outBalance, self.tokenMultipliers[outIndex]);\\n        uint256 _fee = (self.fee * outAmount) / FEE_DENOMINATOR;\\n        return outAmount - _fee;\\n    }\\n\\n    // implements calculation for Requiem interface\\n    // note that due to the fact that the structure is not symmetric (unlike pairs)\\n    // we require a separate function to calculate the input for a given output\\n    function calculateSwapGivenOut(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 outAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        // fee has to be deducted on the output\\n        uint256 _amountOutInclFee = divDown(outAmount * FEE_DENOMINATOR, FEE_DENOMINATOR - self.fee);\\n        uint256 newOutBalance = normalizedBalances[outIndex] - (_amountOutInclFee * self.tokenMultipliers[outIndex]);\\n        // switch index on regulat _getY function\\n        uint256 inBalance = _getY(self, outIndex, inIndex, newOutBalance, normalizedBalances);\\n        uint256 inAmount = divUp(inBalance - normalizedBalances[inIndex], self.tokenMultipliers[inIndex]);\\n        return inAmount;\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) external view returns (uint256[] memory) {\\n        return _calculateRemoveLiquidity(self, account, amount);\\n    }\\n\\n    function calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 lpAmount,\\n        uint256 tokenIndex\\n    ) external view returns (uint256 amount) {\\n        (amount, ) = _calculateRemoveLiquidityOneToken(self, account, lpAmount, tokenIndex);\\n    }\\n\\n    /**\\n     * @notice Update the withdraw fee for `user`. If the user is currently\\n     * not providing liquidity in the pool, sets to default value. If not, recalculate\\n     * the starting withdraw fee based on the last deposit's time & amount relative\\n     * to the new deposit.\\n     *\\n     * @param self Swap struct to read from and write to\\n     * @param user address of the user depositing tokens\\n     * @param toMint amount of pool tokens to be minted\\n     */\\n    function updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) external {\\n        _updateUserWithdrawFee(self, user, toMint);\\n    }\\n\\n    /// INTERNAL FUNCTIONS\\n\\n    /**\\n     * Ramping A up or down, return A with precision of A_PRECISION\\n     */\\n    function _getAPrecise(SwapStorage storage self) internal view returns (uint256) {\\n        if (block.timestamp >= self.futureATime) {\\n            return self.futureA;\\n        }\\n\\n        if (self.futureA > self.initialA) {\\n            return self.initialA + ((self.futureA - self.initialA) * (block.timestamp - self.initialATime)) / (self.futureATime - self.initialATime);\\n        }\\n\\n        return self.initialA - ((self.initialA - self.futureA) * (block.timestamp - self.initialATime)) / (self.futureATime - self.initialATime);\\n    }\\n\\n    /**\\n     * normalized balances of each tokens.\\n     */\\n    function _xp(uint256[] memory balances, uint256[] memory rates) internal pure returns (uint256[] memory) {\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            rates[i] = (rates[i] * balances[i]);\\n        }\\n\\n        return rates;\\n    }\\n\\n    function _xp(SwapStorage storage self) internal view returns (uint256[] memory) {\\n        return _xp(self.balances, self.tokenMultipliers);\\n    }\\n\\n    /**\\n     * Calculate D for *NORMALIZED* balances of each tokens\\n     * @param xp normalized balances of token\\n     */\\n    function _getD(uint256[] memory xp, uint256 amp) internal pure returns (uint256) {\\n        uint256 nCoins = xp.length;\\n        uint256 sum = _sumOf(xp);\\n        if (sum == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev = 0;\\n        uint256 D = sum;\\n        uint256 Ann = amp * nCoins;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            uint256 D_P = D;\\n            for (uint256 j = 0; j < xp.length; j++) {\\n                D_P = (D_P * D) / (xp[j] * nCoins);\\n            }\\n            Dprev = D;\\n            D = (((Ann * sum) / A_PRECISION + D_P * nCoins) * D) / (((Ann - A_PRECISION) * D) / A_PRECISION + (nCoins + 1) * D_P);\\n            if (_distance(D, Dprev) <= 1) {\\n                return D;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    /**\\n     * calculate new balance of when swap\\n     * Done by solving quadratic equation iteratively.\\n     *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     *  x_1**2 + b*x_1 = c\\n     *  x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     * @param inIndex index of token to swap in\\n     * @param outIndex index of token to swap out\\n     * @param inBalance new balance (normalized) of input token if the swap is successful\\n     * @return NORMALIZED balance of output token if the swap is successful\\n     */\\n    function _getY(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inBalance,\\n        uint256[] memory normalizedBalances\\n    ) internal view returns (uint256) {\\n        require(inIndex != outIndex, \\\"sameToken\\\");\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(inIndex < nCoins && outIndex < nCoins, \\\"indexOutOfRange\\\");\\n\\n        uint256 amp = _getAPrecise(self);\\n        uint256 Ann = amp * nCoins;\\n        uint256 D = _getD(normalizedBalances, amp); // calculate invariant\\n\\n        uint256 sum = 0; // sum of new balances except output token\\n        uint256 c = D;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == outIndex) {\\n                continue;\\n            }\\n\\n            uint256 x = i == inIndex ? inBalance : normalizedBalances[i];\\n            sum += x;\\n            c = (c * D) / (x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = sum + (D * A_PRECISION) / Ann;\\n\\n        uint256 lastY = 0;\\n        uint256 y = D;\\n\\n        for (uint256 index = 0; index < MAX_ITERATION; index++) {\\n            lastY = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(lastY, y) <= 1) {\\n                return y;\\n            }\\n        }\\n\\n        revert(\\\"yCalculationFailed\\\");\\n    }\\n\\n    function _calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) internal view returns (uint256[] memory) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(amount <= totalSupply, \\\"Cannot exceed total supply\\\");\\n\\n        uint256 feeAdjustedAmount = (amount * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n\\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            amounts[i] = (self.balances[i] * (feeAdjustedAmount)) / (totalSupply);\\n        }\\n        return amounts;\\n    }\\n\\n    function _calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 tokenAmount,\\n        uint256 index\\n    ) internal view returns (uint256 dy, uint256 fee) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256[] memory xp = _xp(self);\\n        uint256 D0 = _getD(xp, amp);\\n        uint256 D1 = D0 - (tokenAmount * D0) / self.lpToken.totalSupply();\\n        uint256 newY = _getYD(self, amp, index, xp, D1);\\n        uint256[] memory reducedXP = xp;\\n        uint256 _fee = _feePerToken(self);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            uint256 expectedDx = 0;\\n            if (i == index) {\\n                expectedDx = (xp[i] * D1) / D0 - newY;\\n            } else {\\n                expectedDx = xp[i] - (xp[i] * D1) / D0;\\n            }\\n            reducedXP[i] -= (_fee * expectedDx) / FEE_DENOMINATOR;\\n        }\\n\\n        dy = reducedXP[index] - _getYD(self, amp, index, reducedXP, D1);\\n        dy = (dy - 1) / self.tokenMultipliers[index];\\n        fee = ((xp[index] - newY) / self.tokenMultipliers[index]) - dy;\\n        dy = (dy * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n    }\\n\\n    function _feePerToken(SwapStorage storage self) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        return (self.fee * nCoins) / (4 * (nCoins - 1));\\n    }\\n\\n    function _getYD(\\n        SwapStorage storage self,\\n        uint256 A,\\n        uint256 index,\\n        uint256[] memory xp,\\n        uint256 D\\n    ) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        assert(index < nCoins);\\n        uint256 Ann = A * nCoins;\\n        uint256 c = D;\\n        uint256 s = 0;\\n        uint256 _x = 0;\\n        uint256 yPrev = 0;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == index) {\\n                continue;\\n            }\\n            _x = xp[i];\\n            s += _x;\\n            c = (c * D) / (_x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = s + (D * A_PRECISION) / Ann;\\n        uint256 y = D;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(yPrev, y) <= 1) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    function _updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) internal {\\n        // If token is transferred to address 0 (or burned), don't update the fee.\\n        if (user == address(0)) {\\n            return;\\n        }\\n        if (self.defaultWithdrawFee == 0) {\\n            // If current fee is set to 0%, set multiplier to FEE_DENOMINATOR\\n            self.withdrawFeeMultiplier[user] = FEE_DENOMINATOR;\\n        } else {\\n            // Otherwise, calculate appropriate discount based on last deposit amount\\n            uint256 currentFee = _calculateCurrentWithdrawFee(self, user);\\n            uint256 currentBalance = self.lpToken.balanceOf(user);\\n\\n            // ((currentBalance * currentFee) + (toMint * defaultWithdrawFee)) * FEE_DENOMINATOR /\\n            // ((toMint + currentBalance) * defaultWithdrawFee)\\n            if ((toMint + currentBalance) * self.defaultWithdrawFee != 0) {\\n                self.withdrawFeeMultiplier[user] = (((currentBalance * currentFee) + (toMint * self.defaultWithdrawFee)) * (FEE_DENOMINATOR)) / ((toMint + currentBalance) * self.defaultWithdrawFee);\\n            }\\n        }\\n        self.depositTimestamp[user] = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Calculate the fee that is applied when the given user withdraws.\\n     * Withdraw fee decays linearly over 4 weeks.\\n     * @param user address you want to calculate withdraw fee of\\n     * @return current withdraw fee of the user\\n     */\\n    function _calculateCurrentWithdrawFee(SwapStorage storage self, address user) internal view returns (uint256) {\\n        uint256 endTime = self.depositTimestamp[user] + (4 weeks);\\n        if (endTime > block.timestamp) {\\n            uint256 timeLeftover = endTime - block.timestamp;\\n            return (self.defaultWithdrawFee * self.withdrawFeeMultiplier[user] * timeLeftover) / (4 weeks) / FEE_DENOMINATOR;\\n        }\\n        return 0;\\n    }\\n\\n    function _doTransferIn(IERC20 token, uint256 amount) internal returns (uint256) {\\n        uint256 priorBalance = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        return token.balanceOf(address(this)) - priorBalance;\\n    }\\n\\n    function _sumOf(uint256[] memory x) internal pure returns (uint256 sum) {\\n        sum = 0;\\n        for (uint256 i = 0; i < x.length; i++) {\\n            sum += x[i];\\n        }\\n    }\\n\\n    function _distance(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x - y : y - x;\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return 1 + (a - 1) / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb767e73d052738a98dfa0a2acd77f31248bdd5b4b71b6809b9f99b03347df43f\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb7230835a4efbbbebcb5371d121977e859388b33f3ee5d9a7a44fc4de8d6b970\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0xc92c369d1363b5cbec9337ea8921578bd4acd272af2ac9eaf7227a17689f29e9\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event TokenExchange(address indexed buyer, uint256 soldId, uint256 tokensSold, uint256 boughtId, uint256 tokensBought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0xb685b7aaf446335d700bbef1f6411e49c897d8f1d509cfdac256f2cf37b5f29b\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xd5f49ed9e5ab4471a4c25f3730f50ed4c29a9bfa9637306f227c2a59a18bbe81\",\"license\":\"MIT\"},\"contracts/libraries/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ERC20/IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7bf66daeb140a455a28ab3c1e03f4eebb5948ccf6000dbb700f6c57bba03a9d4\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, msg.sender).sub(amount, Errors.ERC20_BURN_EXCEEDS_ALLOWANCE);\\n\\n        _approve(account, msg.sender, decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x82fe5fb385cfe74b417e3aaace26a64aa5190b36ea0716ad441484fb444087f8\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xd978150fb13e68cd0b2b4b237d65306f55397437127bea72622d5cd4244ba92b\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        RequiemErrors._require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\n    }\\n}\\n\",\"keccak256\":\"0xa39a2c090cd9727eeca0658c5a3c382f9dcfe581f4d323bb388776c3237c72fd\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        RequiemErrors._require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        uint256 errorCode\\n    ) internal pure returns (uint256) {\\n        RequiemErrors._require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc82c3356797b0e56c4ac77d5554343f66b3b436a18537bdb146e10921605d729\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x37ebaca1c58a9daf307229c45122f12d603a95d1d92c1a8e7648b1910755bfa0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/tokens/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\nimport \\\"../libraries/ERC20Burnable.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../interfaces/IRequiemStableSwap.sol\\\";\\n\\ncontract LPToken is Ownable, ERC20Burnable {\\n    IRequiemStableSwap public swap;\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n        swap = IRequiemStableSwap(msg.sender);\\n    }\\n\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"zeroMintAmount\\\");\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n     * minting and burning. This ensures that swap.updateUserWithdrawFees are called everytime.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20) {\\n        super._beforeTokenTransfer(from, to, amount);\\n        swap.updateUserWithdrawFee(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2f4e27227aca77ab9543f1f7ea0a45e5b14b62177b414e47f18248c49613aac3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6149e361003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101815760003560e01c8063b52e146f116100e2578063c8344c0611610096578063d73792a911610070578063d73792a91461035d578063e2eba89b14610369578063fa5635971461037c57600080fd5b8063c8344c0614610322578063d011f91814610342578063d36604ac1461034a57600080fd5b8063c188e4be116100c7578063c188e4be146102cb578063c20aace8146102ed578063c685696c146102f557600080fd5b8063b52e146f146102a5578063ba2998d9146102b857600080fd5b80637a6cba3c11610139578063a30355851161011e578063a30355851461025f578063aa054aee14610272578063ad30093f1461028557600080fd5b80637a6cba3c1461021f5780638e6da7b61461023f57600080fd5b80631e7e95d31161016a5780631e7e95d3146101cc5780632bfe30d0146101df5780632fcdda4f146101ff57600080fd5b80630da350f614610186578063159763bb146101b9575b600080fd5b81801561019257600080fd5b506101a66101a1366004614293565b61038f565b6040519081526020015b60405180910390f35b6101a66101c73660046142e4565b610784565b6101a66101da366004614418565b61079c565b8180156101eb57600080fd5b506101a66101fa366004614473565b610b09565b81801561020b57600080fd5b506101a661021a366004614293565b610f2a565b81801561022b57600080fd5b506101a661023a3660046144a5565b6112f9565b81801561024b57600080fd5b506101a661025a366004614293565b611a3d565b6101a661026d3660046144f5565b611ca5565b6101a6610280366004614473565b611cb6565b81801561029157600080fd5b506101a66102a0366004614293565b611daf565b6101a66102b33660046144f5565b612088565b6101a66102c6366004614473565b61209f565b8180156102d757600080fd5b506102eb6102e636600461450e565b612190565b005b6101a6601281565b81801561030157600080fd5b50610315610310366004614543565b6121a0565b6040516101b09190614593565b81801561032e57600080fd5b506101a661033d3660046144a5565b6124b5565b6101a6606481565b6101a66103583660046144f5565b612b4c565b6101a66402540be40081565b6101a66103773660046145d7565b612c2b565b61031561038a36600461450e565b612d58565b60008660000186815481106103a6576103a66145f9565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561041d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104419190614628565b84886003018881548110610457576104576145f9565b906000526020600020015461046c9190614670565b11156104bf5760405162461bcd60e51b815260206004820152600560248201527f696e70757400000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60006104ca88612d65565b905060008860020188815481106104e3576104e36145f9565b9060005260206000200154866104f99190614688565b82898151811061050b5761050b6145f9565b602002602001015161051d9190614670565b9050600061052e8a8a8a8587612e13565b9050600181848a81518110610545576105456145f9565b602002602001015161055791906146c5565b61056191906146c5565b935060006402540be4008b600401548661057b9190614688565b61058591906146dc565b90508a600201898154811061059c5761059c6145f9565b906000526020600020015481866105b391906146c5565b6105bd91906146dc565b94508685101561060f5760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b60008b6002018a81548110610626576106266145f9565b90600052602060002001546402540be4008d60050154846106479190614688565b61065191906146dc565b61065b91906146dc565b9050888c6003018c81548110610673576106736145f9565b90600052602060002001600082825461068c9190614670565b9091555061069c90508187614670565b8c6003018b815481106106b1576106b16145f9565b9060005260206000200160008282546106ca91906146c5565b9250508190555061071487878e6000018d815481106106eb576106eb6145f9565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16919061309d565b604080518c8152602081018b90529081018b90526060810187905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc98906080015b60405180910390a250505050509695505050505050565b600061079285858585613171565b5095945050505050565b825482516000919081146107f25760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964416d6f756e74734c656e67746800000000000000000000000060448201526064016104b6565b60006107fd866134d6565b9050600061081361080d88612d65565b836135af565b905060008760030180548060200260200160405190810160405280929190818152602001828054801561086557602002820191906000526020600020905b815481526020019060010190808311610851575b5050505050905060005b8481101561091b5786156108c55787818151811061088f5761088f6145f9565b60200260200101518282815181106108a9576108a96145f9565b602002602001018181516108bd9190614670565b905250610909565b8781815181106108d7576108d76145f9565b60200260200101518282815181106108f1576108f16145f9565b6020026020010181815161090591906146c5565b9052505b8061091381614717565b91505061086f565b50600061098361097d838b60020180548060200260200160405190810160405280929190818152602001828054801561097357602002820191906000526020600020905b81548152602001906001019080831161095f575b505050505061374b565b856135af565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a9190614628565b905080610a2e57509450610b029350505050565b600088610a4457610a3f83866146c5565b610a4e565b610a4e85846146c5565b9050848b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae49190614628565b610aee9083614688565b610af891906146dc565b9750505050505050505b9392505050565b6000808560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9f9190614628565b905060008111610bf15760405162461bcd60e51b815260206004820152600f60248201527f746f74616c537570706c79203d2030000000000000000000000000000000000060448201526064016104b6565b855460018701546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c879190614628565b861115610cd65760405162461bcd60e51b815260206004820152600960248201527f3e2062616c616e6365000000000000000000000000000000000000000000000060448201526064016104b6565b81861115610d265760405162461bcd60e51b815260206004820152600d60248201527f3e20746f74616c537570706c790000000000000000000000000000000000000060448201526064016104b6565b808510610d755760405162461bcd60e51b815260206004820152600d60248201527f746f6b656e4e6f74466f756e640000000000000000000000000000000000000060448201526064016104b6565b600080610d8489338a8a613171565b9250905085811015610dd85760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b6402540be400896005015483610dee9190614688565b610df891906146dc565b610e029082614670565b896003018881548110610e1757610e176145f9565b906000526020600020016000828254610e3091906146c5565b909155505060018901546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018a905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015610ea957600080fd5b505af1158015610ebd573d6000803e3d6000fd5b50505050610edb33828b6000018a815481106106eb576106eb6145f9565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b6000866000018681548110610f4157610f416145f9565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610fb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdc9190614628565b84886003018881548110610ff257610ff26145f9565b90600052602060002001546110079190614670565b146110545760405162461bcd60e51b815260206004820152600560248201527f696e70757400000000000000000000000000000000000000000000000000000060448201526064016104b6565b60006110816110686402540be40086614688565b60048a015461107c906402540be4006146c5565b6137ce565b9050600061108e896134d6565b9050600061109e61080d8b612d65565b905060008a6003018054806020026020016040519081016040528092919081815260200182805480156110f057602002820191906000526020600020905b8154815260200190600101908083116110dc575b5050505050905087818b8151811061110a5761110a6145f9565b6020026020010181815161111e9190614670565b9052508051849082908b908110611137576111376145f9565b6020026020010181815161114b91906146c5565b9150818152505060006111b161097d838e600201805480602002602001604051908101604052809291908181526020018280548015610973576020028201919060005260206000209081548152602001906001019080831161095f57505050505061374b565b9050828110156112035760405162461bcd60e51b815260206004820152600960248201527f696e76617269616e74000000000000000000000000000000000000000000000060448201526064016104b6565b888c6003018c81548110611219576112196145f9565b9060005260206000200160008282546112329190614670565b92505081905550848c6003018b8154811061124f5761124f6145f9565b90600052602060002001600082825461126891906146c5565b9250508190555061128987868e6000018d815481106106eb576106eb6145f9565b604080518c8152602081018b90529081018b90526060810186905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a250959a9950505050505050505050565b8254825160009190811461134f5760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964416d6f756e74734c656e67746800000000000000000000000060448201526064016104b6565b60008167ffffffffffffffff81111561136a5761136a61431f565b604051908082528060200260200182016040528015611393578160200160208202803683370190505b50905060006113a187613827565b905060008760010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114389190614628565b90506000611445896134d6565b905060008215611501576114fe61080d8b6003018054806020026020016040519081016040528092919081815260200182805480156114a357602002820191906000526020600020905b81548152602001906001019080831161148f575b50505050508c600201805480602002602001604051908101604052809291908181526020018280548015610973576020028201919060005260206000209081548152602001906001019080831161095f57505050505061374b565b90505b60008a60030180548060200260200160405190810160405280929190818152602001828054801561155157602002820191906000526020600020905b81548152602001906001019080831161153d575b5050505050905060005b8781101561166e57846115d15760008b828151811061157c5761157c6145f9565b6020026020010151116115d15760405162461bcd60e51b815260206004820152601e60248201527f696e697469616c4465706f73697452657175697265416c6c546f6b656e73000060448201526064016104b6565b6116338c60000182815481106115e9576115e96145f9565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c8381518110611626576116266145f9565b602002602001015161385c565b828281518110611645576116456145f9565b602002602001018181516116599190614670565b9052508061166681614717565b91505061155b565b5060006116ce61097d838e600201805480602002602001604051908101604052809291908181526020018280548015610973576020028201919060005260206000209081548152602001906001019080831161095f57505050505061374b565b90508281116116df576116df614750565b846117025781516116f99060038e0190602085019061420a565b508098506118fe565b6000805b8981101561187557611766858f6003018381548110611727576117276145f9565b90600052602060002001548561173d9190614688565b61174791906146dc565b858381518110611759576117596145f9565b60200260200101516139ad565b91506402540be400611778838a614688565b61178291906146dc565b898281518110611794576117946145f9565b6020026020010181815250506402540be4008e600501548a83815181106117bd576117bd6145f9565b60200260200101516117cf9190614688565b6117d991906146dc565b8482815181106117eb576117eb6145f9565b60200260200101516117fd91906146c5565b8e6003018281548110611812576118126145f9565b9060005260206000200181905550888181518110611832576118326145f9565b602002602001015184828151811061184c5761184c6145f9565b6020026020010181815161186091906146c5565b9052508061186d81614717565b915050611706565b506118d96118d3848f600201805480602002602001604051908101604052809291908181526020018280548015610973576020028201919060005260206000209081548152602001906001019080831161095f57505050505061374b565b866135af565b9150836118e681846146c5565b6118f09088614688565b6118fa91906146dc565b9950505b8989101561194e5760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b60018c01546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906340c10f1990604401600060405180830381600087803b1580156119c257600080fd5b505af11580156119d6573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d604051611a2694939291906147ba565b60405180910390a250505050505050509392505050565b600080611a4988612d65565b90506000611a73611a5f6402540be40088614688565b60048b015461107c906402540be4006146c5565b90506000896002018881548110611a8c57611a8c6145f9565b906000526020600020015482611aa29190614688565b838981518110611ab457611ab46145f9565b6020026020010151611ac691906146c5565b90506000611ad78b8a8c8588612e13565b9050838a81518110611aeb57611aeb6145f9565b602002602001015181611afe91906146c5565b94508a6002018a81548110611b1557611b156145f9565b906000526020600020015485611b2b91906146dc565b945086851115611b7d5760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b848b6003018b81548110611b9357611b936145f9565b906000526020600020016000828254611bac91906146c5565b92505081905550828b6003018a81548110611bc957611bc96145f9565b906000526020600020016000828254611be291906146c5565b90915550508a546000908c908c908110611bfe57611bfe6145f9565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169050611c2c818761385c565b9550611c48878a8e6000018d815481106106eb576106eb6145f9565b604080518c8152602081018890529081018b9052606081018a905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800161076d565b6000611cb0826134d6565b92915050565b600080611cc286612d65565b90506000611cec611cd86402540be40086614688565b600489015461107c906402540be4006146c5565b90506000876002018681548110611d0557611d056145f9565b906000526020600020015482611d1b9190614688565b838781518110611d2d57611d2d6145f9565b6020026020010151611d3f91906146c5565b90506000611d5089888a8588612e13565b90506000611da1858a81518110611d6957611d696145f9565b602002602001015183611d7c91906146c5565b8b6002018b81548110611d9157611d916145f9565b90600052602060002001546139cf565b9a9950505050505050505050565b600080876000018781548110611dc757611dc76145f9565b600091825260208220015473ffffffffffffffffffffffffffffffffffffffff169150611df389612d65565b9050611dff828761385c565b95506000611e5e8a8a8a8d6002018d81548110611e1e57611e1e6145f9565b90600052602060002001548b611e349190614688565b868e81518110611e4657611e466145f9565b6020026020010151611e589190614670565b86612e13565b90506000600182848b81518110611e7757611e776145f9565b6020026020010151611e8991906146c5565b611e9391906146c5565b905060006402540be4008c6004015483611ead9190614688565b611eb791906146dc565b90508b6002018a81548110611ece57611ece6145f9565b90600052602060002001548183611ee591906146c5565b611eef91906146dc565b915087821015611f415760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b888c6003018c81548110611f5757611f576145f9565b906000526020600020016000828254611f709190614670565b909155505060028c0180548b908110611f8b57611f8b6145f9565b90600052602060002001546402540be4008d6005015483611fac9190614688565b611fb691906146dc565b611fc091906146dc565b611fca9083614670565b8c6003018b81548110611fdf57611fdf6145f9565b906000526020600020016000828254611ff891906146c5565b9250508190555061201987838e6000018d815481106106eb576106eb6145f9565b604080518c8152602081018b90529081018b90526060810183905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a2509a9950505050505050505050565b60006064612095836134d6565b611cb091906146dc565b6000806120ab86612d65565b905060008660020186815481106120c4576120c46145f9565b9060005260206000200154846120da9190614688565b8287815181106120ec576120ec6145f9565b60200260200101516120fe9190614670565b9050600061210f8888888587612e13565b9050600061216082858981518110612129576121296145f9565b602002602001015161213b91906146c5565b8a6002018981548110612150576121506145f9565b90600052602060002001546137ce565b905060006402540be400828b6004015461217a9190614688565b61218491906146dc565b9050611da181836146c5565b61219b838383613a53565b505050565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122379190614628565b90508084111561224657600080fd5b845460008167ffffffffffffffff8111156122635761226361431f565b60405190808252806020026020018201604052801561228c578160200160208202803683370190505b50905061229a873388613c29565b935060005b84518110156123d6578581815181106122ba576122ba6145f9565b60200260200101518582815181106122d4576122d46145f9565b6020026020010151101561232a5760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b84818151811061233c5761233c6145f9565b6020026020010151886003018281548110612359576123596145f9565b906000526020600020015461236e91906146c5565b886003018281548110612383576123836145f9565b90600052602060002001819055506123c4338683815181106123a7576123a76145f9565b60200260200101518a60000184815481106106eb576106eb6145f9565b806123ce81614717565b91505061229f565b5060018701546040517f79cc67900000000000000000000000000000000000000000000000000000000081523360048201526024810188905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b15801561244b57600080fd5b505af115801561245f573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea9150869050836124948a886146c5565b6040516124a3939291906147f3565b60405180910390a25050509392505050565b8254825160009190811461250b5760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964416d6f756e74734c656e67746800000000000000000000000060448201526064016104b6565b6001850154604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916318160ddd9160048083019260209291908290030181865afa15801561257d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a19190614628565b9050806125f05760405162461bcd60e51b815260206004820152600f60248201527f746f74616c537570706c79203d2030000000000000000000000000000000000060448201526064016104b6565b60006125fb87613827565b90506000612608886134d6565b905060008860030180548060200260200160405190810160405280929190818152602001828054801561265a57602002820191906000526020600020905b815481526020019060010190808311612646575b50505050509050600061267561266f8b612d65565b846135af565b905060005b868110156126d757898181518110612694576126946145f9565b60200260200101518382815181106126ae576126ae6145f9565b602002602001018181516126c291906146c5565b905250806126cf81614717565b91505061267a565b50600061273761097d848d600201805480602002602001604051908101604052809291908181526020018280548015610973576020028201919060005260206000209081548152602001906001019080831161095f57505050505061374b565b905060008767ffffffffffffffff8111156127545761275461431f565b60405190808252806020026020018201604052801561277d578160200160208202803683370190505b50905060005b888110156128fd576000848e60030183815481106127a3576127a36145f9565b9060005260206000200154856127b99190614688565b6127c391906146dc565b905060006127ea8784815181106127dc576127dc6145f9565b6020026020010151836139ad565b90506402540be4006127fc828b614688565b61280691906146dc565b848481518110612818576128186145f9565b6020026020010181815250506402540be4008f60050154858581518110612841576128416145f9565b60200260200101516128539190614688565b61285d91906146dc565b87848151811061286f5761286f6145f9565b602002602001015161288191906146c5565b8f6003018481548110612896576128966145f9565b90600052602060002001819055508383815181106128b6576128b66145f9565b60200260200101518784815181106128d0576128d06145f9565b602002602001018181516128e491906146c5565b9052508291506128f5905081614717565b915050612783565b5061295b6118d3858e600201805480602002602001604051908101604052809291908181526020018280548015610973576020028201919060005260206000209081548152602001906001019080831161095f57505050505061374b565b9150828761296984836146c5565b6129739190614688565b61297d91906146dc565b98506000891161298f5761298f614750565b6129998c33613e0f565b6129a8906402540be4006146c5565b6129b38a6001614670565b6129bd9190614688565b985089891115612a0f5760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b60018c01546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015612a8357600080fd5b505af1158015612a97573d6000803e3d6000fd5b5050505060005b88811015612b0c578b8181518110612ab857612ab86145f9565b6020026020010151600014612afa57612afa338d8381518110612add57612add6145f9565b60200260200101518f60000184815481106106eb576106eb6145f9565b80612b0481614717565b915050612a9e565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c8385612b3c8e8d6146c5565b604051611a2694939291906147ba565b600080612b69612b5b84612d65565b612b64856134d6565b6135af565b905060008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c009190614628565b905080612c0f6012600a614949565b612c199084614688565b612c2391906146dc565b949350505050565b81546000908210612c7e5760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e6765000000000000000000000000000000000060448201526064016104b6565b826003018281548110612c9357612c936145f9565b9060005260206000200154836000018381548110612cb357612cb36145f9565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612d2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4e9190614628565b610b0291906146c5565b6060612c23848484613c29565b6060611cb082600301805480602002602001604051908101604052809291908181526020018280548015612db857602002820191906000526020600020905b815481526020019060010190808311612da4575b505050505083600201805480602002602001604051908101604052809291908181526020018280548015610973576020028201919060005260206000209081548152602001906001019080831161095f57505050505061374b565b600083851415612e655760405162461bcd60e51b815260206004820152600960248201527f73616d65546f6b656e000000000000000000000000000000000000000000000060448201526064016104b6565b85548086108015612e7557508085105b612ec15760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e6765000000000000000000000000000000000060448201526064016104b6565b6000612ecc886134d6565b90506000612eda8383614688565b90506000612ee886846135af565b9050600081815b86811015612f70578a811415612f0457612f5e565b60008c8214612f2c57898281518110612f1f57612f1f6145f9565b6020026020010151612f2e565b8a5b9050612f3a8185614670565b9350612f468882614688565b612f508685614688565b612f5a91906146dc565b9250505b80612f6881614717565b915050612eef565b50612f7b8685614688565b6064612f878584614688565b612f919190614688565b612f9b91906146dc565b9050600084612fab606486614688565b612fb591906146dc565b612fbf9084614670565b9050600084815b61010081101561304b578192508684836002612fe29190614688565b612fec9190614670565b612ff691906146c5565b856130018480614688565b61300b9190614670565b61301591906146dc565b9150600161302384846139ad565b1161303957509850613094975050505050505050565b8061304381614717565b915050612fc6565b5060405162461bcd60e51b815260206004820152601260248201527f7943616c63756c6174696f6e4661696c6564000000000000000000000000000060448201526064016104b6565b95945050505050565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261219b9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613ed5565b8354600090819083106131c65760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e6765000000000000000000000000000000000060448201526064016104b6565b60006131d1876134d6565b905060006131de88612d65565b905060006131ec82846135af565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561325f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132839190614628565b61328d838a614688565b61329791906146dc565b6132a190836146c5565b905060006132b28b868a8786613f87565b90508360006132c08d613827565b905060005b8d548110156133c85760008b82141561331a578487878a85815181106132ed576132ed6145f9565b60200260200101516132ff9190614688565b61330991906146dc565b61331391906146c5565b9050613371565b868689848151811061332e5761332e6145f9565b60200260200101516133409190614688565b61334a91906146dc565b88838151811061335c5761335c6145f9565b602002602001015161336e91906146c5565b90505b6402540be4006133818285614688565b61338b91906146dc565b84838151811061339d5761339d6145f9565b602002602001018181516133b191906146c5565b9052508190506133c081614717565b9150506132c5565b506133d68d888c8588613f87565b828b815181106133e8576133e86145f9565b60200260200101516133fa91906146c5565b98508c6002018a81548110613411576134116145f9565b906000526020600020015460018a61342991906146c5565b61343391906146dc565b9850888d6002018b8154811061344b5761344b6145f9565b906000526020600020015484888d81518110613469576134696145f9565b602002602001015161347b91906146c5565b61348591906146dc565b61348f91906146c5565b97506402540be4006134a18e8e613e0f565b6134b0906402540be4006146c5565b6134ba908b614688565b6134c491906146dc565b98505050505050505094509492505050565b6000816009015442106134eb57506007015490565b816006015482600701541115613555578160080154826009015461350f91906146c5565b600883015461351e90426146c5565b8360060154846007015461353291906146c5565b61353c9190614688565b61354691906146dc565b8260060154611cb09190614670565b8160080154826009015461356991906146c5565b600883015461357890426146c5565b8360070154846006015461358c91906146c5565b6135969190614688565b6135a091906146dc565b8260060154611cb091906146c5565b8151600090816135be856140fb565b9050806135d057600092505050611cb0565b600081816135de8588614688565b905060005b610100811015613702578260005b8a5181101561364757878b828151811061360d5761360d6145f9565b602002602001015161361f9190614688565b6136298684614688565b61363391906146dc565b91508061363f81614717565b9150506135f1565b50839450808760016136599190614670565b6136639190614688565b60648561367082876146c5565b61367a9190614688565b61368491906146dc565b61368e9190614670565b846136998984614688565b60646136a58a88614688565b6136af91906146dc565b6136b99190614670565b6136c39190614688565b6136cd91906146dc565b935060016136db85876139ad565b116136ef5783975050505050505050611cb0565b50806136fa81614717565b9150506135e3565b5060405162461bcd60e51b815260206004820152601a60248201527f696e76617269616e7443616c63756c6174696f6e4661696c656400000000000060448201526064016104b6565b606060005b83518110156137c65783818151811061376b5761376b6145f9565b6020026020010151838281518110613785576137856145f9565b60200260200101516137979190614688565b8382815181106137a9576137a96145f9565b6020908102919091010152806137be81614717565b915050613750565b509092915050565b60008161381d5760405162461bcd60e51b815260206004820152600d60248201527f5a45524f5f4449564953494f4e0000000000000000000000000000000000000060448201526064016104b6565b610b0282846146dc565b80546000906138376001826146c5565b613842906004614688565b8184600401546138529190614688565b610b0291906146dc565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa1580156138cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ef9190614628565b905061391373ffffffffffffffffffffffffffffffffffffffff8516333086614147565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa15801561397f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139a39190614628565b612c2391906146c5565b60008183116139c5576139c083836146c5565b610b02565b610b0282846146c5565b600081613a1e5760405162461bcd60e51b815260206004820152600d60248201527f5a45524f5f4449564953494f4e0000000000000000000000000000000000000060448201526064016104b6565b82613a2b57506000611cb0565b81613a376001856146c5565b613a4191906146dc565b613a4c906001614670565b9050611cb0565b73ffffffffffffffffffffffffffffffffffffffff8216613a7357505050565b600a830154613ab05773ffffffffffffffffffffffffffffffffffffffff82166000908152600c8401602052604090206402540be4009055613bfc565b6000613abc8484613e0f565b60018501546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152929350600092909116906370a0823190602401602060405180830381865afa158015613b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b589190614628565b600a860154909150613b6a8285614670565b613b749190614688565b15613bf957600a850154613b888285614670565b613b929190614688565b6402540be40086600a015485613ba89190614688565b613bb28585614688565b613bbc9190614670565b613bc69190614688565b613bd091906146dc565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600c870160205260409020555b50505b5073ffffffffffffffffffffffffffffffffffffffff166000908152600b90910160205260409020429055565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cc09190614628565b905080831115613d125760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742065786365656420746f74616c20737570706c7900000000000060448201526064016104b6565b60006402540be400613d248787613e0f565b613d33906402540be4006146c5565b613d3d9086614688565b613d4791906146dc565b865490915060009067ffffffffffffffff811115613d6757613d6761431f565b604051908082528060200260200182016040528015613d90578160200160208202803683370190505b50905060005b8754811015613e04578383896003018381548110613db657613db66145f9565b9060005260206000200154613dcb9190614688565b613dd591906146dc565b828281518110613de757613de76145f9565b602090810291909101015280613dfc81614717565b915050613d96565b509695505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600b830160205260408120548190613e46906224ea00614670565b905042811115613ecb576000613e5c42836146c5565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600c87016020526040902054600a8701549192506402540be400916224ea00918491613ea49190614688565b613eae9190614688565b613eb891906146dc565b613ec291906146dc565b92505050611cb0565b5060009392505050565b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051613efd9190614955565b6000604051808303816000865af19150503d8060008114613f3a576040519150601f19603f3d011682016040523d82523d6000602084013e613f3f565b606091505b50915091506000821415613f57573d6000803e3d6000fd5b613f81815160001480613f79575081806020019051810190613f799190614990565b6101a26141a5565b50505050565b8454600090808510613f9b57613f9b614750565b6000613fa78288614688565b90508360008080805b86811015614022578a811415613fc557614010565b898181518110613fd757613fd76145f9565b602002602001015192508284613fed9190614670565b9350613ff98784614688565b6140038a87614688565b61400d91906146dc565b94505b8061401a81614717565b915050613fb0565b5061402d8686614688565b60646140398a87614688565b6140439190614688565b61404d91906146dc565b935060008561405d60648b614688565b61406791906146dc565b6140719085614670565b90508860005b610100811015613702578193508a838360026140939190614688565b61409d9190614670565b6140a791906146c5565b876140b28480614688565b6140bc9190614670565b6140c691906146dc565b915060016140d485846139ad565b116140e9575097506130949650505050505050565b806140f381614717565b915050614077565b6000805b82518110156141415782818151811061411a5761411a6145f9565b60200260200101518261412d9190614670565b91508061413981614717565b9150506140ff565b50919050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052613f819085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016130ef565b816141b3576141b3816141b7565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b828054828255906000526020600020908101928215614245579160200282015b8281111561424557825182559160200191906001019061422a565b50614251929150614255565b5090565b5b808211156142515760008155600101614256565b803573ffffffffffffffffffffffffffffffffffffffff8116811461428e57600080fd5b919050565b60008060008060008060c087890312156142ac57600080fd5b86359550602087013594506040870135935060608701359250608087013591506142d860a0880161426a565b90509295509295509295565b600080600080608085870312156142fa57600080fd5b8435935061430a6020860161426a565b93969395505050506040820135916060013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261435f57600080fd5b8135602067ffffffffffffffff8083111561437c5761437c61431f565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811084821117156143bf576143bf61431f565b6040529384528581018301938381019250878511156143dd57600080fd5b83870191505b848210156143fc578135835291830191908301906143e3565b979650505050505050565b801515811461441557600080fd5b50565b60008060006060848603121561442d57600080fd5b83359250602084013567ffffffffffffffff81111561444b57600080fd5b6144578682870161434e565b925050604084013561446881614407565b809150509250925092565b6000806000806080858703121561448957600080fd5b5050823594602084013594506040840135936060013592509050565b6000806000606084860312156144ba57600080fd5b83359250602084013567ffffffffffffffff8111156144d857600080fd5b6144e48682870161434e565b925050604084013590509250925092565b60006020828403121561450757600080fd5b5035919050565b60008060006060848603121561452357600080fd5b833592506145336020850161426a565b9150604084013590509250925092565b60008060006060848603121561455857600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561457d57600080fd5b6145898682870161434e565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156145cb578351835292840192918401916001016145af565b50909695505050505050565b600080604083850312156145ea57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561463a57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561468357614683614641565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156146c0576146c0614641565b500290565b6000828210156146d7576146d7614641565b500390565b600082614712577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561474957614749614641565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600081518084526020808501945080840160005b838110156147af57815187529582019590820190600101614793565b509495945050505050565b6080815260006147cd608083018761477f565b82810360208401526147df818761477f565b604084019590955250506060015292915050565b606081526000614806606083018661477f565b8281036020840152614818818661477f565b915050826040830152949350505050565b600181815b8085111561488257817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561486857614868614641565b8085161561487557918102915b93841c939080029061482e565b509250929050565b60008261489957506001611cb0565b816148a657506000611cb0565b81600181146148bc57600281146148c6576148e2565b6001915050611cb0565b60ff8411156148d7576148d7614641565b50506001821b611cb0565b5060208310610133831016604e8410600b8410161715614905575081810a611cb0565b61490f8383614829565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561494157614941614641565b029392505050565b6000610b02838361488a565b6000825160005b81811015614976576020818601810151858301520161495c565b81811115614985576000828501525b509190910192915050565b6000602082840312156149a257600080fd5b8151610b028161440756fea264697066735822122039b63feceb100db005ce8f089e1d27a5dada3a78eae5f03c3647d8fff1ba9d3a64736f6c634300080a0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101815760003560e01c8063b52e146f116100e2578063c8344c0611610096578063d73792a911610070578063d73792a91461035d578063e2eba89b14610369578063fa5635971461037c57600080fd5b8063c8344c0614610322578063d011f91814610342578063d36604ac1461034a57600080fd5b8063c188e4be116100c7578063c188e4be146102cb578063c20aace8146102ed578063c685696c146102f557600080fd5b8063b52e146f146102a5578063ba2998d9146102b857600080fd5b80637a6cba3c11610139578063a30355851161011e578063a30355851461025f578063aa054aee14610272578063ad30093f1461028557600080fd5b80637a6cba3c1461021f5780638e6da7b61461023f57600080fd5b80631e7e95d31161016a5780631e7e95d3146101cc5780632bfe30d0146101df5780632fcdda4f146101ff57600080fd5b80630da350f614610186578063159763bb146101b9575b600080fd5b81801561019257600080fd5b506101a66101a1366004614293565b61038f565b6040519081526020015b60405180910390f35b6101a66101c73660046142e4565b610784565b6101a66101da366004614418565b61079c565b8180156101eb57600080fd5b506101a66101fa366004614473565b610b09565b81801561020b57600080fd5b506101a661021a366004614293565b610f2a565b81801561022b57600080fd5b506101a661023a3660046144a5565b6112f9565b81801561024b57600080fd5b506101a661025a366004614293565b611a3d565b6101a661026d3660046144f5565b611ca5565b6101a6610280366004614473565b611cb6565b81801561029157600080fd5b506101a66102a0366004614293565b611daf565b6101a66102b33660046144f5565b612088565b6101a66102c6366004614473565b61209f565b8180156102d757600080fd5b506102eb6102e636600461450e565b612190565b005b6101a6601281565b81801561030157600080fd5b50610315610310366004614543565b6121a0565b6040516101b09190614593565b81801561032e57600080fd5b506101a661033d3660046144a5565b6124b5565b6101a6606481565b6101a66103583660046144f5565b612b4c565b6101a66402540be40081565b6101a66103773660046145d7565b612c2b565b61031561038a36600461450e565b612d58565b60008660000186815481106103a6576103a66145f9565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa15801561041d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104419190614628565b84886003018881548110610457576104576145f9565b906000526020600020015461046c9190614670565b11156104bf5760405162461bcd60e51b815260206004820152600560248201527f696e70757400000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60006104ca88612d65565b905060008860020188815481106104e3576104e36145f9565b9060005260206000200154866104f99190614688565b82898151811061050b5761050b6145f9565b602002602001015161051d9190614670565b9050600061052e8a8a8a8587612e13565b9050600181848a81518110610545576105456145f9565b602002602001015161055791906146c5565b61056191906146c5565b935060006402540be4008b600401548661057b9190614688565b61058591906146dc565b90508a600201898154811061059c5761059c6145f9565b906000526020600020015481866105b391906146c5565b6105bd91906146dc565b94508685101561060f5760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b60008b6002018a81548110610626576106266145f9565b90600052602060002001546402540be4008d60050154846106479190614688565b61065191906146dc565b61065b91906146dc565b9050888c6003018c81548110610673576106736145f9565b90600052602060002001600082825461068c9190614670565b9091555061069c90508187614670565b8c6003018b815481106106b1576106b16145f9565b9060005260206000200160008282546106ca91906146c5565b9250508190555061071487878e6000018d815481106106eb576106eb6145f9565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16919061309d565b604080518c8152602081018b90529081018b90526060810187905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc98906080015b60405180910390a250505050509695505050505050565b600061079285858585613171565b5095945050505050565b825482516000919081146107f25760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964416d6f756e74734c656e67746800000000000000000000000060448201526064016104b6565b60006107fd866134d6565b9050600061081361080d88612d65565b836135af565b905060008760030180548060200260200160405190810160405280929190818152602001828054801561086557602002820191906000526020600020905b815481526020019060010190808311610851575b5050505050905060005b8481101561091b5786156108c55787818151811061088f5761088f6145f9565b60200260200101518282815181106108a9576108a96145f9565b602002602001018181516108bd9190614670565b905250610909565b8781815181106108d7576108d76145f9565b60200260200101518282815181106108f1576108f16145f9565b6020026020010181815161090591906146c5565b9052505b8061091381614717565b91505061086f565b50600061098361097d838b60020180548060200260200160405190810160405280929190818152602001828054801561097357602002820191906000526020600020905b81548152602001906001019080831161095f575b505050505061374b565b856135af565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a9190614628565b905080610a2e57509450610b029350505050565b600088610a4457610a3f83866146c5565b610a4e565b610a4e85846146c5565b9050848b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae49190614628565b610aee9083614688565b610af891906146dc565b9750505050505050505b9392505050565b6000808560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9f9190614628565b905060008111610bf15760405162461bcd60e51b815260206004820152600f60248201527f746f74616c537570706c79203d2030000000000000000000000000000000000060448201526064016104b6565b855460018701546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c879190614628565b861115610cd65760405162461bcd60e51b815260206004820152600960248201527f3e2062616c616e6365000000000000000000000000000000000000000000000060448201526064016104b6565b81861115610d265760405162461bcd60e51b815260206004820152600d60248201527f3e20746f74616c537570706c790000000000000000000000000000000000000060448201526064016104b6565b808510610d755760405162461bcd60e51b815260206004820152600d60248201527f746f6b656e4e6f74466f756e640000000000000000000000000000000000000060448201526064016104b6565b600080610d8489338a8a613171565b9250905085811015610dd85760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b6402540be400896005015483610dee9190614688565b610df891906146dc565b610e029082614670565b896003018881548110610e1757610e176145f9565b906000526020600020016000828254610e3091906146c5565b909155505060018901546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018a905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015610ea957600080fd5b505af1158015610ebd573d6000803e3d6000fd5b50505050610edb33828b6000018a815481106106eb576106eb6145f9565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b6000866000018681548110610f4157610f416145f9565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610fb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdc9190614628565b84886003018881548110610ff257610ff26145f9565b90600052602060002001546110079190614670565b146110545760405162461bcd60e51b815260206004820152600560248201527f696e70757400000000000000000000000000000000000000000000000000000060448201526064016104b6565b60006110816110686402540be40086614688565b60048a015461107c906402540be4006146c5565b6137ce565b9050600061108e896134d6565b9050600061109e61080d8b612d65565b905060008a6003018054806020026020016040519081016040528092919081815260200182805480156110f057602002820191906000526020600020905b8154815260200190600101908083116110dc575b5050505050905087818b8151811061110a5761110a6145f9565b6020026020010181815161111e9190614670565b9052508051849082908b908110611137576111376145f9565b6020026020010181815161114b91906146c5565b9150818152505060006111b161097d838e600201805480602002602001604051908101604052809291908181526020018280548015610973576020028201919060005260206000209081548152602001906001019080831161095f57505050505061374b565b9050828110156112035760405162461bcd60e51b815260206004820152600960248201527f696e76617269616e74000000000000000000000000000000000000000000000060448201526064016104b6565b888c6003018c81548110611219576112196145f9565b9060005260206000200160008282546112329190614670565b92505081905550848c6003018b8154811061124f5761124f6145f9565b90600052602060002001600082825461126891906146c5565b9250508190555061128987868e6000018d815481106106eb576106eb6145f9565b604080518c8152602081018b90529081018b90526060810186905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a250959a9950505050505050505050565b8254825160009190811461134f5760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964416d6f756e74734c656e67746800000000000000000000000060448201526064016104b6565b60008167ffffffffffffffff81111561136a5761136a61431f565b604051908082528060200260200182016040528015611393578160200160208202803683370190505b50905060006113a187613827565b905060008760010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114389190614628565b90506000611445896134d6565b905060008215611501576114fe61080d8b6003018054806020026020016040519081016040528092919081815260200182805480156114a357602002820191906000526020600020905b81548152602001906001019080831161148f575b50505050508c600201805480602002602001604051908101604052809291908181526020018280548015610973576020028201919060005260206000209081548152602001906001019080831161095f57505050505061374b565b90505b60008a60030180548060200260200160405190810160405280929190818152602001828054801561155157602002820191906000526020600020905b81548152602001906001019080831161153d575b5050505050905060005b8781101561166e57846115d15760008b828151811061157c5761157c6145f9565b6020026020010151116115d15760405162461bcd60e51b815260206004820152601e60248201527f696e697469616c4465706f73697452657175697265416c6c546f6b656e73000060448201526064016104b6565b6116338c60000182815481106115e9576115e96145f9565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c8381518110611626576116266145f9565b602002602001015161385c565b828281518110611645576116456145f9565b602002602001018181516116599190614670565b9052508061166681614717565b91505061155b565b5060006116ce61097d838e600201805480602002602001604051908101604052809291908181526020018280548015610973576020028201919060005260206000209081548152602001906001019080831161095f57505050505061374b565b90508281116116df576116df614750565b846117025781516116f99060038e0190602085019061420a565b508098506118fe565b6000805b8981101561187557611766858f6003018381548110611727576117276145f9565b90600052602060002001548561173d9190614688565b61174791906146dc565b858381518110611759576117596145f9565b60200260200101516139ad565b91506402540be400611778838a614688565b61178291906146dc565b898281518110611794576117946145f9565b6020026020010181815250506402540be4008e600501548a83815181106117bd576117bd6145f9565b60200260200101516117cf9190614688565b6117d991906146dc565b8482815181106117eb576117eb6145f9565b60200260200101516117fd91906146c5565b8e6003018281548110611812576118126145f9565b9060005260206000200181905550888181518110611832576118326145f9565b602002602001015184828151811061184c5761184c6145f9565b6020026020010181815161186091906146c5565b9052508061186d81614717565b915050611706565b506118d96118d3848f600201805480602002602001604051908101604052809291908181526020018280548015610973576020028201919060005260206000209081548152602001906001019080831161095f57505050505061374b565b866135af565b9150836118e681846146c5565b6118f09088614688565b6118fa91906146dc565b9950505b8989101561194e5760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b60018c01546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906340c10f1990604401600060405180830381600087803b1580156119c257600080fd5b505af11580156119d6573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d604051611a2694939291906147ba565b60405180910390a250505050505050509392505050565b600080611a4988612d65565b90506000611a73611a5f6402540be40088614688565b60048b015461107c906402540be4006146c5565b90506000896002018881548110611a8c57611a8c6145f9565b906000526020600020015482611aa29190614688565b838981518110611ab457611ab46145f9565b6020026020010151611ac691906146c5565b90506000611ad78b8a8c8588612e13565b9050838a81518110611aeb57611aeb6145f9565b602002602001015181611afe91906146c5565b94508a6002018a81548110611b1557611b156145f9565b906000526020600020015485611b2b91906146dc565b945086851115611b7d5760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b848b6003018b81548110611b9357611b936145f9565b906000526020600020016000828254611bac91906146c5565b92505081905550828b6003018a81548110611bc957611bc96145f9565b906000526020600020016000828254611be291906146c5565b90915550508a546000908c908c908110611bfe57611bfe6145f9565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169050611c2c818761385c565b9550611c48878a8e6000018d815481106106eb576106eb6145f9565b604080518c8152602081018890529081018b9052606081018a905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800161076d565b6000611cb0826134d6565b92915050565b600080611cc286612d65565b90506000611cec611cd86402540be40086614688565b600489015461107c906402540be4006146c5565b90506000876002018681548110611d0557611d056145f9565b906000526020600020015482611d1b9190614688565b838781518110611d2d57611d2d6145f9565b6020026020010151611d3f91906146c5565b90506000611d5089888a8588612e13565b90506000611da1858a81518110611d6957611d696145f9565b602002602001015183611d7c91906146c5565b8b6002018b81548110611d9157611d916145f9565b90600052602060002001546139cf565b9a9950505050505050505050565b600080876000018781548110611dc757611dc76145f9565b600091825260208220015473ffffffffffffffffffffffffffffffffffffffff169150611df389612d65565b9050611dff828761385c565b95506000611e5e8a8a8a8d6002018d81548110611e1e57611e1e6145f9565b90600052602060002001548b611e349190614688565b868e81518110611e4657611e466145f9565b6020026020010151611e589190614670565b86612e13565b90506000600182848b81518110611e7757611e776145f9565b6020026020010151611e8991906146c5565b611e9391906146c5565b905060006402540be4008c6004015483611ead9190614688565b611eb791906146dc565b90508b6002018a81548110611ece57611ece6145f9565b90600052602060002001548183611ee591906146c5565b611eef91906146dc565b915087821015611f415760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b888c6003018c81548110611f5757611f576145f9565b906000526020600020016000828254611f709190614670565b909155505060028c0180548b908110611f8b57611f8b6145f9565b90600052602060002001546402540be4008d6005015483611fac9190614688565b611fb691906146dc565b611fc091906146dc565b611fca9083614670565b8c6003018b81548110611fdf57611fdf6145f9565b906000526020600020016000828254611ff891906146c5565b9250508190555061201987838e6000018d815481106106eb576106eb6145f9565b604080518c8152602081018b90529081018b90526060810183905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a2509a9950505050505050505050565b60006064612095836134d6565b611cb091906146dc565b6000806120ab86612d65565b905060008660020186815481106120c4576120c46145f9565b9060005260206000200154846120da9190614688565b8287815181106120ec576120ec6145f9565b60200260200101516120fe9190614670565b9050600061210f8888888587612e13565b9050600061216082858981518110612129576121296145f9565b602002602001015161213b91906146c5565b8a6002018981548110612150576121506145f9565b90600052602060002001546137ce565b905060006402540be400828b6004015461217a9190614688565b61218491906146dc565b9050611da181836146c5565b61219b838383613a53565b505050565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122379190614628565b90508084111561224657600080fd5b845460008167ffffffffffffffff8111156122635761226361431f565b60405190808252806020026020018201604052801561228c578160200160208202803683370190505b50905061229a873388613c29565b935060005b84518110156123d6578581815181106122ba576122ba6145f9565b60200260200101518582815181106122d4576122d46145f9565b6020026020010151101561232a5760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b84818151811061233c5761233c6145f9565b6020026020010151886003018281548110612359576123596145f9565b906000526020600020015461236e91906146c5565b886003018281548110612383576123836145f9565b90600052602060002001819055506123c4338683815181106123a7576123a76145f9565b60200260200101518a60000184815481106106eb576106eb6145f9565b806123ce81614717565b91505061229f565b5060018701546040517f79cc67900000000000000000000000000000000000000000000000000000000081523360048201526024810188905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b15801561244b57600080fd5b505af115801561245f573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea9150869050836124948a886146c5565b6040516124a3939291906147f3565b60405180910390a25050509392505050565b8254825160009190811461250b5760405162461bcd60e51b815260206004820152601460248201527f696e76616c6964416d6f756e74734c656e67746800000000000000000000000060448201526064016104b6565b6001850154604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916318160ddd9160048083019260209291908290030181865afa15801561257d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a19190614628565b9050806125f05760405162461bcd60e51b815260206004820152600f60248201527f746f74616c537570706c79203d2030000000000000000000000000000000000060448201526064016104b6565b60006125fb87613827565b90506000612608886134d6565b905060008860030180548060200260200160405190810160405280929190818152602001828054801561265a57602002820191906000526020600020905b815481526020019060010190808311612646575b50505050509050600061267561266f8b612d65565b846135af565b905060005b868110156126d757898181518110612694576126946145f9565b60200260200101518382815181106126ae576126ae6145f9565b602002602001018181516126c291906146c5565b905250806126cf81614717565b91505061267a565b50600061273761097d848d600201805480602002602001604051908101604052809291908181526020018280548015610973576020028201919060005260206000209081548152602001906001019080831161095f57505050505061374b565b905060008767ffffffffffffffff8111156127545761275461431f565b60405190808252806020026020018201604052801561277d578160200160208202803683370190505b50905060005b888110156128fd576000848e60030183815481106127a3576127a36145f9565b9060005260206000200154856127b99190614688565b6127c391906146dc565b905060006127ea8784815181106127dc576127dc6145f9565b6020026020010151836139ad565b90506402540be4006127fc828b614688565b61280691906146dc565b848481518110612818576128186145f9565b6020026020010181815250506402540be4008f60050154858581518110612841576128416145f9565b60200260200101516128539190614688565b61285d91906146dc565b87848151811061286f5761286f6145f9565b602002602001015161288191906146c5565b8f6003018481548110612896576128966145f9565b90600052602060002001819055508383815181106128b6576128b66145f9565b60200260200101518784815181106128d0576128d06145f9565b602002602001018181516128e491906146c5565b9052508291506128f5905081614717565b915050612783565b5061295b6118d3858e600201805480602002602001604051908101604052809291908181526020018280548015610973576020028201919060005260206000209081548152602001906001019080831161095f57505050505061374b565b9150828761296984836146c5565b6129739190614688565b61297d91906146dc565b98506000891161298f5761298f614750565b6129998c33613e0f565b6129a8906402540be4006146c5565b6129b38a6001614670565b6129bd9190614688565b985089891115612a0f5760405162461bcd60e51b815260206004820152600a60248201527f3e20736c6970706167650000000000000000000000000000000000000000000060448201526064016104b6565b60018c01546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015612a8357600080fd5b505af1158015612a97573d6000803e3d6000fd5b5050505060005b88811015612b0c578b8181518110612ab857612ab86145f9565b6020026020010151600014612afa57612afa338d8381518110612add57612add6145f9565b60200260200101518f60000184815481106106eb576106eb6145f9565b80612b0481614717565b915050612a9e565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c8385612b3c8e8d6146c5565b604051611a2694939291906147ba565b600080612b69612b5b84612d65565b612b64856134d6565b6135af565b905060008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c009190614628565b905080612c0f6012600a614949565b612c199084614688565b612c2391906146dc565b949350505050565b81546000908210612c7e5760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e6765000000000000000000000000000000000060448201526064016104b6565b826003018281548110612c9357612c936145f9565b9060005260206000200154836000018381548110612cb357612cb36145f9565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612d2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4e9190614628565b610b0291906146c5565b6060612c23848484613c29565b6060611cb082600301805480602002602001604051908101604052809291908181526020018280548015612db857602002820191906000526020600020905b815481526020019060010190808311612da4575b505050505083600201805480602002602001604051908101604052809291908181526020018280548015610973576020028201919060005260206000209081548152602001906001019080831161095f57505050505061374b565b600083851415612e655760405162461bcd60e51b815260206004820152600960248201527f73616d65546f6b656e000000000000000000000000000000000000000000000060448201526064016104b6565b85548086108015612e7557508085105b612ec15760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e6765000000000000000000000000000000000060448201526064016104b6565b6000612ecc886134d6565b90506000612eda8383614688565b90506000612ee886846135af565b9050600081815b86811015612f70578a811415612f0457612f5e565b60008c8214612f2c57898281518110612f1f57612f1f6145f9565b6020026020010151612f2e565b8a5b9050612f3a8185614670565b9350612f468882614688565b612f508685614688565b612f5a91906146dc565b9250505b80612f6881614717565b915050612eef565b50612f7b8685614688565b6064612f878584614688565b612f919190614688565b612f9b91906146dc565b9050600084612fab606486614688565b612fb591906146dc565b612fbf9084614670565b9050600084815b61010081101561304b578192508684836002612fe29190614688565b612fec9190614670565b612ff691906146c5565b856130018480614688565b61300b9190614670565b61301591906146dc565b9150600161302384846139ad565b1161303957509850613094975050505050505050565b8061304381614717565b915050612fc6565b5060405162461bcd60e51b815260206004820152601260248201527f7943616c63756c6174696f6e4661696c6564000000000000000000000000000060448201526064016104b6565b95945050505050565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261219b9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613ed5565b8354600090819083106131c65760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e6765000000000000000000000000000000000060448201526064016104b6565b60006131d1876134d6565b905060006131de88612d65565b905060006131ec82846135af565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561325f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132839190614628565b61328d838a614688565b61329791906146dc565b6132a190836146c5565b905060006132b28b868a8786613f87565b90508360006132c08d613827565b905060005b8d548110156133c85760008b82141561331a578487878a85815181106132ed576132ed6145f9565b60200260200101516132ff9190614688565b61330991906146dc565b61331391906146c5565b9050613371565b868689848151811061332e5761332e6145f9565b60200260200101516133409190614688565b61334a91906146dc565b88838151811061335c5761335c6145f9565b602002602001015161336e91906146c5565b90505b6402540be4006133818285614688565b61338b91906146dc565b84838151811061339d5761339d6145f9565b602002602001018181516133b191906146c5565b9052508190506133c081614717565b9150506132c5565b506133d68d888c8588613f87565b828b815181106133e8576133e86145f9565b60200260200101516133fa91906146c5565b98508c6002018a81548110613411576134116145f9565b906000526020600020015460018a61342991906146c5565b61343391906146dc565b9850888d6002018b8154811061344b5761344b6145f9565b906000526020600020015484888d81518110613469576134696145f9565b602002602001015161347b91906146c5565b61348591906146dc565b61348f91906146c5565b97506402540be4006134a18e8e613e0f565b6134b0906402540be4006146c5565b6134ba908b614688565b6134c491906146dc565b98505050505050505094509492505050565b6000816009015442106134eb57506007015490565b816006015482600701541115613555578160080154826009015461350f91906146c5565b600883015461351e90426146c5565b8360060154846007015461353291906146c5565b61353c9190614688565b61354691906146dc565b8260060154611cb09190614670565b8160080154826009015461356991906146c5565b600883015461357890426146c5565b8360070154846006015461358c91906146c5565b6135969190614688565b6135a091906146dc565b8260060154611cb091906146c5565b8151600090816135be856140fb565b9050806135d057600092505050611cb0565b600081816135de8588614688565b905060005b610100811015613702578260005b8a5181101561364757878b828151811061360d5761360d6145f9565b602002602001015161361f9190614688565b6136298684614688565b61363391906146dc565b91508061363f81614717565b9150506135f1565b50839450808760016136599190614670565b6136639190614688565b60648561367082876146c5565b61367a9190614688565b61368491906146dc565b61368e9190614670565b846136998984614688565b60646136a58a88614688565b6136af91906146dc565b6136b99190614670565b6136c39190614688565b6136cd91906146dc565b935060016136db85876139ad565b116136ef5783975050505050505050611cb0565b50806136fa81614717565b9150506135e3565b5060405162461bcd60e51b815260206004820152601a60248201527f696e76617269616e7443616c63756c6174696f6e4661696c656400000000000060448201526064016104b6565b606060005b83518110156137c65783818151811061376b5761376b6145f9565b6020026020010151838281518110613785576137856145f9565b60200260200101516137979190614688565b8382815181106137a9576137a96145f9565b6020908102919091010152806137be81614717565b915050613750565b509092915050565b60008161381d5760405162461bcd60e51b815260206004820152600d60248201527f5a45524f5f4449564953494f4e0000000000000000000000000000000000000060448201526064016104b6565b610b0282846146dc565b80546000906138376001826146c5565b613842906004614688565b8184600401546138529190614688565b610b0291906146dc565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa1580156138cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ef9190614628565b905061391373ffffffffffffffffffffffffffffffffffffffff8516333086614147565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa15801561397f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139a39190614628565b612c2391906146c5565b60008183116139c5576139c083836146c5565b610b02565b610b0282846146c5565b600081613a1e5760405162461bcd60e51b815260206004820152600d60248201527f5a45524f5f4449564953494f4e0000000000000000000000000000000000000060448201526064016104b6565b82613a2b57506000611cb0565b81613a376001856146c5565b613a4191906146dc565b613a4c906001614670565b9050611cb0565b73ffffffffffffffffffffffffffffffffffffffff8216613a7357505050565b600a830154613ab05773ffffffffffffffffffffffffffffffffffffffff82166000908152600c8401602052604090206402540be4009055613bfc565b6000613abc8484613e0f565b60018501546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152929350600092909116906370a0823190602401602060405180830381865afa158015613b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b589190614628565b600a860154909150613b6a8285614670565b613b749190614688565b15613bf957600a850154613b888285614670565b613b929190614688565b6402540be40086600a015485613ba89190614688565b613bb28585614688565b613bbc9190614670565b613bc69190614688565b613bd091906146dc565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600c870160205260409020555b50505b5073ffffffffffffffffffffffffffffffffffffffff166000908152600b90910160205260409020429055565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cc09190614628565b905080831115613d125760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742065786365656420746f74616c20737570706c7900000000000060448201526064016104b6565b60006402540be400613d248787613e0f565b613d33906402540be4006146c5565b613d3d9086614688565b613d4791906146dc565b865490915060009067ffffffffffffffff811115613d6757613d6761431f565b604051908082528060200260200182016040528015613d90578160200160208202803683370190505b50905060005b8754811015613e04578383896003018381548110613db657613db66145f9565b9060005260206000200154613dcb9190614688565b613dd591906146dc565b828281518110613de757613de76145f9565b602090810291909101015280613dfc81614717565b915050613d96565b509695505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600b830160205260408120548190613e46906224ea00614670565b905042811115613ecb576000613e5c42836146c5565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600c87016020526040902054600a8701549192506402540be400916224ea00918491613ea49190614688565b613eae9190614688565b613eb891906146dc565b613ec291906146dc565b92505050611cb0565b5060009392505050565b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051613efd9190614955565b6000604051808303816000865af19150503d8060008114613f3a576040519150601f19603f3d011682016040523d82523d6000602084013e613f3f565b606091505b50915091506000821415613f57573d6000803e3d6000fd5b613f81815160001480613f79575081806020019051810190613f799190614990565b6101a26141a5565b50505050565b8454600090808510613f9b57613f9b614750565b6000613fa78288614688565b90508360008080805b86811015614022578a811415613fc557614010565b898181518110613fd757613fd76145f9565b602002602001015192508284613fed9190614670565b9350613ff98784614688565b6140038a87614688565b61400d91906146dc565b94505b8061401a81614717565b915050613fb0565b5061402d8686614688565b60646140398a87614688565b6140439190614688565b61404d91906146dc565b935060008561405d60648b614688565b61406791906146dc565b6140719085614670565b90508860005b610100811015613702578193508a838360026140939190614688565b61409d9190614670565b6140a791906146c5565b876140b28480614688565b6140bc9190614670565b6140c691906146dc565b915060016140d485846139ad565b116140e9575097506130949650505050505050565b806140f381614717565b915050614077565b6000805b82518110156141415782818151811061411a5761411a6145f9565b60200260200101518261412d9190614670565b91508061413981614717565b9150506140ff565b50919050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052613f819085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016130ef565b816141b3576141b3816141b7565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b828054828255906000526020600020908101928215614245579160200282015b8281111561424557825182559160200191906001019061422a565b50614251929150614255565b5090565b5b808211156142515760008155600101614256565b803573ffffffffffffffffffffffffffffffffffffffff8116811461428e57600080fd5b919050565b60008060008060008060c087890312156142ac57600080fd5b86359550602087013594506040870135935060608701359250608087013591506142d860a0880161426a565b90509295509295509295565b600080600080608085870312156142fa57600080fd5b8435935061430a6020860161426a565b93969395505050506040820135916060013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261435f57600080fd5b8135602067ffffffffffffffff8083111561437c5761437c61431f565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811084821117156143bf576143bf61431f565b6040529384528581018301938381019250878511156143dd57600080fd5b83870191505b848210156143fc578135835291830191908301906143e3565b979650505050505050565b801515811461441557600080fd5b50565b60008060006060848603121561442d57600080fd5b83359250602084013567ffffffffffffffff81111561444b57600080fd5b6144578682870161434e565b925050604084013561446881614407565b809150509250925092565b6000806000806080858703121561448957600080fd5b5050823594602084013594506040840135936060013592509050565b6000806000606084860312156144ba57600080fd5b83359250602084013567ffffffffffffffff8111156144d857600080fd5b6144e48682870161434e565b925050604084013590509250925092565b60006020828403121561450757600080fd5b5035919050565b60008060006060848603121561452357600080fd5b833592506145336020850161426a565b9150604084013590509250925092565b60008060006060848603121561455857600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561457d57600080fd5b6145898682870161434e565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156145cb578351835292840192918401916001016145af565b50909695505050505050565b600080604083850312156145ea57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561463a57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561468357614683614641565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156146c0576146c0614641565b500290565b6000828210156146d7576146d7614641565b500390565b600082614712577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561474957614749614641565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600081518084526020808501945080840160005b838110156147af57815187529582019590820190600101614793565b509495945050505050565b6080815260006147cd608083018761477f565b82810360208401526147df818761477f565b604084019590955250506060015292915050565b606081526000614806606083018661477f565b8281036020840152614818818661477f565b915050826040830152949350505050565b600181815b8085111561488257817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561486857614868614641565b8085161561487557918102915b93841c939080029061482e565b509250929050565b60008261489957506001611cb0565b816148a657506000611cb0565b81600181146148bc57600281146148c6576148e2565b6001915050611cb0565b60ff8411156148d7576148d7614641565b50506001821b611cb0565b5060208310610133831016604e8410600b8410161715614905575081810a611cb0565b61490f8383614829565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561494157614941614641565b029392505050565b6000610b02838361488a565b6000825160005b81811015614976576020818601810151858301520161495c565b81811115614985576000828501525b509190910192915050565b6000602082840312156149a257600080fd5b8151610b028161440756fea264697066735822122039b63feceb100db005ce8f089e1d27a5dada3a78eae5f03c3647d8fff1ba9d3a64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_swap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i": "token in index",
          "inAmount": "exact in amount, povided or calculated using outAmount",
          "j": "token out index",
          "outAmount": "exact out amount, povided or calculated using inAmount"
        }
      },
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "params": {
          "amounts": "List of amounts of coins to deposit",
          "minMintAmount": "Minimum amount of LP tokens to mint from the deposit"
        },
        "returns": {
          "mintAmount": "Amount of LP tokens received by depositing"
        }
      },
      "onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i": "token index in",
          "j": "token index out"
        }
      },
      "onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i": "token index in",
          "j": "token index out"
        }
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "params": {
          "self": "Swap struct to read from and write to",
          "toMint": "amount of pool tokens to be minted",
          "user": "address of the user depositing tokens"
        }
      }
    },
    "stateVariables": {
      "A_PRECISION": {
        "details": "protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration"
      },
      "MAX_ITERATION": {
        "details": "max iteration of converge calccuate"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_swap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "notice": "implements classic swap function a la compound  here the amounts are provided and just validated via the invariant  - out amount is supposed to not include the fees  - inAmount is supposd to be sent already to this address"
      },
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "notice": "Deposit coins into the pool"
      },
      "calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)": {
        "notice": "Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account"
      },
      "getAPrecise(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "VIEW FUNCTIONS"
      },
      "getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "Returns portfolio virtual price (for calculating profit) scaled up by 1e18"
      },
      "onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "notice": "the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output, in this case simple as the output is the calculated value   - viable function for batch swapping"
      },
      "onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "notice": "the same function as swap, but it espects that amounts already have been sent to the contract and it requires the output to be provided  - designed to be used in the requirem swap framework  - deducts the fees from the output, that means that the    output has to be increased by the fee to then create a highe input"
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "notice": "Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit."
      }
    },
    "notice": "StableSwap main algorithm",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}