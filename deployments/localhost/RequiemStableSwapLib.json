{
  "address": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IFlashLoanRecipient",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "FlashLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coin_amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sold_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bought_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        }
      ],
      "name": "TokenExchange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "A_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_TOKEN_COMMON_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c10ad5132414ec0c21559e1605d1146da846cc46f644165a11f7a543b4d35b2",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
    "transactionIndex": 0,
    "gasUsed": "3971974",
    "logsBloom": "0x
    "blockHash": "0xa559d3412d4dd59a2b1fcf89b9689c31d2c0ad22a9f5d41ba1bb813da9597fce",
    "transactionHash": "0x8c10ad5132414ec0c21559e1605d1146da846cc46f644165a11f7a543b4d35b2",
    "logs": [],
    "blockNumber": 35,
    "cumulativeGasUsed": "3971974",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b68fc32492a33c9dfb64dfd079d60aab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coin_amount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sold_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_sold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bought_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_bought\",\"type\":\"uint256\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_TOKEN_COMMON_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FlashLoan(address,address,uint256,uint256)\":{\"details\":\"Emitted for each individual flash loan performed by `flashLoan`.\"}},\"kind\":\"dev\",\"methods\":{\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"params\":{\"amounts\":\"List of amounts of coins to deposit\",\"minMintAmount\":\"Minimum amount of LP tokens to mint from the deposit\"},\"returns\":{\"mintAmount\":\"Amount of LP tokens received by depositing\"}},\"onSwap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i\":\"token index in\",\"j\":\"token index out\",\"outAmount\":\"the target out amount - only a cap at the decimalplaces of the lower one, the rest is taken as fee                  - that fee is always about the lowes amount possible of the one with the lower decimal number                  this will have a negative\"}},\"onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i\":\"token index in\",\"j\":\"token index out\"}},\"onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i\":\"token index in\",\"j\":\"token index out\"}},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"params\":{\"self\":\"Swap struct to read from and write to\",\"toMint\":\"amount of pool tokens to be minted\",\"user\":\"address of the user depositing tokens\"}}},\"stateVariables\":{\"A_PRECISION\":{\"details\":\"protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration\"},\"MAX_ITERATION\":{\"details\":\"max iteration of converge calccuate\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"notice\":\"Deposit coins into the pool\"},\"calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)\":{\"notice\":\"Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account\"},\"flashLoan(RequiemStableSwapLib.SwapStorage storage,IFlashLoanRecipient,IERC20[],uint256[],bytes)\":{\"notice\":\"Flash Loan\"},\"getAPrecise(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"VIEW FUNCTIONS\"},\"getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"Returns portfolio virtual price (for calculating profit) scaled up by 1e18\"},\"onSwap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output and caps it at outAmount to   - this is to avoid issues with the rounding when using the calculateSwapGivenOut function to determine the input          -> that is because e.g. a 6 digit input can never exactly hit a 18 digit output, so the input is selected slightly higher              such that the output also is essentially rounded up at the sixth digit          -> the outAmount can only be lower than the actual calculated dy   - viable function for batch swapping\"},\"onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output, in this case simple as the output is the calculated value   - viable function for batch swapping\"},\"onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"the same function as swap, but it espects that amounts already have been sent to the contract and it requires the output to be provided  - designed to be used in the requirem swap framework  - deducts the fees from the output, that means that the    output has to be increased by the fee to then create a highe input\"},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"notice\":\"Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit.\"}},\"notice\":\"StableSwap main algorithm\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemStableSwapLib.sol\":\"RequiemStableSwapLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/RequiemStableSwapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"./tokens/LPToken.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./libraries/math/FullMath.sol\\\";\\nimport \\\"./interfaces/IFlashLoanRecipient.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\n/**\\n * StableSwap main algorithm\\n */\\nlibrary RequiemStableSwapLib {\\n    using SafeERC20 for IERC20;\\n\\n    event AddLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 invariant, uint256 token_supply);\\n\\n    event TokenExchange(address indexed buyer, uint256 sold_id, uint256 tokens_sold, uint256 bought_id, uint256 tokens_bought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 token_supply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 invariant, uint256 token_supply);\\n    /**\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\n     */\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\n\\n    uint256 public constant FEE_DENOMINATOR = 1e10;\\n    // uint256 public constant PRECISION = 1e18;\\n\\n    /// @dev protect from division loss when run approximation loop. We cannot divide at the end because of overflow,\\n    /// so we add some (small) PRECISION when divide in each iteration\\n    uint256 public constant A_PRECISION = 100;\\n    /// @dev max iteration of converge calccuate\\n    uint256 internal constant MAX_ITERATION = 256;\\n    uint256 public constant POOL_TOKEN_COMMON_DECIMALS = 18;\\n\\n    struct SwapStorage {\\n        IERC20[] pooledTokens;\\n        LPToken lpToken;\\n        /// @dev token i multiplier to reach POOL_TOKEN_COMMON_DECIMALS\\n        uint256[] tokenMultipliers;\\n        /// @dev effective balance which might different from token balance of the contract 'cause it hold admin fee as well\\n        uint256[] balances;\\n        /// @dev swap fee ratio. Charge on any action which move balance state far from the ideal state\\n        uint256 fee;\\n        /// @dev flash loan fee ratio. Charge on any action which move balance state far from the ideal state\\n        uint256 flashFee;\\n        /// @dev admin fee in ratio of swap fee.\\n        uint256 adminFee;\\n        /// @dev observation of A, multiplied with A_PRECISION\\n        uint256 initialA;\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n        // withdrawal fee control\\n        uint256 defaultWithdrawFee;\\n        mapping(address => uint256) depositTimestamp;\\n        mapping(address => uint256) withdrawFeeMultiplier;\\n    }\\n\\n    /**\\n     * @notice Deposit coins into the pool\\n     * @param amounts List of amounts of coins to deposit\\n     * @param minMintAmount Minimum amount of LP tokens to mint from the deposit\\n     * @return mintAmount Amount of LP tokens received by depositing\\n     */\\n    function addLiquidity(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 minMintAmount\\n    ) external returns (uint256 mintAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"length\\\");\\n        uint256[] memory fees = new uint256[](nCoins);\\n        uint256 _fee = _feePerToken(self);\\n\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256 D0 = 0;\\n        if (tokenSupply > 0) {\\n            D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\\n        }\\n\\n        uint256[] memory newBalances = self.balances;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (tokenSupply == 0) {\\n                require(amounts[i] > 0, \\\"tokens\\\");\\n            }\\n            // get real transfer in amount\\n            newBalances[i] += _doTransferIn(self.pooledTokens[i], amounts[i]);\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        assert(D1 > D0); // double check\\n\\n        if (tokenSupply == 0) {\\n            self.balances = newBalances;\\n            mintAmount = D1;\\n        } else {\\n            uint256 diff = 0;\\n            for (uint256 i = 0; i < nCoins; i++) {\\n                diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\\n                fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n                self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n                newBalances[i] -= fees[i];\\n            }\\n            D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n            mintAmount = (tokenSupply * (D1 - D0)) / D0;\\n        }\\n\\n        require(mintAmount >= minMintAmount, \\\"> s\\\");\\n\\n        self.lpToken.mint(msg.sender, mintAmount);\\n        emit AddLiquidity(msg.sender, amounts, fees, D1, mintAmount);\\n    }\\n\\n    // implements classic swap function a la compound\\n    // here the regular calculations such as balance values are implemented\\n    // funds are transferred in in that function and are not required to be sent\\n    // to the contract\\n    function swap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256) {\\n        IERC20 inCoin = self.pooledTokens[i];\\n        uint256[] memory normalizedBalances = _xp(self);\\n        inAmount = _doTransferIn(inCoin, inAmount);\\n\\n        uint256 y = _getY(self, i, j, normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]), normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> s\\\");\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n        return dy;\\n    }\\n\\n    /**\\n     *  the same function as swap, but it expects that amounts already have been\\n     *  sent to the contract\\n     *   - designed to be used in the Requiem Swap framework\\n     *   - deducts the fee from the output and caps it at outAmount to\\n     *   - this is to avoid issues with the rounding when using the calculateSwapGivenOut function to determine the input\\n     *          -> that is because e.g. a 6 digit input can never exactly hit a 18 digit output, so the input is selected slightly higher\\n     *              such that the output also is essentially rounded up at the sixth digit\\n     *          -> the outAmount can only be lower than the actual calculated dy\\n     *   - viable function for batch swapping\\n     * @param i token index in\\n     * @param j token index out\\n     * @param outAmount the target out amount - only a cap at the decimalplaces of the lower one, the rest is taken as fee\\n     *                  - that fee is always about the lowes amount possible of the one with the lower decimal number\\n     *                  this will have a negative\\n     */\\n    function onSwap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 outAmount,\\n        address to\\n    ) external returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n\\n        uint256 y = _getY(self, i, j, normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]), normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y; // iliminate rouding errors\\n        uint256 dy_fee = FullMath.mulDiv(dy , self.fee,FEE_DENOMINATOR);\\n\\n        dy = divUp(dy - dy_fee, self.tokenMultipliers[j]); // denormalize and round up\\n\\n        // the control outAmount has to be lower or equal than the \\\"actual\\\" one\\n        require(outAmount <= dy, \\\"dy too low\\\");\\n\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        self.pooledTokens[j].safeTransfer(to, outAmount);\\n        emit TokenExchange(to, i, inAmount, j, outAmount);\\n        return dy;\\n    }\\n\\n    /**\\n     *  the same function as swap, but it expects that amounts already have been\\n     *  sent to the contract\\n     *   - designed to be used in the Requiem Swap framework\\n     *   - deducts the fee from the output, in this case simple as the output is the calculated value\\n     *   - viable function for batch swapping\\n     * @param i token index in\\n     * @param j token index out\\n     */\\n    function onSwapGivenIn(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256 dy) {\\n        // we check whether the balance has increased by the suggested inAmount\\n        require(self.balances[i] + inAmount <= IERC20(self.pooledTokens[i]).balanceOf(address(this)), \\\"input\\\");\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\\n        uint256 y = _getY(self, i, j, x, normalizedBalances);\\n\\n        dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> s\\\");\\n\\n        uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + _adminFee;\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n\\n        // returns final output amount\\n        return dy;\\n    }\\n\\n    /**\\n     * the same function as swap, but it espects that amounts already have been\\n     * sent to the contract and it requires the output to be provided\\n     *  - designed to be used in the requirem swap framework\\n     *  - deducts the fees from the output, that means that the\\n     *    output has to be increased by the fee to then create a highe input\\n     * @param i token index in\\n     * @param j token index out\\n     */\\n    function onSwapGivenOut(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 outAmount,\\n        uint256 maxInAmount,\\n        address to\\n    ) external returns (uint256 dx) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n\\n        // the fee is a percentage from the \\\"actual\\\" amountOut, we have to use the quotient because of that\\n        uint256 _amountOutInclFee = FullMath.mulDiv(outAmount, FEE_DENOMINATOR, FEE_DENOMINATOR - self.fee);\\n\\n        // calculate out balance\\n        uint256 y = normalizedBalances[j] - (_amountOutInclFee * self.tokenMultipliers[j]);\\n\\n        // calculate in balance\\n        uint256 x = _getY(self, j, i, y, normalizedBalances);\\n\\n        // calculate normalized in balance\\n        dx = x - normalizedBalances[i]; // no rounding adjustment\\n\\n        dx = dx / self.tokenMultipliers[i]; // denormalize\\n\\n        require(dx <= maxInAmount, \\\"> s\\\");\\n\\n        // update balances\\n        self.balances[i] -= dx;\\n        self.balances[j] -= _amountOutInclFee;\\n\\n        // do the transfer after all calculations\\n        IERC20 inCoin = self.pooledTokens[i];\\n        dx = _doTransferIn(inCoin, dx); // transfer the calculated amount in\\n\\n        self.pooledTokens[j].safeTransfer(to, outAmount); // transfer the desired amount out\\n        emit TokenExchange(to, i, dx, j, outAmount);\\n\\n        // returns final input amount\\n        return dx;\\n    }\\n\\n    /**\\n     * Flash Loan\\n     */\\n\\n    function flashLoan(\\n        SwapStorage storage self,\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external {\\n        require(tokens.length == amounts.length, \\\"inputs\\\");\\n        uint256[] memory feeAmounts = new uint256[](tokens.length);\\n        uint256[] memory preLoanBalances = new uint256[](tokens.length);\\n\\n        // Used to ensure `tokens` is sorted in ascending order, which ensures token uniqueness.\\n        IERC20 previousToken = IERC20(address(0));\\n\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            IERC20 token = tokens[i];\\n            uint256 amount = amounts[i];\\n\\n            RequiemErrors._require(token > previousToken, token == IERC20(address(0)) ? Errors.ZERO_TOKEN : Errors.UNSORTED_TOKENS);\\n            previousToken = token;\\n\\n            preLoanBalances[i] = token.balanceOf(address(this));\\n            feeAmounts[i] = (amount * self.flashFee) / FEE_DENOMINATOR;\\n\\n            RequiemErrors._require(preLoanBalances[i] >= amount, Errors.INSUFFICIENT_FLASH_LOAN_BALANCE);\\n            token.safeTransfer(address(recipient), amount);\\n        }\\n\\n        recipient.receiveFlashLoan(tokens, amounts, feeAmounts, userData);\\n\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            IERC20 token = tokens[i];\\n            uint256 preLoanBalance = preLoanBalances[i];\\n\\n            // Checking for loan repayment first (without accounting for fees) makes for simpler debugging, and results\\n            // in more accurate revert reasons if the flash loan protocol fee percentage is zero.\\n            uint256 postLoanBalance = token.balanceOf(address(this));\\n            RequiemErrors._require(postLoanBalance >= preLoanBalance, Errors.INVALID_POST_LOAN_BALANCE);\\n\\n            // No need for checked arithmetic since we know the loan was fully repaid.\\n            uint256 receivedFeeAmount = postLoanBalance - preLoanBalance;\\n            RequiemErrors._require(receivedFeeAmount >= feeAmounts[i], Errors.INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT);\\n\\n            // _payFeeAmount(token, receivedFeeAmount);\\n            emit FlashLoan(recipient, token, amounts[i], receivedFeeAmount);\\n        }\\n    }\\n\\n    function removeLiquidity(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256[] memory minAmounts\\n    ) external returns (uint256[] memory amounts) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(lpAmount <= totalSupply);\\n        uint256 nCoins = self.pooledTokens.length;\\n\\n        uint256[] memory fees = new uint256[](nCoins);\\n        amounts = _calculateRemoveLiquidity(self, msg.sender, lpAmount);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] >= minAmounts[i], \\\"> s\\\");\\n            self.balances[i] = self.balances[i] - amounts[i];\\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        emit RemoveLiquidity(msg.sender, amounts, fees, totalSupply - lpAmount);\\n    }\\n\\n    function removeLiquidityOneToken(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256 index,\\n        uint256 minAmount\\n    ) external returns (uint256) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply > 0, \\\"totalSupply = 0\\\");\\n        uint256 numTokens = self.pooledTokens.length;\\n        require(lpAmount <= self.lpToken.balanceOf(msg.sender), \\\"> balance\\\");\\n        require(lpAmount <= totalSupply, \\\"> totalSupply\\\");\\n        require(index < numTokens, \\\"tokenNotFound\\\");\\n\\n        uint256 dyFee;\\n        uint256 dy;\\n\\n        (dy, dyFee) = _calculateRemoveLiquidityOneToken(self, msg.sender, lpAmount, index);\\n\\n        require(dy >= minAmount, \\\"> s\\\");\\n\\n        self.balances[index] -= (dy + (dyFee * self.adminFee) / FEE_DENOMINATOR);\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        self.pooledTokens[index].safeTransfer(msg.sender, dy);\\n\\n        emit RemoveLiquidityOne(msg.sender, index, lpAmount, dy);\\n\\n        return dy;\\n    }\\n\\n    function removeLiquidityImbalance(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 maxBurnAmount\\n    ) external returns (uint256 burnAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"length\\\");\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply != 0, \\\"totalSupply = 0\\\");\\n        uint256 _fee = _feePerToken(self);\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256[] memory newBalances = self.balances;\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            newBalances[i] -= amounts[i];\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256[] memory fees = new uint256[](nCoins);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            uint256 idealBalance = (D1 * self.balances[i]) / D0;\\n            uint256 diff = _distance(newBalances[i], idealBalance);\\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n            newBalances[i] -= fees[i];\\n        }\\n\\n        // recalculate invariant with fee charged balances\\n        D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        burnAmount = ((D0 - D1) * totalSupply) / D0;\\n        assert(burnAmount > 0);\\n        burnAmount = (burnAmount + 1) * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, msg.sender)); //In case of rounding errors - make it unfavorable for the \\\"attacker\\\"\\n        require(burnAmount <= maxBurnAmount, \\\"> s\\\");\\n\\n        self.lpToken.burnFrom(msg.sender, burnAmount);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (amounts[i] != 0) {\\n                self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, totalSupply - burnAmount);\\n    }\\n\\n    /// VIEW FUNCTIONS\\n    function getAPrecise(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self);\\n    }\\n\\n    /**\\n     * Returns portfolio virtual price (for calculating profit)\\n     * scaled up by 1e18\\n     */\\n    function getVirtualPrice(SwapStorage storage self) external view returns (uint256) {\\n        uint256 D = _getD(_xp(self), _getAPrecise(self));\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        return (D * 10**POOL_TOKEN_COMMON_DECIMALS) / tokenSupply;\\n    }\\n\\n    function getAdminBalance(SwapStorage storage self, uint256 index) external view returns (uint256) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        return self.pooledTokens[index].balanceOf(address(this)) - (self.balances[index]);\\n    }\\n\\n    /**\\n     * Estimate amount of LP token minted or burned at deposit or withdrawal\\n     * without taking fees into account\\n     */\\n    function calculateTokenAmount(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"length\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        uint256[] memory newBalances = self.balances;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (deposit) {\\n                newBalances[i] += amounts[i];\\n            } else {\\n                newBalances[i] -= amounts[i];\\n            }\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n\\n        if (totalSupply == 0) {\\n            return D1; // first depositor take it all\\n        }\\n\\n        uint256 diff = deposit ? D1 - D0 : D0 - D1;\\n        return (diff * self.lpToken.totalSupply()) / D0;\\n    }\\n\\n    function getA(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self) / A_PRECISION;\\n    }\\n\\n    // implements calculation of stable swap interface\\n    // represents calculateSwapGivenIn function\\n    function calculateSwap(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 newInBalance = normalizedBalances[inIndex] + (inAmount * self.tokenMultipliers[inIndex]);\\n        uint256 outBalance = _getY(self, inIndex, outIndex, newInBalance, normalizedBalances);\\n        uint256 outAmount = (normalizedBalances[outIndex] - outBalance) / self.tokenMultipliers[outIndex];\\n        uint256 _fee = (self.fee * outAmount) / FEE_DENOMINATOR;\\n        return outAmount - _fee;\\n    }\\n\\n    // implements calculation for Requiem interface\\n    // note that due to the fact that the structure is not symmetric (unlike pairs)\\n    // we require a separate function to calculate the input for a given output\\n    function calculateSwapGivenOut(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 outAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        // fee has to be deducted on the output\\n        uint256 _amountOutInclFee = FullMath.mulDiv(outAmount, FEE_DENOMINATOR, FEE_DENOMINATOR - self.fee);\\n        uint256 newOutBalance = normalizedBalances[outIndex] - (_amountOutInclFee * self.tokenMultipliers[outIndex]);\\n        // switch index on regulat _getY function\\n        uint256 inBalance = _getY(self, outIndex, inIndex, newOutBalance, normalizedBalances);\\n        uint256 inAmount = divUp(inBalance - normalizedBalances[inIndex], self.tokenMultipliers[inIndex]);\\n\\n        return inAmount;\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) external view returns (uint256[] memory) {\\n        return _calculateRemoveLiquidity(self, account, amount);\\n    }\\n\\n    function calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 lpAmount,\\n        uint256 tokenIndex\\n    ) external view returns (uint256 amount) {\\n        (amount, ) = _calculateRemoveLiquidityOneToken(self, account, lpAmount, tokenIndex);\\n    }\\n\\n    /**\\n     * @notice Update the withdraw fee for `user`. If the user is currently\\n     * not providing liquidity in the pool, sets to default value. If not, recalculate\\n     * the starting withdraw fee based on the last deposit's time & amount relative\\n     * to the new deposit.\\n     *\\n     * @param self Swap struct to read from and write to\\n     * @param user address of the user depositing tokens\\n     * @param toMint amount of pool tokens to be minted\\n     */\\n    function updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) external {\\n        _updateUserWithdrawFee(self, user, toMint);\\n    }\\n\\n    /// INTERNAL FUNCTIONS\\n\\n    /**\\n     * Ramping A up or down, return A with precision of A_PRECISION\\n     */\\n    function _getAPrecise(SwapStorage storage self) internal view returns (uint256) {\\n        if (block.timestamp >= self.futureATime) {\\n            return self.futureA;\\n        }\\n\\n        if (self.futureA > self.initialA) {\\n            return self.initialA + ((self.futureA - self.initialA) * (block.timestamp - self.initialATime)) / (self.futureATime - self.initialATime);\\n        }\\n\\n        return self.initialA - ((self.initialA - self.futureA) * (block.timestamp - self.initialATime)) / (self.futureATime - self.initialATime);\\n    }\\n\\n    /**\\n     * normalized balances of each tokens.\\n     */\\n    function _xp(uint256[] memory balances, uint256[] memory rates) internal pure returns (uint256[] memory) {\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            rates[i] = (rates[i] * balances[i]);\\n        }\\n\\n        return rates;\\n    }\\n\\n    function _xp(SwapStorage storage self) internal view returns (uint256[] memory) {\\n        return _xp(self.balances, self.tokenMultipliers);\\n    }\\n\\n    /**\\n     * Calculate D for *NORMALIZED* balances of each tokens\\n     * @param xp normalized balances of token\\n     */\\n    function _getD(uint256[] memory xp, uint256 amp) internal pure returns (uint256) {\\n        uint256 nCoins = xp.length;\\n        uint256 sum = _sumOf(xp);\\n        if (sum == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev = 0;\\n        uint256 D = sum;\\n        uint256 Ann = amp * nCoins;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            uint256 D_P = D;\\n            for (uint256 j = 0; j < xp.length; j++) {\\n                D_P = (D_P * D) / (xp[j] * nCoins);\\n            }\\n            Dprev = D;\\n            D = (((Ann * sum) / A_PRECISION + D_P * nCoins) * D) / (((Ann - A_PRECISION) * D) / A_PRECISION + (nCoins + 1) * D_P);\\n            if (_distance(D, Dprev) <= 1) {\\n                return D;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    /**\\n     * calculate new balance of when swap\\n     * Done by solving quadratic equation iteratively.\\n     *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     *  x_1**2 + b*x_1 = c\\n     *  x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     * @param inIndex index of token to swap in\\n     * @param outIndex index of token to swap out\\n     * @param inBalance new balance (normalized) of input token if the swap is successful\\n     * @return NORMALIZED balance of output token if the swap is successful\\n     */\\n    function _getY(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inBalance,\\n        uint256[] memory normalizedBalances\\n    ) internal view returns (uint256) {\\n        require(inIndex != outIndex, \\\"sameToken\\\");\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(inIndex < nCoins && outIndex < nCoins, \\\"indexOutOfRange\\\");\\n\\n        uint256 amp = _getAPrecise(self);\\n        uint256 Ann = amp * nCoins;\\n        uint256 D = _getD(normalizedBalances, amp); // calculate invariant\\n\\n        uint256 sum = 0; // sum of new balances except output token\\n        uint256 c = D;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == outIndex) {\\n                continue;\\n            }\\n\\n            uint256 x = i == inIndex ? inBalance : normalizedBalances[i];\\n            sum += x;\\n            c = (c * D) / (x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = sum + (D * A_PRECISION) / Ann;\\n\\n        uint256 lastY = 0;\\n        uint256 y = D;\\n\\n        for (uint256 index = 0; index < MAX_ITERATION; index++) {\\n            lastY = y;\\n            y = divUp(y * y + c, 2 * y + b - D);\\n            if (_distance(lastY, y) <= 1) {\\n                return y;\\n            }\\n        }\\n\\n        revert(\\\"yCalculationFailed\\\");\\n    }\\n\\n    function _calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) internal view returns (uint256[] memory) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(amount <= totalSupply, \\\"total supply\\\");\\n\\n        uint256 feeAdjustedAmount = (amount * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n\\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            amounts[i] = (self.balances[i] * (feeAdjustedAmount)) / (totalSupply);\\n        }\\n        return amounts;\\n    }\\n\\n    function _calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 tokenAmount,\\n        uint256 index\\n    ) internal view returns (uint256 dy, uint256 fee) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256[] memory xp = _xp(self);\\n        uint256 D0 = _getD(xp, amp);\\n        uint256 D1 = D0 - (tokenAmount * D0) / self.lpToken.totalSupply();\\n        uint256 newY = _getYD(self, amp, index, xp, D1);\\n        uint256[] memory reducedXP = xp;\\n        uint256 _fee = _feePerToken(self);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            uint256 expectedDx = 0;\\n            if (i == index) {\\n                expectedDx = (xp[i] * D1) / D0 - newY;\\n            } else {\\n                expectedDx = xp[i] - (xp[i] * D1) / D0;\\n            }\\n            reducedXP[i] -= (_fee * expectedDx) / FEE_DENOMINATOR;\\n        }\\n\\n        dy = reducedXP[index] - _getYD(self, amp, index, reducedXP, D1);\\n        dy = (dy - 1) / self.tokenMultipliers[index];\\n        fee = ((xp[index] - newY) / self.tokenMultipliers[index]) - dy;\\n        dy = (dy * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n    }\\n\\n    function _feePerToken(SwapStorage storage self) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        return (self.fee * nCoins) / (4 * (nCoins - 1));\\n    }\\n\\n    function _getYD(\\n        SwapStorage storage self,\\n        uint256 A,\\n        uint256 index,\\n        uint256[] memory xp,\\n        uint256 D\\n    ) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        assert(index < nCoins);\\n        uint256 Ann = A * nCoins;\\n        uint256 c = D;\\n        uint256 s = 0;\\n        uint256 _x = 0;\\n        uint256 yPrev = 0;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == index) {\\n                continue;\\n            }\\n            _x = xp[i];\\n            s += _x;\\n            c = (c * D) / (_x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = s + (D * A_PRECISION) / Ann;\\n        uint256 y = D;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(yPrev, y) <= 1) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    function _updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) internal {\\n        // If token is transferred to address 0 (or burned), don't update the fee.\\n        if (user == address(0)) {\\n            return;\\n        }\\n        if (self.defaultWithdrawFee == 0) {\\n            // If current fee is set to 0%, set multiplier to FEE_DENOMINATOR\\n            self.withdrawFeeMultiplier[user] = FEE_DENOMINATOR;\\n        } else {\\n            // Otherwise, calculate appropriate discount based on last deposit amount\\n            uint256 currentFee = _calculateCurrentWithdrawFee(self, user);\\n            uint256 currentBalance = self.lpToken.balanceOf(user);\\n\\n            // ((currentBalance * currentFee) + (toMint * defaultWithdrawFee)) * FEE_DENOMINATOR /\\n            // ((toMint + currentBalance) * defaultWithdrawFee)\\n            if ((toMint + currentBalance) * self.defaultWithdrawFee != 0) {\\n                self.withdrawFeeMultiplier[user] = (((currentBalance * currentFee) + (toMint * self.defaultWithdrawFee)) * (FEE_DENOMINATOR)) / ((toMint + currentBalance) * self.defaultWithdrawFee);\\n            }\\n        }\\n        self.depositTimestamp[user] = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Calculate the fee that is applied when the given user withdraws.\\n     * Withdraw fee decays linearly over 4 weeks.\\n     * @param user address you want to calculate withdraw fee of\\n     * @return current withdraw fee of the user\\n     */\\n    function _calculateCurrentWithdrawFee(SwapStorage storage self, address user) internal view returns (uint256) {\\n        uint256 endTime = self.depositTimestamp[user] + (4 weeks);\\n        if (endTime > block.timestamp) {\\n            uint256 timeLeftover = endTime - block.timestamp;\\n            return (self.defaultWithdrawFee * self.withdrawFeeMultiplier[user] * timeLeftover) / (4 weeks) / FEE_DENOMINATOR;\\n        }\\n        return 0;\\n    }\\n\\n    function _doTransferIn(IERC20 token, uint256 amount) internal returns (uint256) {\\n        uint256 priorBalance = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        return token.balanceOf(address(this)) - priorBalance;\\n    }\\n\\n    function _sumOf(uint256[] memory x) internal pure returns (uint256 sum) {\\n        sum = 0;\\n        for (uint256 i = 0; i < x.length; i++) {\\n            sum += x[i];\\n        }\\n    }\\n\\n    function _distance(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x - y : y - x;\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"div\\\");\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"div\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return 1 + (a - 1) / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4b435fa3d4a5daec5c3d42160b1c62808675358eb701bf0824542463fead6fad\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x53949e9a0715f73387ca0d7df5e6f858708953f8dd671225ca5a8bbf8198fd60\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x3d72d15f7e28feae0afcbffa0dc27e2a4b44828f414cd08be32ba130fbd8c1dc\",\"license\":\"MIT\"},\"contracts/interfaces/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.11;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x22f039855f27fa60f41ff2a5590b87a610cefdd0cf3f9b061e8c3b5f6c38c45b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event TokenExchange(address indexed buyer, uint256 soldId, uint256 tokensSold, uint256 boughtId, uint256 tokensBought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 flashFee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0xb36852aa7fd09252306bde9af5ad98c5ca6b32c3b04115b410b0767d804ffcab\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x335d40e877d75f1696355fdb0cf7dd0641b6507f98b1b13519630c87329233c8\",\"license\":\"MIT\"},\"contracts/libraries/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ERC20/IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa3e528fa4df0f07132c9d77d3532d6511275b0e63575496faf48957f93f73997\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n// solhint-disable reason-string\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: burn amount exceeds allowance\\\"\\n        );\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xab8012a73a9d6792f7ba40615ea2e679c3f53d0713735f4c7fe0d2c81e40ed0c\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xf56aec80815d8035201f7f36a8a0852dbd987b1bfcdbbae385a23027f1088d6f\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        RequiemErrors._require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\n    }\\n}\\n\",\"keccak256\":\"0x8a2e602e863eb9790e1b47c0c658db60cae5e216de70dc5fd9cf682c7f6868cc\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.11;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x06e0c46c8b401ecc77c5da33f1c35e81f723df817ecbc3529ecb2cceb60f1612\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/math/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.11;\\n\\n// solhint-disable no-inline-assembly, reason-string\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            // EDIT for 0.8 compatibility:\\n            // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint256\\n            uint256 twos = denominator & (~denominator + 1);\\n\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\",\"keccak256\":\"0x8a683d1291a93ba9d54b37803f771827d3a6db63a22b7e99f1a55900e692d325\",\"license\":\"MIT\"},\"contracts/tokens/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\nimport \\\"../libraries/ERC20Burnable.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../interfaces/IRequiemStableSwap.sol\\\";\\n\\ncontract LPToken is Ownable, ERC20Burnable {\\n    IRequiemStableSwap public swap;\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n        swap = IRequiemStableSwap(msg.sender);\\n    }\\n\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"zeroMintAmount\\\");\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n     * minting and burning. This ensures that swap.updateUserWithdrawFees are called everytime.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20) {\\n        super._beforeTokenTransfer(from, to, amount);\\n        swap.updateUserWithdrawFee(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x60ccc35373a4c789928503c0287dfc34c90f683e5bf1c9c16b484b04386db7ec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "FlashLoan(address,address,uint256,uint256)": {
        "details": "Emitted for each individual flash loan performed by `flashLoan`."
      }
    },
    "kind": "dev",
    "methods": {
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "params": {
          "amounts": "List of amounts of coins to deposit",
          "minMintAmount": "Minimum amount of LP tokens to mint from the deposit"
        },
        "returns": {
          "mintAmount": "Amount of LP tokens received by depositing"
        }
      },
      "onSwap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i": "token index in",
          "j": "token index out",
          "outAmount": "the target out amount - only a cap at the decimalplaces of the lower one, the rest is taken as fee                  - that fee is always about the lowes amount possible of the one with the lower decimal number                  this will have a negative"
        }
      },
      "onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i": "token index in",
          "j": "token index out"
        }
      },
      "onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i": "token index in",
          "j": "token index out"
        }
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "params": {
          "self": "Swap struct to read from and write to",
          "toMint": "amount of pool tokens to be minted",
          "user": "address of the user depositing tokens"
        }
      }
    },
    "stateVariables": {
      "A_PRECISION": {
        "details": "protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration"
      },
      "MAX_ITERATION": {
        "details": "max iteration of converge calccuate"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "notice": "Deposit coins into the pool"
      },
      "calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)": {
        "notice": "Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account"
      },
      "flashLoan(RequiemStableSwapLib.SwapStorage storage,IFlashLoanRecipient,IERC20[],uint256[],bytes)": {
        "notice": "Flash Loan"
      },
      "getAPrecise(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "VIEW FUNCTIONS"
      },
      "getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "Returns portfolio virtual price (for calculating profit) scaled up by 1e18"
      },
      "onSwap(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "notice": "the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output and caps it at outAmount to   - this is to avoid issues with the rounding when using the calculateSwapGivenOut function to determine the input          -> that is because e.g. a 6 digit input can never exactly hit a 18 digit output, so the input is selected slightly higher              such that the output also is essentially rounded up at the sixth digit          -> the outAmount can only be lower than the actual calculated dy   - viable function for batch swapping"
      },
      "onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "notice": "the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output, in this case simple as the output is the calculated value   - viable function for batch swapping"
      },
      "onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "notice": "the same function as swap, but it espects that amounts already have been sent to the contract and it requires the output to be provided  - designed to be used in the requirem swap framework  - deducts the fees from the output, that means that the    output has to be increased by the fee to then create a highe input"
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "notice": "Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit."
      }
    },
    "notice": "StableSwap main algorithm",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}