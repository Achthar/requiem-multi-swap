{
  "address": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coin_amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sold_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bought_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        }
      ],
      "name": "TokenExchange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "A_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_TOKEN_COMMON_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xedc1a99eeaf05d617626e265e294ec7cdff55183841c2af137afdd3229528e73",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9",
    "transactionIndex": 0,
    "gasUsed": "3905656",
    "logsBloom": "0x
    "blockHash": "0x6eef64076a29972bb1803df7875e70d83c92ee0595f5ad2aa7256adf05514485",
    "transactionHash": "0xedc1a99eeaf05d617626e265e294ec7cdff55183841c2af137afdd3229528e73",
    "logs": [],
    "blockNumber": 35,
    "cumulativeGasUsed": "3905656",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "85b0b4034f7a54738dba611b2c0bc62e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coin_amount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sold_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_sold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bought_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_bought\",\"type\":\"uint256\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_TOKEN_COMMON_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"params\":{\"amounts\":\"List of amounts of coins to deposit\",\"minMintAmount\":\"Minimum amount of LP tokens to mint from the deposit\"},\"returns\":{\"mintAmount\":\"Amount of LP tokens received by depositing\"}},\"onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i\":\"token index in\",\"j\":\"token index out\"}},\"onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"i\":\"token index in\",\"j\":\"token index out\"}},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"params\":{\"self\":\"Swap struct to read from and write to\",\"toMint\":\"amount of pool tokens to be minted\",\"user\":\"address of the user depositing tokens\"}}},\"stateVariables\":{\"A_PRECISION\":{\"details\":\"protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration\"},\"MAX_ITERATION\":{\"details\":\"max iteration of converge calccuate\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"notice\":\"Deposit coins into the pool\"},\"calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)\":{\"notice\":\"Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account\"},\"getAPrecise(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"VIEW FUNCTIONS\"},\"getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"Returns portfolio virtual price (for calculating profit) scaled up by 1e18\"},\"onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output, in this case simple as the output is the calculated value   - viable function for batch swapping\"},\"onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"the same function as swap, but it espects that amounts already have been sent to the contract and it requires the output to be provided  - designed to be used in the requirem swap framework  - deducts the fees from the output, that means that the    output has to be increased by the fee to then create a highe input\"},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"notice\":\"Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit.\"}},\"notice\":\"StableSwap main algorithm\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemStableSwapLib.sol\":\"RequiemStableSwapLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":12500},\"remappings\":[]},\"sources\":{\"contracts/RequiemStableSwapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./tokens/LPToken.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\n/**\\n * StableSwap main algorithm\\n */\\nlibrary RequiemStableSwapLib {\\n    using SafeERC20 for IERC20;\\n\\n    event AddLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 invariant, uint256 token_supply);\\n\\n    event TokenExchange(address indexed buyer, uint256 sold_id, uint256 tokens_sold, uint256 bought_id, uint256 tokens_bought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 token_supply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 invariant, uint256 token_supply);\\n\\n    uint256 public constant FEE_DENOMINATOR = 1e10;\\n    // uint256 public constant PRECISION = 1e18;\\n\\n    /// @dev protect from division loss when run approximation loop. We cannot divide at the end because of overflow,\\n    /// so we add some (small) PRECISION when divide in each iteration\\n    uint256 public constant A_PRECISION = 100;\\n    /// @dev max iteration of converge calccuate\\n    uint256 internal constant MAX_ITERATION = 256;\\n    uint256 public constant POOL_TOKEN_COMMON_DECIMALS = 18;\\n\\n    struct SwapStorage {\\n        IERC20[] pooledTokens;\\n        LPToken lpToken;\\n        /// @dev token i multiplier to reach POOL_TOKEN_COMMON_DECIMALS\\n        uint256[] tokenMultipliers;\\n        /// @dev effective balance which might different from token balance of the contract 'cause it hold admin fee as well\\n        uint256[] balances;\\n        /// @dev swap fee ratio. Charge on any action which move balance state far from the ideal state\\n        uint256 fee;\\n        /// @dev admin fee in ratio of swap fee.\\n        uint256 adminFee;\\n        /// @dev observation of A, multiplied with A_PRECISION\\n        uint256 initialA;\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n        // withdrawal fee control\\n        uint256 defaultWithdrawFee;\\n        mapping(address => uint256) depositTimestamp;\\n        mapping(address => uint256) withdrawFeeMultiplier;\\n    }\\n\\n    /**\\n     * @notice Deposit coins into the pool\\n     * @param amounts List of amounts of coins to deposit\\n     * @param minMintAmount Minimum amount of LP tokens to mint from the deposit\\n     * @return mintAmount Amount of LP tokens received by depositing\\n     */\\n    function addLiquidity(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 minMintAmount\\n    ) external returns (uint256 mintAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"length\\\");\\n        uint256[] memory fees = new uint256[](nCoins);\\n        uint256 _fee = _feePerToken(self);\\n\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256 D0 = 0;\\n        if (tokenSupply > 0) {\\n            D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\\n        }\\n\\n        uint256[] memory newBalances = self.balances;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (tokenSupply == 0) {\\n                require(amounts[i] > 0, \\\"tokens\\\");\\n            }\\n            // get real transfer in amount\\n            newBalances[i] += _doTransferIn(self.pooledTokens[i], amounts[i]);\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        assert(D1 > D0); // double check\\n\\n        if (tokenSupply == 0) {\\n            self.balances = newBalances;\\n            mintAmount = D1;\\n        } else {\\n            uint256 diff = 0;\\n            for (uint256 i = 0; i < nCoins; i++) {\\n                diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\\n                fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n                self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n                newBalances[i] -= fees[i];\\n            }\\n            D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n            mintAmount = (tokenSupply * (D1 - D0)) / D0;\\n        }\\n\\n        require(mintAmount >= minMintAmount, \\\"> s\\\");\\n\\n        self.lpToken.mint(msg.sender, mintAmount);\\n        emit AddLiquidity(msg.sender, amounts, fees, D1, mintAmount);\\n    }\\n\\n    // implements classic swap function a la compound\\n    // here the regular calculations such as balance values are implemented\\n    // funds are transferred in in that function and are not required to be sent\\n    // to the contract\\n    function swap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256) {\\n        IERC20 inCoin = self.pooledTokens[i];\\n        uint256[] memory normalizedBalances = _xp(self);\\n        inAmount = _doTransferIn(inCoin, inAmount);\\n\\n        uint256 y = _getY(self, i, j, normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]), normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> s\\\");\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n        return dy;\\n    }\\n\\n    /**\\n     *  the same function as swap, but it expects that amounts already have been\\n     *  sent to the contract\\n     *   - designed to be used in the Requiem Swap framework\\n     *   - deducts the fee from the output, in this case simple as the output is the calculated value\\n     *   - viable function for batch swapping\\n     * @param i token index in\\n     * @param j token index out\\n     */\\n    function onSwapGivenIn(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256 dy) {\\n        // we check whether the balance has increased by the suggested inAmount\\n        require(self.balances[i] + inAmount <= IERC20(self.pooledTokens[i]).balanceOf(address(this)), \\\"input\\\");\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\\n        uint256 y = _getY(self, i, j, x, normalizedBalances);\\n\\n        dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> s\\\");\\n\\n        uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + _adminFee;\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n\\n        // returns final output amount\\n        return dy;\\n    }\\n\\n    /**\\n     * the same function as swap, but it espects that amounts already have been\\n     * sent to the contract and it requires the output to be provided\\n     *  - designed to be used in the requirem swap framework\\n     *  - deducts the fees from the output, that means that the\\n     *    output has to be increased by the fee to then create a highe input\\n     * @param i token index in\\n     * @param j token index out\\n     */\\n    function onSwapGivenOut(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 outAmount,\\n        uint256 maxInAmount,\\n        address to\\n    ) external returns (uint256 dx) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n\\n        // thre fee is a percentage from the \\\"actual\\\" amountOut, we have to use the quotient because of that\\n        uint256 _amountOutInclFee = divDown(outAmount * FEE_DENOMINATOR, FEE_DENOMINATOR - self.fee);\\n\\n        // calculate out balance\\n        uint256 y = normalizedBalances[j] - (_amountOutInclFee * self.tokenMultipliers[j]);\\n\\n        // calculate in balance\\n        uint256 x = _getY(self, j, i, y, normalizedBalances);\\n\\n        // calculate normalized in balance\\n        dx = x - normalizedBalances[i]; // no rounding adjustment\\n\\n        dx = dx / self.tokenMultipliers[i]; // denormalize\\n\\n        require(dx <= maxInAmount, \\\"> s\\\");\\n\\n        // update balances\\n        self.balances[i] -= dx;\\n        self.balances[j] -= _amountOutInclFee;\\n\\n        // do the transfer after all calculations\\n        IERC20 inCoin = self.pooledTokens[i];\\n        dx = _doTransferIn(inCoin, dx); // transfer the calculated amount in\\n\\n        self.pooledTokens[j].safeTransfer(to, outAmount); // transfer the desired amount out\\n        emit TokenExchange(to, i, dx, j, outAmount);\\n\\n        // returns final input amount\\n        return dx;\\n    }\\n\\n    function removeLiquidity(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256[] memory minAmounts\\n    ) external returns (uint256[] memory amounts) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(lpAmount <= totalSupply);\\n        uint256 nCoins = self.pooledTokens.length;\\n\\n        uint256[] memory fees = new uint256[](nCoins);\\n        amounts = _calculateRemoveLiquidity(self, msg.sender, lpAmount);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] >= minAmounts[i], \\\"> s\\\");\\n            self.balances[i] = self.balances[i] - amounts[i];\\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        emit RemoveLiquidity(msg.sender, amounts, fees, totalSupply - lpAmount);\\n    }\\n\\n    function removeLiquidityOneToken(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256 index,\\n        uint256 minAmount\\n    ) external returns (uint256) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply > 0, \\\"totalSupply = 0\\\");\\n        uint256 numTokens = self.pooledTokens.length;\\n        require(lpAmount <= self.lpToken.balanceOf(msg.sender), \\\"> balance\\\");\\n        require(lpAmount <= totalSupply, \\\"> totalSupply\\\");\\n        require(index < numTokens, \\\"tokenNotFound\\\");\\n\\n        uint256 dyFee;\\n        uint256 dy;\\n\\n        (dy, dyFee) = _calculateRemoveLiquidityOneToken(self, msg.sender, lpAmount, index);\\n\\n        require(dy >= minAmount, \\\"> s\\\");\\n\\n        self.balances[index] -= (dy + (dyFee * self.adminFee) / FEE_DENOMINATOR);\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        self.pooledTokens[index].safeTransfer(msg.sender, dy);\\n\\n        emit RemoveLiquidityOne(msg.sender, index, lpAmount, dy);\\n\\n        return dy;\\n    }\\n\\n    function removeLiquidityImbalance(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 maxBurnAmount\\n    ) external returns (uint256 burnAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"length\\\");\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply != 0, \\\"totalSupply = 0\\\");\\n        uint256 _fee = _feePerToken(self);\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256[] memory newBalances = self.balances;\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            newBalances[i] -= amounts[i];\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256[] memory fees = new uint256[](nCoins);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            uint256 idealBalance = (D1 * self.balances[i]) / D0;\\n            uint256 diff = _distance(newBalances[i], idealBalance);\\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n            newBalances[i] -= fees[i];\\n        }\\n\\n        // recalculate invariant with fee charged balances\\n        D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        burnAmount = ((D0 - D1) * totalSupply) / D0;\\n        assert(burnAmount > 0);\\n        burnAmount = (burnAmount + 1) * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, msg.sender)); //In case of rounding errors - make it unfavorable for the \\\"attacker\\\"\\n        require(burnAmount <= maxBurnAmount, \\\"> s\\\");\\n\\n        self.lpToken.burnFrom(msg.sender, burnAmount);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (amounts[i] != 0) {\\n                self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, totalSupply - burnAmount);\\n    }\\n\\n    /// VIEW FUNCTIONS\\n    function getAPrecise(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self);\\n    }\\n\\n    /**\\n     * Returns portfolio virtual price (for calculating profit)\\n     * scaled up by 1e18\\n     */\\n    function getVirtualPrice(SwapStorage storage self) external view returns (uint256) {\\n        uint256 D = _getD(_xp(self), _getAPrecise(self));\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        return (D * 10**POOL_TOKEN_COMMON_DECIMALS) / tokenSupply;\\n    }\\n\\n    function getAdminBalance(SwapStorage storage self, uint256 index) external view returns (uint256) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        return self.pooledTokens[index].balanceOf(address(this)) - (self.balances[index]);\\n    }\\n\\n    /**\\n     * Estimate amount of LP token minted or burned at deposit or withdrawal\\n     * without taking fees into account\\n     */\\n    function calculateTokenAmount(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"length\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        uint256[] memory newBalances = self.balances;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (deposit) {\\n                newBalances[i] += amounts[i];\\n            } else {\\n                newBalances[i] -= amounts[i];\\n            }\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n\\n        if (totalSupply == 0) {\\n            return D1; // first depositor take it all\\n        }\\n\\n        uint256 diff = deposit ? D1 - D0 : D0 - D1;\\n        return (diff * self.lpToken.totalSupply()) / D0;\\n    }\\n\\n    function getA(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self) / A_PRECISION;\\n    }\\n\\n    // implements calculation of stable swap interface\\n    // represents calculateSwapGivenIn function\\n    function calculateSwap(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 newInBalance = normalizedBalances[inIndex] + (inAmount * self.tokenMultipliers[inIndex]);\\n        uint256 outBalance = _getY(self, inIndex, outIndex, newInBalance, normalizedBalances);\\n        uint256 outAmount = divDown(normalizedBalances[outIndex] - outBalance, self.tokenMultipliers[outIndex]);\\n        uint256 _fee = (self.fee * outAmount) / FEE_DENOMINATOR;\\n        return outAmount - _fee;\\n    }\\n\\n    // implements calculation for Requiem interface\\n    // note that due to the fact that the structure is not symmetric (unlike pairs)\\n    // we require a separate function to calculate the input for a given output\\n    function calculateSwapGivenOut(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 outAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        // fee has to be deducted on the output\\n        uint256 _amountOutInclFee = divDown(outAmount * FEE_DENOMINATOR, FEE_DENOMINATOR - self.fee);\\n        uint256 newOutBalance = normalizedBalances[outIndex] - (_amountOutInclFee * self.tokenMultipliers[outIndex]);\\n        // switch index on regulat _getY function\\n        uint256 inBalance = _getY(self, outIndex, inIndex, newOutBalance, normalizedBalances);\\n        uint256 inAmount = divUp(inBalance - normalizedBalances[inIndex], self.tokenMultipliers[inIndex]);\\n        return inAmount;\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) external view returns (uint256[] memory) {\\n        return _calculateRemoveLiquidity(self, account, amount);\\n    }\\n\\n    function calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 lpAmount,\\n        uint256 tokenIndex\\n    ) external view returns (uint256 amount) {\\n        (amount, ) = _calculateRemoveLiquidityOneToken(self, account, lpAmount, tokenIndex);\\n    }\\n\\n    /**\\n     * @notice Update the withdraw fee for `user`. If the user is currently\\n     * not providing liquidity in the pool, sets to default value. If not, recalculate\\n     * the starting withdraw fee based on the last deposit's time & amount relative\\n     * to the new deposit.\\n     *\\n     * @param self Swap struct to read from and write to\\n     * @param user address of the user depositing tokens\\n     * @param toMint amount of pool tokens to be minted\\n     */\\n    function updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) external {\\n        _updateUserWithdrawFee(self, user, toMint);\\n    }\\n\\n    /// INTERNAL FUNCTIONS\\n\\n    /**\\n     * Ramping A up or down, return A with precision of A_PRECISION\\n     */\\n    function _getAPrecise(SwapStorage storage self) internal view returns (uint256) {\\n        if (block.timestamp >= self.futureATime) {\\n            return self.futureA;\\n        }\\n\\n        if (self.futureA > self.initialA) {\\n            return self.initialA + ((self.futureA - self.initialA) * (block.timestamp - self.initialATime)) / (self.futureATime - self.initialATime);\\n        }\\n\\n        return self.initialA - ((self.initialA - self.futureA) * (block.timestamp - self.initialATime)) / (self.futureATime - self.initialATime);\\n    }\\n\\n    /**\\n     * normalized balances of each tokens.\\n     */\\n    function _xp(uint256[] memory balances, uint256[] memory rates) internal pure returns (uint256[] memory) {\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            rates[i] = (rates[i] * balances[i]);\\n        }\\n\\n        return rates;\\n    }\\n\\n    function _xp(SwapStorage storage self) internal view returns (uint256[] memory) {\\n        return _xp(self.balances, self.tokenMultipliers);\\n    }\\n\\n    /**\\n     * Calculate D for *NORMALIZED* balances of each tokens\\n     * @param xp normalized balances of token\\n     */\\n    function _getD(uint256[] memory xp, uint256 amp) internal pure returns (uint256) {\\n        uint256 nCoins = xp.length;\\n        uint256 sum = _sumOf(xp);\\n        if (sum == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev = 0;\\n        uint256 D = sum;\\n        uint256 Ann = amp * nCoins;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            uint256 D_P = D;\\n            for (uint256 j = 0; j < xp.length; j++) {\\n                D_P = (D_P * D) / (xp[j] * nCoins);\\n            }\\n            Dprev = D;\\n            D = (((Ann * sum) / A_PRECISION + D_P * nCoins) * D) / (((Ann - A_PRECISION) * D) / A_PRECISION + (nCoins + 1) * D_P);\\n            if (_distance(D, Dprev) <= 1) {\\n                return D;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    /**\\n     * calculate new balance of when swap\\n     * Done by solving quadratic equation iteratively.\\n     *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     *  x_1**2 + b*x_1 = c\\n     *  x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     * @param inIndex index of token to swap in\\n     * @param outIndex index of token to swap out\\n     * @param inBalance new balance (normalized) of input token if the swap is successful\\n     * @return NORMALIZED balance of output token if the swap is successful\\n     */\\n    function _getY(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inBalance,\\n        uint256[] memory normalizedBalances\\n    ) internal view returns (uint256) {\\n        require(inIndex != outIndex, \\\"sameToken\\\");\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(inIndex < nCoins && outIndex < nCoins, \\\"indexOutOfRange\\\");\\n\\n        uint256 amp = _getAPrecise(self);\\n        uint256 Ann = amp * nCoins;\\n        uint256 D = _getD(normalizedBalances, amp); // calculate invariant\\n\\n        uint256 sum = 0; // sum of new balances except output token\\n        uint256 c = D;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == outIndex) {\\n                continue;\\n            }\\n\\n            uint256 x = i == inIndex ? inBalance : normalizedBalances[i];\\n            sum += x;\\n            c = (c * D) / (x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = sum + (D * A_PRECISION) / Ann;\\n\\n        uint256 lastY = 0;\\n        uint256 y = D;\\n\\n        for (uint256 index = 0; index < MAX_ITERATION; index++) {\\n            lastY = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(lastY, y) <= 1) {\\n                return y;\\n            }\\n        }\\n\\n        revert(\\\"yCalculationFailed\\\");\\n    }\\n\\n    function _calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) internal view returns (uint256[] memory) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(amount <= totalSupply, \\\"total supply\\\");\\n\\n        uint256 feeAdjustedAmount = (amount * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n\\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            amounts[i] = (self.balances[i] * (feeAdjustedAmount)) / (totalSupply);\\n        }\\n        return amounts;\\n    }\\n\\n    function _calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 tokenAmount,\\n        uint256 index\\n    ) internal view returns (uint256 dy, uint256 fee) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256[] memory xp = _xp(self);\\n        uint256 D0 = _getD(xp, amp);\\n        uint256 D1 = D0 - (tokenAmount * D0) / self.lpToken.totalSupply();\\n        uint256 newY = _getYD(self, amp, index, xp, D1);\\n        uint256[] memory reducedXP = xp;\\n        uint256 _fee = _feePerToken(self);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            uint256 expectedDx = 0;\\n            if (i == index) {\\n                expectedDx = (xp[i] * D1) / D0 - newY;\\n            } else {\\n                expectedDx = xp[i] - (xp[i] * D1) / D0;\\n            }\\n            reducedXP[i] -= (_fee * expectedDx) / FEE_DENOMINATOR;\\n        }\\n\\n        dy = reducedXP[index] - _getYD(self, amp, index, reducedXP, D1);\\n        dy = (dy - 1) / self.tokenMultipliers[index];\\n        fee = ((xp[index] - newY) / self.tokenMultipliers[index]) - dy;\\n        dy = (dy * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n    }\\n\\n    function _feePerToken(SwapStorage storage self) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        return (self.fee * nCoins) / (4 * (nCoins - 1));\\n    }\\n\\n    function _getYD(\\n        SwapStorage storage self,\\n        uint256 A,\\n        uint256 index,\\n        uint256[] memory xp,\\n        uint256 D\\n    ) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        assert(index < nCoins);\\n        uint256 Ann = A * nCoins;\\n        uint256 c = D;\\n        uint256 s = 0;\\n        uint256 _x = 0;\\n        uint256 yPrev = 0;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == index) {\\n                continue;\\n            }\\n            _x = xp[i];\\n            s += _x;\\n            c = (c * D) / (_x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = s + (D * A_PRECISION) / Ann;\\n        uint256 y = D;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(yPrev, y) <= 1) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    function _updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) internal {\\n        // If token is transferred to address 0 (or burned), don't update the fee.\\n        if (user == address(0)) {\\n            return;\\n        }\\n        if (self.defaultWithdrawFee == 0) {\\n            // If current fee is set to 0%, set multiplier to FEE_DENOMINATOR\\n            self.withdrawFeeMultiplier[user] = FEE_DENOMINATOR;\\n        } else {\\n            // Otherwise, calculate appropriate discount based on last deposit amount\\n            uint256 currentFee = _calculateCurrentWithdrawFee(self, user);\\n            uint256 currentBalance = self.lpToken.balanceOf(user);\\n\\n            // ((currentBalance * currentFee) + (toMint * defaultWithdrawFee)) * FEE_DENOMINATOR /\\n            // ((toMint + currentBalance) * defaultWithdrawFee)\\n            if ((toMint + currentBalance) * self.defaultWithdrawFee != 0) {\\n                self.withdrawFeeMultiplier[user] = (((currentBalance * currentFee) + (toMint * self.defaultWithdrawFee)) * (FEE_DENOMINATOR)) / ((toMint + currentBalance) * self.defaultWithdrawFee);\\n            }\\n        }\\n        self.depositTimestamp[user] = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Calculate the fee that is applied when the given user withdraws.\\n     * Withdraw fee decays linearly over 4 weeks.\\n     * @param user address you want to calculate withdraw fee of\\n     * @return current withdraw fee of the user\\n     */\\n    function _calculateCurrentWithdrawFee(SwapStorage storage self, address user) internal view returns (uint256) {\\n        uint256 endTime = self.depositTimestamp[user] + (4 weeks);\\n        if (endTime > block.timestamp) {\\n            uint256 timeLeftover = endTime - block.timestamp;\\n            return (self.defaultWithdrawFee * self.withdrawFeeMultiplier[user] * timeLeftover) / (4 weeks) / FEE_DENOMINATOR;\\n        }\\n        return 0;\\n    }\\n\\n    function _doTransferIn(IERC20 token, uint256 amount) internal returns (uint256) {\\n        uint256 priorBalance = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        return token.balanceOf(address(this)) - priorBalance;\\n    }\\n\\n    function _sumOf(uint256[] memory x) internal pure returns (uint256 sum) {\\n        sum = 0;\\n        for (uint256 i = 0; i < x.length; i++) {\\n            sum += x[i];\\n        }\\n    }\\n\\n    function _distance(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x - y : y - x;\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"div\\\");\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"div\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return 1 + (a - 1) / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x041c0fe58b9147e98052834e6dcbeb819834834ff045fcf909e5f94b74a78574\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb7230835a4efbbbebcb5371d121977e859388b33f3ee5d9a7a44fc4de8d6b970\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0xc92c369d1363b5cbec9337ea8921578bd4acd272af2ac9eaf7227a17689f29e9\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event TokenExchange(address indexed buyer, uint256 soldId, uint256 tokensSold, uint256 boughtId, uint256 tokensBought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0xb685b7aaf446335d700bbef1f6411e49c897d8f1d509cfdac256f2cf37b5f29b\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xd5f49ed9e5ab4471a4c25f3730f50ed4c29a9bfa9637306f227c2a59a18bbe81\",\"license\":\"MIT\"},\"contracts/libraries/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ERC20/IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7bf66daeb140a455a28ab3c1e03f4eebb5948ccf6000dbb700f6c57bba03a9d4\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, msg.sender).sub(amount, Errors.ERC20_BURN_EXCEEDS_ALLOWANCE);\\n\\n        _approve(account, msg.sender, decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x82fe5fb385cfe74b417e3aaace26a64aa5190b36ea0716ad441484fb444087f8\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xd978150fb13e68cd0b2b4b237d65306f55397437127bea72622d5cd4244ba92b\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        RequiemErrors._require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\n    }\\n}\\n\",\"keccak256\":\"0xa39a2c090cd9727eeca0658c5a3c382f9dcfe581f4d323bb388776c3237c72fd\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        RequiemErrors._require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        uint256 errorCode\\n    ) internal pure returns (uint256) {\\n        RequiemErrors._require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc82c3356797b0e56c4ac77d5554343f66b3b436a18537bdb146e10921605d729\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x37ebaca1c58a9daf307229c45122f12d603a95d1d92c1a8e7648b1910755bfa0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/tokens/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\nimport \\\"../libraries/ERC20Burnable.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../interfaces/IRequiemStableSwap.sol\\\";\\n\\ncontract LPToken is Ownable, ERC20Burnable {\\n    IRequiemStableSwap public swap;\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n        swap = IRequiemStableSwap(msg.sender);\\n    }\\n\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"zeroMintAmount\\\");\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n     * minting and burning. This ensures that swap.updateUserWithdrawFees are called everytime.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20) {\\n        super._beforeTokenTransfer(from, to, amount);\\n        swap.updateUserWithdrawFee(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2f4e27227aca77ab9543f1f7ea0a45e5b14b62177b414e47f18248c49613aac3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6145ee61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101765760003560e01c8063ba2998d9116100d7578063d011f9181161008b578063d73792a911610070578063d73792a914610332578063e2eba89b1461033e578063fa5635971461035157600080fd5b8063d011f91814610317578063d36604ac1461031f57600080fd5b8063c20aace8116100bc578063c20aace8146102c2578063c685696c146102ca578063c8344c06146102f757600080fd5b8063ba2998d91461028d578063c188e4be146102a057600080fd5b80638e6da7b61161012e578063aa054aee11610113578063aa054aee14610247578063ad30093f1461025a578063b52e146f1461027a57600080fd5b80638e6da7b614610214578063a30355851461023457600080fd5b80631e7e95d31161015f5780631e7e95d3146101c15780632bfe30d0146101d45780637a6cba3c146101f457600080fd5b80630da350f61461017b578063159763bb146101ae575b600080fd5b81801561018757600080fd5b5061019b610196366004613e9e565b610364565b6040519081526020015b60405180910390f35b61019b6101bc366004613eef565b610759565b61019b6101cf366004614023565b610771565b8180156101e057600080fd5b5061019b6101ef36600461407e565b610ade565b81801561020057600080fd5b5061019b61020f3660046140b0565b610eff565b81801561022057600080fd5b5061019b61022f366004613e9e565b611643565b61019b610242366004614100565b6118b0565b61019b61025536600461407e565b6118c1565b81801561026657600080fd5b5061019b610275366004613e9e565b6119ba565b61019b610288366004614100565b611c93565b61019b61029b36600461407e565b611caa565b8180156102ac57600080fd5b506102c06102bb366004614119565b611d9b565b005b61019b601281565b8180156102d657600080fd5b506102ea6102e536600461414e565b611dab565b6040516101a5919061419e565b81801561030357600080fd5b5061019b6103123660046140b0565b6120c0565b61019b606481565b61019b61032d366004614100565b612757565b61019b6402540be40081565b61019b61034c3660046141e2565b612836565b6102ea61035f366004614119565b612963565b600086600001868154811061037b5761037b614204565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156103f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104169190614233565b8488600301888154811061042c5761042c614204565b9060005260206000200154610441919061427b565b11156104945760405162461bcd60e51b815260206004820152600560248201527f696e70757400000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600061049f88612970565b905060008860020188815481106104b8576104b8614204565b9060005260206000200154866104ce9190614293565b8289815181106104e0576104e0614204565b60200260200101516104f2919061427b565b905060006105038a8a8a8587612a1e565b9050600181848a8151811061051a5761051a614204565b602002602001015161052c91906142d0565b61053691906142d0565b935060006402540be4008b60040154866105509190614293565b61055a91906142e7565b90508a600201898154811061057157610571614204565b9060005260206000200154818661058891906142d0565b61059291906142e7565b9450868510156105e45760405162461bcd60e51b815260206004820152600360248201527f3e20730000000000000000000000000000000000000000000000000000000000604482015260640161048b565b60008b6002018a815481106105fb576105fb614204565b90600052602060002001546402540be4008d600501548461061c9190614293565b61062691906142e7565b61063091906142e7565b9050888c6003018c8154811061064857610648614204565b906000526020600020016000828254610661919061427b565b909155506106719050818761427b565b8c6003018b8154811061068657610686614204565b90600052602060002001600082825461069f91906142d0565b925050819055506106e987878e6000018d815481106106c0576106c0614204565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169190612ca8565b604080518c8152602081018b90529081018b90526060810187905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc98906080015b60405180910390a250505050509695505050505050565b600061076785858585612d7c565b5095945050505050565b825482516000919081146107c75760405162461bcd60e51b815260206004820152600660248201527f6c656e6774680000000000000000000000000000000000000000000000000000604482015260640161048b565b60006107d2866130e1565b905060006107e86107e288612970565b836131ba565b905060008760030180548060200260200160405190810160405280929190818152602001828054801561083a57602002820191906000526020600020905b815481526020019060010190808311610826575b5050505050905060005b848110156108f057861561089a5787818151811061086457610864614204565b602002602001015182828151811061087e5761087e614204565b60200260200101818151610892919061427b565b9052506108de565b8781815181106108ac576108ac614204565b60200260200101518282815181106108c6576108c6614204565b602002602001018181516108da91906142d0565b9052505b806108e881614322565b915050610844565b506000610958610952838b60020180548060200260200160405190810160405280929190818152602001828054801561094857602002820191906000526020600020905b815481526020019060010190808311610934575b5050505050613356565b856131ba565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ef9190614233565b905080610a0357509450610ad79350505050565b600088610a1957610a1483866142d0565b610a23565b610a2385846142d0565b9050848b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab99190614233565b610ac39083614293565b610acd91906142e7565b9750505050505050505b9392505050565b6000808560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b749190614233565b905060008111610bc65760405162461bcd60e51b815260206004820152600f60248201527f746f74616c537570706c79203d20300000000000000000000000000000000000604482015260640161048b565b855460018701546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5c9190614233565b861115610cab5760405162461bcd60e51b815260206004820152600960248201527f3e2062616c616e63650000000000000000000000000000000000000000000000604482015260640161048b565b81861115610cfb5760405162461bcd60e51b815260206004820152600d60248201527f3e20746f74616c537570706c7900000000000000000000000000000000000000604482015260640161048b565b808510610d4a5760405162461bcd60e51b815260206004820152600d60248201527f746f6b656e4e6f74466f756e6400000000000000000000000000000000000000604482015260640161048b565b600080610d5989338a8a612d7c565b9250905085811015610dad5760405162461bcd60e51b815260206004820152600360248201527f3e20730000000000000000000000000000000000000000000000000000000000604482015260640161048b565b6402540be400896005015483610dc39190614293565b610dcd91906142e7565b610dd7908261427b565b896003018881548110610dec57610dec614204565b906000526020600020016000828254610e0591906142d0565b909155505060018901546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018a905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015610e7e57600080fd5b505af1158015610e92573d6000803e3d6000fd5b50505050610eb033828b6000018a815481106106c0576106c0614204565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b82548251600091908114610f555760405162461bcd60e51b815260206004820152600660248201527f6c656e6774680000000000000000000000000000000000000000000000000000604482015260640161048b565b60008167ffffffffffffffff811115610f7057610f70613f2a565b604051908082528060200260200182016040528015610f99578160200160208202803683370190505b5090506000610fa7876133d9565b905060008760010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e9190614233565b9050600061104b896130e1565b905060008215611107576111046107e28b6003018054806020026020016040519081016040528092919081815260200182805480156110a957602002820191906000526020600020905b815481526020019060010190808311611095575b50505050508c6002018054806020026020016040519081016040528092919081815260200182805480156109485760200282019190600052602060002090815481526020019060010190808311610934575050505050613356565b90505b60008a60030180548060200260200160405190810160405280929190818152602001828054801561115757602002820191906000526020600020905b815481526020019060010190808311611143575b5050505050905060005b8781101561127457846111d75760008b828151811061118257611182614204565b6020026020010151116111d75760405162461bcd60e51b815260206004820152600660248201527f746f6b656e730000000000000000000000000000000000000000000000000000604482015260640161048b565b6112398c60000182815481106111ef576111ef614204565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c838151811061122c5761122c614204565b602002602001015161340e565b82828151811061124b5761124b614204565b6020026020010181815161125f919061427b565b9052508061126c81614322565b915050611161565b5060006112d4610952838e6002018054806020026020016040519081016040528092919081815260200182805480156109485760200282019190600052602060002090815481526020019060010190808311610934575050505050613356565b90508281116112e5576112e561435b565b846113085781516112ff9060038e01906020850190613e15565b50809850611504565b6000805b8981101561147b5761136c858f600301838154811061132d5761132d614204565b9060005260206000200154856113439190614293565b61134d91906142e7565b85838151811061135f5761135f614204565b602002602001015161355f565b91506402540be40061137e838a614293565b61138891906142e7565b89828151811061139a5761139a614204565b6020026020010181815250506402540be4008e600501548a83815181106113c3576113c3614204565b60200260200101516113d59190614293565b6113df91906142e7565b8482815181106113f1576113f1614204565b602002602001015161140391906142d0565b8e600301828154811061141857611418614204565b906000526020600020018190555088818151811061143857611438614204565b602002602001015184828151811061145257611452614204565b6020026020010181815161146691906142d0565b9052508061147381614322565b91505061130c565b506114df6114d9848f6002018054806020026020016040519081016040528092919081815260200182805480156109485760200282019190600052602060002090815481526020019060010190808311610934575050505050613356565b866131ba565b9150836114ec81846142d0565b6114f69088614293565b61150091906142e7565b9950505b898910156115545760405162461bcd60e51b815260206004820152600360248201527f3e20730000000000000000000000000000000000000000000000000000000000604482015260640161048b565b60018c01546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906340c10f1990604401600060405180830381600087803b1580156115c857600080fd5b505af11580156115dc573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d60405161162c94939291906143c5565b60405180910390a250505050505050509392505050565b60008061164f88612970565b9050600061167e6116656402540be40088614293565b60048b0154611679906402540be4006142d0565b613581565b9050600089600201888154811061169757611697614204565b9060005260206000200154826116ad9190614293565b8389815181106116bf576116bf614204565b60200260200101516116d191906142d0565b905060006116e28b8a8c8588612a1e565b9050838a815181106116f6576116f6614204565b60200260200101518161170991906142d0565b94508a6002018a8154811061172057611720614204565b90600052602060002001548561173691906142e7565b9450868511156117885760405162461bcd60e51b815260206004820152600360248201527f3e20730000000000000000000000000000000000000000000000000000000000604482015260640161048b565b848b6003018b8154811061179e5761179e614204565b9060005260206000200160008282546117b791906142d0565b92505081905550828b6003018a815481106117d4576117d4614204565b9060005260206000200160008282546117ed91906142d0565b90915550508a546000908c908c90811061180957611809614204565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169050611837818761340e565b9550611853878a8e6000018d815481106106c0576106c0614204565b604080518c8152602081018890529081018b9052606081018a905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc9890608001610742565b60006118bb826130e1565b92915050565b6000806118cd86612970565b905060006118f76118e36402540be40086614293565b6004890154611679906402540be4006142d0565b9050600087600201868154811061191057611910614204565b9060005260206000200154826119269190614293565b83878151811061193857611938614204565b602002602001015161194a91906142d0565b9050600061195b89888a8588612a1e565b905060006119ac858a8151811061197457611974614204565b60200260200101518361198791906142d0565b8b6002018b8154811061199c5761199c614204565b90600052602060002001546135da565b9a9950505050505050505050565b6000808760000187815481106119d2576119d2614204565b600091825260208220015473ffffffffffffffffffffffffffffffffffffffff1691506119fe89612970565b9050611a0a828761340e565b95506000611a698a8a8a8d6002018d81548110611a2957611a29614204565b90600052602060002001548b611a3f9190614293565b868e81518110611a5157611a51614204565b6020026020010151611a63919061427b565b86612a1e565b90506000600182848b81518110611a8257611a82614204565b6020026020010151611a9491906142d0565b611a9e91906142d0565b905060006402540be4008c6004015483611ab89190614293565b611ac291906142e7565b90508b6002018a81548110611ad957611ad9614204565b90600052602060002001548183611af091906142d0565b611afa91906142e7565b915087821015611b4c5760405162461bcd60e51b815260206004820152600360248201527f3e20730000000000000000000000000000000000000000000000000000000000604482015260640161048b565b888c6003018c81548110611b6257611b62614204565b906000526020600020016000828254611b7b919061427b565b909155505060028c0180548b908110611b9657611b96614204565b90600052602060002001546402540be4008d6005015483611bb79190614293565b611bc191906142e7565b611bcb91906142e7565b611bd5908361427b565b8c6003018b81548110611bea57611bea614204565b906000526020600020016000828254611c0391906142d0565b92505081905550611c2487838e6000018d815481106106c0576106c0614204565b604080518c8152602081018b90529081018b90526060810183905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a2509a9950505050505050505050565b60006064611ca0836130e1565b6118bb91906142e7565b600080611cb686612970565b90506000866002018681548110611ccf57611ccf614204565b906000526020600020015484611ce59190614293565b828781518110611cf757611cf7614204565b6020026020010151611d09919061427b565b90506000611d1a8888888587612a1e565b90506000611d6b82858981518110611d3457611d34614204565b6020026020010151611d4691906142d0565b8a6002018981548110611d5b57611d5b614204565b9060005260206000200154613581565b905060006402540be400828b60040154611d859190614293565b611d8f91906142e7565b90506119ac81836142d0565b611da683838361365e565b505050565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e429190614233565b905080841115611e5157600080fd5b845460008167ffffffffffffffff811115611e6e57611e6e613f2a565b604051908082528060200260200182016040528015611e97578160200160208202803683370190505b509050611ea5873388613834565b935060005b8451811015611fe157858181518110611ec557611ec5614204565b6020026020010151858281518110611edf57611edf614204565b60200260200101511015611f355760405162461bcd60e51b815260206004820152600360248201527f3e20730000000000000000000000000000000000000000000000000000000000604482015260640161048b565b848181518110611f4757611f47614204565b6020026020010151886003018281548110611f6457611f64614204565b9060005260206000200154611f7991906142d0565b886003018281548110611f8e57611f8e614204565b9060005260206000200181905550611fcf33868381518110611fb257611fb2614204565b60200260200101518a60000184815481106106c0576106c0614204565b80611fd981614322565b915050611eaa565b5060018701546040517f79cc67900000000000000000000000000000000000000000000000000000000081523360048201526024810188905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b15801561205657600080fd5b505af115801561206a573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea91508690508361209f8a886142d0565b6040516120ae939291906143fe565b60405180910390a25050509392505050565b825482516000919081146121165760405162461bcd60e51b815260206004820152600660248201527f6c656e6774680000000000000000000000000000000000000000000000000000604482015260640161048b565b6001850154604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916318160ddd9160048083019260209291908290030181865afa158015612188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ac9190614233565b9050806121fb5760405162461bcd60e51b815260206004820152600f60248201527f746f74616c537570706c79203d20300000000000000000000000000000000000604482015260640161048b565b6000612206876133d9565b90506000612213886130e1565b905060008860030180548060200260200160405190810160405280929190818152602001828054801561226557602002820191906000526020600020905b815481526020019060010190808311612251575b50505050509050600061228061227a8b612970565b846131ba565b905060005b868110156122e25789818151811061229f5761229f614204565b60200260200101518382815181106122b9576122b9614204565b602002602001018181516122cd91906142d0565b905250806122da81614322565b915050612285565b506000612342610952848d6002018054806020026020016040519081016040528092919081815260200182805480156109485760200282019190600052602060002090815481526020019060010190808311610934575050505050613356565b905060008767ffffffffffffffff81111561235f5761235f613f2a565b604051908082528060200260200182016040528015612388578160200160208202803683370190505b50905060005b88811015612508576000848e60030183815481106123ae576123ae614204565b9060005260206000200154856123c49190614293565b6123ce91906142e7565b905060006123f58784815181106123e7576123e7614204565b60200260200101518361355f565b90506402540be400612407828b614293565b61241191906142e7565b84848151811061242357612423614204565b6020026020010181815250506402540be4008f6005015485858151811061244c5761244c614204565b602002602001015161245e9190614293565b61246891906142e7565b87848151811061247a5761247a614204565b602002602001015161248c91906142d0565b8f60030184815481106124a1576124a1614204565b90600052602060002001819055508383815181106124c1576124c1614204565b60200260200101518784815181106124db576124db614204565b602002602001018181516124ef91906142d0565b905250829150612500905081614322565b91505061238e565b506125666114d9858e6002018054806020026020016040519081016040528092919081815260200182805480156109485760200282019190600052602060002090815481526020019060010190808311610934575050505050613356565b9150828761257484836142d0565b61257e9190614293565b61258891906142e7565b98506000891161259a5761259a61435b565b6125a48c33613a1a565b6125b3906402540be4006142d0565b6125be8a600161427b565b6125c89190614293565b98508989111561261a5760405162461bcd60e51b815260206004820152600360248201527f3e20730000000000000000000000000000000000000000000000000000000000604482015260640161048b565b60018c01546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b15801561268e57600080fd5b505af11580156126a2573d6000803e3d6000fd5b5050505060005b88811015612717578b81815181106126c3576126c3614204565b602002602001015160001461270557612705338d83815181106126e8576126e8614204565b60200260200101518f60000184815481106106c0576106c0614204565b8061270f81614322565b9150506126a9565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c83856127478e8d6142d0565b60405161162c94939291906143c5565b60008061277461276684612970565b61276f856130e1565b6131ba565b905060008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280b9190614233565b90508061281a6012600a614554565b6128249084614293565b61282e91906142e7565b949350505050565b815460009082106128895760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e67650000000000000000000000000000000000604482015260640161048b565b82600301828154811061289e5761289e614204565b90600052602060002001548360000183815481106128be576128be614204565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129599190614233565b610ad791906142d0565b606061282e848484613834565b60606118bb826003018054806020026020016040519081016040528092919081815260200182805480156129c357602002820191906000526020600020905b8154815260200190600101908083116129af575b5050505050836002018054806020026020016040519081016040528092919081815260200182805480156109485760200282019190600052602060002090815481526020019060010190808311610934575050505050613356565b600083851415612a705760405162461bcd60e51b815260206004820152600960248201527f73616d65546f6b656e0000000000000000000000000000000000000000000000604482015260640161048b565b85548086108015612a8057508085105b612acc5760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e67650000000000000000000000000000000000604482015260640161048b565b6000612ad7886130e1565b90506000612ae58383614293565b90506000612af386846131ba565b9050600081815b86811015612b7b578a811415612b0f57612b69565b60008c8214612b3757898281518110612b2a57612b2a614204565b6020026020010151612b39565b8a5b9050612b45818561427b565b9350612b518882614293565b612b5b8685614293565b612b6591906142e7565b9250505b80612b7381614322565b915050612afa565b50612b868685614293565b6064612b928584614293565b612b9c9190614293565b612ba691906142e7565b9050600084612bb6606486614293565b612bc091906142e7565b612bca908461427b565b9050600084815b610100811015612c56578192508684836002612bed9190614293565b612bf7919061427b565b612c0191906142d0565b85612c0c8480614293565b612c16919061427b565b612c2091906142e7565b91506001612c2e848461355f565b11612c4457509850612c9f975050505050505050565b80612c4e81614322565b915050612bd1565b5060405162461bcd60e51b815260206004820152601260248201527f7943616c63756c6174696f6e4661696c65640000000000000000000000000000604482015260640161048b565b95945050505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611da69084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613ae0565b835460009081908310612dd15760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e67650000000000000000000000000000000000604482015260640161048b565b6000612ddc876130e1565b90506000612de988612970565b90506000612df782846131ba565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8e9190614233565b612e98838a614293565b612ea291906142e7565b612eac90836142d0565b90506000612ebd8b868a8786613b92565b9050836000612ecb8d6133d9565b905060005b8d54811015612fd35760008b821415612f25578487878a8581518110612ef857612ef8614204565b6020026020010151612f0a9190614293565b612f1491906142e7565b612f1e91906142d0565b9050612f7c565b8686898481518110612f3957612f39614204565b6020026020010151612f4b9190614293565b612f5591906142e7565b888381518110612f6757612f67614204565b6020026020010151612f7991906142d0565b90505b6402540be400612f8c8285614293565b612f9691906142e7565b848381518110612fa857612fa8614204565b60200260200101818151612fbc91906142d0565b905250819050612fcb81614322565b915050612ed0565b50612fe18d888c8588613b92565b828b81518110612ff357612ff3614204565b602002602001015161300591906142d0565b98508c6002018a8154811061301c5761301c614204565b906000526020600020015460018a61303491906142d0565b61303e91906142e7565b9850888d6002018b8154811061305657613056614204565b906000526020600020015484888d8151811061307457613074614204565b602002602001015161308691906142d0565b61309091906142e7565b61309a91906142d0565b97506402540be4006130ac8e8e613a1a565b6130bb906402540be4006142d0565b6130c5908b614293565b6130cf91906142e7565b98505050505050505094509492505050565b6000816009015442106130f657506007015490565b816006015482600701541115613160578160080154826009015461311a91906142d0565b600883015461312990426142d0565b8360060154846007015461313d91906142d0565b6131479190614293565b61315191906142e7565b82600601546118bb919061427b565b8160080154826009015461317491906142d0565b600883015461318390426142d0565b8360070154846006015461319791906142d0565b6131a19190614293565b6131ab91906142e7565b82600601546118bb91906142d0565b8151600090816131c985613d06565b9050806131db576000925050506118bb565b600081816131e98588614293565b905060005b61010081101561330d578260005b8a5181101561325257878b828151811061321857613218614204565b602002602001015161322a9190614293565b6132348684614293565b61323e91906142e7565b91508061324a81614322565b9150506131fc565b5083945080876001613264919061427b565b61326e9190614293565b60648561327b82876142d0565b6132859190614293565b61328f91906142e7565b613299919061427b565b846132a48984614293565b60646132b08a88614293565b6132ba91906142e7565b6132c4919061427b565b6132ce9190614293565b6132d891906142e7565b935060016132e6858761355f565b116132fa57839750505050505050506118bb565b508061330581614322565b9150506131ee565b5060405162461bcd60e51b815260206004820152601a60248201527f696e76617269616e7443616c63756c6174696f6e4661696c6564000000000000604482015260640161048b565b606060005b83518110156133d15783818151811061337657613376614204565b602002602001015183828151811061339057613390614204565b60200260200101516133a29190614293565b8382815181106133b4576133b4614204565b6020908102919091010152806133c981614322565b91505061335b565b509092915050565b80546000906133e96001826142d0565b6133f4906004614293565b8184600401546134049190614293565b610ad791906142e7565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa15801561347d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134a19190614233565b90506134c573ffffffffffffffffffffffffffffffffffffffff8516333086613d52565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015613531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135559190614233565b61282e91906142d0565b60008183116135775761357283836142d0565b610ad7565b610ad782846142d0565b6000816135d05760405162461bcd60e51b815260206004820152600360248201527f6469760000000000000000000000000000000000000000000000000000000000604482015260640161048b565b610ad782846142e7565b6000816136295760405162461bcd60e51b815260206004820152600360248201527f6469760000000000000000000000000000000000000000000000000000000000604482015260640161048b565b82613636575060006118bb565b816136426001856142d0565b61364c91906142e7565b61365790600161427b565b90506118bb565b73ffffffffffffffffffffffffffffffffffffffff821661367e57505050565b600a8301546136bb5773ffffffffffffffffffffffffffffffffffffffff82166000908152600c8401602052604090206402540be4009055613807565b60006136c78484613a1a565b60018501546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152929350600092909116906370a0823190602401602060405180830381865afa15801561373f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137639190614233565b600a860154909150613775828561427b565b61377f9190614293565b1561380457600a850154613793828561427b565b61379d9190614293565b6402540be40086600a0154856137b39190614293565b6137bd8585614293565b6137c7919061427b565b6137d19190614293565b6137db91906142e7565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600c870160205260409020555b50505b5073ffffffffffffffffffffffffffffffffffffffff166000908152600b90910160205260409020429055565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156138a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138cb9190614233565b90508083111561391d5760405162461bcd60e51b815260206004820152600c60248201527f746f74616c20737570706c790000000000000000000000000000000000000000604482015260640161048b565b60006402540be40061392f8787613a1a565b61393e906402540be4006142d0565b6139489086614293565b61395291906142e7565b865490915060009067ffffffffffffffff81111561397257613972613f2a565b60405190808252806020026020018201604052801561399b578160200160208202803683370190505b50905060005b8754811015613a0f5783838960030183815481106139c1576139c1614204565b90600052602060002001546139d69190614293565b6139e091906142e7565b8282815181106139f2576139f2614204565b602090810291909101015280613a0781614322565b9150506139a1565b509695505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600b830160205260408120548190613a51906224ea0061427b565b905042811115613ad6576000613a6742836142d0565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600c87016020526040902054600a8701549192506402540be400916224ea00918491613aaf9190614293565b613ab99190614293565b613ac391906142e7565b613acd91906142e7565b925050506118bb565b5060009392505050565b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051613b089190614560565b6000604051808303816000865af19150503d8060008114613b45576040519150601f19603f3d011682016040523d82523d6000602084013e613b4a565b606091505b50915091506000821415613b62573d6000803e3d6000fd5b613b8c815160001480613b84575081806020019051810190613b84919061459b565b6101a2613db0565b50505050565b8454600090808510613ba657613ba661435b565b6000613bb28288614293565b90508360008080805b86811015613c2d578a811415613bd057613c1b565b898181518110613be257613be2614204565b602002602001015192508284613bf8919061427b565b9350613c048784614293565b613c0e8a87614293565b613c1891906142e7565b94505b80613c2581614322565b915050613bbb565b50613c388686614293565b6064613c448a87614293565b613c4e9190614293565b613c5891906142e7565b9350600085613c6860648b614293565b613c7291906142e7565b613c7c908561427b565b90508860005b61010081101561330d578193508a83836002613c9e9190614293565b613ca8919061427b565b613cb291906142d0565b87613cbd8480614293565b613cc7919061427b565b613cd191906142e7565b91506001613cdf858461355f565b11613cf457509750612c9f9650505050505050565b80613cfe81614322565b915050613c82565b6000805b8251811015613d4c57828181518110613d2557613d25614204565b602002602001015182613d38919061427b565b915080613d4481614322565b915050613d0a565b50919050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052613b8c9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612cfa565b81613dbe57613dbe81613dc2565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b828054828255906000526020600020908101928215613e50579160200282015b82811115613e50578251825591602001919060010190613e35565b50613e5c929150613e60565b5090565b5b80821115613e5c5760008155600101613e61565b803573ffffffffffffffffffffffffffffffffffffffff81168114613e9957600080fd5b919050565b60008060008060008060c08789031215613eb757600080fd5b8635955060208701359450604087013593506060870135925060808701359150613ee360a08801613e75565b90509295509295509295565b60008060008060808587031215613f0557600080fd5b84359350613f1560208601613e75565b93969395505050506040820135916060013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112613f6a57600080fd5b8135602067ffffffffffffffff80831115613f8757613f87613f2a565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108482111715613fca57613fca613f2a565b604052938452858101830193838101925087851115613fe857600080fd5b83870191505b8482101561400757813583529183019190830190613fee565b979650505050505050565b801515811461402057600080fd5b50565b60008060006060848603121561403857600080fd5b83359250602084013567ffffffffffffffff81111561405657600080fd5b61406286828701613f59565b925050604084013561407381614012565b809150509250925092565b6000806000806080858703121561409457600080fd5b5050823594602084013594506040840135936060013592509050565b6000806000606084860312156140c557600080fd5b83359250602084013567ffffffffffffffff8111156140e357600080fd5b6140ef86828701613f59565b925050604084013590509250925092565b60006020828403121561411257600080fd5b5035919050565b60008060006060848603121561412e57600080fd5b8335925061413e60208501613e75565b9150604084013590509250925092565b60008060006060848603121561416357600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561418857600080fd5b61419486828701613f59565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156141d6578351835292840192918401916001016141ba565b50909695505050505050565b600080604083850312156141f557600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561424557600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561428e5761428e61424c565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156142cb576142cb61424c565b500290565b6000828210156142e2576142e261424c565b500390565b60008261431d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156143545761435461424c565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600081518084526020808501945080840160005b838110156143ba5781518752958201959082019060010161439e565b509495945050505050565b6080815260006143d8608083018761438a565b82810360208401526143ea818761438a565b604084019590955250506060015292915050565b606081526000614411606083018661438a565b8281036020840152614423818661438a565b915050826040830152949350505050565b600181815b8085111561448d57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156144735761447361424c565b8085161561448057918102915b93841c9390800290614439565b509250929050565b6000826144a4575060016118bb565b816144b1575060006118bb565b81600181146144c757600281146144d1576144ed565b60019150506118bb565b60ff8411156144e2576144e261424c565b50506001821b6118bb565b5060208310610133831016604e8410600b8410161715614510575081810a6118bb565b61451a8383614434565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561454c5761454c61424c565b029392505050565b6000610ad78383614495565b6000825160005b818110156145815760208186018101518583015201614567565b81811115614590576000828501525b509190910192915050565b6000602082840312156145ad57600080fd5b8151610ad78161401256fea2646970667358221220639c6e697f76de33450178b57c49b5529c705da5db39e7bc1efda7c75053de0e64736f6c634300080a0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101765760003560e01c8063ba2998d9116100d7578063d011f9181161008b578063d73792a911610070578063d73792a914610332578063e2eba89b1461033e578063fa5635971461035157600080fd5b8063d011f91814610317578063d36604ac1461031f57600080fd5b8063c20aace8116100bc578063c20aace8146102c2578063c685696c146102ca578063c8344c06146102f757600080fd5b8063ba2998d91461028d578063c188e4be146102a057600080fd5b80638e6da7b61161012e578063aa054aee11610113578063aa054aee14610247578063ad30093f1461025a578063b52e146f1461027a57600080fd5b80638e6da7b614610214578063a30355851461023457600080fd5b80631e7e95d31161015f5780631e7e95d3146101c15780632bfe30d0146101d45780637a6cba3c146101f457600080fd5b80630da350f61461017b578063159763bb146101ae575b600080fd5b81801561018757600080fd5b5061019b610196366004613e9e565b610364565b6040519081526020015b60405180910390f35b61019b6101bc366004613eef565b610759565b61019b6101cf366004614023565b610771565b8180156101e057600080fd5b5061019b6101ef36600461407e565b610ade565b81801561020057600080fd5b5061019b61020f3660046140b0565b610eff565b81801561022057600080fd5b5061019b61022f366004613e9e565b611643565b61019b610242366004614100565b6118b0565b61019b61025536600461407e565b6118c1565b81801561026657600080fd5b5061019b610275366004613e9e565b6119ba565b61019b610288366004614100565b611c93565b61019b61029b36600461407e565b611caa565b8180156102ac57600080fd5b506102c06102bb366004614119565b611d9b565b005b61019b601281565b8180156102d657600080fd5b506102ea6102e536600461414e565b611dab565b6040516101a5919061419e565b81801561030357600080fd5b5061019b6103123660046140b0565b6120c0565b61019b606481565b61019b61032d366004614100565b612757565b61019b6402540be40081565b61019b61034c3660046141e2565b612836565b6102ea61035f366004614119565b612963565b600086600001868154811061037b5761037b614204565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa1580156103f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104169190614233565b8488600301888154811061042c5761042c614204565b9060005260206000200154610441919061427b565b11156104945760405162461bcd60e51b815260206004820152600560248201527f696e70757400000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600061049f88612970565b905060008860020188815481106104b8576104b8614204565b9060005260206000200154866104ce9190614293565b8289815181106104e0576104e0614204565b60200260200101516104f2919061427b565b905060006105038a8a8a8587612a1e565b9050600181848a8151811061051a5761051a614204565b602002602001015161052c91906142d0565b61053691906142d0565b935060006402540be4008b60040154866105509190614293565b61055a91906142e7565b90508a600201898154811061057157610571614204565b9060005260206000200154818661058891906142d0565b61059291906142e7565b9450868510156105e45760405162461bcd60e51b815260206004820152600360248201527f3e20730000000000000000000000000000000000000000000000000000000000604482015260640161048b565b60008b6002018a815481106105fb576105fb614204565b90600052602060002001546402540be4008d600501548461061c9190614293565b61062691906142e7565b61063091906142e7565b9050888c6003018c8154811061064857610648614204565b906000526020600020016000828254610661919061427b565b909155506106719050818761427b565b8c6003018b8154811061068657610686614204565b90600052602060002001600082825461069f91906142d0565b925050819055506106e987878e6000018d815481106106c0576106c0614204565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169190612ca8565b604080518c8152602081018b90529081018b90526060810187905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc98906080015b60405180910390a250505050509695505050505050565b600061076785858585612d7c565b5095945050505050565b825482516000919081146107c75760405162461bcd60e51b815260206004820152600660248201527f6c656e6774680000000000000000000000000000000000000000000000000000604482015260640161048b565b60006107d2866130e1565b905060006107e86107e288612970565b836131ba565b905060008760030180548060200260200160405190810160405280929190818152602001828054801561083a57602002820191906000526020600020905b815481526020019060010190808311610826575b5050505050905060005b848110156108f057861561089a5787818151811061086457610864614204565b602002602001015182828151811061087e5761087e614204565b60200260200101818151610892919061427b565b9052506108de565b8781815181106108ac576108ac614204565b60200260200101518282815181106108c6576108c6614204565b602002602001018181516108da91906142d0565b9052505b806108e881614322565b915050610844565b506000610958610952838b60020180548060200260200160405190810160405280929190818152602001828054801561094857602002820191906000526020600020905b815481526020019060010190808311610934575b5050505050613356565b856131ba565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ef9190614233565b905080610a0357509450610ad79350505050565b600088610a1957610a1483866142d0565b610a23565b610a2385846142d0565b9050848b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab99190614233565b610ac39083614293565b610acd91906142e7565b9750505050505050505b9392505050565b6000808560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b749190614233565b905060008111610bc65760405162461bcd60e51b815260206004820152600f60248201527f746f74616c537570706c79203d20300000000000000000000000000000000000604482015260640161048b565b855460018701546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5c9190614233565b861115610cab5760405162461bcd60e51b815260206004820152600960248201527f3e2062616c616e63650000000000000000000000000000000000000000000000604482015260640161048b565b81861115610cfb5760405162461bcd60e51b815260206004820152600d60248201527f3e20746f74616c537570706c7900000000000000000000000000000000000000604482015260640161048b565b808510610d4a5760405162461bcd60e51b815260206004820152600d60248201527f746f6b656e4e6f74466f756e6400000000000000000000000000000000000000604482015260640161048b565b600080610d5989338a8a612d7c565b9250905085811015610dad5760405162461bcd60e51b815260206004820152600360248201527f3e20730000000000000000000000000000000000000000000000000000000000604482015260640161048b565b6402540be400896005015483610dc39190614293565b610dcd91906142e7565b610dd7908261427b565b896003018881548110610dec57610dec614204565b906000526020600020016000828254610e0591906142d0565b909155505060018901546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018a905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b158015610e7e57600080fd5b505af1158015610e92573d6000803e3d6000fd5b50505050610eb033828b6000018a815481106106c0576106c0614204565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b82548251600091908114610f555760405162461bcd60e51b815260206004820152600660248201527f6c656e6774680000000000000000000000000000000000000000000000000000604482015260640161048b565b60008167ffffffffffffffff811115610f7057610f70613f2a565b604051908082528060200260200182016040528015610f99578160200160208202803683370190505b5090506000610fa7876133d9565b905060008760010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e9190614233565b9050600061104b896130e1565b905060008215611107576111046107e28b6003018054806020026020016040519081016040528092919081815260200182805480156110a957602002820191906000526020600020905b815481526020019060010190808311611095575b50505050508c6002018054806020026020016040519081016040528092919081815260200182805480156109485760200282019190600052602060002090815481526020019060010190808311610934575050505050613356565b90505b60008a60030180548060200260200160405190810160405280929190818152602001828054801561115757602002820191906000526020600020905b815481526020019060010190808311611143575b5050505050905060005b8781101561127457846111d75760008b828151811061118257611182614204565b6020026020010151116111d75760405162461bcd60e51b815260206004820152600660248201527f746f6b656e730000000000000000000000000000000000000000000000000000604482015260640161048b565b6112398c60000182815481106111ef576111ef614204565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c838151811061122c5761122c614204565b602002602001015161340e565b82828151811061124b5761124b614204565b6020026020010181815161125f919061427b565b9052508061126c81614322565b915050611161565b5060006112d4610952838e6002018054806020026020016040519081016040528092919081815260200182805480156109485760200282019190600052602060002090815481526020019060010190808311610934575050505050613356565b90508281116112e5576112e561435b565b846113085781516112ff9060038e01906020850190613e15565b50809850611504565b6000805b8981101561147b5761136c858f600301838154811061132d5761132d614204565b9060005260206000200154856113439190614293565b61134d91906142e7565b85838151811061135f5761135f614204565b602002602001015161355f565b91506402540be40061137e838a614293565b61138891906142e7565b89828151811061139a5761139a614204565b6020026020010181815250506402540be4008e600501548a83815181106113c3576113c3614204565b60200260200101516113d59190614293565b6113df91906142e7565b8482815181106113f1576113f1614204565b602002602001015161140391906142d0565b8e600301828154811061141857611418614204565b906000526020600020018190555088818151811061143857611438614204565b602002602001015184828151811061145257611452614204565b6020026020010181815161146691906142d0565b9052508061147381614322565b91505061130c565b506114df6114d9848f6002018054806020026020016040519081016040528092919081815260200182805480156109485760200282019190600052602060002090815481526020019060010190808311610934575050505050613356565b866131ba565b9150836114ec81846142d0565b6114f69088614293565b61150091906142e7565b9950505b898910156115545760405162461bcd60e51b815260206004820152600360248201527f3e20730000000000000000000000000000000000000000000000000000000000604482015260640161048b565b60018c01546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906340c10f1990604401600060405180830381600087803b1580156115c857600080fd5b505af11580156115dc573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d60405161162c94939291906143c5565b60405180910390a250505050505050509392505050565b60008061164f88612970565b9050600061167e6116656402540be40088614293565b60048b0154611679906402540be4006142d0565b613581565b9050600089600201888154811061169757611697614204565b9060005260206000200154826116ad9190614293565b8389815181106116bf576116bf614204565b60200260200101516116d191906142d0565b905060006116e28b8a8c8588612a1e565b9050838a815181106116f6576116f6614204565b60200260200101518161170991906142d0565b94508a6002018a8154811061172057611720614204565b90600052602060002001548561173691906142e7565b9450868511156117885760405162461bcd60e51b815260206004820152600360248201527f3e20730000000000000000000000000000000000000000000000000000000000604482015260640161048b565b848b6003018b8154811061179e5761179e614204565b9060005260206000200160008282546117b791906142d0565b92505081905550828b6003018a815481106117d4576117d4614204565b9060005260206000200160008282546117ed91906142d0565b90915550508a546000908c908c90811061180957611809614204565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169050611837818761340e565b9550611853878a8e6000018d815481106106c0576106c0614204565b604080518c8152602081018890529081018b9052606081018a905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc9890608001610742565b60006118bb826130e1565b92915050565b6000806118cd86612970565b905060006118f76118e36402540be40086614293565b6004890154611679906402540be4006142d0565b9050600087600201868154811061191057611910614204565b9060005260206000200154826119269190614293565b83878151811061193857611938614204565b602002602001015161194a91906142d0565b9050600061195b89888a8588612a1e565b905060006119ac858a8151811061197457611974614204565b60200260200101518361198791906142d0565b8b6002018b8154811061199c5761199c614204565b90600052602060002001546135da565b9a9950505050505050505050565b6000808760000187815481106119d2576119d2614204565b600091825260208220015473ffffffffffffffffffffffffffffffffffffffff1691506119fe89612970565b9050611a0a828761340e565b95506000611a698a8a8a8d6002018d81548110611a2957611a29614204565b90600052602060002001548b611a3f9190614293565b868e81518110611a5157611a51614204565b6020026020010151611a63919061427b565b86612a1e565b90506000600182848b81518110611a8257611a82614204565b6020026020010151611a9491906142d0565b611a9e91906142d0565b905060006402540be4008c6004015483611ab89190614293565b611ac291906142e7565b90508b6002018a81548110611ad957611ad9614204565b90600052602060002001548183611af091906142d0565b611afa91906142e7565b915087821015611b4c5760405162461bcd60e51b815260206004820152600360248201527f3e20730000000000000000000000000000000000000000000000000000000000604482015260640161048b565b888c6003018c81548110611b6257611b62614204565b906000526020600020016000828254611b7b919061427b565b909155505060028c0180548b908110611b9657611b96614204565b90600052602060002001546402540be4008d6005015483611bb79190614293565b611bc191906142e7565b611bcb91906142e7565b611bd5908361427b565b8c6003018b81548110611bea57611bea614204565b906000526020600020016000828254611c0391906142d0565b92505081905550611c2487838e6000018d815481106106c0576106c0614204565b604080518c8152602081018b90529081018b90526060810183905273ffffffffffffffffffffffffffffffffffffffff8816907fb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc989060800160405180910390a2509a9950505050505050505050565b60006064611ca0836130e1565b6118bb91906142e7565b600080611cb686612970565b90506000866002018681548110611ccf57611ccf614204565b906000526020600020015484611ce59190614293565b828781518110611cf757611cf7614204565b6020026020010151611d09919061427b565b90506000611d1a8888888587612a1e565b90506000611d6b82858981518110611d3457611d34614204565b6020026020010151611d4691906142d0565b8a6002018981548110611d5b57611d5b614204565b9060005260206000200154613581565b905060006402540be400828b60040154611d859190614293565b611d8f91906142e7565b90506119ac81836142d0565b611da683838361365e565b505050565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e429190614233565b905080841115611e5157600080fd5b845460008167ffffffffffffffff811115611e6e57611e6e613f2a565b604051908082528060200260200182016040528015611e97578160200160208202803683370190505b509050611ea5873388613834565b935060005b8451811015611fe157858181518110611ec557611ec5614204565b6020026020010151858281518110611edf57611edf614204565b60200260200101511015611f355760405162461bcd60e51b815260206004820152600360248201527f3e20730000000000000000000000000000000000000000000000000000000000604482015260640161048b565b848181518110611f4757611f47614204565b6020026020010151886003018281548110611f6457611f64614204565b9060005260206000200154611f7991906142d0565b886003018281548110611f8e57611f8e614204565b9060005260206000200181905550611fcf33868381518110611fb257611fb2614204565b60200260200101518a60000184815481106106c0576106c0614204565b80611fd981614322565b915050611eaa565b5060018701546040517f79cc67900000000000000000000000000000000000000000000000000000000081523360048201526024810188905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b15801561205657600080fd5b505af115801561206a573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea91508690508361209f8a886142d0565b6040516120ae939291906143fe565b60405180910390a25050509392505050565b825482516000919081146121165760405162461bcd60e51b815260206004820152600660248201527f6c656e6774680000000000000000000000000000000000000000000000000000604482015260640161048b565b6001850154604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916318160ddd9160048083019260209291908290030181865afa158015612188573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ac9190614233565b9050806121fb5760405162461bcd60e51b815260206004820152600f60248201527f746f74616c537570706c79203d20300000000000000000000000000000000000604482015260640161048b565b6000612206876133d9565b90506000612213886130e1565b905060008860030180548060200260200160405190810160405280929190818152602001828054801561226557602002820191906000526020600020905b815481526020019060010190808311612251575b50505050509050600061228061227a8b612970565b846131ba565b905060005b868110156122e25789818151811061229f5761229f614204565b60200260200101518382815181106122b9576122b9614204565b602002602001018181516122cd91906142d0565b905250806122da81614322565b915050612285565b506000612342610952848d6002018054806020026020016040519081016040528092919081815260200182805480156109485760200282019190600052602060002090815481526020019060010190808311610934575050505050613356565b905060008767ffffffffffffffff81111561235f5761235f613f2a565b604051908082528060200260200182016040528015612388578160200160208202803683370190505b50905060005b88811015612508576000848e60030183815481106123ae576123ae614204565b9060005260206000200154856123c49190614293565b6123ce91906142e7565b905060006123f58784815181106123e7576123e7614204565b60200260200101518361355f565b90506402540be400612407828b614293565b61241191906142e7565b84848151811061242357612423614204565b6020026020010181815250506402540be4008f6005015485858151811061244c5761244c614204565b602002602001015161245e9190614293565b61246891906142e7565b87848151811061247a5761247a614204565b602002602001015161248c91906142d0565b8f60030184815481106124a1576124a1614204565b90600052602060002001819055508383815181106124c1576124c1614204565b60200260200101518784815181106124db576124db614204565b602002602001018181516124ef91906142d0565b905250829150612500905081614322565b91505061238e565b506125666114d9858e6002018054806020026020016040519081016040528092919081815260200182805480156109485760200282019190600052602060002090815481526020019060010190808311610934575050505050613356565b9150828761257484836142d0565b61257e9190614293565b61258891906142e7565b98506000891161259a5761259a61435b565b6125a48c33613a1a565b6125b3906402540be4006142d0565b6125be8a600161427b565b6125c89190614293565b98508989111561261a5760405162461bcd60e51b815260206004820152600360248201527f3e20730000000000000000000000000000000000000000000000000000000000604482015260640161048b565b60018c01546040517f79cc6790000000000000000000000000000000000000000000000000000000008152336004820152602481018b905273ffffffffffffffffffffffffffffffffffffffff909116906379cc679090604401600060405180830381600087803b15801561268e57600080fd5b505af11580156126a2573d6000803e3d6000fd5b5050505060005b88811015612717578b81815181106126c3576126c3614204565b602002602001015160001461270557612705338d83815181106126e8576126e8614204565b60200260200101518f60000184815481106106c0576106c0614204565b8061270f81614322565b9150506126a9565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c83856127478e8d6142d0565b60405161162c94939291906143c5565b60008061277461276684612970565b61276f856130e1565b6131ba565b905060008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280b9190614233565b90508061281a6012600a614554565b6128249084614293565b61282e91906142e7565b949350505050565b815460009082106128895760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e67650000000000000000000000000000000000604482015260640161048b565b82600301828154811061289e5761289e614204565b90600052602060002001548360000183815481106128be576128be614204565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015612935573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129599190614233565b610ad791906142d0565b606061282e848484613834565b60606118bb826003018054806020026020016040519081016040528092919081815260200182805480156129c357602002820191906000526020600020905b8154815260200190600101908083116129af575b5050505050836002018054806020026020016040519081016040528092919081815260200182805480156109485760200282019190600052602060002090815481526020019060010190808311610934575050505050613356565b600083851415612a705760405162461bcd60e51b815260206004820152600960248201527f73616d65546f6b656e0000000000000000000000000000000000000000000000604482015260640161048b565b85548086108015612a8057508085105b612acc5760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e67650000000000000000000000000000000000604482015260640161048b565b6000612ad7886130e1565b90506000612ae58383614293565b90506000612af386846131ba565b9050600081815b86811015612b7b578a811415612b0f57612b69565b60008c8214612b3757898281518110612b2a57612b2a614204565b6020026020010151612b39565b8a5b9050612b45818561427b565b9350612b518882614293565b612b5b8685614293565b612b6591906142e7565b9250505b80612b7381614322565b915050612afa565b50612b868685614293565b6064612b928584614293565b612b9c9190614293565b612ba691906142e7565b9050600084612bb6606486614293565b612bc091906142e7565b612bca908461427b565b9050600084815b610100811015612c56578192508684836002612bed9190614293565b612bf7919061427b565b612c0191906142d0565b85612c0c8480614293565b612c16919061427b565b612c2091906142e7565b91506001612c2e848461355f565b11612c4457509850612c9f975050505050505050565b80612c4e81614322565b915050612bd1565b5060405162461bcd60e51b815260206004820152601260248201527f7943616c63756c6174696f6e4661696c65640000000000000000000000000000604482015260640161048b565b95945050505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611da69084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613ae0565b835460009081908310612dd15760405162461bcd60e51b815260206004820152600f60248201527f696e6465784f75744f6652616e67650000000000000000000000000000000000604482015260640161048b565b6000612ddc876130e1565b90506000612de988612970565b90506000612df782846131ba565b905060008960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8e9190614233565b612e98838a614293565b612ea291906142e7565b612eac90836142d0565b90506000612ebd8b868a8786613b92565b9050836000612ecb8d6133d9565b905060005b8d54811015612fd35760008b821415612f25578487878a8581518110612ef857612ef8614204565b6020026020010151612f0a9190614293565b612f1491906142e7565b612f1e91906142d0565b9050612f7c565b8686898481518110612f3957612f39614204565b6020026020010151612f4b9190614293565b612f5591906142e7565b888381518110612f6757612f67614204565b6020026020010151612f7991906142d0565b90505b6402540be400612f8c8285614293565b612f9691906142e7565b848381518110612fa857612fa8614204565b60200260200101818151612fbc91906142d0565b905250819050612fcb81614322565b915050612ed0565b50612fe18d888c8588613b92565b828b81518110612ff357612ff3614204565b602002602001015161300591906142d0565b98508c6002018a8154811061301c5761301c614204565b906000526020600020015460018a61303491906142d0565b61303e91906142e7565b9850888d6002018b8154811061305657613056614204565b906000526020600020015484888d8151811061307457613074614204565b602002602001015161308691906142d0565b61309091906142e7565b61309a91906142d0565b97506402540be4006130ac8e8e613a1a565b6130bb906402540be4006142d0565b6130c5908b614293565b6130cf91906142e7565b98505050505050505094509492505050565b6000816009015442106130f657506007015490565b816006015482600701541115613160578160080154826009015461311a91906142d0565b600883015461312990426142d0565b8360060154846007015461313d91906142d0565b6131479190614293565b61315191906142e7565b82600601546118bb919061427b565b8160080154826009015461317491906142d0565b600883015461318390426142d0565b8360070154846006015461319791906142d0565b6131a19190614293565b6131ab91906142e7565b82600601546118bb91906142d0565b8151600090816131c985613d06565b9050806131db576000925050506118bb565b600081816131e98588614293565b905060005b61010081101561330d578260005b8a5181101561325257878b828151811061321857613218614204565b602002602001015161322a9190614293565b6132348684614293565b61323e91906142e7565b91508061324a81614322565b9150506131fc565b5083945080876001613264919061427b565b61326e9190614293565b60648561327b82876142d0565b6132859190614293565b61328f91906142e7565b613299919061427b565b846132a48984614293565b60646132b08a88614293565b6132ba91906142e7565b6132c4919061427b565b6132ce9190614293565b6132d891906142e7565b935060016132e6858761355f565b116132fa57839750505050505050506118bb565b508061330581614322565b9150506131ee565b5060405162461bcd60e51b815260206004820152601a60248201527f696e76617269616e7443616c63756c6174696f6e4661696c6564000000000000604482015260640161048b565b606060005b83518110156133d15783818151811061337657613376614204565b602002602001015183828151811061339057613390614204565b60200260200101516133a29190614293565b8382815181106133b4576133b4614204565b6020908102919091010152806133c981614322565b91505061335b565b509092915050565b80546000906133e96001826142d0565b6133f4906004614293565b8184600401546134049190614293565b610ad791906142e7565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa15801561347d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134a19190614233565b90506134c573ffffffffffffffffffffffffffffffffffffffff8516333086613d52565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015613531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135559190614233565b61282e91906142d0565b60008183116135775761357283836142d0565b610ad7565b610ad782846142d0565b6000816135d05760405162461bcd60e51b815260206004820152600360248201527f6469760000000000000000000000000000000000000000000000000000000000604482015260640161048b565b610ad782846142e7565b6000816136295760405162461bcd60e51b815260206004820152600360248201527f6469760000000000000000000000000000000000000000000000000000000000604482015260640161048b565b82613636575060006118bb565b816136426001856142d0565b61364c91906142e7565b61365790600161427b565b90506118bb565b73ffffffffffffffffffffffffffffffffffffffff821661367e57505050565b600a8301546136bb5773ffffffffffffffffffffffffffffffffffffffff82166000908152600c8401602052604090206402540be4009055613807565b60006136c78484613a1a565b60018501546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152929350600092909116906370a0823190602401602060405180830381865afa15801561373f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137639190614233565b600a860154909150613775828561427b565b61377f9190614293565b1561380457600a850154613793828561427b565b61379d9190614293565b6402540be40086600a0154856137b39190614293565b6137bd8585614293565b6137c7919061427b565b6137d19190614293565b6137db91906142e7565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600c870160205260409020555b50505b5073ffffffffffffffffffffffffffffffffffffffff166000908152600b90910160205260409020429055565b606060008460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156138a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138cb9190614233565b90508083111561391d5760405162461bcd60e51b815260206004820152600c60248201527f746f74616c20737570706c790000000000000000000000000000000000000000604482015260640161048b565b60006402540be40061392f8787613a1a565b61393e906402540be4006142d0565b6139489086614293565b61395291906142e7565b865490915060009067ffffffffffffffff81111561397257613972613f2a565b60405190808252806020026020018201604052801561399b578160200160208202803683370190505b50905060005b8754811015613a0f5783838960030183815481106139c1576139c1614204565b90600052602060002001546139d69190614293565b6139e091906142e7565b8282815181106139f2576139f2614204565b602090810291909101015280613a0781614322565b9150506139a1565b509695505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600b830160205260408120548190613a51906224ea0061427b565b905042811115613ad6576000613a6742836142d0565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600c87016020526040902054600a8701549192506402540be400916224ea00918491613aaf9190614293565b613ab99190614293565b613ac391906142e7565b613acd91906142e7565b925050506118bb565b5060009392505050565b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051613b089190614560565b6000604051808303816000865af19150503d8060008114613b45576040519150601f19603f3d011682016040523d82523d6000602084013e613b4a565b606091505b50915091506000821415613b62573d6000803e3d6000fd5b613b8c815160001480613b84575081806020019051810190613b84919061459b565b6101a2613db0565b50505050565b8454600090808510613ba657613ba661435b565b6000613bb28288614293565b90508360008080805b86811015613c2d578a811415613bd057613c1b565b898181518110613be257613be2614204565b602002602001015192508284613bf8919061427b565b9350613c048784614293565b613c0e8a87614293565b613c1891906142e7565b94505b80613c2581614322565b915050613bbb565b50613c388686614293565b6064613c448a87614293565b613c4e9190614293565b613c5891906142e7565b9350600085613c6860648b614293565b613c7291906142e7565b613c7c908561427b565b90508860005b61010081101561330d578193508a83836002613c9e9190614293565b613ca8919061427b565b613cb291906142d0565b87613cbd8480614293565b613cc7919061427b565b613cd191906142e7565b91506001613cdf858461355f565b11613cf457509750612c9f9650505050505050565b80613cfe81614322565b915050613c82565b6000805b8251811015613d4c57828181518110613d2557613d25614204565b602002602001015182613d38919061427b565b915080613d4481614322565b915050613d0a565b50919050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052613b8c9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612cfa565b81613dbe57613dbe81613dc2565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b828054828255906000526020600020908101928215613e50579160200282015b82811115613e50578251825591602001919060010190613e35565b50613e5c929150613e60565b5090565b5b80821115613e5c5760008155600101613e61565b803573ffffffffffffffffffffffffffffffffffffffff81168114613e9957600080fd5b919050565b60008060008060008060c08789031215613eb757600080fd5b8635955060208701359450604087013593506060870135925060808701359150613ee360a08801613e75565b90509295509295509295565b60008060008060808587031215613f0557600080fd5b84359350613f1560208601613e75565b93969395505050506040820135916060013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112613f6a57600080fd5b8135602067ffffffffffffffff80831115613f8757613f87613f2a565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108482111715613fca57613fca613f2a565b604052938452858101830193838101925087851115613fe857600080fd5b83870191505b8482101561400757813583529183019190830190613fee565b979650505050505050565b801515811461402057600080fd5b50565b60008060006060848603121561403857600080fd5b83359250602084013567ffffffffffffffff81111561405657600080fd5b61406286828701613f59565b925050604084013561407381614012565b809150509250925092565b6000806000806080858703121561409457600080fd5b5050823594602084013594506040840135936060013592509050565b6000806000606084860312156140c557600080fd5b83359250602084013567ffffffffffffffff8111156140e357600080fd5b6140ef86828701613f59565b925050604084013590509250925092565b60006020828403121561411257600080fd5b5035919050565b60008060006060848603121561412e57600080fd5b8335925061413e60208501613e75565b9150604084013590509250925092565b60008060006060848603121561416357600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561418857600080fd5b61419486828701613f59565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156141d6578351835292840192918401916001016141ba565b50909695505050505050565b600080604083850312156141f557600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561424557600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561428e5761428e61424c565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156142cb576142cb61424c565b500290565b6000828210156142e2576142e261424c565b500390565b60008261431d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156143545761435461424c565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600081518084526020808501945080840160005b838110156143ba5781518752958201959082019060010161439e565b509495945050505050565b6080815260006143d8608083018761438a565b82810360208401526143ea818761438a565b604084019590955250506060015292915050565b606081526000614411606083018661438a565b8281036020840152614423818661438a565b915050826040830152949350505050565b600181815b8085111561448d57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156144735761447361424c565b8085161561448057918102915b93841c9390800290614439565b509250929050565b6000826144a4575060016118bb565b816144b1575060006118bb565b81600181146144c757600281146144d1576144ed565b60019150506118bb565b60ff8411156144e2576144e261424c565b50506001821b6118bb565b5060208310610133831016604e8410600b8410161715614510575081810a6118bb565b61451a8383614434565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561454c5761454c61424c565b029392505050565b6000610ad78383614495565b6000825160005b818110156145815760208186018101518583015201614567565b81811115614590576000828501525b509190910192915050565b6000602082840312156145ad57600080fd5b8151610ad78161401256fea2646970667358221220639c6e697f76de33450178b57c49b5529c705da5db39e7bc1efda7c75053de0e64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "params": {
          "amounts": "List of amounts of coins to deposit",
          "minMintAmount": "Minimum amount of LP tokens to mint from the deposit"
        },
        "returns": {
          "mintAmount": "Amount of LP tokens received by depositing"
        }
      },
      "onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i": "token index in",
          "j": "token index out"
        }
      },
      "onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "i": "token index in",
          "j": "token index out"
        }
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "params": {
          "self": "Swap struct to read from and write to",
          "toMint": "amount of pool tokens to be minted",
          "user": "address of the user depositing tokens"
        }
      }
    },
    "stateVariables": {
      "A_PRECISION": {
        "details": "protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration"
      },
      "MAX_ITERATION": {
        "details": "max iteration of converge calccuate"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "notice": "Deposit coins into the pool"
      },
      "calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)": {
        "notice": "Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account"
      },
      "getAPrecise(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "VIEW FUNCTIONS"
      },
      "getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "Returns portfolio virtual price (for calculating profit) scaled up by 1e18"
      },
      "onSwapGivenIn(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "notice": "the same function as swap, but it expects that amounts already have been  sent to the contract   - designed to be used in the Requiem Swap framework   - deducts the fee from the output, in this case simple as the output is the calculated value   - viable function for batch swapping"
      },
      "onSwapGivenOut(RequiemStableSwapLib.SwapStorage storage,uint256,uint256,uint256,uint256,address)": {
        "notice": "the same function as swap, but it espects that amounts already have been sent to the contract and it requires the output to be provided  - designed to be used in the requirem swap framework  - deducts the fees from the output, that means that the    output has to be increased by the fee to then create a highe input"
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "notice": "Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit."
      }
    },
    "notice": "StableSwap main algorithm",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}