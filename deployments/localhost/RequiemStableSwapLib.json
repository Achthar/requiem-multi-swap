{
  "address": "0x67d269191c92Caf3cD7723F116c85e6E9bf55933",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "token_amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_supply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coin_amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sold_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_sold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bought_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens_bought",
          "type": "uint256"
        }
      ],
      "name": "TokenExchange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "A_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_TOKEN_COMMON_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x469e49a53db71f81ea110b414bf2a278ece2f44c15eb8332f81dd022e487f6f6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x67d269191c92Caf3cD7723F116c85e6E9bf55933",
    "transactionIndex": 0,
    "gasUsed": "3205917",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x87366c3ebb3076285a23dc3f68278e48342cc61f64ad583dc0d48a7d64174a69",
    "transactionHash": "0x469e49a53db71f81ea110b414bf2a278ece2f44c15eb8332f81dd022e487f6f6",
    "logs": [],
    "blockNumber": 30,
    "cumulativeGasUsed": "3205917",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "bda2c24233cb9e4c01414279d500fda4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"token_amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_supply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coin_amount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sold_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_sold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bought_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_bought\",\"type\":\"uint256\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_TOKEN_COMMON_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"params\":{\"amounts\":\"List of amounts of coins to deposit\",\"minMintAmount\":\"Minimum amount of LP tokens to mint from the deposit\"},\"returns\":{\"mintAmount\":\"Amount of LP tokens received by depositing\"}},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"params\":{\"self\":\"Swap struct to read from and write to\",\"toMint\":\"amount of pool tokens to be minted\",\"user\":\"address of the user depositing tokens\"}}},\"stateVariables\":{\"A_PRECISION\":{\"details\":\"protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration\"},\"MAX_ITERATION\":{\"details\":\"max iteration of converge calccuate\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)\":{\"notice\":\"Deposit coins into the pool\"},\"calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)\":{\"notice\":\"Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account\"},\"getAPrecise(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"VIEW FUNCTIONS\"},\"getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)\":{\"notice\":\"Returns portfolio virtual price (for calculating profit) scaled up by 1e18\"},\"updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)\":{\"notice\":\"Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit.\"}},\"notice\":\"StableSwap main algorithm\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemStableSwapLib.sol\":\"RequiemStableSwapLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/RequiemStableSwapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./tokens/LPToken.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\n/**\\n * StableSwap main algorithm\\n */\\nlibrary RequiemStableSwapLib {\\n    using SafeERC20 for IERC20;\\n\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] token_amounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n\\n    event TokenExchange(\\n        address indexed buyer,\\n        uint256 sold_id,\\n        uint256 tokens_sold,\\n        uint256 bought_id,\\n        uint256 tokens_bought\\n    );\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 token_supply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\\n\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] token_amounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n\\n    uint256 public constant FEE_DENOMINATOR = 1e10;\\n    // uint256 public constant PRECISION = 1e18;\\n\\n    /// @dev protect from division loss when run approximation loop. We cannot divide at the end because of overflow,\\n    /// so we add some (small) PRECISION when divide in each iteration\\n    uint256 public constant A_PRECISION = 100;\\n    /// @dev max iteration of converge calccuate\\n    uint256 internal constant MAX_ITERATION = 256;\\n    uint256 public constant POOL_TOKEN_COMMON_DECIMALS = 18;\\n\\n    struct SwapStorage {\\n        IERC20[] pooledTokens;\\n        LPToken lpToken;\\n        /// @dev token i multiplier to reach POOL_TOKEN_COMMON_DECIMALS\\n        uint256[] tokenMultipliers;\\n        /// @dev effective balance which might different from token balance of the contract 'cause it hold admin fee as well\\n        uint256[] balances;\\n        /// @dev swap fee ratio. Charge on any action which move balance state far from the ideal state\\n        uint256 fee;\\n        /// @dev admin fee in ratio of swap fee.\\n        uint256 adminFee;\\n        /// @dev observation of A, multiplied with A_PRECISION\\n        uint256 initialA;\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n        // withdrawal fee control\\n        uint256 defaultWithdrawFee;\\n        mapping(address => uint256) depositTimestamp;\\n        mapping(address => uint256) withdrawFeeMultiplier;\\n    }\\n\\n    /**\\n     * @notice Deposit coins into the pool\\n     * @param amounts List of amounts of coins to deposit\\n     * @param minMintAmount Minimum amount of LP tokens to mint from the deposit\\n     * @return mintAmount Amount of LP tokens received by depositing\\n     */\\n    function addLiquidity(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 minMintAmount\\n    ) external returns (uint256 mintAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256[] memory fees = new uint256[](nCoins);\\n        uint256 _fee = _feePerToken(self);\\n\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256 D0 = 0;\\n        if (tokenSupply > 0) {\\n            D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\\n        }\\n\\n        uint256[] memory newBalances = self.balances;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (tokenSupply == 0) {\\n                require(amounts[i] > 0, \\\"initialDepositRequireAllTokens\\\");\\n            }\\n            // get real transfer in amount\\n            newBalances[i] += _doTransferIn(self.pooledTokens[i], amounts[i]);\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        assert(D1 > D0); // double check\\n\\n        if (tokenSupply == 0) {\\n            self.balances = newBalances;\\n            mintAmount = D1;\\n        } else {\\n            uint256 diff = 0;\\n            for (uint256 i = 0; i < nCoins; i++) {\\n                diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\\n                fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n                self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n                newBalances[i] -= fees[i];\\n            }\\n            D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n            mintAmount = (tokenSupply * (D1 - D0)) / D0;\\n        }\\n\\n        require(mintAmount >= minMintAmount, \\\"> slippage\\\");\\n\\n        self.lpToken.mint(msg.sender, mintAmount);\\n        emit AddLiquidity(msg.sender, amounts, fees, D1, mintAmount);\\n    }\\n\\n    function swap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256) {\\n        IERC20 inCoin = self.pooledTokens[i];\\n        uint256[] memory normalizedBalances = _xp(self);\\n        inAmount = _doTransferIn(inCoin, inAmount);\\n\\n        // uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\\n        uint256 y = _getY(self, i, j, normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]), normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> slippage\\\");\\n\\n        // uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n        return dy;\\n    }\\n\\n    // the same function as swap, but it espects that amounts already have been\\n    // sent to the contract\\n    function onSwap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n\\n        uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\\n        uint256 y = _getY(self, i, j, x, normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> slippage\\\");\\n\\n        uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + _adminFee;\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n        return dy;\\n    }\\n\\n    function removeLiquidity(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256[] memory minAmounts\\n    ) external returns (uint256[] memory amounts) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(lpAmount <= totalSupply);\\n        uint256 nCoins = self.pooledTokens.length;\\n\\n        uint256[] memory fees = new uint256[](nCoins);\\n        amounts = _calculateRemoveLiquidity(self, msg.sender, lpAmount);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] >= minAmounts[i], \\\"> slippage\\\");\\n            self.balances[i] = self.balances[i] - amounts[i];\\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        emit RemoveLiquidity(msg.sender, amounts, fees, totalSupply - lpAmount);\\n    }\\n\\n    function removeLiquidityOneToken(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256 index,\\n        uint256 minAmount\\n    ) external returns (uint256) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply > 0, \\\"totalSupply = 0\\\");\\n        uint256 numTokens = self.pooledTokens.length;\\n        require(lpAmount <= self.lpToken.balanceOf(msg.sender), \\\"> balance\\\");\\n        require(lpAmount <= totalSupply, \\\"> totalSupply\\\");\\n        require(index < numTokens, \\\"tokenNotFound\\\");\\n\\n        uint256 dyFee;\\n        uint256 dy;\\n\\n        (dy, dyFee) = _calculateRemoveLiquidityOneToken(self, msg.sender, lpAmount, index);\\n\\n        require(dy >= minAmount, \\\"> slippage\\\");\\n\\n        self.balances[index] -= (dy + (dyFee * self.adminFee) / FEE_DENOMINATOR);\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        self.pooledTokens[index].safeTransfer(msg.sender, dy);\\n\\n        emit RemoveLiquidityOne(msg.sender, index, lpAmount, dy);\\n\\n        return dy;\\n    }\\n\\n    function removeLiquidityImbalance(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 maxBurnAmount\\n    ) external returns (uint256 burnAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply != 0, \\\"totalSupply = 0\\\");\\n        uint256 _fee = _feePerToken(self);\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256[] memory newBalances = self.balances;\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            newBalances[i] -= amounts[i];\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256[] memory fees = new uint256[](nCoins);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            uint256 idealBalance = (D1 * self.balances[i]) / D0;\\n            uint256 diff = _distance(newBalances[i], idealBalance);\\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n            newBalances[i] -= fees[i];\\n        }\\n\\n        // recalculate invariant with fee charged balances\\n        D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        burnAmount = ((D0 - D1) * totalSupply) / D0;\\n        assert(burnAmount > 0);\\n        burnAmount = (burnAmount + 1) * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, msg.sender)); //In case of rounding errors - make it unfavorable for the \\\"attacker\\\"\\n        require(burnAmount <= maxBurnAmount, \\\"> slippage\\\");\\n\\n        self.lpToken.burnFrom(msg.sender, burnAmount);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (amounts[i] != 0) {\\n                self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, totalSupply - burnAmount);\\n    }\\n\\n    /// VIEW FUNCTIONS\\n    function getAPrecise(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self);\\n    }\\n\\n    /**\\n     * Returns portfolio virtual price (for calculating profit)\\n     * scaled up by 1e18\\n     */\\n    function getVirtualPrice(SwapStorage storage self) external view returns (uint256) {\\n        uint256 D = _getD(_xp(self), _getAPrecise(self));\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        return (D * 10**POOL_TOKEN_COMMON_DECIMALS) / tokenSupply;\\n    }\\n\\n    function getAdminBalance(SwapStorage storage self, uint256 index) external view returns (uint256) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        return self.pooledTokens[index].balanceOf(address(this)) - (self.balances[index]);\\n    }\\n\\n    /**\\n     * Estimate amount of LP token minted or burned at deposit or withdrawal\\n     * without taking fees into account\\n     */\\n    function calculateTokenAmount(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"invalidAmountsLength\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        uint256[] memory newBalances = self.balances;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (deposit) {\\n                newBalances[i] += amounts[i];\\n            } else {\\n                newBalances[i] -= amounts[i];\\n            }\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n\\n        if (totalSupply == 0) {\\n            return D1; // first depositor take it all\\n        }\\n\\n        uint256 diff = deposit ? D1 - D0 : D0 - D1;\\n        return (diff * self.lpToken.totalSupply()) / D0;\\n    }\\n\\n    function getA(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self) / A_PRECISION;\\n    }\\n\\n    function calculateSwap(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 newInBalance = normalizedBalances[inIndex] + (inAmount * self.tokenMultipliers[inIndex]);\\n        uint256 outBalance = _getY(self, inIndex, outIndex, newInBalance, normalizedBalances);\\n        uint256 outAmount = (normalizedBalances[outIndex] - outBalance - 1) / self.tokenMultipliers[outIndex];\\n        uint256 _fee = (self.fee * outAmount) / FEE_DENOMINATOR;\\n        return outAmount - _fee;\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) external view returns (uint256[] memory) {\\n        return _calculateRemoveLiquidity(self, account, amount);\\n    }\\n\\n    function calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 lpAmount,\\n        uint256 tokenIndex\\n    ) external view returns (uint256 amount) {\\n        (amount, ) = _calculateRemoveLiquidityOneToken(self, account, lpAmount, tokenIndex);\\n    }\\n\\n    /**\\n     * @notice Update the withdraw fee for `user`. If the user is currently\\n     * not providing liquidity in the pool, sets to default value. If not, recalculate\\n     * the starting withdraw fee based on the last deposit's time & amount relative\\n     * to the new deposit.\\n     *\\n     * @param self Swap struct to read from and write to\\n     * @param user address of the user depositing tokens\\n     * @param toMint amount of pool tokens to be minted\\n     */\\n    function updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) external {\\n        _updateUserWithdrawFee(self, user, toMint);\\n    }\\n\\n    /// INTERNAL FUNCTIONS\\n\\n    /**\\n     * Ramping A up or down, return A with precision of A_PRECISION\\n     */\\n    function _getAPrecise(SwapStorage storage self) internal view returns (uint256) {\\n        if (block.timestamp >= self.futureATime) {\\n            return self.futureA;\\n        }\\n\\n        if (self.futureA > self.initialA) {\\n            return\\n                self.initialA +\\n                ((self.futureA - self.initialA) * (block.timestamp - self.initialATime)) /\\n                (self.futureATime - self.initialATime);\\n        }\\n\\n        return\\n            self.initialA -\\n            ((self.initialA - self.futureA) * (block.timestamp - self.initialATime)) /\\n            (self.futureATime - self.initialATime);\\n    }\\n\\n    /**\\n     * normalized balances of each tokens.\\n     */\\n    function _xp(uint256[] memory balances, uint256[] memory rates) internal pure returns (uint256[] memory) {\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            rates[i] = (rates[i] * balances[i]);\\n        }\\n\\n        return rates;\\n    }\\n\\n    function _xp(SwapStorage storage self) internal view returns (uint256[] memory) {\\n        return _xp(self.balances, self.tokenMultipliers);\\n    }\\n\\n    /**\\n     * Calculate D for *NORMALIZED* balances of each tokens\\n     * @param xp normalized balances of token\\n     */\\n    function _getD(uint256[] memory xp, uint256 amp) internal pure returns (uint256) {\\n        uint256 nCoins = xp.length;\\n        uint256 sum = _sumOf(xp);\\n        if (sum == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev = 0;\\n        uint256 D = sum;\\n        uint256 Ann = amp * nCoins;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            uint256 D_P = D;\\n            for (uint256 j = 0; j < xp.length; j++) {\\n                D_P = (D_P * D) / (xp[j] * nCoins);\\n            }\\n            Dprev = D;\\n            D =\\n                (((Ann * sum) / A_PRECISION + D_P * nCoins) * D) /\\n                (((Ann - A_PRECISION) * D) / A_PRECISION + (nCoins + 1) * D_P);\\n            if (_distance(D, Dprev) <= 1) {\\n                return D;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    /**\\n     * calculate new balance of when swap\\n     * Done by solving quadratic equation iteratively.\\n     *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     *  x_1**2 + b*x_1 = c\\n     *  x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     * @param inIndex index of token to swap in\\n     * @param outIndex index of token to swap out\\n     * @param inBalance new balance (normalized) of input token if the swap success\\n     * @return NORMALIZED balance of output token if the swap success\\n     */\\n    function _getY(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inBalance,\\n        uint256[] memory normalizedBalances\\n    ) internal view returns (uint256) {\\n        require(inIndex != outIndex, \\\"sameToken\\\");\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(inIndex < nCoins && outIndex < nCoins, \\\"indexOutOfRange\\\");\\n\\n        uint256 amp = _getAPrecise(self);\\n        uint256 Ann = amp * nCoins;\\n        uint256 D = _getD(normalizedBalances, amp);\\n\\n        uint256 sum = 0; // sum of new balances except output token\\n        uint256 c = D;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == outIndex) {\\n                continue;\\n            }\\n\\n            uint256 x = i == inIndex ? inBalance : normalizedBalances[i];\\n            sum += x;\\n            c = (c * D) / (x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = sum + (D * A_PRECISION) / Ann;\\n\\n        uint256 lastY = 0;\\n        uint256 y = D;\\n\\n        for (uint256 index = 0; index < MAX_ITERATION; index++) {\\n            lastY = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(lastY, y) <= 1) {\\n                return y;\\n            }\\n        }\\n\\n        revert(\\\"yCalculationFailed\\\");\\n    }\\n\\n    function _calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) internal view returns (uint256[] memory) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(amount <= totalSupply, \\\"Cannot exceed total supply\\\");\\n\\n        uint256 feeAdjustedAmount = (amount * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) /\\n            FEE_DENOMINATOR;\\n\\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            amounts[i] = (self.balances[i] * (feeAdjustedAmount)) / (totalSupply);\\n        }\\n        return amounts;\\n    }\\n\\n    function _calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 tokenAmount,\\n        uint256 index\\n    ) internal view returns (uint256 dy, uint256 fee) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256[] memory xp = _xp(self);\\n        uint256 D0 = _getD(xp, amp);\\n        uint256 D1 = D0 - (tokenAmount * D0) / self.lpToken.totalSupply();\\n        uint256 newY = _getYD(self, amp, index, xp, D1);\\n        uint256[] memory reducedXP = xp;\\n        uint256 _fee = _feePerToken(self);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            uint256 expectedDx = 0;\\n            if (i == index) {\\n                expectedDx = (xp[i] * D1) / D0 - newY;\\n            } else {\\n                expectedDx = xp[i] - (xp[i] * D1) / D0;\\n            }\\n            reducedXP[i] -= (_fee * expectedDx) / FEE_DENOMINATOR;\\n        }\\n\\n        dy = reducedXP[index] - _getYD(self, amp, index, reducedXP, D1);\\n        dy = (dy - 1) / self.tokenMultipliers[index];\\n        fee = ((xp[index] - newY) / self.tokenMultipliers[index]) - dy;\\n        dy = (dy * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n    }\\n\\n    function _feePerToken(SwapStorage storage self) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        return (self.fee * nCoins) / (4 * (nCoins - 1));\\n    }\\n\\n    function _getYD(\\n        SwapStorage storage self,\\n        uint256 A,\\n        uint256 index,\\n        uint256[] memory xp,\\n        uint256 D\\n    ) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        assert(index < nCoins);\\n        uint256 Ann = A * nCoins;\\n        uint256 c = D;\\n        uint256 s = 0;\\n        uint256 _x = 0;\\n        uint256 yPrev = 0;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == index) {\\n                continue;\\n            }\\n            _x = xp[i];\\n            s += _x;\\n            c = (c * D) / (_x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = s + (D * A_PRECISION) / Ann;\\n        uint256 y = D;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(yPrev, y) <= 1) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    function _updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) internal {\\n        // If token is transferred to address 0 (or burned), don't update the fee.\\n        if (user == address(0)) {\\n            return;\\n        }\\n        if (self.defaultWithdrawFee == 0) {\\n            // If current fee is set to 0%, set multiplier to FEE_DENOMINATOR\\n            self.withdrawFeeMultiplier[user] = FEE_DENOMINATOR;\\n        } else {\\n            // Otherwise, calculate appropriate discount based on last deposit amount\\n            uint256 currentFee = _calculateCurrentWithdrawFee(self, user);\\n            uint256 currentBalance = self.lpToken.balanceOf(user);\\n\\n            // ((currentBalance * currentFee) + (toMint * defaultWithdrawFee)) * FEE_DENOMINATOR /\\n            // ((toMint + currentBalance) * defaultWithdrawFee)\\n            if ((toMint + currentBalance) * self.defaultWithdrawFee != 0) {\\n                self.withdrawFeeMultiplier[user] =\\n                    (((currentBalance * currentFee) + (toMint * self.defaultWithdrawFee)) * (FEE_DENOMINATOR)) /\\n                    ((toMint + currentBalance) * self.defaultWithdrawFee);\\n            }\\n        }\\n        self.depositTimestamp[user] = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Calculate the fee that is applied when the given user withdraws.\\n     * Withdraw fee decays linearly over 4 weeks.\\n     * @param user address you want to calculate withdraw fee of\\n     * @return current withdraw fee of the user\\n     */\\n    function _calculateCurrentWithdrawFee(SwapStorage storage self, address user) internal view returns (uint256) {\\n        uint256 endTime = self.depositTimestamp[user] + (4 weeks);\\n        if (endTime > block.timestamp) {\\n            uint256 timeLeftover = endTime - block.timestamp;\\n            return\\n                (self.defaultWithdrawFee * self.withdrawFeeMultiplier[user] * timeLeftover) /\\n                (4 weeks) /\\n                FEE_DENOMINATOR;\\n        }\\n        return 0;\\n    }\\n\\n    function _doTransferIn(IERC20 token, uint256 amount) internal returns (uint256) {\\n        uint256 priorBalance = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        return token.balanceOf(address(this)) - priorBalance;\\n    }\\n\\n    function _sumOf(uint256[] memory x) internal pure returns (uint256 sum) {\\n        sum = 0;\\n        for (uint256 i = 0; i < x.length; i++) {\\n            sum += x[i];\\n        }\\n    }\\n\\n    function _distance(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x - y : y - x;\\n    }\\n}\\n\",\"keccak256\":\"0x641ff2fecfaa90f6dbd1e688aa91041f423c38728295256194b0b2d1add0cc9e\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb7230835a4efbbbebcb5371d121977e859388b33f3ee5d9a7a44fc4de8d6b970\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0xc92c369d1363b5cbec9337ea8921578bd4acd272af2ac9eaf7227a17689f29e9\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event TokenExchange(address indexed buyer, uint256 soldId, uint256 tokensSold, uint256 boughtId, uint256 tokensBought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0xe47d45ba36e1a5e9e044ebb0815b1c4ced235dc5c7b38d30f9fe6d3768d5749f\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xd5f49ed9e5ab4471a4c25f3730f50ed4c29a9bfa9637306f227c2a59a18bbe81\",\"license\":\"MIT\"},\"contracts/libraries/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ERC20/IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7bf66daeb140a455a28ab3c1e03f4eebb5948ccf6000dbb700f6c57bba03a9d4\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, msg.sender).sub(amount, Errors.ERC20_BURN_EXCEEDS_ALLOWANCE);\\n\\n        _approve(account, msg.sender, decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x82fe5fb385cfe74b417e3aaace26a64aa5190b36ea0716ad441484fb444087f8\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xd978150fb13e68cd0b2b4b237d65306f55397437127bea72622d5cd4244ba92b\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        RequiemErrors._require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\n    }\\n}\\n\",\"keccak256\":\"0xa39a2c090cd9727eeca0658c5a3c382f9dcfe581f4d323bb388776c3237c72fd\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        RequiemErrors._require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        uint256 errorCode\\n    ) internal pure returns (uint256) {\\n        RequiemErrors._require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc82c3356797b0e56c4ac77d5554343f66b3b436a18537bdb146e10921605d729\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x37ebaca1c58a9daf307229c45122f12d603a95d1d92c1a8e7648b1910755bfa0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/tokens/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\nimport \\\"../libraries/ERC20Burnable.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../interfaces/IRequiemStableSwap.sol\\\";\\n\\ncontract LPToken is Ownable, ERC20Burnable {\\n    IRequiemStableSwap public swap;\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n        swap = IRequiemStableSwap(msg.sender);\\n    }\\n\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"zeroMintAmount\\\");\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n     * minting and burning. This ensures that swap.updateUserWithdrawFees are called everytime.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20) {\\n        super._beforeTokenTransfer(from, to, amount);\\n        swap.updateUserWithdrawFee(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2f4e27227aca77ab9543f1f7ea0a45e5b14b62177b414e47f18248c49613aac3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61390961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100f05760003560e01c8063159763bb146100f55780631e7e95d31461011b5780632bfe30d01461012e5780637a6cba3c1461014e578063a30355851461016e578063ad30093f14610181578063b52e146f146101a1578063ba2998d9146101b4578063c188e4be146101c7578063c20aace8146101e9578063c685696c146101f1578063c8344c061461021e578063ce055b8d1461023e578063d011f9181461025e578063d36604ac14610266578063d73792a914610279578063e2eba89b14610285578063fa56359714610298575b600080fd5b6101086101033660046131c4565b6102ab565b6040519081526020015b60405180910390f35b6101086101293660046132c0565b6102c3565b81801561013a57600080fd5b5061010861014936600461331a565b6105d5565b81801561015a57600080fd5b5061010861016936600461334c565b61091d565b61010861017c36600461339b565b610fa6565b81801561018d57600080fd5b5061010861019c3660046133b4565b610fb7565b6101086101af36600461339b565b611228565b6101086101c236600461331a565b61123f565b8180156101d357600080fd5b506101e76101e2366004613405565b61134c565b005b610108601281565b8180156101fd57600080fd5b5061021161020c36600461343a565b61135c565b6040516101129190613489565b81801561022a57600080fd5b5061010861023936600461334c565b611600565b81801561024a57600080fd5b506101086102593660046133b4565b611bba565b610108606481565b61010861027436600461339b565b611dff565b6101086402540be40081565b6101086102933660046134cd565b611ec4565b6102116102a6366004613405565b611fa0565b60006102b985858585611fad565b5095945050505050565b825482516000919081146102f25760405162461bcd60e51b81526004016102e9906134ef565b60405180910390fd5b60006102fd866122c8565b9050600061031361030d886123a1565b8361244f565b905060008760030180548060200260200160405190810160405280929190818152602001828054801561036557602002820191906000526020600020905b815481526020019060010190808311610351575b5050505050905060005b8481101561041b5786156103c55787818151811061038f5761038f61351d565b60200260200101518282815181106103a9576103a961351d565b602002602001018181516103bd9190613549565b905250610409565b8781815181106103d7576103d761351d565b60200260200101518282815181106103f1576103f161351d565b602002602001018181516104059190613561565b9052505b8061041381613578565b91505061036f565b50600061048361047d838b60020180548060200260200160405190810160405280929190818152602001828054801561047357602002820191906000526020600020905b81548152602001906001019080831161045f575b50505050506125e8565b8561244f565b905060008960010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105009190613593565b905080610514575094506105ce9350505050565b60008861052a576105258386613561565b610534565b6105348584613561565b9050848b60010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b09190613593565b6105ba90836135ac565b6105c491906135cb565b9750505050505050505b9392505050565b6000808560010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561062d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106519190613593565b9050600081116106735760405162461bcd60e51b81526004016102e9906135ed565b855460018701546040516370a0823160e01b81526001600160a01b03909116906370a08231906106a7903390600401613616565b602060405180830381865afa1580156106c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e89190613593565b8611156107235760405162461bcd60e51b81526020600482015260096024820152683e2062616c616e636560b81b60448201526064016102e9565b818611156107635760405162461bcd60e51b815260206004820152600d60248201526c3e20746f74616c537570706c7960981b60448201526064016102e9565b8085106107a25760405162461bcd60e51b815260206004820152600d60248201526c1d1bdad95b939bdd119bdd5b99609a1b60448201526064016102e9565b6000806107b189338a8a611fad565b92509050858110156107d55760405162461bcd60e51b81526004016102e99061362a565b6402540be4008960050154836107eb91906135ac565b6107f591906135cb565b6107ff9082613549565b8960030188815481106108145761081461351d565b90600052602060002001600082825461082d9190613561565b9091555050600189015460405163079cc67960e41b81526001600160a01b03909116906379cc6790906108669033908c9060040161364e565b600060405180830381600087803b15801561088057600080fd5b505af1158015610894573d6000803e3d6000fd5b505050506108ce33828b6000018a815481106108b2576108b261351d565b6000918252602090912001546001600160a01b0316919061266b565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b825482516000919081146109435760405162461bcd60e51b81526004016102e9906134ef565b6000816001600160401b0381111561095d5761095d6131ff565b604051908082528060200260200182016040528015610986578160200160208202803683370190505b5090506000610994876126c1565b905060008760010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a119190613593565b90506000610a1e896122c8565b905060008215610ada57610ad761030d8b600301805480602002602001604051908101604052809291908181526020018280548015610a7c57602002820191906000526020600020905b815481526020019060010190808311610a68575b50505050508c600201805480602002602001604051908101604052809291908181526020018280548015610473576020028201919060005260206000209081548152602001906001019080831161045f5750505050506125e8565b90505b60008a600301805480602002602001604051908101604052809291908181526020018280548015610b2a57602002820191906000526020600020905b815481526020019060010190808311610b16575b5050505050905060005b87811015610c3a5784610baa5760008b8281518110610b5557610b5561351d565b602002602001015111610baa5760405162461bcd60e51b815260206004820152601e60248201527f696e697469616c4465706f73697452657175697265416c6c546f6b656e73000060448201526064016102e9565b610bff8c6000018281548110610bc257610bc261351d565b9060005260206000200160009054906101000a90046001600160a01b03168c8381518110610bf257610bf261351d565b60200260200101516126f6565b828281518110610c1157610c1161351d565b60200260200101818151610c259190613549565b90525080610c3281613578565b915050610b34565b506000610c9a61047d838e600201805480602002602001604051908101604052809291908181526020018280548015610473576020028201919060005260206000209081548152602001906001019080831161045f5750505050506125e8565b9050828111610cab57610cab613667565b84610cce578151610cc59060038e01906020850190613148565b50809850610eca565b6000805b89811015610e4157610d32858f6003018381548110610cf357610cf361351d565b906000526020600020015485610d0991906135ac565b610d1391906135cb565b858381518110610d2557610d2561351d565b60200260200101516127f6565b91506402540be400610d44838a6135ac565b610d4e91906135cb565b898281518110610d6057610d6061351d565b6020026020010181815250506402540be4008e600501548a8381518110610d8957610d8961351d565b6020026020010151610d9b91906135ac565b610da591906135cb565b848281518110610db757610db761351d565b6020026020010151610dc99190613561565b8e6003018281548110610dde57610dde61351d565b9060005260206000200181905550888181518110610dfe57610dfe61351d565b6020026020010151848281518110610e1857610e1861351d565b60200260200101818151610e2c9190613561565b90525080610e3981613578565b915050610cd2565b50610ea5610e9f848f600201805480602002602001604051908101604052809291908181526020018280548015610473576020028201919060005260206000209081548152602001906001019080831161045f5750505050506125e8565b8661244f565b915083610eb28184613561565b610ebc90886135ac565b610ec691906135cb565b9950505b89891015610eea5760405162461bcd60e51b81526004016102e99061362a565b60018c01546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990610f1e9033908d9060040161364e565b600060405180830381600087803b158015610f3857600080fd5b505af1158015610f4c573d6000803e3d6000fd5b50505050336001600160a01b03167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d604051610f8f94939291906136b8565b60405180910390a250505050505050509392505050565b6000610fb1826122c8565b92915050565b600080876000018781548110610fcf57610fcf61351d565b60009182526020822001546001600160a01b03169150610fee896123a1565b9050610ffa82876126f6565b955060006110598a8a8a8d6002018d815481106110195761101961351d565b90600052602060002001548b61102f91906135ac565b868e815181106110415761104161351d565b60200260200101516110539190613549565b86612818565b90506000600182848b815181106110725761107261351d565b60200260200101516110849190613561565b61108e9190613561565b905060006402540be4008c60040154836110a891906135ac565b6110b291906135cb565b90508b6002018a815481106110c9576110c961351d565b906000526020600020015481836110e09190613561565b6110ea91906135cb565b91508782101561110c5760405162461bcd60e51b81526004016102e99061362a565b888c6003018c815481106111225761112261351d565b90600052602060002001600082825461113b9190613549565b909155505060028c0180548b9081106111565761115661351d565b90600052602060002001546402540be4008d600501548361117791906135ac565b61118191906135cb565b61118b91906135cb565b6111959083613549565b8c6003018b815481106111aa576111aa61351d565b9060005260206000200160008282546111c39190613561565b925050819055506111e487838e6000018d815481106108b2576108b261351d565b866001600160a01b03166000805160206138b48339815191528c8b8d8660405161121194939291906136f1565b60405180910390a2509a9950505050505050505050565b60006064611235836122c8565b610fb191906135cb565b60008061124b866123a1565b905060008660020186815481106112645761126461351d565b90600052602060002001548461127a91906135ac565b82878151811061128c5761128c61351d565b602002602001015161129e9190613549565b905060006112af8888888587612818565b905060008860020187815481106112c8576112c861351d565b9060005260206000200154600183868a815181106112e8576112e861351d565b60200260200101516112fa9190613561565b6113049190613561565b61130e91906135cb565b905060006402540be400828b6004015461132891906135ac565b61133291906135cb565b905061133e8183613561565b9a9950505050505050505050565b611357838383612a53565b505050565b606060008460010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d99190613593565b9050808411156113e857600080fd5b84546000816001600160401b03811115611404576114046131ff565b60405190808252806020026020018201604052801561142d578160200160208202803683370190505b50905061143b873388612bd2565b935060005b84518110156115475785818151811061145b5761145b61351d565b60200260200101518582815181106114755761147561351d565b6020026020010151101561149b5760405162461bcd60e51b81526004016102e99061362a565b8481815181106114ad576114ad61351d565b60200260200101518860030182815481106114ca576114ca61351d565b90600052602060002001546114df9190613561565b8860030182815481106114f4576114f461351d565b9060005260206000200181905550611535338683815181106115185761151861351d565b60200260200101518a60000184815481106108b2576108b261351d565b8061153f81613578565b915050611440565b50600187015460405163079cc67960e41b81526001600160a01b03909116906379cc67909061157c9033908a9060040161364e565b600060405180830381600087803b15801561159657600080fd5b505af11580156115aa573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea9150869050836115df8a88613561565b6040516115ee9392919061370c565b60405180910390a25050509392505050565b825482516000919081146116265760405162461bcd60e51b81526004016102e9906134ef565b6001850154604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015611672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116969190613593565b9050806116b55760405162461bcd60e51b81526004016102e9906135ed565b60006116c0876126c1565b905060006116cd886122c8565b905060008860030180548060200260200160405190810160405280929190818152602001828054801561171f57602002820191906000526020600020905b81548152602001906001019080831161170b575b50505050509050600061173a6117348b6123a1565b8461244f565b905060005b8681101561179c578981815181106117595761175961351d565b60200260200101518382815181106117735761177361351d565b602002602001018181516117879190613561565b9052508061179481613578565b91505061173f565b5060006117fc61047d848d600201805480602002602001604051908101604052809291908181526020018280548015610473576020028201919060005260206000209081548152602001906001019080831161045f5750505050506125e8565b90506000876001600160401b03811115611818576118186131ff565b604051908082528060200260200182016040528015611841578160200160208202803683370190505b50905060005b888110156119c1576000848e60030183815481106118675761186761351d565b90600052602060002001548561187d91906135ac565b61188791906135cb565b905060006118ae8784815181106118a0576118a061351d565b6020026020010151836127f6565b90506402540be4006118c0828b6135ac565b6118ca91906135cb565b8484815181106118dc576118dc61351d565b6020026020010181815250506402540be4008f600501548585815181106119055761190561351d565b602002602001015161191791906135ac565b61192191906135cb565b8784815181106119335761193361351d565b60200260200101516119459190613561565b8f600301848154811061195a5761195a61351d565b906000526020600020018190555083838151811061197a5761197a61351d565b60200260200101518784815181106119945761199461351d565b602002602001018181516119a89190613561565b9052508291506119b9905081613578565b915050611847565b50611a1f610e9f858e600201805480602002602001604051908101604052809291908181526020018280548015610473576020028201919060005260206000209081548152602001906001019080831161045f5750505050506125e8565b91508287611a2d8483613561565b611a3791906135ac565b611a4191906135cb565b985060008911611a5357611a53613667565b611a5d8c33612d9a565b611a6c906402540be400613561565b611a778a6001613549565b611a8191906135ac565b985089891115611aa35760405162461bcd60e51b81526004016102e99061362a565b60018c015460405163079cc67960e41b81526001600160a01b03909116906379cc679090611ad79033908d9060040161364e565b600060405180830381600087803b158015611af157600080fd5b505af1158015611b05573d6000803e3d6000fd5b5050505060005b88811015611b7a578b8181518110611b2657611b2661351d565b6020026020010151600014611b6857611b68338d8381518110611b4b57611b4b61351d565b60200260200101518f60000184815481106108b2576108b261351d565b80611b7281613578565b915050611b0c565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c8385611baa8e8d613561565b604051610f8f94939291906136b8565b600080611bc6886123a1565b90506000886002018881548110611bdf57611bdf61351d565b906000526020600020015486611bf591906135ac565b828981518110611c0757611c0761351d565b6020026020010151611c199190613549565b90506000611c2a8a8a8a8587612818565b90506000600182858b81518110611c4357611c4361351d565b6020026020010151611c559190613561565b611c5f9190613561565b905060006402540be4008c6004015483611c7991906135ac565b611c8391906135cb565b90508b6002018a81548110611c9a57611c9a61351d565b90600052602060002001548183611cb19190613561565b611cbb91906135cb565b915087821015611cdd5760405162461bcd60e51b81526004016102e99061362a565b60008c6002018b81548110611cf457611cf461351d565b90600052602060002001546402540be4008e6005015484611d1591906135ac565b611d1f91906135cb565b611d2991906135cb565b9050898d6003018d81548110611d4157611d4161351d565b906000526020600020016000828254611d5a9190613549565b90915550611d6a90508184613549565b8d6003018c81548110611d7f57611d7f61351d565b906000526020600020016000828254611d989190613561565b92505081905550611db988848f6000018e815481106108b2576108b261351d565b876001600160a01b03166000805160206138b48339815191528d8c8e87604051611de694939291906136f1565b60405180910390a250909b9a5050505050505050505050565b600080611e1c611e0e846123a1565b611e17856122c8565b61244f565b905060008360010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e999190613593565b905080611ea86012600a613826565b611eb290846135ac565b611ebc91906135cb565b949350505050565b81546000908210611ee75760405162461bcd60e51b81526004016102e990613832565b826003018281548110611efc57611efc61351d565b9060005260206000200154836000018381548110611f1c57611f1c61351d565b6000918252602090912001546040516370a0823160e01b81526001600160a01b03909116906370a0823190611f55903090600401613616565b602060405180830381865afa158015611f72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f969190613593565b6105ce9190613561565b6060611ebc848484612bd2565b835460009081908310611fd25760405162461bcd60e51b81526004016102e990613832565b6000611fdd876122c8565b90506000611fea886123a1565b90506000611ff8828461244f565b905060008960010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612051573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120759190613593565b61207f838a6135ac565b61208991906135cb565b6120939083613561565b905060006120a48b868a8786612e46565b90508360006120b28d6126c1565b905060005b8d548110156121ba5760008b82141561210c578487878a85815181106120df576120df61351d565b60200260200101516120f191906135ac565b6120fb91906135cb565b6121059190613561565b9050612163565b86868984815181106121205761212061351d565b602002602001015161213291906135ac565b61213c91906135cb565b88838151811061214e5761214e61351d565b60200260200101516121609190613561565b90505b6402540be40061217382856135ac565b61217d91906135cb565b84838151811061218f5761218f61351d565b602002602001018181516121a39190613561565b9052508190506121b281613578565b9150506120b7565b506121c88d888c8588612e46565b828b815181106121da576121da61351d565b60200260200101516121ec9190613561565b98508c6002018a815481106122035761220361351d565b906000526020600020015460018a61221b9190613561565b61222591906135cb565b9850888d6002018b8154811061223d5761223d61351d565b906000526020600020015484888d8151811061225b5761225b61351d565b602002602001015161226d9190613561565b61227791906135cb565b6122819190613561565b97506402540be4006122938e8e612d9a565b6122a2906402540be400613561565b6122ac908b6135ac565b6122b691906135cb565b98505050505050505094509492505050565b6000816009015442106122dd57506007015490565b81600601548260070154111561234757816008015482600901546123019190613561565b60088301546123109042613561565b836006015484600701546123249190613561565b61232e91906135ac565b61233891906135cb565b8260060154610fb19190613549565b8160080154826009015461235b9190613561565b600883015461236a9042613561565b8360070154846006015461237e9190613561565b61238891906135ac565b61239291906135cb565b8260060154610fb19190613561565b6060610fb1826003018054806020026020016040519081016040528092919081815260200182805480156123f457602002820191906000526020600020905b8154815260200190600101908083116123e0575b505050505083600201805480602002602001604051908101604052809291908181526020018280548015610473576020028201919060005260206000209081548152602001906001019080831161045f5750505050506125e8565b81516000908161245e85612fba565b90508061247057600092505050610fb1565b6000818161247e85886135ac565b905060005b6101008110156125a2578260005b8a518110156124e757878b82815181106124ad576124ad61351d565b60200260200101516124bf91906135ac565b6124c986846135ac565b6124d391906135cb565b9150806124df81613578565b915050612491565b50839450808760016124f99190613549565b61250391906135ac565b6064856125108287613561565b61251a91906135ac565b61252491906135cb565b61252e9190613549565b8461253989846135ac565b60646125458a886135ac565b61254f91906135cb565b6125599190613549565b61256391906135ac565b61256d91906135cb565b9350600161257b85876127f6565b1161258f5783975050505050505050610fb1565b508061259a81613578565b915050612483565b5060405162461bcd60e51b815260206004820152601a6024820152791a5b9d985c9a585b9d10d85b18dd5b185d1a5bdb91985a5b195960321b60448201526064016102e9565b606060005b8351811015612663578381815181106126085761260861351d565b60200260200101518382815181106126225761262261351d565b602002602001015161263491906135ac565b8382815181106126465761264661351d565b60209081029190910101528061265b81613578565b9150506125ed565b509092915050565b6113578363a9059cbb60e01b848460405160240161268a92919061364e565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613006565b80546000906126d1600182613561565b6126dc9060046135ac565b8184600401546126ec91906135ac565b6105ce91906135cb565b600080836001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016127259190613616565b602060405180830381865afa158015612742573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127669190613593565b905061277d6001600160a01b0385163330866130ab565b6040516370a0823160e01b815281906001600160a01b038616906370a08231906127ab903090600401613616565b602060405180830381865afa1580156127c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ec9190613593565b611ebc9190613561565b600081831161280e576128098383613561565b6105ce565b6105ce8284613561565b6000838514156128565760405162461bcd60e51b815260206004820152600960248201526839b0b6b2aa37b5b2b760b91b60448201526064016102e9565b8554808610801561286657508085105b6128825760405162461bcd60e51b81526004016102e990613832565b600061288d886122c8565b9050600061289b83836135ac565b905060006128a9868461244f565b9050600081815b86811015612931578a8114156128c55761291f565b60008c82146128ed578982815181106128e0576128e061351d565b60200260200101516128ef565b8a5b90506128fb8185613549565b935061290788826135ac565b61291186856135ac565b61291b91906135cb565b9250505b8061292981613578565b9150506128b0565b5061293c86856135ac565b606461294885846135ac565b61295291906135ac565b61295c91906135cb565b905060008461296c6064866135ac565b61297691906135cb565b6129809084613549565b9050600084815b610100811015612a0c5781925086848360026129a391906135ac565b6129ad9190613549565b6129b79190613561565b856129c284806135ac565b6129cc9190613549565b6129d691906135cb565b915060016129e484846127f6565b116129fa57509850612a4a975050505050505050565b80612a0481613578565b915050612987565b5060405162461bcd60e51b81526020600482015260126024820152711e50d85b18dd5b185d1a5bdb91985a5b195960721b60448201526064016102e9565b95945050505050565b6001600160a01b038216612a6657505050565b600a830154612a96576001600160a01b0382166000908152600c8401602052604090206402540be4009055612bb2565b6000612aa28484612d9a565b60018501546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612ada908790600401613616565b602060405180830381865afa158015612af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1b9190613593565b600a860154909150612b2d8285613549565b612b3791906135ac565b15612baf57600a850154612b4b8285613549565b612b5591906135ac565b6402540be40086600a015485612b6b91906135ac565b612b7585856135ac565b612b7f9190613549565b612b8991906135ac565b612b9391906135cb565b6001600160a01b0385166000908152600c870160205260409020555b50505b506001600160a01b03166000908152600b90910160205260409020429055565b606060008460010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4f9190613593565b905080831115612c9e5760405162461bcd60e51b815260206004820152601a60248201527943616e6e6f742065786365656420746f74616c20737570706c7960301b60448201526064016102e9565b60006402540be400612cb08787612d9a565b612cbf906402540be400613561565b612cc990866135ac565b612cd391906135cb565b86549091506000906001600160401b03811115612cf257612cf26131ff565b604051908082528060200260200182016040528015612d1b578160200160208202803683370190505b50905060005b8754811015612d8f578383896003018381548110612d4157612d4161351d565b9060005260206000200154612d5691906135ac565b612d6091906135cb565b828281518110612d7257612d7261351d565b602090810291909101015280612d8781613578565b915050612d21565b509695505050505050565b6001600160a01b0381166000908152600b830160205260408120548190612dc4906224ea00613549565b905042811115612e3c576000612dda4283613561565b6001600160a01b0385166000908152600c87016020526040902054600a8701549192506402540be400916224ea00918491612e1591906135ac565b612e1f91906135ac565b612e2991906135cb565b612e3391906135cb565b92505050610fb1565b5060009392505050565b8454600090808510612e5a57612e5a613667565b6000612e6682886135ac565b90508360008080805b86811015612ee1578a811415612e8457612ecf565b898181518110612e9657612e9661351d565b602002602001015192508284612eac9190613549565b9350612eb887846135ac565b612ec28a876135ac565b612ecc91906135cb565b94505b80612ed981613578565b915050612e6f565b50612eec86866135ac565b6064612ef88a876135ac565b612f0291906135ac565b612f0c91906135cb565b9350600085612f1c60648b6135ac565b612f2691906135cb565b612f309085613549565b90508860005b6101008110156125a2578193508a83836002612f5291906135ac565b612f5c9190613549565b612f669190613561565b87612f7184806135ac565b612f7b9190613549565b612f8591906135cb565b91506001612f9385846127f6565b11612fa857509750612a4a9650505050505050565b80612fb281613578565b915050612f36565b6000805b825181101561300057828181518110612fd957612fd961351d565b602002602001015182612fec9190613549565b915080612ff881613578565b915050612fbe565b50919050565b600080836001600160a01b031683604051613021919061385b565b6000604051808303816000865af19150503d806000811461305e576040519150601f19603f3d011682016040523d82523d6000602084013e613063565b606091505b5091509150600082141561307b573d6000803e3d6000fd5b6130a581516000148061309d57508180602001905181019061309d9190613896565b6101a26130e3565b50505050565b6040516001600160a01b03808516602483015283166044820152606481018290526130a59085906323b872dd60e01b9060840161268a565b816130f1576130f1816130f5565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b828054828255906000526020600020908101928215613183579160200282015b82811115613183578251825591602001919060010190613168565b5061318f929150613193565b5090565b5b8082111561318f5760008155600101613194565b80356001600160a01b03811681146131bf57600080fd5b919050565b600080600080608085870312156131da57600080fd5b843593506131ea602086016131a8565b93969395505050506040820135916060013590565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261322657600080fd5b813560206001600160401b0380831115613242576132426131ff565b8260051b604051601f19603f83011681018181108482111715613267576132676131ff565b60405293845285810183019383810192508785111561328557600080fd5b83870191505b848210156132a45781358352918301919083019061328b565b979650505050505050565b80151581146132bd57600080fd5b50565b6000806000606084860312156132d557600080fd5b8335925060208401356001600160401b038111156132f257600080fd5b6132fe86828701613215565b925050604084013561330f816132af565b809150509250925092565b6000806000806080858703121561333057600080fd5b5050823594602084013594506040840135936060013592509050565b60008060006060848603121561336157600080fd5b8335925060208401356001600160401b0381111561337e57600080fd5b61338a86828701613215565b925050604084013590509250925092565b6000602082840312156133ad57600080fd5b5035919050565b60008060008060008060c087890312156133cd57600080fd5b86359550602087013594506040870135935060608701359250608087013591506133f960a088016131a8565b90509295509295509295565b60008060006060848603121561341a57600080fd5b8335925061342a602085016131a8565b9150604084013590509250925092565b60008060006060848603121561344f57600080fd5b833592506020840135915060408401356001600160401b0381111561347357600080fd5b61347f86828701613215565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156134c1578351835292840192918401916001016134a5565b50909695505050505050565b600080604083850312156134e057600080fd5b50508035926020909101359150565b6020808252601490820152730d2dcecc2d8d2c882dadeeadce8e698cadccee8d60631b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561355c5761355c613533565b500190565b60008282101561357357613573613533565b500390565b600060001982141561358c5761358c613533565b5060010190565b6000602082840312156135a557600080fd5b5051919050565b60008160001904831182151516156135c6576135c6613533565b500290565b6000826135e857634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600f908201526e0746f74616c537570706c79203d203608c1b604082015260600190565b6001600160a01b0391909116815260200190565b6020808252600a90820152693e20736c69707061676560b01b604082015260600190565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052600160045260246000fd5b600081518084526020808501945080840160005b838110156136ad57815187529582019590820190600101613691565b509495945050505050565b6080815260006136cb608083018761367d565b82810360208401526136dd818761367d565b604084019590955250506060015292915050565b93845260208401929092526040830152606082015260800190565b60608152600061371f606083018661367d565b8281036020840152613731818661367d565b915050826040830152949350505050565b600181815b8085111561377d57816000190482111561376357613763613533565b8085161561377057918102915b93841c9390800290613747565b509250929050565b60008261379457506001610fb1565b816137a157506000610fb1565b81600181146137b757600281146137c1576137dd565b6001915050610fb1565b60ff8411156137d2576137d2613533565b50506001821b610fb1565b5060208310610133831016604e8410600b8410161715613800575081810a610fb1565b61380a8383613742565b806000190482111561381e5761381e613533565b029392505050565b60006105ce8383613785565b6020808252600f908201526e696e6465784f75744f6652616e676560881b604082015260600190565b6000825160005b8181101561387c5760208186018101518583015201613862565b8181111561388b576000828501525b509190910192915050565b6000602082840312156138a857600080fd5b81516105ce816132af56feb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc98a26469706673582212202f392db1000f40cdc6d7ec21ece95e39548e43138614e7ce9387a2b11b94ee3264736f6c634300080a0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100f05760003560e01c8063159763bb146100f55780631e7e95d31461011b5780632bfe30d01461012e5780637a6cba3c1461014e578063a30355851461016e578063ad30093f14610181578063b52e146f146101a1578063ba2998d9146101b4578063c188e4be146101c7578063c20aace8146101e9578063c685696c146101f1578063c8344c061461021e578063ce055b8d1461023e578063d011f9181461025e578063d36604ac14610266578063d73792a914610279578063e2eba89b14610285578063fa56359714610298575b600080fd5b6101086101033660046131c4565b6102ab565b6040519081526020015b60405180910390f35b6101086101293660046132c0565b6102c3565b81801561013a57600080fd5b5061010861014936600461331a565b6105d5565b81801561015a57600080fd5b5061010861016936600461334c565b61091d565b61010861017c36600461339b565b610fa6565b81801561018d57600080fd5b5061010861019c3660046133b4565b610fb7565b6101086101af36600461339b565b611228565b6101086101c236600461331a565b61123f565b8180156101d357600080fd5b506101e76101e2366004613405565b61134c565b005b610108601281565b8180156101fd57600080fd5b5061021161020c36600461343a565b61135c565b6040516101129190613489565b81801561022a57600080fd5b5061010861023936600461334c565b611600565b81801561024a57600080fd5b506101086102593660046133b4565b611bba565b610108606481565b61010861027436600461339b565b611dff565b6101086402540be40081565b6101086102933660046134cd565b611ec4565b6102116102a6366004613405565b611fa0565b60006102b985858585611fad565b5095945050505050565b825482516000919081146102f25760405162461bcd60e51b81526004016102e9906134ef565b60405180910390fd5b60006102fd866122c8565b9050600061031361030d886123a1565b8361244f565b905060008760030180548060200260200160405190810160405280929190818152602001828054801561036557602002820191906000526020600020905b815481526020019060010190808311610351575b5050505050905060005b8481101561041b5786156103c55787818151811061038f5761038f61351d565b60200260200101518282815181106103a9576103a961351d565b602002602001018181516103bd9190613549565b905250610409565b8781815181106103d7576103d761351d565b60200260200101518282815181106103f1576103f161351d565b602002602001018181516104059190613561565b9052505b8061041381613578565b91505061036f565b50600061048361047d838b60020180548060200260200160405190810160405280929190818152602001828054801561047357602002820191906000526020600020905b81548152602001906001019080831161045f575b50505050506125e8565b8561244f565b905060008960010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105009190613593565b905080610514575094506105ce9350505050565b60008861052a576105258386613561565b610534565b6105348584613561565b9050848b60010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b09190613593565b6105ba90836135ac565b6105c491906135cb565b9750505050505050505b9392505050565b6000808560010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561062d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106519190613593565b9050600081116106735760405162461bcd60e51b81526004016102e9906135ed565b855460018701546040516370a0823160e01b81526001600160a01b03909116906370a08231906106a7903390600401613616565b602060405180830381865afa1580156106c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e89190613593565b8611156107235760405162461bcd60e51b81526020600482015260096024820152683e2062616c616e636560b81b60448201526064016102e9565b818611156107635760405162461bcd60e51b815260206004820152600d60248201526c3e20746f74616c537570706c7960981b60448201526064016102e9565b8085106107a25760405162461bcd60e51b815260206004820152600d60248201526c1d1bdad95b939bdd119bdd5b99609a1b60448201526064016102e9565b6000806107b189338a8a611fad565b92509050858110156107d55760405162461bcd60e51b81526004016102e99061362a565b6402540be4008960050154836107eb91906135ac565b6107f591906135cb565b6107ff9082613549565b8960030188815481106108145761081461351d565b90600052602060002001600082825461082d9190613561565b9091555050600189015460405163079cc67960e41b81526001600160a01b03909116906379cc6790906108669033908c9060040161364e565b600060405180830381600087803b15801561088057600080fd5b505af1158015610894573d6000803e3d6000fd5b505050506108ce33828b6000018a815481106108b2576108b261351d565b6000918252602090912001546001600160a01b0316919061266b565b60408051888152602081018a905290810182905233907f5ad056f2e28a8cec232015406b843668c1e36cda598127ec3b8c59b8c72773a09060600160405180910390a298975050505050505050565b825482516000919081146109435760405162461bcd60e51b81526004016102e9906134ef565b6000816001600160401b0381111561095d5761095d6131ff565b604051908082528060200260200182016040528015610986578160200160208202803683370190505b5090506000610994876126c1565b905060008760010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a119190613593565b90506000610a1e896122c8565b905060008215610ada57610ad761030d8b600301805480602002602001604051908101604052809291908181526020018280548015610a7c57602002820191906000526020600020905b815481526020019060010190808311610a68575b50505050508c600201805480602002602001604051908101604052809291908181526020018280548015610473576020028201919060005260206000209081548152602001906001019080831161045f5750505050506125e8565b90505b60008a600301805480602002602001604051908101604052809291908181526020018280548015610b2a57602002820191906000526020600020905b815481526020019060010190808311610b16575b5050505050905060005b87811015610c3a5784610baa5760008b8281518110610b5557610b5561351d565b602002602001015111610baa5760405162461bcd60e51b815260206004820152601e60248201527f696e697469616c4465706f73697452657175697265416c6c546f6b656e73000060448201526064016102e9565b610bff8c6000018281548110610bc257610bc261351d565b9060005260206000200160009054906101000a90046001600160a01b03168c8381518110610bf257610bf261351d565b60200260200101516126f6565b828281518110610c1157610c1161351d565b60200260200101818151610c259190613549565b90525080610c3281613578565b915050610b34565b506000610c9a61047d838e600201805480602002602001604051908101604052809291908181526020018280548015610473576020028201919060005260206000209081548152602001906001019080831161045f5750505050506125e8565b9050828111610cab57610cab613667565b84610cce578151610cc59060038e01906020850190613148565b50809850610eca565b6000805b89811015610e4157610d32858f6003018381548110610cf357610cf361351d565b906000526020600020015485610d0991906135ac565b610d1391906135cb565b858381518110610d2557610d2561351d565b60200260200101516127f6565b91506402540be400610d44838a6135ac565b610d4e91906135cb565b898281518110610d6057610d6061351d565b6020026020010181815250506402540be4008e600501548a8381518110610d8957610d8961351d565b6020026020010151610d9b91906135ac565b610da591906135cb565b848281518110610db757610db761351d565b6020026020010151610dc99190613561565b8e6003018281548110610dde57610dde61351d565b9060005260206000200181905550888181518110610dfe57610dfe61351d565b6020026020010151848281518110610e1857610e1861351d565b60200260200101818151610e2c9190613561565b90525080610e3981613578565b915050610cd2565b50610ea5610e9f848f600201805480602002602001604051908101604052809291908181526020018280548015610473576020028201919060005260206000209081548152602001906001019080831161045f5750505050506125e8565b8661244f565b915083610eb28184613561565b610ebc90886135ac565b610ec691906135cb565b9950505b89891015610eea5760405162461bcd60e51b81526004016102e99061362a565b60018c01546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990610f1e9033908d9060040161364e565b600060405180830381600087803b158015610f3857600080fd5b505af1158015610f4c573d6000803e3d6000fd5b50505050336001600160a01b03167f189c623b666b1b45b83d7178f39b8c087cb09774317ca2f53c2d3c3726f222a28c89848d604051610f8f94939291906136b8565b60405180910390a250505050505050509392505050565b6000610fb1826122c8565b92915050565b600080876000018781548110610fcf57610fcf61351d565b60009182526020822001546001600160a01b03169150610fee896123a1565b9050610ffa82876126f6565b955060006110598a8a8a8d6002018d815481106110195761101961351d565b90600052602060002001548b61102f91906135ac565b868e815181106110415761104161351d565b60200260200101516110539190613549565b86612818565b90506000600182848b815181106110725761107261351d565b60200260200101516110849190613561565b61108e9190613561565b905060006402540be4008c60040154836110a891906135ac565b6110b291906135cb565b90508b6002018a815481106110c9576110c961351d565b906000526020600020015481836110e09190613561565b6110ea91906135cb565b91508782101561110c5760405162461bcd60e51b81526004016102e99061362a565b888c6003018c815481106111225761112261351d565b90600052602060002001600082825461113b9190613549565b909155505060028c0180548b9081106111565761115661351d565b90600052602060002001546402540be4008d600501548361117791906135ac565b61118191906135cb565b61118b91906135cb565b6111959083613549565b8c6003018b815481106111aa576111aa61351d565b9060005260206000200160008282546111c39190613561565b925050819055506111e487838e6000018d815481106108b2576108b261351d565b866001600160a01b03166000805160206138b48339815191528c8b8d8660405161121194939291906136f1565b60405180910390a2509a9950505050505050505050565b60006064611235836122c8565b610fb191906135cb565b60008061124b866123a1565b905060008660020186815481106112645761126461351d565b90600052602060002001548461127a91906135ac565b82878151811061128c5761128c61351d565b602002602001015161129e9190613549565b905060006112af8888888587612818565b905060008860020187815481106112c8576112c861351d565b9060005260206000200154600183868a815181106112e8576112e861351d565b60200260200101516112fa9190613561565b6113049190613561565b61130e91906135cb565b905060006402540be400828b6004015461132891906135ac565b61133291906135cb565b905061133e8183613561565b9a9950505050505050505050565b611357838383612a53565b505050565b606060008460010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d99190613593565b9050808411156113e857600080fd5b84546000816001600160401b03811115611404576114046131ff565b60405190808252806020026020018201604052801561142d578160200160208202803683370190505b50905061143b873388612bd2565b935060005b84518110156115475785818151811061145b5761145b61351d565b60200260200101518582815181106114755761147561351d565b6020026020010151101561149b5760405162461bcd60e51b81526004016102e99061362a565b8481815181106114ad576114ad61351d565b60200260200101518860030182815481106114ca576114ca61351d565b90600052602060002001546114df9190613561565b8860030182815481106114f4576114f461351d565b9060005260206000200181905550611535338683815181106115185761151861351d565b60200260200101518a60000184815481106108b2576108b261351d565b8061153f81613578565b915050611440565b50600187015460405163079cc67960e41b81526001600160a01b03909116906379cc67909061157c9033908a9060040161364e565b600060405180830381600087803b15801561159657600080fd5b505af11580156115aa573d6000803e3d6000fd5b503392507f347ad828e58cbe534d8f6b67985d791360756b18f0d95fd9f197a66cc46480ea9150869050836115df8a88613561565b6040516115ee9392919061370c565b60405180910390a25050509392505050565b825482516000919081146116265760405162461bcd60e51b81526004016102e9906134ef565b6001850154604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015611672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116969190613593565b9050806116b55760405162461bcd60e51b81526004016102e9906135ed565b60006116c0876126c1565b905060006116cd886122c8565b905060008860030180548060200260200160405190810160405280929190818152602001828054801561171f57602002820191906000526020600020905b81548152602001906001019080831161170b575b50505050509050600061173a6117348b6123a1565b8461244f565b905060005b8681101561179c578981815181106117595761175961351d565b60200260200101518382815181106117735761177361351d565b602002602001018181516117879190613561565b9052508061179481613578565b91505061173f565b5060006117fc61047d848d600201805480602002602001604051908101604052809291908181526020018280548015610473576020028201919060005260206000209081548152602001906001019080831161045f5750505050506125e8565b90506000876001600160401b03811115611818576118186131ff565b604051908082528060200260200182016040528015611841578160200160208202803683370190505b50905060005b888110156119c1576000848e60030183815481106118675761186761351d565b90600052602060002001548561187d91906135ac565b61188791906135cb565b905060006118ae8784815181106118a0576118a061351d565b6020026020010151836127f6565b90506402540be4006118c0828b6135ac565b6118ca91906135cb565b8484815181106118dc576118dc61351d565b6020026020010181815250506402540be4008f600501548585815181106119055761190561351d565b602002602001015161191791906135ac565b61192191906135cb565b8784815181106119335761193361351d565b60200260200101516119459190613561565b8f600301848154811061195a5761195a61351d565b906000526020600020018190555083838151811061197a5761197a61351d565b60200260200101518784815181106119945761199461351d565b602002602001018181516119a89190613561565b9052508291506119b9905081613578565b915050611847565b50611a1f610e9f858e600201805480602002602001604051908101604052809291908181526020018280548015610473576020028201919060005260206000209081548152602001906001019080831161045f5750505050506125e8565b91508287611a2d8483613561565b611a3791906135ac565b611a4191906135cb565b985060008911611a5357611a53613667565b611a5d8c33612d9a565b611a6c906402540be400613561565b611a778a6001613549565b611a8191906135ac565b985089891115611aa35760405162461bcd60e51b81526004016102e99061362a565b60018c015460405163079cc67960e41b81526001600160a01b03909116906379cc679090611ad79033908d9060040161364e565b600060405180830381600087803b158015611af157600080fd5b505af1158015611b05573d6000803e3d6000fd5b5050505060005b88811015611b7a578b8181518110611b2657611b2661351d565b6020026020010151600014611b6857611b68338d8381518110611b4b57611b4b61351d565b60200260200101518f60000184815481106108b2576108b261351d565b80611b7281613578565b915050611b0c565b50337f3631c28b1f9dd213e0319fb167b554d76b6c283a41143eb400a0d1adb1af17558c8385611baa8e8d613561565b604051610f8f94939291906136b8565b600080611bc6886123a1565b90506000886002018881548110611bdf57611bdf61351d565b906000526020600020015486611bf591906135ac565b828981518110611c0757611c0761351d565b6020026020010151611c199190613549565b90506000611c2a8a8a8a8587612818565b90506000600182858b81518110611c4357611c4361351d565b6020026020010151611c559190613561565b611c5f9190613561565b905060006402540be4008c6004015483611c7991906135ac565b611c8391906135cb565b90508b6002018a81548110611c9a57611c9a61351d565b90600052602060002001548183611cb19190613561565b611cbb91906135cb565b915087821015611cdd5760405162461bcd60e51b81526004016102e99061362a565b60008c6002018b81548110611cf457611cf461351d565b90600052602060002001546402540be4008e6005015484611d1591906135ac565b611d1f91906135cb565b611d2991906135cb565b9050898d6003018d81548110611d4157611d4161351d565b906000526020600020016000828254611d5a9190613549565b90915550611d6a90508184613549565b8d6003018c81548110611d7f57611d7f61351d565b906000526020600020016000828254611d989190613561565b92505081905550611db988848f6000018e815481106108b2576108b261351d565b876001600160a01b03166000805160206138b48339815191528d8c8e87604051611de694939291906136f1565b60405180910390a250909b9a5050505050505050505050565b600080611e1c611e0e846123a1565b611e17856122c8565b61244f565b905060008360010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e999190613593565b905080611ea86012600a613826565b611eb290846135ac565b611ebc91906135cb565b949350505050565b81546000908210611ee75760405162461bcd60e51b81526004016102e990613832565b826003018281548110611efc57611efc61351d565b9060005260206000200154836000018381548110611f1c57611f1c61351d565b6000918252602090912001546040516370a0823160e01b81526001600160a01b03909116906370a0823190611f55903090600401613616565b602060405180830381865afa158015611f72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f969190613593565b6105ce9190613561565b6060611ebc848484612bd2565b835460009081908310611fd25760405162461bcd60e51b81526004016102e990613832565b6000611fdd876122c8565b90506000611fea886123a1565b90506000611ff8828461244f565b905060008960010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612051573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120759190613593565b61207f838a6135ac565b61208991906135cb565b6120939083613561565b905060006120a48b868a8786612e46565b90508360006120b28d6126c1565b905060005b8d548110156121ba5760008b82141561210c578487878a85815181106120df576120df61351d565b60200260200101516120f191906135ac565b6120fb91906135cb565b6121059190613561565b9050612163565b86868984815181106121205761212061351d565b602002602001015161213291906135ac565b61213c91906135cb565b88838151811061214e5761214e61351d565b60200260200101516121609190613561565b90505b6402540be40061217382856135ac565b61217d91906135cb565b84838151811061218f5761218f61351d565b602002602001018181516121a39190613561565b9052508190506121b281613578565b9150506120b7565b506121c88d888c8588612e46565b828b815181106121da576121da61351d565b60200260200101516121ec9190613561565b98508c6002018a815481106122035761220361351d565b906000526020600020015460018a61221b9190613561565b61222591906135cb565b9850888d6002018b8154811061223d5761223d61351d565b906000526020600020015484888d8151811061225b5761225b61351d565b602002602001015161226d9190613561565b61227791906135cb565b6122819190613561565b97506402540be4006122938e8e612d9a565b6122a2906402540be400613561565b6122ac908b6135ac565b6122b691906135cb565b98505050505050505094509492505050565b6000816009015442106122dd57506007015490565b81600601548260070154111561234757816008015482600901546123019190613561565b60088301546123109042613561565b836006015484600701546123249190613561565b61232e91906135ac565b61233891906135cb565b8260060154610fb19190613549565b8160080154826009015461235b9190613561565b600883015461236a9042613561565b8360070154846006015461237e9190613561565b61238891906135ac565b61239291906135cb565b8260060154610fb19190613561565b6060610fb1826003018054806020026020016040519081016040528092919081815260200182805480156123f457602002820191906000526020600020905b8154815260200190600101908083116123e0575b505050505083600201805480602002602001604051908101604052809291908181526020018280548015610473576020028201919060005260206000209081548152602001906001019080831161045f5750505050506125e8565b81516000908161245e85612fba565b90508061247057600092505050610fb1565b6000818161247e85886135ac565b905060005b6101008110156125a2578260005b8a518110156124e757878b82815181106124ad576124ad61351d565b60200260200101516124bf91906135ac565b6124c986846135ac565b6124d391906135cb565b9150806124df81613578565b915050612491565b50839450808760016124f99190613549565b61250391906135ac565b6064856125108287613561565b61251a91906135ac565b61252491906135cb565b61252e9190613549565b8461253989846135ac565b60646125458a886135ac565b61254f91906135cb565b6125599190613549565b61256391906135ac565b61256d91906135cb565b9350600161257b85876127f6565b1161258f5783975050505050505050610fb1565b508061259a81613578565b915050612483565b5060405162461bcd60e51b815260206004820152601a6024820152791a5b9d985c9a585b9d10d85b18dd5b185d1a5bdb91985a5b195960321b60448201526064016102e9565b606060005b8351811015612663578381815181106126085761260861351d565b60200260200101518382815181106126225761262261351d565b602002602001015161263491906135ac565b8382815181106126465761264661351d565b60209081029190910101528061265b81613578565b9150506125ed565b509092915050565b6113578363a9059cbb60e01b848460405160240161268a92919061364e565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613006565b80546000906126d1600182613561565b6126dc9060046135ac565b8184600401546126ec91906135ac565b6105ce91906135cb565b600080836001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016127259190613616565b602060405180830381865afa158015612742573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127669190613593565b905061277d6001600160a01b0385163330866130ab565b6040516370a0823160e01b815281906001600160a01b038616906370a08231906127ab903090600401613616565b602060405180830381865afa1580156127c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ec9190613593565b611ebc9190613561565b600081831161280e576128098383613561565b6105ce565b6105ce8284613561565b6000838514156128565760405162461bcd60e51b815260206004820152600960248201526839b0b6b2aa37b5b2b760b91b60448201526064016102e9565b8554808610801561286657508085105b6128825760405162461bcd60e51b81526004016102e990613832565b600061288d886122c8565b9050600061289b83836135ac565b905060006128a9868461244f565b9050600081815b86811015612931578a8114156128c55761291f565b60008c82146128ed578982815181106128e0576128e061351d565b60200260200101516128ef565b8a5b90506128fb8185613549565b935061290788826135ac565b61291186856135ac565b61291b91906135cb565b9250505b8061292981613578565b9150506128b0565b5061293c86856135ac565b606461294885846135ac565b61295291906135ac565b61295c91906135cb565b905060008461296c6064866135ac565b61297691906135cb565b6129809084613549565b9050600084815b610100811015612a0c5781925086848360026129a391906135ac565b6129ad9190613549565b6129b79190613561565b856129c284806135ac565b6129cc9190613549565b6129d691906135cb565b915060016129e484846127f6565b116129fa57509850612a4a975050505050505050565b80612a0481613578565b915050612987565b5060405162461bcd60e51b81526020600482015260126024820152711e50d85b18dd5b185d1a5bdb91985a5b195960721b60448201526064016102e9565b95945050505050565b6001600160a01b038216612a6657505050565b600a830154612a96576001600160a01b0382166000908152600c8401602052604090206402540be4009055612bb2565b6000612aa28484612d9a565b60018501546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612ada908790600401613616565b602060405180830381865afa158015612af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1b9190613593565b600a860154909150612b2d8285613549565b612b3791906135ac565b15612baf57600a850154612b4b8285613549565b612b5591906135ac565b6402540be40086600a015485612b6b91906135ac565b612b7585856135ac565b612b7f9190613549565b612b8991906135ac565b612b9391906135cb565b6001600160a01b0385166000908152600c870160205260409020555b50505b506001600160a01b03166000908152600b90910160205260409020429055565b606060008460010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4f9190613593565b905080831115612c9e5760405162461bcd60e51b815260206004820152601a60248201527943616e6e6f742065786365656420746f74616c20737570706c7960301b60448201526064016102e9565b60006402540be400612cb08787612d9a565b612cbf906402540be400613561565b612cc990866135ac565b612cd391906135cb565b86549091506000906001600160401b03811115612cf257612cf26131ff565b604051908082528060200260200182016040528015612d1b578160200160208202803683370190505b50905060005b8754811015612d8f578383896003018381548110612d4157612d4161351d565b9060005260206000200154612d5691906135ac565b612d6091906135cb565b828281518110612d7257612d7261351d565b602090810291909101015280612d8781613578565b915050612d21565b509695505050505050565b6001600160a01b0381166000908152600b830160205260408120548190612dc4906224ea00613549565b905042811115612e3c576000612dda4283613561565b6001600160a01b0385166000908152600c87016020526040902054600a8701549192506402540be400916224ea00918491612e1591906135ac565b612e1f91906135ac565b612e2991906135cb565b612e3391906135cb565b92505050610fb1565b5060009392505050565b8454600090808510612e5a57612e5a613667565b6000612e6682886135ac565b90508360008080805b86811015612ee1578a811415612e8457612ecf565b898181518110612e9657612e9661351d565b602002602001015192508284612eac9190613549565b9350612eb887846135ac565b612ec28a876135ac565b612ecc91906135cb565b94505b80612ed981613578565b915050612e6f565b50612eec86866135ac565b6064612ef88a876135ac565b612f0291906135ac565b612f0c91906135cb565b9350600085612f1c60648b6135ac565b612f2691906135cb565b612f309085613549565b90508860005b6101008110156125a2578193508a83836002612f5291906135ac565b612f5c9190613549565b612f669190613561565b87612f7184806135ac565b612f7b9190613549565b612f8591906135cb565b91506001612f9385846127f6565b11612fa857509750612a4a9650505050505050565b80612fb281613578565b915050612f36565b6000805b825181101561300057828181518110612fd957612fd961351d565b602002602001015182612fec9190613549565b915080612ff881613578565b915050612fbe565b50919050565b600080836001600160a01b031683604051613021919061385b565b6000604051808303816000865af19150503d806000811461305e576040519150601f19603f3d011682016040523d82523d6000602084013e613063565b606091505b5091509150600082141561307b573d6000803e3d6000fd5b6130a581516000148061309d57508180602001905181019061309d9190613896565b6101a26130e3565b50505050565b6040516001600160a01b03808516602483015283166044820152606481018290526130a59085906323b872dd60e01b9060840161268a565b816130f1576130f1816130f5565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b828054828255906000526020600020908101928215613183579160200282015b82811115613183578251825591602001919060010190613168565b5061318f929150613193565b5090565b5b8082111561318f5760008155600101613194565b80356001600160a01b03811681146131bf57600080fd5b919050565b600080600080608085870312156131da57600080fd5b843593506131ea602086016131a8565b93969395505050506040820135916060013590565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261322657600080fd5b813560206001600160401b0380831115613242576132426131ff565b8260051b604051601f19603f83011681018181108482111715613267576132676131ff565b60405293845285810183019383810192508785111561328557600080fd5b83870191505b848210156132a45781358352918301919083019061328b565b979650505050505050565b80151581146132bd57600080fd5b50565b6000806000606084860312156132d557600080fd5b8335925060208401356001600160401b038111156132f257600080fd5b6132fe86828701613215565b925050604084013561330f816132af565b809150509250925092565b6000806000806080858703121561333057600080fd5b5050823594602084013594506040840135936060013592509050565b60008060006060848603121561336157600080fd5b8335925060208401356001600160401b0381111561337e57600080fd5b61338a86828701613215565b925050604084013590509250925092565b6000602082840312156133ad57600080fd5b5035919050565b60008060008060008060c087890312156133cd57600080fd5b86359550602087013594506040870135935060608701359250608087013591506133f960a088016131a8565b90509295509295509295565b60008060006060848603121561341a57600080fd5b8335925061342a602085016131a8565b9150604084013590509250925092565b60008060006060848603121561344f57600080fd5b833592506020840135915060408401356001600160401b0381111561347357600080fd5b61347f86828701613215565b9150509250925092565b6020808252825182820181905260009190848201906040850190845b818110156134c1578351835292840192918401916001016134a5565b50909695505050505050565b600080604083850312156134e057600080fd5b50508035926020909101359150565b6020808252601490820152730d2dcecc2d8d2c882dadeeadce8e698cadccee8d60631b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561355c5761355c613533565b500190565b60008282101561357357613573613533565b500390565b600060001982141561358c5761358c613533565b5060010190565b6000602082840312156135a557600080fd5b5051919050565b60008160001904831182151516156135c6576135c6613533565b500290565b6000826135e857634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600f908201526e0746f74616c537570706c79203d203608c1b604082015260600190565b6001600160a01b0391909116815260200190565b6020808252600a90820152693e20736c69707061676560b01b604082015260600190565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052600160045260246000fd5b600081518084526020808501945080840160005b838110156136ad57815187529582019590820190600101613691565b509495945050505050565b6080815260006136cb608083018761367d565b82810360208401526136dd818761367d565b604084019590955250506060015292915050565b93845260208401929092526040830152606082015260800190565b60608152600061371f606083018661367d565b8281036020840152613731818661367d565b915050826040830152949350505050565b600181815b8085111561377d57816000190482111561376357613763613533565b8085161561377057918102915b93841c9390800290613747565b509250929050565b60008261379457506001610fb1565b816137a157506000610fb1565b81600181146137b757600281146137c1576137dd565b6001915050610fb1565b60ff8411156137d2576137d2613533565b50506001821b610fb1565b5060208310610133831016604e8410600b8410161715613800575081810a610fb1565b61380a8383613742565b806000190482111561381e5761381e613533565b029392505050565b60006105ce8383613785565b6020808252600f908201526e696e6465784f75744f6652616e676560881b604082015260600190565b6000825160005b8181101561387c5760208186018101518583015201613862565b8181111561388b576000828501525b509190910192915050565b6000602082840312156138a857600080fd5b81516105ce816132af56feb2e76ae99761dc136e598d4a629bb347eccb9532a5f8bbd72e18467c3c34cc98a26469706673582212202f392db1000f40cdc6d7ec21ece95e39548e43138614e7ce9387a2b11b94ee3264736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "params": {
          "amounts": "List of amounts of coins to deposit",
          "minMintAmount": "Minimum amount of LP tokens to mint from the deposit"
        },
        "returns": {
          "mintAmount": "Amount of LP tokens received by depositing"
        }
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "params": {
          "self": "Swap struct to read from and write to",
          "toMint": "amount of pool tokens to be minted",
          "user": "address of the user depositing tokens"
        }
      }
    },
    "stateVariables": {
      "A_PRECISION": {
        "details": "protect from division loss when run approximation loop. We cannot divide at the end because of overflow, so we add some (small) PRECISION when divide in each iteration"
      },
      "MAX_ITERATION": {
        "details": "max iteration of converge calccuate"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(RequiemStableSwapLib.SwapStorage storage,uint256[],uint256)": {
        "notice": "Deposit coins into the pool"
      },
      "calculateTokenAmount(RequiemStableSwapLib.SwapStorage storage,uint256[],bool)": {
        "notice": "Estimate amount of LP token minted or burned at deposit or withdrawal without taking fees into account"
      },
      "getAPrecise(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "VIEW FUNCTIONS"
      },
      "getVirtualPrice(RequiemStableSwapLib.SwapStorage storage)": {
        "notice": "Returns portfolio virtual price (for calculating profit) scaled up by 1e18"
      },
      "updateUserWithdrawFee(RequiemStableSwapLib.SwapStorage storage,address,uint256)": {
        "notice": "Update the withdraw fee for `user`. If the user is currently not providing liquidity in the pool, sets to default value. If not, recalculate the starting withdraw fee based on the last deposit's time & amount relative to the new deposit."
      }
    },
    "notice": "StableSwap main algorithm",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}