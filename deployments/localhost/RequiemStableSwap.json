{
  "address": "0x1613beB3B2C4f22Ee086B2b38C1476A3cE7f78E8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenSupply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollectProtocolFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "FeeControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newController",
          "type": "address"
        }
      ],
      "name": "FeeDistributorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "flashFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adminFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawFee",
          "type": "uint256"
        }
      ],
      "name": "NewFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "futureTime",
          "type": "uint256"
        }
      ],
      "name": "RampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinAmount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "A",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StopRampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "soldId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boughtId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        }
      ],
      "name": "TokenExchange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_A",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_ADMIN_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_A_CHANGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FLASH_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SWAP_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WITHDRAW_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_RAMP_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minMintAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "calculateCurrentWithdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "calculateRemoveLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "inIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "outIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapGivenIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapGivenOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "deposit",
          "type": "bool"
        }
      ],
      "name": "calculateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFlashLoanRecipient",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPrecise",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "getAdminBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdminBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "adminBalances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "getTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenPrecisionMultipliers",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVirtualPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_coins",
          "type": "address[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_decimals",
          "type": "uint8[]"
        },
        {
          "internalType": "string",
          "name": "lpTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "lpTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_A",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_flashFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_adminFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeDistributor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "onSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "onSwapGivenIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "onSwapGivenOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "futureA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "futureATime",
          "type": "uint256"
        }
      ],
      "name": "rampA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "maxBurnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityImbalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newFlashFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newAdminFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newWithdrawFee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeController",
          "type": "address"
        }
      ],
      "name": "setFeeController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeDistributor",
          "type": "address"
        }
      ],
      "name": "setFeeDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopRampA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "fromIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "toIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minOutAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapStorage",
      "outputs": [
        {
          "internalType": "contract LPToken",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "flashFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "adminFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "futureA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialATime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "futureATime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defaultWithdrawFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenIndexes",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "transferAmount",
          "type": "uint256"
        }
      ],
      "name": "updateUserWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x14936c97a7d1fa27d49e7e460e146f31fc973c99b4572ccc8b20734e7ece39c6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x1613beB3B2C4f22Ee086B2b38C1476A3cE7f78E8",
    "transactionIndex": 0,
    "gasUsed": "4387061",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000008000000020000000000010100000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000002000000000000000000020000000000000000000000000000000000000000000000000000000000000001000",
    "blockHash": "0x92ead6febbb4fcc0393f469509e60afddcdf5b806a835d107b42110649040246",
    "transactionHash": "0x14936c97a7d1fa27d49e7e460e146f31fc973c99b4572ccc8b20734e7ece39c6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 36,
        "transactionHash": "0x14936c97a7d1fa27d49e7e460e146f31fc973c99b4572ccc8b20734e7ece39c6",
        "address": "0x1613beB3B2C4f22Ee086B2b38C1476A3cE7f78E8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x92ead6febbb4fcc0393f469509e60afddcdf5b806a835d107b42110649040246"
      }
    ],
    "blockNumber": 36,
    "cumulativeGasUsed": "4387061",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b68fc32492a33c9dfb64dfd079d60aab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSupply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollectProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"FeeControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"FeeDistributorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flashFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"name\":\"NewFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"futureTime\",\"type\":\"uint256\"}],\"name\":\"RampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StopRampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"TokenExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ADMIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_A_CHANGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FLASH_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SWAP_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_RAMP_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calculateCurrentWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"calculateRemoveLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"inIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"outIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"calculateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"calculateSwapGivenIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"calculateSwapGivenOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPrecise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getAdminBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"adminBalances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrecisionMultipliers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVirtualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_coins\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_decimals\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"lpTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_flashFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"onSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"onSwapGivenIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"onSwapGivenOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"futureA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureATime\",\"type\":\"uint256\"}],\"name\":\"rampA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityImbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFlashFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newAdminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeController\",\"type\":\"address\"}],\"name\":\"setFeeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"setFeeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopRampA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"fromIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"toIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapStorage\",\"outputs\":[{\"internalType\":\"contract LPToken\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flashFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialATime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureATime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultWithdrawFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIndexes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"}],\"name\":\"updateUserWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"rampA(uint256,uint256)\":{\"params\":{\"futureA\":\"the new A to ramp towards\",\"futureATime\":\"timestamp when the new A should be reached\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFee(uint256,uint256,uint256,uint256)\":{\"details\":\"adminFee cannot be higher than 100% of the swap fee swap fee cannot be higher than 1% of each swap\",\"params\":{\"newAdminFee\":\"new admin fee to be applied on future transactions\",\"newSwapFee\":\"new swap fee to be applied on future transactions\",\"newWithdrawFee\":\"new initial withdraw fee to be applied on future withdrawal transactions\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateUserWithdrawFee(address,uint256)\":{\"params\":{\"recipient\":\"address of the recipient of pool token\",\"transferAmount\":\"amount of pool token to transfer\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AddLiquidity(address,uint256[],uint256[],uint256,uint256)\":{\"notice\":\"EVENTS\"}},\"kind\":\"user\",\"methods\":{\"MIN_RAMP_TIME()\":{\"notice\":\"constants\"},\"addLiquidity(uint256[],uint256,uint256)\":{\"notice\":\"PUBLIC FUNCTIONS\"},\"flashLoan(address,address[],uint256[],bytes)\":{\"notice\":\"Flash Loan\"},\"getVirtualPrice()\":{\"notice\":\"VIEW FUNCTIONS\"},\"rampA(uint256,uint256)\":{\"notice\":\"Start ramping up or down A parameter towards given futureA_ and futureTime_ Checks if the change is too rapid, and commits the new A value only when it falls under the limit range.\"},\"setFee(uint256,uint256,uint256,uint256)\":{\"notice\":\"Sets the admin fee\"},\"swapStorage()\":{\"notice\":\"STATE VARS\"},\"updateUserWithdrawFee(address,uint256)\":{\"notice\":\"Updates the user withdraw fee. This function can only be called by the pool token. Should be used to update the withdraw fee on transfer of pool tokens. Transferring your pool token will reset the 4 weeks period. If the recipient is already holding some pool tokens, the withdraw fee will be discounted in respective amounts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemStableSwap.sol\":\"RequiemStableSwap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/RequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\nimport \\\"./libraries/ReentrancyGuard.sol\\\";\\nimport \\\"./libraries/Initializable.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./base/OwnerPausable.sol\\\";\\nimport \\\"./RequiemStableSwapLib.sol\\\";\\nimport \\\"./interfaces/IRequiemStableSwap.sol\\\";\\nimport \\\"./interfaces/IRequiemSwap.sol\\\";\\nimport \\\"./interfaces/IFlashLoanRecipient.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\ncontract RequiemStableSwap is IRequiemSwap, OwnerPausable, ReentrancyGuard, Initializable, IRequiemStableSwap {\\n    using RequiemStableSwapLib for RequiemStableSwapLib.SwapStorage;\\n    using SafeERC20 for IERC20;\\n\\n    /// constants\\n    uint256 public constant MIN_RAMP_TIME = 1 days;\\n    uint256 public constant MAX_A = 1e6;\\n    uint256 public constant MAX_A_CHANGE = 10;\\n    uint256 public constant MAX_ADMIN_FEE = 1e10; // 100%\\n    uint256 public constant MAX_SWAP_FEE = 1e8; // 1%\\n    uint256 public constant MAX_WITHDRAW_FEE = 1e8; // 1%\\n    uint256 public constant MAX_FLASH_FEE = 1e8; // 1%\\n\\n    /// STATE VARS\\n    RequiemStableSwapLib.SwapStorage public swapStorage;\\n    address public feeDistributor;\\n    address public feeController;\\n    mapping(address => uint8) public tokenIndexes;\\n\\n    modifier deadlineCheck(uint256 _deadline) {\\n        require(block.timestamp <= _deadline, \\\"timeout\\\");\\n        _;\\n    }\\n\\n    modifier onlyFeeControllerOrOwner() {\\n        require(msg.sender == feeController || msg.sender == owner(), \\\"!feeController\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address[] memory _coins,\\n        uint8[] memory _decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _A,\\n        uint256 _fee,\\n        uint256 _flashFee,\\n        uint256 _adminFee,\\n        uint256 _withdrawFee,\\n        address _feeDistributor\\n    ) external onlyOwner initializer {\\n        require(_coins.length == _decimals.length, \\\"coinsL != decimalsL\\\");\\n        require(_feeDistributor != address(0), \\\"feeDistributor = empty\\\");\\n        uint256 numberOfCoins = _coins.length;\\n        uint256[] memory rates = new uint256[](numberOfCoins);\\n        IERC20[] memory coins = new IERC20[](numberOfCoins);\\n        for (uint256 i = 0; i < numberOfCoins; i++) {\\n            require(_coins[i] != address(0), \\\"invalidTokenAddress\\\");\\n            require(_decimals[i] <= RequiemStableSwapLib.POOL_TOKEN_COMMON_DECIMALS, \\\"invalidDecimals\\\");\\n            rates[i] = 10**(RequiemStableSwapLib.POOL_TOKEN_COMMON_DECIMALS - _decimals[i]);\\n            coins[i] = IERC20(_coins[i]);\\n            tokenIndexes[address(coins[i])] = uint8(i);\\n        }\\n\\n        require(_A < MAX_A, \\\"> maxA\\\");\\n        require(_fee <= MAX_SWAP_FEE, \\\"> maxSFee\\\");\\n        require(_flashFee <= MAX_FLASH_FEE, \\\"> maxFFee\\\");\\n        require(_adminFee <= MAX_ADMIN_FEE, \\\"> maxAFee\\\");\\n        require(_withdrawFee <= MAX_WITHDRAW_FEE, \\\"> maxWFee\\\");\\n\\n        swapStorage.lpToken = new LPToken(lpTokenName, lpTokenSymbol);\\n        swapStorage.balances = new uint256[](numberOfCoins);\\n        swapStorage.tokenMultipliers = rates;\\n        swapStorage.pooledTokens = coins;\\n        swapStorage.initialA = _A * RequiemStableSwapLib.A_PRECISION;\\n        swapStorage.futureA = _A * RequiemStableSwapLib.A_PRECISION;\\n        swapStorage.fee = _fee;\\n        swapStorage.flashFee = _flashFee;\\n        swapStorage.adminFee = _adminFee;\\n        swapStorage.defaultWithdrawFee = _withdrawFee;\\n        feeDistributor = _feeDistributor;\\n    }\\n\\n    /// PUBLIC FUNCTIONS\\n    function addLiquidity(\\n        uint256[] memory amounts,\\n        uint256 minMintAmount,\\n        uint256 deadline\\n    ) external override whenNotPaused nonReentrant deadlineCheck(deadline) returns (uint256) {\\n        return swapStorage.addLiquidity(amounts, minMintAmount);\\n    }\\n\\n    // standard swap function a la curve\\n    // just the to parameter is added to be more flexible\\n    function swap(\\n        uint8 fromIndex,\\n        uint8 toIndex,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override whenNotPaused nonReentrant deadlineCheck(deadline) returns (uint256) {\\n        return swapStorage.swap(fromIndex, toIndex, inAmount, minOutAmount, to);\\n    }\\n\\n    // function for the requiem swap interface\\n    // recalculates the output amount from the input\\n    // has no check for slippage, that should be wrapped arount that funtion if used\\n    // calculation-wise not really less efficient than just validating input amounts\\n    // since the invariant would have to be calculated twice\\n    // expects amounts to be sent to the contract alreaddy\\n    function onSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address to\\n    ) external override whenNotPaused nonReentrant {\\n        swapStorage.onSwap(tokenIndexes[tokenIn], tokenIndexes[tokenOut], amountIn, amountOut, to);\\n        // swapStorage.onSwapGivenIn(tokenIndexes[tokenIn], tokenIndexes[tokenOut], amountIn, 0, to);\\n    }\\n\\n    // expects amount alrady to be sent to this address\\n    // calculates the output amount and sends it after deducting the fee\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external override whenNotPaused nonReentrant returns (uint256) {\\n        return swapStorage.onSwapGivenIn(tokenIndexes[tokenIn], tokenIndexes[tokenOut], amountIn, amountOutMin, to);\\n    }\\n\\n    // calculates the input amount from a given output amount\\n    // will transfer amounts to itself as input is not yet known\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to\\n    ) external override whenNotPaused nonReentrant returns (uint256) {\\n        return swapStorage.onSwapGivenOut(tokenIndexes[tokenIn], tokenIndexes[tokenOut], amountOut, amountInMax, to);\\n    }\\n\\n     /**\\n    * Flash Loan\\n     */\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external override nonReentrant whenNotPaused {\\n        swapStorage.flashLoan(recipient, tokens, amounts, userData);\\n    }\\n\\n    function removeLiquidity(\\n        uint256 lpAmount,\\n        uint256[] memory minAmounts,\\n        uint256 deadline\\n    ) external override nonReentrant deadlineCheck(deadline) returns (uint256[] memory) {\\n        return swapStorage.removeLiquidity(lpAmount, minAmounts);\\n    }\\n\\n    function removeLiquidityOneToken(\\n        uint256 lpAmount,\\n        uint8 index,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external override nonReentrant whenNotPaused deadlineCheck(deadline) returns (uint256) {\\n        return swapStorage.removeLiquidityOneToken(lpAmount, index, minAmount);\\n    }\\n\\n    function removeLiquidityImbalance(\\n        uint256[] memory amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external override nonReentrant whenNotPaused deadlineCheck(deadline) returns (uint256) {\\n        return swapStorage.removeLiquidityImbalance(amounts, maxBurnAmount);\\n    }\\n\\n    /// VIEW FUNCTIONS\\n\\n    function getVirtualPrice() external view override returns (uint256) {\\n        return swapStorage.getVirtualPrice();\\n    }\\n\\n    function getA() external view override returns (uint256) {\\n        return swapStorage.getA();\\n    }\\n\\n    function getAPrecise() external view override returns (uint256) {\\n        return swapStorage.getAPrecise();\\n    }\\n\\n    function getTokens() external view override returns (IERC20[] memory) {\\n        return swapStorage.pooledTokens;\\n    }\\n\\n    function getToken(uint8 index) external view override returns (IERC20) {\\n        return swapStorage.pooledTokens[index];\\n    }\\n\\n    function getLpToken() external view override returns (IERC20) {\\n        return swapStorage.lpToken;\\n    }\\n\\n    function getTokenIndex(address token) external view override returns (uint8 index) {\\n        index = tokenIndexes[token];\\n        require(address(swapStorage.pooledTokens[index]) == token, \\\"tokenNotFound\\\");\\n    }\\n\\n    function getTokenPrecisionMultipliers() external view returns (uint256[] memory) {\\n        return swapStorage.tokenMultipliers;\\n    }\\n\\n    function getTokenBalances() external view override returns (uint256[] memory) {\\n        return swapStorage.balances;\\n    }\\n\\n    function getTokenBalance(uint8 index) external view override returns (uint256) {\\n        return swapStorage.balances[index];\\n    }\\n\\n    function getNumberOfTokens() external view override returns (uint256) {\\n        return swapStorage.pooledTokens.length;\\n    }\\n\\n    function getAdminBalances() external view override returns (uint256[] memory adminBalances) {\\n        uint256 length = swapStorage.pooledTokens.length;\\n        adminBalances = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            adminBalances[i] = swapStorage.getAdminBalance(i);\\n        }\\n    }\\n\\n    function getAdminBalance(uint8 index) external view override returns (uint256) {\\n        return swapStorage.getAdminBalance((index));\\n    }\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view override returns (uint256) {\\n        return swapStorage.calculateTokenAmount(amounts, deposit);\\n    }\\n\\n    function calculateSwap(\\n        uint8 inIndex,\\n        uint8 outIndex,\\n        uint256 inAmount\\n    ) external view override returns (uint256) {\\n        return swapStorage.calculateSwap(inIndex, outIndex, inAmount);\\n    }\\n\\n    // calculates output amount for given input\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (uint256) {\\n        return swapStorage.calculateSwap(tokenIndexes[tokenIn], tokenIndexes[tokenOut], amountIn);\\n    }\\n\\n    // calculates input amount for given output\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) external view returns (uint256) {\\n        return swapStorage.calculateSwapGivenOut(tokenIndexes[tokenIn], tokenIndexes[tokenOut], amountOut);\\n    }\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view override returns (uint256[] memory) {\\n        return swapStorage.calculateRemoveLiquidity(account, amount);\\n    }\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 amount,\\n        uint8 index\\n    ) external view override returns (uint256) {\\n        return swapStorage.calculateRemoveLiquidityOneToken(account, amount, index);\\n    }\\n\\n    function calculateCurrentWithdrawFee(address account) external view override returns (uint256) {\\n        return swapStorage._calculateCurrentWithdrawFee(account);\\n    }\\n\\n    /// RESTRICTED FUNCTION\\n    /**\\n     * @notice Updates the user withdraw fee. This function can only be called by\\n     * the pool token. Should be used to update the withdraw fee on transfer of pool tokens.\\n     * Transferring your pool token will reset the 4 weeks period. If the recipient is already\\n     * holding some pool tokens, the withdraw fee will be discounted in respective amounts.\\n     * @param recipient address of the recipient of pool token\\n     * @param transferAmount amount of pool token to transfer\\n     */\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external override {\\n        require(msg.sender == address(swapStorage.lpToken), \\\"!lpToken\\\");\\n        swapStorage.updateUserWithdrawFee(recipient, transferAmount);\\n    }\\n\\n\\n    /**\\n     * @notice Sets the admin fee\\n     * @dev adminFee cannot be higher than 100% of the swap fee\\n     * swap fee cannot be higher than 1% of each swap\\n     * @param newSwapFee new swap fee to be applied on future transactions\\n     * @param newAdminFee new admin fee to be applied on future transactions\\n     * @param newWithdrawFee new initial withdraw fee to be applied on future withdrawal transactions\\n     */\\n    function setFee(\\n        uint256 newSwapFee,\\n        uint256 newFlashFee,\\n        uint256 newAdminFee,\\n        uint256 newWithdrawFee\\n    ) external onlyOwner {\\n        require(newSwapFee <= MAX_SWAP_FEE, \\\"> SFee\\\");\\n        require(newFlashFee <= MAX_FLASH_FEE, \\\"> SFee\\\");\\n        require(newAdminFee <= MAX_ADMIN_FEE, \\\"> AFee\\\");\\n        require(newWithdrawFee <= MAX_WITHDRAW_FEE, \\\"> WFee\\\");\\n        swapStorage.adminFee = newAdminFee;\\n        swapStorage.fee = newSwapFee;\\n        swapStorage.defaultWithdrawFee = newWithdrawFee;\\n\\n        emit NewFee(newSwapFee, newFlashFee,  newAdminFee, newWithdrawFee);\\n    }\\n\\n    /**\\n     * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\\n     * the limit range.\\n     * @param futureA the new A to ramp towards\\n     * @param futureATime timestamp when the new A should be reached\\n     */\\n    function rampA(uint256 futureA, uint256 futureATime) external onlyOwner {\\n        require(block.timestamp >= swapStorage.initialATime + (1 days), \\\"< rampD\\\"); // please wait 1 days before start a new ramping\\n        require(futureATime >= block.timestamp + (MIN_RAMP_TIME), \\\"< minRampT\\\");\\n        require(0 < futureA && futureA < MAX_A, \\\"outOfRange\\\");\\n\\n        uint256 initialAPrecise = swapStorage.getAPrecise();\\n        uint256 futureAPrecise = futureA * RequiemStableSwapLib.A_PRECISION;\\n\\n        if (futureAPrecise < initialAPrecise) {\\n            require(futureAPrecise * (MAX_A_CHANGE) >= initialAPrecise, \\\"> maxC\\\");\\n        } else {\\n            require(futureAPrecise <= initialAPrecise * (MAX_A_CHANGE), \\\"> maxC\\\");\\n        }\\n\\n        swapStorage.initialA = initialAPrecise;\\n        swapStorage.futureA = futureAPrecise;\\n        swapStorage.initialATime = block.timestamp;\\n        swapStorage.futureATime = futureATime;\\n\\n        emit RampA(initialAPrecise, futureAPrecise, block.timestamp, futureATime);\\n    }\\n\\n    function stopRampA() external onlyOwner {\\n        require(swapStorage.futureATime > block.timestamp, \\\"alreadyStopped\\\");\\n        uint256 currentA = swapStorage.getAPrecise();\\n\\n        swapStorage.initialA = currentA;\\n        swapStorage.futureA = currentA;\\n        swapStorage.initialATime = block.timestamp;\\n        swapStorage.futureATime = block.timestamp;\\n\\n        emit StopRampA(currentA, block.timestamp);\\n    }\\n\\n    function setFeeController(address _feeController) external onlyOwner {\\n        require(_feeController != address(0), \\\"zero\\\");\\n        feeController = _feeController;\\n        emit FeeControllerChanged(_feeController);\\n    }\\n\\n    function setFeeDistributor(address _feeDistributor) external onlyOwner {\\n        require(_feeDistributor != address(0), \\\"zero\\\");\\n        feeDistributor = _feeDistributor;\\n        emit FeeDistributorChanged(_feeDistributor);\\n    }\\n\\n    function withdrawAdminFee() external onlyFeeControllerOrOwner {\\n        for (uint256 i = 0; i < swapStorage.pooledTokens.length; i++) {\\n            IERC20 token = swapStorage.pooledTokens[i];\\n            uint256 balance = token.balanceOf(address(this)) - (swapStorage.balances[i]);\\n            if (balance != 0) {\\n                token.safeTransfer(feeDistributor, balance);\\n                emit CollectProtocolFee(address(token), balance);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc2d5f0f18cbfc46a4dcd46b7da61ac847cb8142368a9d512e6e2a0e2f0f41206\",\"license\":\"MIT\"},\"contracts/RequiemStableSwapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"./tokens/LPToken.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./libraries/math/FullMath.sol\\\";\\nimport \\\"./interfaces/IFlashLoanRecipient.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\n/**\\n * StableSwap main algorithm\\n */\\nlibrary RequiemStableSwapLib {\\n    using SafeERC20 for IERC20;\\n\\n    event AddLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 invariant, uint256 token_supply);\\n\\n    event TokenExchange(address indexed buyer, uint256 sold_id, uint256 tokens_sold, uint256 bought_id, uint256 tokens_bought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 token_supply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] token_amounts, uint256[] fees, uint256 invariant, uint256 token_supply);\\n    /**\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\n     */\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\n\\n    uint256 public constant FEE_DENOMINATOR = 1e10;\\n    // uint256 public constant PRECISION = 1e18;\\n\\n    /// @dev protect from division loss when run approximation loop. We cannot divide at the end because of overflow,\\n    /// so we add some (small) PRECISION when divide in each iteration\\n    uint256 public constant A_PRECISION = 100;\\n    /// @dev max iteration of converge calccuate\\n    uint256 internal constant MAX_ITERATION = 256;\\n    uint256 public constant POOL_TOKEN_COMMON_DECIMALS = 18;\\n\\n    struct SwapStorage {\\n        IERC20[] pooledTokens;\\n        LPToken lpToken;\\n        /// @dev token i multiplier to reach POOL_TOKEN_COMMON_DECIMALS\\n        uint256[] tokenMultipliers;\\n        /// @dev effective balance which might different from token balance of the contract 'cause it hold admin fee as well\\n        uint256[] balances;\\n        /// @dev swap fee ratio. Charge on any action which move balance state far from the ideal state\\n        uint256 fee;\\n        /// @dev flash loan fee ratio. Charge on any action which move balance state far from the ideal state\\n        uint256 flashFee;\\n        /// @dev admin fee in ratio of swap fee.\\n        uint256 adminFee;\\n        /// @dev observation of A, multiplied with A_PRECISION\\n        uint256 initialA;\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n        // withdrawal fee control\\n        uint256 defaultWithdrawFee;\\n        mapping(address => uint256) depositTimestamp;\\n        mapping(address => uint256) withdrawFeeMultiplier;\\n    }\\n\\n    /**\\n     * @notice Deposit coins into the pool\\n     * @param amounts List of amounts of coins to deposit\\n     * @param minMintAmount Minimum amount of LP tokens to mint from the deposit\\n     * @return mintAmount Amount of LP tokens received by depositing\\n     */\\n    function addLiquidity(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 minMintAmount\\n    ) external returns (uint256 mintAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"length\\\");\\n        uint256[] memory fees = new uint256[](nCoins);\\n        uint256 _fee = _feePerToken(self);\\n\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256 D0 = 0;\\n        if (tokenSupply > 0) {\\n            D0 = _getD(_xp(self.balances, self.tokenMultipliers), amp);\\n        }\\n\\n        uint256[] memory newBalances = self.balances;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (tokenSupply == 0) {\\n                require(amounts[i] > 0, \\\"tokens\\\");\\n            }\\n            // get real transfer in amount\\n            newBalances[i] += _doTransferIn(self.pooledTokens[i], amounts[i]);\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        assert(D1 > D0); // double check\\n\\n        if (tokenSupply == 0) {\\n            self.balances = newBalances;\\n            mintAmount = D1;\\n        } else {\\n            uint256 diff = 0;\\n            for (uint256 i = 0; i < nCoins; i++) {\\n                diff = _distance((D1 * self.balances[i]) / D0, newBalances[i]);\\n                fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n                self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n                newBalances[i] -= fees[i];\\n            }\\n            D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n            mintAmount = (tokenSupply * (D1 - D0)) / D0;\\n        }\\n\\n        require(mintAmount >= minMintAmount, \\\"> s\\\");\\n\\n        self.lpToken.mint(msg.sender, mintAmount);\\n        emit AddLiquidity(msg.sender, amounts, fees, D1, mintAmount);\\n    }\\n\\n    // implements classic swap function a la compound\\n    // here the regular calculations such as balance values are implemented\\n    // funds are transferred in in that function and are not required to be sent\\n    // to the contract\\n    function swap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256) {\\n        IERC20 inCoin = self.pooledTokens[i];\\n        uint256[] memory normalizedBalances = _xp(self);\\n        inAmount = _doTransferIn(inCoin, inAmount);\\n\\n        uint256 y = _getY(self, i, j, normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]), normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> s\\\");\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n        return dy;\\n    }\\n\\n    /**\\n     *  the same function as swap, but it expects that amounts already have been\\n     *  sent to the contract\\n     *   - designed to be used in the Requiem Swap framework\\n     *   - deducts the fee from the output and caps it at outAmount to\\n     *   - this is to avoid issues with the rounding when using the calculateSwapGivenOut function to determine the input\\n     *          -> that is because e.g. a 6 digit input can never exactly hit a 18 digit output, so the input is selected slightly higher\\n     *              such that the output also is essentially rounded up at the sixth digit\\n     *          -> the outAmount can only be lower than the actual calculated dy\\n     *   - viable function for batch swapping\\n     * @param i token index in\\n     * @param j token index out\\n     * @param outAmount the target out amount - only a cap at the decimalplaces of the lower one, the rest is taken as fee\\n     *                  - that fee is always about the lowes amount possible of the one with the lower decimal number\\n     *                  this will have a negative\\n     */\\n    function onSwap(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 outAmount,\\n        address to\\n    ) external returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n\\n        uint256 y = _getY(self, i, j, normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]), normalizedBalances);\\n\\n        uint256 dy = normalizedBalances[j] - y; // iliminate rouding errors\\n        uint256 dy_fee = FullMath.mulDiv(dy , self.fee,FEE_DENOMINATOR);\\n\\n        dy = divUp(dy - dy_fee, self.tokenMultipliers[j]); // denormalize and round up\\n\\n        // the control outAmount has to be lower or equal than the \\\"actual\\\" one\\n        require(outAmount <= dy, \\\"dy too low\\\");\\n\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        self.pooledTokens[j].safeTransfer(to, outAmount);\\n        emit TokenExchange(to, i, inAmount, j, outAmount);\\n        return dy;\\n    }\\n\\n    /**\\n     *  the same function as swap, but it expects that amounts already have been\\n     *  sent to the contract\\n     *   - designed to be used in the Requiem Swap framework\\n     *   - deducts the fee from the output, in this case simple as the output is the calculated value\\n     *   - viable function for batch swapping\\n     * @param i token index in\\n     * @param j token index out\\n     */\\n    function onSwapGivenIn(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 inAmount,\\n        uint256 minOutAmount,\\n        address to\\n    ) external returns (uint256 dy) {\\n        // we check whether the balance has increased by the suggested inAmount\\n        require(self.balances[i] + inAmount <= IERC20(self.pooledTokens[i]).balanceOf(address(this)), \\\"input\\\");\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 x = normalizedBalances[i] + (inAmount * self.tokenMultipliers[i]);\\n        uint256 y = _getY(self, i, j, x, normalizedBalances);\\n\\n        dy = normalizedBalances[j] - y - 1; // iliminate rouding errors\\n        uint256 dy_fee = (dy * self.fee) / FEE_DENOMINATOR;\\n\\n        dy = (dy - dy_fee) / self.tokenMultipliers[j]; // denormalize\\n\\n        require(dy >= minOutAmount, \\\"> s\\\");\\n\\n        uint256 _adminFee = (dy_fee * self.adminFee) / FEE_DENOMINATOR / self.tokenMultipliers[j];\\n\\n        // update balances\\n        self.balances[i] += inAmount;\\n        self.balances[j] -= dy + _adminFee;\\n\\n        self.pooledTokens[j].safeTransfer(to, dy);\\n        emit TokenExchange(to, i, inAmount, j, dy);\\n\\n        // returns final output amount\\n        return dy;\\n    }\\n\\n    /**\\n     * the same function as swap, but it espects that amounts already have been\\n     * sent to the contract and it requires the output to be provided\\n     *  - designed to be used in the requirem swap framework\\n     *  - deducts the fees from the output, that means that the\\n     *    output has to be increased by the fee to then create a highe input\\n     * @param i token index in\\n     * @param j token index out\\n     */\\n    function onSwapGivenOut(\\n        SwapStorage storage self,\\n        uint256 i,\\n        uint256 j,\\n        uint256 outAmount,\\n        uint256 maxInAmount,\\n        address to\\n    ) external returns (uint256 dx) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n\\n        // the fee is a percentage from the \\\"actual\\\" amountOut, we have to use the quotient because of that\\n        uint256 _amountOutInclFee = FullMath.mulDiv(outAmount, FEE_DENOMINATOR, FEE_DENOMINATOR - self.fee);\\n\\n        // calculate out balance\\n        uint256 y = normalizedBalances[j] - (_amountOutInclFee * self.tokenMultipliers[j]);\\n\\n        // calculate in balance\\n        uint256 x = _getY(self, j, i, y, normalizedBalances);\\n\\n        // calculate normalized in balance\\n        dx = x - normalizedBalances[i]; // no rounding adjustment\\n\\n        dx = dx / self.tokenMultipliers[i]; // denormalize\\n\\n        require(dx <= maxInAmount, \\\"> s\\\");\\n\\n        // update balances\\n        self.balances[i] -= dx;\\n        self.balances[j] -= _amountOutInclFee;\\n\\n        // do the transfer after all calculations\\n        IERC20 inCoin = self.pooledTokens[i];\\n        dx = _doTransferIn(inCoin, dx); // transfer the calculated amount in\\n\\n        self.pooledTokens[j].safeTransfer(to, outAmount); // transfer the desired amount out\\n        emit TokenExchange(to, i, dx, j, outAmount);\\n\\n        // returns final input amount\\n        return dx;\\n    }\\n\\n    /**\\n     * Flash Loan\\n     */\\n\\n    function flashLoan(\\n        SwapStorage storage self,\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external {\\n        require(tokens.length == amounts.length, \\\"inputs\\\");\\n        uint256[] memory feeAmounts = new uint256[](tokens.length);\\n        uint256[] memory preLoanBalances = new uint256[](tokens.length);\\n\\n        // Used to ensure `tokens` is sorted in ascending order, which ensures token uniqueness.\\n        IERC20 previousToken = IERC20(address(0));\\n\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            IERC20 token = tokens[i];\\n            uint256 amount = amounts[i];\\n\\n            RequiemErrors._require(token > previousToken, token == IERC20(address(0)) ? Errors.ZERO_TOKEN : Errors.UNSORTED_TOKENS);\\n            previousToken = token;\\n\\n            preLoanBalances[i] = token.balanceOf(address(this));\\n            feeAmounts[i] = (amount * self.flashFee) / FEE_DENOMINATOR;\\n\\n            RequiemErrors._require(preLoanBalances[i] >= amount, Errors.INSUFFICIENT_FLASH_LOAN_BALANCE);\\n            token.safeTransfer(address(recipient), amount);\\n        }\\n\\n        recipient.receiveFlashLoan(tokens, amounts, feeAmounts, userData);\\n\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            IERC20 token = tokens[i];\\n            uint256 preLoanBalance = preLoanBalances[i];\\n\\n            // Checking for loan repayment first (without accounting for fees) makes for simpler debugging, and results\\n            // in more accurate revert reasons if the flash loan protocol fee percentage is zero.\\n            uint256 postLoanBalance = token.balanceOf(address(this));\\n            RequiemErrors._require(postLoanBalance >= preLoanBalance, Errors.INVALID_POST_LOAN_BALANCE);\\n\\n            // No need for checked arithmetic since we know the loan was fully repaid.\\n            uint256 receivedFeeAmount = postLoanBalance - preLoanBalance;\\n            RequiemErrors._require(receivedFeeAmount >= feeAmounts[i], Errors.INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT);\\n\\n            // _payFeeAmount(token, receivedFeeAmount);\\n            emit FlashLoan(recipient, token, amounts[i], receivedFeeAmount);\\n        }\\n    }\\n\\n    function removeLiquidity(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256[] memory minAmounts\\n    ) external returns (uint256[] memory amounts) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(lpAmount <= totalSupply);\\n        uint256 nCoins = self.pooledTokens.length;\\n\\n        uint256[] memory fees = new uint256[](nCoins);\\n        amounts = _calculateRemoveLiquidity(self, msg.sender, lpAmount);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] >= minAmounts[i], \\\"> s\\\");\\n            self.balances[i] = self.balances[i] - amounts[i];\\n            self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        emit RemoveLiquidity(msg.sender, amounts, fees, totalSupply - lpAmount);\\n    }\\n\\n    function removeLiquidityOneToken(\\n        SwapStorage storage self,\\n        uint256 lpAmount,\\n        uint256 index,\\n        uint256 minAmount\\n    ) external returns (uint256) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply > 0, \\\"totalSupply = 0\\\");\\n        uint256 numTokens = self.pooledTokens.length;\\n        require(lpAmount <= self.lpToken.balanceOf(msg.sender), \\\"> balance\\\");\\n        require(lpAmount <= totalSupply, \\\"> totalSupply\\\");\\n        require(index < numTokens, \\\"tokenNotFound\\\");\\n\\n        uint256 dyFee;\\n        uint256 dy;\\n\\n        (dy, dyFee) = _calculateRemoveLiquidityOneToken(self, msg.sender, lpAmount, index);\\n\\n        require(dy >= minAmount, \\\"> s\\\");\\n\\n        self.balances[index] -= (dy + (dyFee * self.adminFee) / FEE_DENOMINATOR);\\n        self.lpToken.burnFrom(msg.sender, lpAmount);\\n        self.pooledTokens[index].safeTransfer(msg.sender, dy);\\n\\n        emit RemoveLiquidityOne(msg.sender, index, lpAmount, dy);\\n\\n        return dy;\\n    }\\n\\n    function removeLiquidityImbalance(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        uint256 maxBurnAmount\\n    ) external returns (uint256 burnAmount) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"length\\\");\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(totalSupply != 0, \\\"totalSupply = 0\\\");\\n        uint256 _fee = _feePerToken(self);\\n        uint256 amp = _getAPrecise(self);\\n\\n        uint256[] memory newBalances = self.balances;\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            newBalances[i] -= amounts[i];\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256[] memory fees = new uint256[](nCoins);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            uint256 idealBalance = (D1 * self.balances[i]) / D0;\\n            uint256 diff = _distance(newBalances[i], idealBalance);\\n            fees[i] = (_fee * diff) / FEE_DENOMINATOR;\\n            self.balances[i] = newBalances[i] - ((fees[i] * self.adminFee) / FEE_DENOMINATOR);\\n            newBalances[i] -= fees[i];\\n        }\\n\\n        // recalculate invariant with fee charged balances\\n        D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        burnAmount = ((D0 - D1) * totalSupply) / D0;\\n        assert(burnAmount > 0);\\n        burnAmount = (burnAmount + 1) * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, msg.sender)); //In case of rounding errors - make it unfavorable for the \\\"attacker\\\"\\n        require(burnAmount <= maxBurnAmount, \\\"> s\\\");\\n\\n        self.lpToken.burnFrom(msg.sender, burnAmount);\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (amounts[i] != 0) {\\n                self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, totalSupply - burnAmount);\\n    }\\n\\n    /// VIEW FUNCTIONS\\n    function getAPrecise(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self);\\n    }\\n\\n    /**\\n     * Returns portfolio virtual price (for calculating profit)\\n     * scaled up by 1e18\\n     */\\n    function getVirtualPrice(SwapStorage storage self) external view returns (uint256) {\\n        uint256 D = _getD(_xp(self), _getAPrecise(self));\\n        uint256 tokenSupply = self.lpToken.totalSupply();\\n        return (D * 10**POOL_TOKEN_COMMON_DECIMALS) / tokenSupply;\\n    }\\n\\n    function getAdminBalance(SwapStorage storage self, uint256 index) external view returns (uint256) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        return self.pooledTokens[index].balanceOf(address(this)) - (self.balances[index]);\\n    }\\n\\n    /**\\n     * Estimate amount of LP token minted or burned at deposit or withdrawal\\n     * without taking fees into account\\n     */\\n    function calculateTokenAmount(\\n        SwapStorage storage self,\\n        uint256[] memory amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(amounts.length == nCoins, \\\"length\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256 D0 = _getD(_xp(self), amp);\\n\\n        uint256[] memory newBalances = self.balances;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (deposit) {\\n                newBalances[i] += amounts[i];\\n            } else {\\n                newBalances[i] -= amounts[i];\\n            }\\n        }\\n\\n        uint256 D1 = _getD(_xp(newBalances, self.tokenMultipliers), amp);\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n\\n        if (totalSupply == 0) {\\n            return D1; // first depositor take it all\\n        }\\n\\n        uint256 diff = deposit ? D1 - D0 : D0 - D1;\\n        return (diff * self.lpToken.totalSupply()) / D0;\\n    }\\n\\n    function getA(SwapStorage storage self) external view returns (uint256) {\\n        return _getAPrecise(self) / A_PRECISION;\\n    }\\n\\n    // implements calculation of stable swap interface\\n    // represents calculateSwapGivenIn function\\n    function calculateSwap(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        uint256 newInBalance = normalizedBalances[inIndex] + (inAmount * self.tokenMultipliers[inIndex]);\\n        uint256 outBalance = _getY(self, inIndex, outIndex, newInBalance, normalizedBalances);\\n        uint256 outAmount = (normalizedBalances[outIndex] - outBalance) / self.tokenMultipliers[outIndex];\\n        uint256 _fee = (self.fee * outAmount) / FEE_DENOMINATOR;\\n        return outAmount - _fee;\\n    }\\n\\n    // implements calculation for Requiem interface\\n    // note that due to the fact that the structure is not symmetric (unlike pairs)\\n    // we require a separate function to calculate the input for a given output\\n    function calculateSwapGivenOut(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 outAmount\\n    ) external view returns (uint256) {\\n        uint256[] memory normalizedBalances = _xp(self);\\n        // fee has to be deducted on the output\\n        uint256 _amountOutInclFee = FullMath.mulDiv(outAmount, FEE_DENOMINATOR, FEE_DENOMINATOR - self.fee);\\n        uint256 newOutBalance = normalizedBalances[outIndex] - (_amountOutInclFee * self.tokenMultipliers[outIndex]);\\n        // switch index on regulat _getY function\\n        uint256 inBalance = _getY(self, outIndex, inIndex, newOutBalance, normalizedBalances);\\n        uint256 inAmount = divUp(inBalance - normalizedBalances[inIndex], self.tokenMultipliers[inIndex]);\\n\\n        return inAmount;\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) external view returns (uint256[] memory) {\\n        return _calculateRemoveLiquidity(self, account, amount);\\n    }\\n\\n    function calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 lpAmount,\\n        uint256 tokenIndex\\n    ) external view returns (uint256 amount) {\\n        (amount, ) = _calculateRemoveLiquidityOneToken(self, account, lpAmount, tokenIndex);\\n    }\\n\\n    /**\\n     * @notice Update the withdraw fee for `user`. If the user is currently\\n     * not providing liquidity in the pool, sets to default value. If not, recalculate\\n     * the starting withdraw fee based on the last deposit's time & amount relative\\n     * to the new deposit.\\n     *\\n     * @param self Swap struct to read from and write to\\n     * @param user address of the user depositing tokens\\n     * @param toMint amount of pool tokens to be minted\\n     */\\n    function updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) external {\\n        _updateUserWithdrawFee(self, user, toMint);\\n    }\\n\\n    /// INTERNAL FUNCTIONS\\n\\n    /**\\n     * Ramping A up or down, return A with precision of A_PRECISION\\n     */\\n    function _getAPrecise(SwapStorage storage self) internal view returns (uint256) {\\n        if (block.timestamp >= self.futureATime) {\\n            return self.futureA;\\n        }\\n\\n        if (self.futureA > self.initialA) {\\n            return self.initialA + ((self.futureA - self.initialA) * (block.timestamp - self.initialATime)) / (self.futureATime - self.initialATime);\\n        }\\n\\n        return self.initialA - ((self.initialA - self.futureA) * (block.timestamp - self.initialATime)) / (self.futureATime - self.initialATime);\\n    }\\n\\n    /**\\n     * normalized balances of each tokens.\\n     */\\n    function _xp(uint256[] memory balances, uint256[] memory rates) internal pure returns (uint256[] memory) {\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            rates[i] = (rates[i] * balances[i]);\\n        }\\n\\n        return rates;\\n    }\\n\\n    function _xp(SwapStorage storage self) internal view returns (uint256[] memory) {\\n        return _xp(self.balances, self.tokenMultipliers);\\n    }\\n\\n    /**\\n     * Calculate D for *NORMALIZED* balances of each tokens\\n     * @param xp normalized balances of token\\n     */\\n    function _getD(uint256[] memory xp, uint256 amp) internal pure returns (uint256) {\\n        uint256 nCoins = xp.length;\\n        uint256 sum = _sumOf(xp);\\n        if (sum == 0) {\\n            return 0;\\n        }\\n\\n        uint256 Dprev = 0;\\n        uint256 D = sum;\\n        uint256 Ann = amp * nCoins;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            uint256 D_P = D;\\n            for (uint256 j = 0; j < xp.length; j++) {\\n                D_P = (D_P * D) / (xp[j] * nCoins);\\n            }\\n            Dprev = D;\\n            D = (((Ann * sum) / A_PRECISION + D_P * nCoins) * D) / (((Ann - A_PRECISION) * D) / A_PRECISION + (nCoins + 1) * D_P);\\n            if (_distance(D, Dprev) <= 1) {\\n                return D;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    /**\\n     * calculate new balance of when swap\\n     * Done by solving quadratic equation iteratively.\\n     *  x_1**2 + x_1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     *  x_1**2 + b*x_1 = c\\n     *  x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     * @param inIndex index of token to swap in\\n     * @param outIndex index of token to swap out\\n     * @param inBalance new balance (normalized) of input token if the swap is successful\\n     * @return NORMALIZED balance of output token if the swap is successful\\n     */\\n    function _getY(\\n        SwapStorage storage self,\\n        uint256 inIndex,\\n        uint256 outIndex,\\n        uint256 inBalance,\\n        uint256[] memory normalizedBalances\\n    ) internal view returns (uint256) {\\n        require(inIndex != outIndex, \\\"sameToken\\\");\\n        uint256 nCoins = self.pooledTokens.length;\\n        require(inIndex < nCoins && outIndex < nCoins, \\\"indexOutOfRange\\\");\\n\\n        uint256 amp = _getAPrecise(self);\\n        uint256 Ann = amp * nCoins;\\n        uint256 D = _getD(normalizedBalances, amp); // calculate invariant\\n\\n        uint256 sum = 0; // sum of new balances except output token\\n        uint256 c = D;\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == outIndex) {\\n                continue;\\n            }\\n\\n            uint256 x = i == inIndex ? inBalance : normalizedBalances[i];\\n            sum += x;\\n            c = (c * D) / (x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = sum + (D * A_PRECISION) / Ann;\\n\\n        uint256 lastY = 0;\\n        uint256 y = D;\\n\\n        for (uint256 index = 0; index < MAX_ITERATION; index++) {\\n            lastY = y;\\n            y = divUp(y * y + c, 2 * y + b - D);\\n            if (_distance(lastY, y) <= 1) {\\n                return y;\\n            }\\n        }\\n\\n        revert(\\\"yCalculationFailed\\\");\\n    }\\n\\n    function _calculateRemoveLiquidity(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 amount\\n    ) internal view returns (uint256[] memory) {\\n        uint256 totalSupply = self.lpToken.totalSupply();\\n        require(amount <= totalSupply, \\\"total supply\\\");\\n\\n        uint256 feeAdjustedAmount = (amount * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n\\n        uint256[] memory amounts = new uint256[](self.pooledTokens.length);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            amounts[i] = (self.balances[i] * (feeAdjustedAmount)) / (totalSupply);\\n        }\\n        return amounts;\\n    }\\n\\n    function _calculateRemoveLiquidityOneToken(\\n        SwapStorage storage self,\\n        address account,\\n        uint256 tokenAmount,\\n        uint256 index\\n    ) internal view returns (uint256 dy, uint256 fee) {\\n        require(index < self.pooledTokens.length, \\\"indexOutOfRange\\\");\\n        uint256 amp = _getAPrecise(self);\\n        uint256[] memory xp = _xp(self);\\n        uint256 D0 = _getD(xp, amp);\\n        uint256 D1 = D0 - (tokenAmount * D0) / self.lpToken.totalSupply();\\n        uint256 newY = _getYD(self, amp, index, xp, D1);\\n        uint256[] memory reducedXP = xp;\\n        uint256 _fee = _feePerToken(self);\\n\\n        for (uint256 i = 0; i < self.pooledTokens.length; i++) {\\n            uint256 expectedDx = 0;\\n            if (i == index) {\\n                expectedDx = (xp[i] * D1) / D0 - newY;\\n            } else {\\n                expectedDx = xp[i] - (xp[i] * D1) / D0;\\n            }\\n            reducedXP[i] -= (_fee * expectedDx) / FEE_DENOMINATOR;\\n        }\\n\\n        dy = reducedXP[index] - _getYD(self, amp, index, reducedXP, D1);\\n        dy = (dy - 1) / self.tokenMultipliers[index];\\n        fee = ((xp[index] - newY) / self.tokenMultipliers[index]) - dy;\\n        dy = (dy * (FEE_DENOMINATOR - _calculateCurrentWithdrawFee(self, account))) / FEE_DENOMINATOR;\\n    }\\n\\n    function _feePerToken(SwapStorage storage self) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        return (self.fee * nCoins) / (4 * (nCoins - 1));\\n    }\\n\\n    function _getYD(\\n        SwapStorage storage self,\\n        uint256 A,\\n        uint256 index,\\n        uint256[] memory xp,\\n        uint256 D\\n    ) internal view returns (uint256) {\\n        uint256 nCoins = self.pooledTokens.length;\\n        assert(index < nCoins);\\n        uint256 Ann = A * nCoins;\\n        uint256 c = D;\\n        uint256 s = 0;\\n        uint256 _x = 0;\\n        uint256 yPrev = 0;\\n\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            if (i == index) {\\n                continue;\\n            }\\n            _x = xp[i];\\n            s += _x;\\n            c = (c * D) / (_x * nCoins);\\n        }\\n\\n        c = (c * D * A_PRECISION) / (Ann * nCoins);\\n        uint256 b = s + (D * A_PRECISION) / Ann;\\n        uint256 y = D;\\n\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (2 * y + b - D);\\n            if (_distance(yPrev, y) <= 1) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"invariantCalculationFailed\\\");\\n    }\\n\\n    function _updateUserWithdrawFee(\\n        SwapStorage storage self,\\n        address user,\\n        uint256 toMint\\n    ) internal {\\n        // If token is transferred to address 0 (or burned), don't update the fee.\\n        if (user == address(0)) {\\n            return;\\n        }\\n        if (self.defaultWithdrawFee == 0) {\\n            // If current fee is set to 0%, set multiplier to FEE_DENOMINATOR\\n            self.withdrawFeeMultiplier[user] = FEE_DENOMINATOR;\\n        } else {\\n            // Otherwise, calculate appropriate discount based on last deposit amount\\n            uint256 currentFee = _calculateCurrentWithdrawFee(self, user);\\n            uint256 currentBalance = self.lpToken.balanceOf(user);\\n\\n            // ((currentBalance * currentFee) + (toMint * defaultWithdrawFee)) * FEE_DENOMINATOR /\\n            // ((toMint + currentBalance) * defaultWithdrawFee)\\n            if ((toMint + currentBalance) * self.defaultWithdrawFee != 0) {\\n                self.withdrawFeeMultiplier[user] = (((currentBalance * currentFee) + (toMint * self.defaultWithdrawFee)) * (FEE_DENOMINATOR)) / ((toMint + currentBalance) * self.defaultWithdrawFee);\\n            }\\n        }\\n        self.depositTimestamp[user] = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Calculate the fee that is applied when the given user withdraws.\\n     * Withdraw fee decays linearly over 4 weeks.\\n     * @param user address you want to calculate withdraw fee of\\n     * @return current withdraw fee of the user\\n     */\\n    function _calculateCurrentWithdrawFee(SwapStorage storage self, address user) internal view returns (uint256) {\\n        uint256 endTime = self.depositTimestamp[user] + (4 weeks);\\n        if (endTime > block.timestamp) {\\n            uint256 timeLeftover = endTime - block.timestamp;\\n            return (self.defaultWithdrawFee * self.withdrawFeeMultiplier[user] * timeLeftover) / (4 weeks) / FEE_DENOMINATOR;\\n        }\\n        return 0;\\n    }\\n\\n    function _doTransferIn(IERC20 token, uint256 amount) internal returns (uint256) {\\n        uint256 priorBalance = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        return token.balanceOf(address(this)) - priorBalance;\\n    }\\n\\n    function _sumOf(uint256[] memory x) internal pure returns (uint256 sum) {\\n        sum = 0;\\n        for (uint256 i = 0; i < x.length; i++) {\\n            sum += x[i];\\n        }\\n    }\\n\\n    function _distance(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? x - y : y - x;\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"div\\\");\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"div\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return 1 + (a - 1) / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4b435fa3d4a5daec5c3d42160b1c62808675358eb701bf0824542463fead6fad\",\"license\":\"MIT\"},\"contracts/base/OwnerPausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../libraries/Pausable.sol\\\";\\n\\nabstract contract OwnerPausable is Ownable, Pausable {\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x4d45124cce896f252f86bd6c4fa58719d4ac169d65449b6dd4b9699750f2c3d1\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x53949e9a0715f73387ca0d7df5e6f858708953f8dd671225ca5a8bbf8198fd60\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x3d72d15f7e28feae0afcbffa0dc27e2a4b44828f414cd08be32ba130fbd8c1dc\",\"license\":\"MIT\"},\"contracts/interfaces/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.11;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x22f039855f27fa60f41ff2a5590b87a610cefdd0cf3f9b061e8c3b5f6c38c45b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event TokenExchange(address indexed buyer, uint256 soldId, uint256 tokensSold, uint256 boughtId, uint256 tokensBought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 flashFee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0xb36852aa7fd09252306bde9af5ad98c5ca6b32c3b04115b410b0767d804ffcab\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IRequiemSwap {\\n    // this funtion requires the correctly calculated amounts as input\\n    // the others are supposed to implement that calculation\\n    // no return value required since the amounts are already known\\n    function onSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address to\\n    ) external;\\n\\n    //\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external returns (uint256);\\n\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to\\n    ) external returns (uint256);\\n\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (uint256);\\n\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x786adb4474e2d66db467c3dcab7cb833d6b9a6b0db340090017b80a79a709bff\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x335d40e877d75f1696355fdb0cf7dd0641b6507f98b1b13519630c87329233c8\",\"license\":\"MIT\"},\"contracts/libraries/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ERC20/IERC20Metadata.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa3e528fa4df0f07132c9d77d3532d6511275b0e63575496faf48957f93f73997\",\"license\":\"MIT\"},\"contracts/libraries/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n// solhint-disable reason-string\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: burn amount exceeds allowance\\\"\\n        );\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xab8012a73a9d6792f7ba40615ea2e679c3f53d0713735f4c7fe0d2c81e40ed0c\",\"license\":\"MIT\"},\"contracts/libraries/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\",\"keccak256\":\"0xb65425255681ab6c33749bb100758e67f0de571e5bff4a07bbd0be68d14f51d8\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xf56aec80815d8035201f7f36a8a0852dbd987b1bfcdbbae385a23027f1088d6f\",\"license\":\"MIT\"},\"contracts/libraries/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\",\"keccak256\":\"0xa356390cf0ccc6c81aab26f3d2ce3ca7259b990e2725500f0e0cd34edda2506c\",\"license\":\"MIT\"},\"contracts/libraries/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0eb85949ec53aa08498764861cf32f624d0483e184041554e9444aa0143ff3d2\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        RequiemErrors._require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\n    }\\n}\\n\",\"keccak256\":\"0x8a2e602e863eb9790e1b47c0c658db60cae5e216de70dc5fd9cf682c7f6868cc\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.11;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x06e0c46c8b401ecc77c5da33f1c35e81f723df817ecbc3529ecb2cceb60f1612\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/math/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.11;\\n\\n// solhint-disable no-inline-assembly, reason-string\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            // EDIT for 0.8 compatibility:\\n            // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint256\\n            uint256 twos = denominator & (~denominator + 1);\\n\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\",\"keccak256\":\"0x8a683d1291a93ba9d54b37803f771827d3a6db63a22b7e99f1a55900e692d325\",\"license\":\"MIT\"},\"contracts/tokens/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\nimport \\\"../libraries/ERC20Burnable.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../interfaces/IRequiemStableSwap.sol\\\";\\n\\ncontract LPToken is Ownable, ERC20Burnable {\\n    IRequiemStableSwap public swap;\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n        swap = IRequiemStableSwap(msg.sender);\\n    }\\n\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"zeroMintAmount\\\");\\n        _mint(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n     * minting and burning. This ensures that swap.updateUserWithdrawFees are called everytime.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override(ERC20) {\\n        super._beforeTokenTransfer(from, to, amount);\\n        swap.updateUserWithdrawFee(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x60ccc35373a4c789928503c0287dfc34c90f683e5bf1c9c16b484b04386db7ec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d3362000034565b6000805460ff60a01b191690556001805562000084565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b614db680620000946000396000f3fe60806040523480156200001157600080fd5b5060043610620002aa5760003560e01c806304bc3b1c14620002af57806306e9481c14620002ec5780630ba8195914620003065780630d43e8ad14620003105780630e6d8bce146200033357806318f52ce2146200034a57806319762b73146200036357806331cd52b0146200037c57806332fd549314620003935780633969841514620003aa5780633e3a156014620003b55780633ed4c67814620003cc5780633f4ba83a14620003e35780634a1b0d5714620003ed5780634ac00e0314620004045780634d49e87d146200041b578063593d132c14620004325780635c38449e14620004495780635c975abb14620004605780635fd65f0f146200047b57806366c0bd2414620004fe5780636999b3771462000515578063715018a614620005295780637c61e56114620005335780638214f5a4146200054a57806382b86600146200055c5780638456cb59146200057357806384cdd9bc146200057d5780638554a7d414620005945780638da5cb5b14620005ab57806391ceb3eb14620005b557806398899f4014620005cc578063a1dc903114620005e3578063a2a957bb14620005ed578063a95b089f1462000604578063aa6ca808146200061b578063ab3d85441462000634578063ab5ac0611462000640578063bfd3956b1462000649578063c00c125c1462000660578063c4db7fa01462000677578063cc56fd431462000681578063ccfc2e8d1462000698578063d41f656814620006af578063d46300fd14620006b9578063d4b0de2f1462000634578063e25aa5fa14620006c3578063e6ab280614620006cd578063e9255bae14620006e4578063efeecb5114620006fb578063f2fde38b1462000704578063f3de0362146200071b578063fe49abe31462000728578063ff68562c1462000634575b600080fd5b620002d5620002c036600462002c49565b60136020526000908152604090205460ff1681565b60405160ff90911681526020015b60405180910390f35b620002f76201518081565b604051908152602001620002e3565b620002f762000732565b60115462000324906001600160a01b031681565b604051620002e3919062002c69565b620002f76200034436600462002c7d565b620007b2565b62000354620008d0565b604051620002e3919062002ce3565b6200037a6200037436600462002f09565b620009e2565b005b620003546200038d36600462003069565b6200108a565b6200037a620003a436600462002c7d565b6200116e565b620002f7620f424081565b620002f7620003c6366004620030bc565b6200127f565b6200037a620003dd36600462002c49565b62001362565b6200037a62001417565b620002f7620003fe36600462002c49565b62001457565b620002f76200041536600462002c7d565b6200146c565b620002f76200042c366004620030fa565b6200152f565b6200037a620004433660046200314b565b6200162c565b6200037a6200045a3660046200316e565b6200189b565b6200046a6200196e565b6040519015158152602001620002e3565b600454600754600854600954600a54600b54600c54600d54600e54620004af986001600160a01b0316979695949392919089565b604080516001600160a01b03909a168a5260208a0198909852968801959095526060870193909352608086019190915260a085015260c084015260e083015261010082015261012001620002e3565b620002d56200050f36600462002c49565b6200197e565b60125462000324906001600160a01b031681565b6200037a62001a0e565b62000354620005443660046200327b565b62001a4e565b6004546001600160a01b031662000324565b620003246200056d366004620032aa565b62001ade565b6200037a62001b17565b620002f76200058e366004620030fa565b62001b55565b620002f7620005a5366004620032aa565b62001c0e565b6200032462001c91565b620002f7620005c6366004620032aa565b62001ca0565b620002f7620005dd366004620032c8565b62001ccf565b6200035462001d71565b6200037a620005fe3660046200330b565b62001dcd565b620002f7620006153660046200333e565b62001f15565b6200062562001f58565b604051620002e391906200337f565b620002f76305f5e10081565b620002f7600a81565b620002f76200065a366004620033c2565b62001fbe565b6200037a620006713660046200327b565b620020d1565b6200037a6200218c565b620002f7620006923660046200342c565b620022ce565b6200037a620006a936600462002c49565b62002339565b62000354620023e3565b620002f76200243e565b620002f76200247a565b620002f7620006de36600462003481565b620024b6565b620002f7620006f53660046200342c565b620024f9565b600354620002f7565b6200037a6200071536600462002c49565b62002564565b620002f76402540be40081565b6200037a6200260d565b60405163a303558560e01b81526003600482015260009073a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc99063a3035585906024015b602060405180830381865af415801562000787573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007ad91906200350d565b905090565b6000620007be6200196e565b15620007e75760405162461bcd60e51b8152600401620007de9062003527565b60405180910390fd5b600260015414156200080d5760405162461bcd60e51b8152600401620007de9062003551565b60026001556001600160a01b0380871660009081526013602052604080822054928816825290819020549051634736d3db60e11b815273a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc992638e6da7b6926200087e9260039260ff9081169216908a908a908a9060040162003588565b602060405180830381865af41580156200089c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008c291906200350d565b600180559695505050505050565b600354606090806001600160401b03811115620008f157620008f162002d29565b6040519080825280602002602001820160405280156200091b578160200160208202803683370190505b50915060005b81811015620009dd5760405163e2eba89b60e01b8152600360048201526024810182905273a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc99063e2eba89b90604401602060405180830381865af415801562000982573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009a891906200350d565b838281518110620009bd57620009bd620035bf565b602090810291909101015280620009d481620035eb565b91505062000921565b505090565b33620009ed62001c91565b6001600160a01b03161462000a165760405162461bcd60e51b8152600401620007de9062003609565b600254610100900460ff168062000a30575060025460ff16155b62000a955760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620007de565b600254610100900460ff1615801562000ab8576002805461ffff19166101011790555b89518b511462000b015760405162461bcd60e51b815260206004820152601360248201527218dbda5b9cd308084f48191958da5b585b1cd3606a1b6044820152606401620007de565b6001600160a01b03821662000b525760405162461bcd60e51b81526020600482015260166024820152756665654469737472696275746f72203d20656d70747960501b6044820152606401620007de565b8a516000816001600160401b0381111562000b715762000b7162002d29565b60405190808252806020026020018201604052801562000b9b578160200160208202803683370190505b5090506000826001600160401b0381111562000bbb5762000bbb62002d29565b60405190808252806020026020018201604052801562000be5578160200160208202803683370190505b50905060005b8381101562000ded5760006001600160a01b03168f828151811062000c145762000c14620035bf565b60200260200101516001600160a01b0316141562000c6b5760405162461bcd60e51b8152602060048201526013602482015272696e76616c6964546f6b656e4164647265737360681b6044820152606401620007de565b60128e828151811062000c825762000c82620035bf565b602002602001015160ff16111562000ccf5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964446563696d616c7360881b6044820152606401620007de565b8d818151811062000ce45762000ce4620035bf565b602002602001015160ff16601262000cfd91906200363e565b62000d0a90600a62003755565b83828151811062000d1f5762000d1f620035bf565b6020026020010181815250508e818151811062000d405762000d40620035bf565b602002602001015182828151811062000d5d5762000d5d620035bf565b60200260200101906001600160a01b031690816001600160a01b031681525050806013600084848151811062000d975762000d97620035bf565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908360ff160217905550808062000de490620035eb565b91505062000beb565b50620f42408a1062000e2b5760405162461bcd60e51b81526020600482015260066024820152653e206d61784160d01b6044820152606401620007de565b6305f5e10089111562000e6d5760405162461bcd60e51b81526020600482015260096024820152683e206d61785346656560b81b6044820152606401620007de565b6305f5e10088111562000eaf5760405162461bcd60e51b81526020600482015260096024820152683e206d61784646656560b81b6044820152606401620007de565b6402540be40087111562000ef25760405162461bcd60e51b81526020600482015260096024820152683e206d61784146656560b81b6044820152606401620007de565b6305f5e10086111562000f345760405162461bcd60e51b81526020600482015260096024820152683e206d61785746656560b81b6044820152606401620007de565b8b8b60405162000f449062002b59565b62000f51929190620037c0565b604051809103906000f08015801562000f6e573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b0392909216919091179055826001600160401b0381111562000faa5762000faa62002d29565b60405190808252806020026020018201604052801562000fd4578160200160208202803683370190505b50805162000feb9160069160209091019062002b67565b5081516200100190600590602085019062002b67565b5080516200101790600390602084019062002bb7565b506200102560648b620037f2565b600a556200103560648b620037f2565b600b55505050600786905560088590556009849055600e839055601180546001600160a01b0319166001600160a01b03841617905580156200107d576002805461ff00191690555b5050505050505050505050565b606060026001541415620010b25760405162461bcd60e51b8152600401620007de9062003551565b60026001558142811015620010db5760405162461bcd60e51b8152600401620007de9062003814565b6040516331a15a5b60e21b815273a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc99063c685696c9062001119906003908990899060040162003872565b600060405180830381865af415801562001137573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001161919081019062003893565b6001805595945050505050565b620011786200196e565b15620011985760405162461bcd60e51b8152600401620007de9062003527565b60026001541415620011be5760405162461bcd60e51b8152600401620007de9062003551565b60026001556001600160a01b038086166000908152601360205260408082205492871682529081902054905163ce055b8d60e01b815273a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc99263ce055b8d926200122f9260039260ff90811692169089908990899060040162003588565b602060405180830381865af41580156200124d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200127391906200350d565b50506001805550505050565b600060026001541415620012a75760405162461bcd60e51b8152600401620007de9062003551565b6002600155620012b66200196e565b15620012d65760405162461bcd60e51b8152600401620007de9062003527565b8180421115620012fa5760405162461bcd60e51b8152600401620007de9062003814565b6040516302bfe30d60e41b8152600360048201526024810187905260ff861660448201526064810185905273a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc990632bfe30d090608401602060405180830381865af41580156200089c573d6000803e3d6000fd5b336200136d62001c91565b6001600160a01b031614620013965760405162461bcd60e51b8152600401620007de9062003609565b6001600160a01b038116620013bf5760405162461bcd60e51b8152600401620007de906200392c565b601280546001600160a01b0319166001600160a01b0383161790556040517f4c3f3b9852ccceadd50f16518f348e2624c8f0240acdd5bc81911c0fba83ec67906200140c90839062002c69565b60405180910390a150565b336200142262001c91565b6001600160a01b0316146200144b5760405162461bcd60e51b8152600401620007de9062003609565b62001455620027db565b565b60006200146660038362002873565b92915050565b6000620014786200196e565b15620014985760405162461bcd60e51b8152600401620007de9062003527565b60026001541415620014be5760405162461bcd60e51b8152600401620007de9062003551565b60026001556001600160a01b03808716600090815260136020526040808220549288168252908190205490516306d1a87b60e11b815273a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc992630da350f6926200087e9260039260ff9081169216908a908a908a9060040162003588565b60006200153b6200196e565b156200155b5760405162461bcd60e51b8152600401620007de9062003527565b60026001541415620015815760405162461bcd60e51b8152600401620007de9062003551565b60026001558142811015620015aa5760405162461bcd60e51b8152600401620007de9062003814565b604051631e9b2e8f60e21b815273a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc990637a6cba3c90620015e890600390899089906004016200394a565b602060405180830381865af415801562001606573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200116191906200350d565b336200163762001c91565b6001600160a01b031614620016605760405162461bcd60e51b8152600401620007de9062003609565b600c5462001672906201518062003975565b421015620016ad5760405162461bcd60e51b81526020600482015260076024820152660f081c985b5c1160ca1b6044820152606401620007de565b620016bc620151804262003975565b811015620016fa5760405162461bcd60e51b815260206004820152600a6024820152690f081b5a5b94985b5c1560b21b6044820152606401620007de565b8160001080156200170d5750620f424082105b620017485760405162461bcd60e51b815260206004820152600a6024820152696f75744f6652616e676560b01b6044820152606401620007de565b60405163a303558560e01b81526003600482015260009073a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc99063a303558590602401602060405180830381865af41580156200179c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017c291906200350d565b90506000620017d3606485620037f2565b905081811015620018135781620017ec600a83620037f2565b10156200180d5760405162461bcd60e51b8152600401620007de9062003990565b62001842565b62001820600a83620037f2565b811115620018425760405162461bcd60e51b8152600401620007de9062003990565b600a829055600b81905542600c819055600d8490556040517fa2b71ec6df949300b59aab36b55e189697b750119dd349fcfa8c0f779e83c254916200188d91859185918890620039b0565b60405180910390a150505050565b60026001541415620018c15760405162461bcd60e51b8152600401620007de9062003551565b6002600155620018d06200196e565b15620018f05760405162461bcd60e51b8152600401620007de9062003527565b60405163c823250160e01b815273a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc99063c82325019062001932906003908890889088908890600401620039cb565b60006040518083038186803b1580156200194b57600080fd5b505af415801562001960573d6000803e3d6000fd5b505060018055505050505050565b600054600160a01b900460ff1690565b6001600160a01b0381166000818152601360205260409020546003805460ff909216929183908110620019b557620019b5620035bf565b6000918252602090912001546001600160a01b03161462001a095760405162461bcd60e51b815260206004820152600d60248201526c1d1bdad95b939bdd119bdd5b99609a1b6044820152606401620007de565b919050565b3362001a1962001c91565b6001600160a01b03161462001a425760405162461bcd60e51b8152600401620007de9062003609565b6200145560006200292d565b60405163fa56359760e01b815260609073a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc99063fa5635979062001a8f906003908790879060040162003a5a565b600060405180830381865af415801562001aad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001ad7919081019062003893565b9392505050565b600060036000018260ff168154811062001afc5762001afc620035bf565b6000918252602090912001546001600160a01b031692915050565b3362001b2262001c91565b6001600160a01b03161462001b4b5760405162461bcd60e51b8152600401620007de9062003609565b620014556200297d565b60006002600154141562001b7d5760405162461bcd60e51b8152600401620007de9062003551565b600260015562001b8c6200196e565b1562001bac5760405162461bcd60e51b8152600401620007de9062003527565b818042111562001bd05760405162461bcd60e51b8152600401620007de9062003814565b60405163641a260360e11b815273a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc99063c8344c0690620015e890600390899089906004016200394a565b60405163e2eba89b60e01b81526003600482015260ff8216602482015260009073a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc99063e2eba89b90604401602060405180830381865af415801562001c6b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200146691906200350d565b6000546001600160a01b031690565b6000600380018260ff168154811062001cbd5762001cbd620035bf565b90600052602060002001549050919050565b60405163159763bb60e01b8152600360048201526001600160a01b03841660248201526044810183905260ff8216606482015260009073a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc99063159763bb906084015b602060405180830381865af415801562001d43573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d6991906200350d565b949350505050565b60606003800180548060200260200160405190810160405280929190818152602001828054801562001dc357602002820191906000526020600020905b81548152602001906001019080831162001dae575b5050505050905090565b3362001dd862001c91565b6001600160a01b03161462001e015760405162461bcd60e51b8152600401620007de9062003609565b6305f5e10084111562001e285760405162461bcd60e51b8152600401620007de9062003a79565b6305f5e10083111562001e4f5760405162461bcd60e51b8152600401620007de9062003a79565b6402540be40082111562001e8f5760405162461bcd60e51b81526020600482015260066024820152653e204146656560d01b6044820152606401620007de565b6305f5e10081111562001ece5760405162461bcd60e51b81526020600482015260066024820152653e205746656560d01b6044820152606401620007de565b60098290556007849055600e8190556040517f0272af61e59abaa206f4d3d15474b045c5fdbad2379f620b67074e9b13bfaad1906200188d908690869086908690620039b0565b60405163ba2998d960e01b815260009073a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc99063ba2998d99062001d259060039088908890889060040162003a99565b6060600360000180548060200260200160405190810160405280929190818152602001828054801562001dc357602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001f96575050505050905090565b600062001fca6200196e565b1562001fea5760405162461bcd60e51b8152600401620007de9062003527565b60026001541415620020105760405162461bcd60e51b8152600401620007de9062003551565b60026001558142811015620020395760405162461bcd60e51b8152600401620007de9062003814565b60405163ad30093f60e01b815273a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc99063ad30093f906200207d906003908c908c908c908c908c9060040162003588565b602060405180830381865af41580156200209b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020c191906200350d565b6001805598975050505050505050565b6004546001600160a01b03163314620021185760405162461bcd60e51b815260206004820152600860248201526710b6382a37b5b2b760c11b6044820152606401620007de565b6040516360c4725f60e11b815273a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc99063c188e4be9062002156906003908690869060040162003a5a565b60006040518083038186803b1580156200216f57600080fd5b505af415801562002184573d6000803e3d6000fd5b505050505050565b336200219762001c91565b6001600160a01b031614620021c05760405162461bcd60e51b8152600401620007de9062003609565b600d544210620022045760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e54dd1bdc1c195960921b6044820152606401620007de565b60405163a303558560e01b81526003600482015260009073a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc99063a303558590602401602060405180830381865af415801562002258573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200227e91906200350d565b600a819055600b81905542600c819055600d8190556040519192507f46e22fb3709ad289f62ce63d469248536dbc78d82b84a3d7e74ad606dc201938916200140c91848252602082015260400190565b6001600160a01b03808416600090815260136020526040808220549285168252808220549051635502a57760e11b8152919273a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc99263aa054aee9262001d259260039260ff9182169290911690889060040162003a99565b336200234462001c91565b6001600160a01b0316146200236d5760405162461bcd60e51b8152600401620007de9062003609565b6001600160a01b038116620023965760405162461bcd60e51b8152600401620007de906200392c565b601180546001600160a01b0319166001600160a01b0383161790556040517fae5a12c29e496b092467a620746b9eaf4e0e231a631a4370c233b1fac38e8e26906200140c90839062002c69565b6060600360020180548060200260200160405190810160405280929190818152602001828054801562001dc3576020028201919060005260206000209081548152602001906001019080831162001dae575050505050905090565b60405163b52e146f60e01b81526003600482015260009073a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc99063b52e146f9060240162000769565b6040516334d9812b60e21b81526003600482015260009073a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc99063d36604ac9060240162000769565b604051631e7e95d360e01b815260009073a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc990631e7e95d39062001d259060039088908890889060040162003ab8565b6001600160a01b0380841660009081526013602052604080822054928516825280822054905163ba2998d960e01b8152919273a82fF9aFd8f496c3d6ac40E2a0F282E47488CFc99263ba2998d99262001d259260039260ff9182169290911690889060040162003a99565b336200256f62001c91565b6001600160a01b031614620025985760405162461bcd60e51b8152600401620007de9062003609565b6001600160a01b038116620025ff5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620007de565b6200260a816200292d565b50565b6012546001600160a01b03163314806200264157506200262c62001c91565b6001600160a01b0316336001600160a01b0316145b620026805760405162461bcd60e51b815260206004820152600e60248201526d10b332b2a1b7b73a3937b63632b960911b6044820152606401620007de565b60005b6003548110156200260a57600060036000018281548110620026a957620026a9620035bf565b6000918252602082200154600680546001600160a01b0390921693509084908110620026d957620026d9620035bf565b9060005260206000200154826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040162002712919062002c69565b602060405180830381865afa15801562002730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200275691906200350d565b6200276291906200363e565b90508015620027c35760115462002787906001600160a01b03848116911683620029e3565b7fee3859efa95e525bc2bcb149b51b60a8bb4e89c647392d9d4112e03c3e73bdd68282604051620027ba92919062003b0a565b60405180910390a15b50508080620027d290620035eb565b91505062002683565b620027e56200196e565b6200282a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401620007de565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405162002869919062002c69565b60405180910390a1565b6001600160a01b0381166000908152600c8301602052604081205481906200289f906224ea0062003975565b90504281111562002923576000620028b842836200363e565b6001600160a01b0385166000908152600d87016020526040902054600b8701549192506402540be400916224ea00918491620028f59190620037f2565b620029019190620037f2565b6200290d919062003b23565b62002919919062003b23565b9250505062001466565b5060009392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620029876200196e565b15620029a75760405162461bcd60e51b8152600401620007de9062003527565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586200285a3390565b62002a3d8363a9059cbb60e01b848460405160240162002a0592919062003b0a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915262002a42565b505050565b600080836001600160a01b03168360405162002a5f919062003b46565b6000604051808303816000865af19150503d806000811462002a9e576040519150601f19603f3d011682016040523d82523d6000602084013e62002aa3565b606091505b5091509150600082141562002abc573d6000803e3d6000fd5b62002aeb81516000148062002ae257508180602001905181019062002ae2919062003b64565b6101a262002af1565b50505050565b8162002b025762002b028162002b06565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6111fc8062003b8583390190565b82805482825590600052602060002090810192821562002ba5579160200282015b8281111562002ba557825182559160200191906001019062002b88565b5062002bb392915062002c0f565b5090565b82805482825590600052602060002090810192821562002ba5579160200282015b8281111562002ba557825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062002bd8565b5b8082111562002bb3576000815560010162002c10565b6001600160a01b03811681146200260a57600080fd5b803562001a098162002c26565b60006020828403121562002c5c57600080fd5b813562001ad78162002c26565b6001600160a01b0391909116815260200190565b600080600080600060a0868803121562002c9657600080fd5b853562002ca38162002c26565b9450602086013562002cb58162002c26565b93506040860135925060608601359150608086013562002cd58162002c26565b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b8181101562002d1d5783518352928401929184019160010162002cff565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562002d6a5762002d6a62002d29565b604052919050565b60006001600160401b0382111562002d8e5762002d8e62002d29565b5060051b60200190565b600082601f83011262002daa57600080fd5b8135602062002dc362002dbd8362002d72565b62002d3f565b82815260059290921b8401810191818101908684111562002de357600080fd5b8286015b8481101562002e0b57803562002dfd8162002c26565b835291830191830162002de7565b509695505050505050565b803560ff8116811462001a0957600080fd5b600082601f83011262002e3a57600080fd5b8135602062002e4d62002dbd8362002d72565b82815260059290921b8401810191818101908684111562002e6d57600080fd5b8286015b8481101562002e0b5762002e858162002e16565b835291830191830162002e71565b600082601f83011262002ea557600080fd5b81356001600160401b0381111562002ec15762002ec162002d29565b62002ed6601f8201601f191660200162002d3f565b81815284602083860101111562002eec57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806000806000806000806101408b8d03121562002f2a57600080fd5b8a356001600160401b038082111562002f4257600080fd5b62002f508e838f0162002d98565b9b5060208d013591508082111562002f6757600080fd5b62002f758e838f0162002e28565b9a5060408d013591508082111562002f8c57600080fd5b62002f9a8e838f0162002e93565b995060608d013591508082111562002fb157600080fd5b5062002fc08d828e0162002e93565b97505060808b0135955060a08b0135945060c08b0135935060e08b013592506101008b0135915062002ff66101208c0162002c3c565b90509295989b9194979a5092959850565b600082601f8301126200301957600080fd5b813560206200302c62002dbd8362002d72565b82815260059290921b840181019181810190868411156200304c57600080fd5b8286015b8481101562002e0b578035835291830191830162003050565b6000806000606084860312156200307f57600080fd5b8335925060208401356001600160401b038111156200309d57600080fd5b620030ab8682870162003007565b925050604084013590509250925092565b60008060008060808587031215620030d357600080fd5b84359350620030e56020860162002e16565b93969395505050506040820135916060013590565b6000806000606084860312156200311057600080fd5b83356001600160401b038111156200312757600080fd5b620031358682870162003007565b9660208601359650604090950135949350505050565b600080604083850312156200315f57600080fd5b50508035926020909101359150565b600080600080608085870312156200318557600080fd5b8435620031928162002c26565b93506020858101356001600160401b0380821115620031b057600080fd5b818801915088601f830112620031c557600080fd5b8135620031d662002dbd8262002d72565b81815260059190911b8301840190848101908b831115620031f657600080fd5b938501935b8285101562003221578435620032118162002c26565b82529385019390850190620031fb565b9750505060408801359250808311156200323a57600080fd5b6200324889848a0162003007565b945060608801359250808311156200325f57600080fd5b50506200326f8782880162002e93565b91505092959194509250565b600080604083850312156200328f57600080fd5b82356200329c8162002c26565b946020939093013593505050565b600060208284031215620032bd57600080fd5b62001ad78262002e16565b600080600060608486031215620032de57600080fd5b8335620032eb8162002c26565b925060208401359150620033026040850162002e16565b90509250925092565b600080600080608085870312156200332257600080fd5b5050823594602084013594506040840135936060013592509050565b6000806000606084860312156200335457600080fd5b6200335f8462002e16565b92506200336f6020850162002e16565b9150604084013590509250925092565b6020808252825182820181905260009190848201906040850190845b8181101562002d1d5783516001600160a01b0316835292840192918401916001016200339b565b60008060008060008060c08789031215620033dc57600080fd5b620033e78762002e16565b9550620033f76020880162002e16565b945060408701359350606087013592506080870135620034178162002c26565b8092505060a087013590509295509295509295565b6000806000606084860312156200344257600080fd5b83356200344f8162002c26565b92506020840135620034618162002c26565b929592945050506040919091013590565b80151581146200260a57600080fd5b6000806000604084860312156200349757600080fd5b83356001600160401b0380821115620034af57600080fd5b818601915086601f830112620034c457600080fd5b813581811115620034d457600080fd5b8760208260051b8501011115620034ea57600080fd5b60209283019550935050840135620035028162003472565b809150509250925092565b6000602082840312156200352057600080fd5b5051919050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b95865260ff9485166020870152929093166040850152606084015260808301919091526001600160a01b031660a082015260c00190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415620036025762003602620035d5565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082821015620036535762003653620035d5565b500390565b600181815b80851115620036995781600019048211156200367d576200367d620035d5565b808516156200368b57918102915b93841c93908002906200365d565b509250929050565b600082620036b25750600162001466565b81620036c15750600062001466565b8160018114620036da5760028114620036e55762003705565b600191505062001466565b60ff841115620036f957620036f9620035d5565b50506001821b62001466565b5060208310610133831016604e8410600b84101617156200372a575081810a62001466565b62003736838362003658565b80600019048211156200374d576200374d620035d5565b029392505050565b600062001ad78383620036a1565b60005b838110156200378057818101518382015260200162003766565b8381111562002aeb5750506000910152565b60008151808452620037ac81602086016020860162003763565b601f01601f19169290920160200192915050565b604081526000620037d5604083018562003792565b8281036020840152620037e9818562003792565b95945050505050565b60008160001904831182151516156200380f576200380f620035d5565b500290565b6020808252600790820152661d1a5b595bdd5d60ca1b604082015260600190565b600081518084526020808501945080840160005b83811015620038675781518752958201959082019060010162003849565b509495945050505050565b838152826020820152606060408201526000620037e9606083018462003835565b60006020808385031215620038a757600080fd5b82516001600160401b03811115620038be57600080fd5b8301601f81018513620038d057600080fd5b8051620038e162002dbd8262002d72565b81815260059190911b820183019083810190878311156200390157600080fd5b928401925b82841015620039215783518252928401929084019062003906565b979650505050505050565b6020808252600490820152637a65726f60e01b604082015260600190565b83815260606020820152600062003965606083018562003835565b9050826040830152949350505050565b600082198211156200398b576200398b620035d5565b500190565b6020808252600690820152653e206d61784360d01b604082015260600190565b93845260208401929092526040830152606082015260800190565b600060a08201878352602060018060a01b038089168286015260a0604086015282885180855260c087019150838a01945060005b8181101562003a1f578551841683529484019491840191600101620039ff565b5050858103606087015262003a35818962003835565b9350505050828103608084015262003a4e818562003792565b98975050505050505050565b9283526001600160a01b03919091166020830152604082015260600190565b6020808252600690820152653e205346656560d01b604082015260600190565b93845260ff928316602085015291166040830152606082015260800190565b848152606060208201819052810183905260006001600160fb1b0384111562003ae057600080fd5b8360051b808660808501376000908301608001908152921515604090920191909152509392505050565b6001600160a01b03929092168252602082015260400190565b60008262003b4157634e487b7160e01b600052601260045260246000fd5b500490565b6000825162003b5a81846020870162003763565b9190910192915050565b60006020828403121562003b7757600080fd5b815162001ad7816200347256fe60806040523480156200001157600080fd5b50604051620011fc380380620011fc833981016040819052620000349162000256565b8181620000413362000093565b815162000056906004906020850190620000e3565b5080516200006c906005906020840190620000e3565b50506006805433610100026001600160a81b031990911617601217905550620002fd915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054620000f190620002c0565b90600052602060002090601f01602090048101928262000115576000855562000160565b82601f106200013057805160ff191683800117855562000160565b8280016001018555821562000160579182015b828111156200016057825182559160200191906001019062000143565b506200016e92915062000172565b5090565b5b808211156200016e576000815560010162000173565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001b157600080fd5b81516001600160401b0380821115620001ce57620001ce62000189565b604051601f8301601f19908116603f01168101908282118183101715620001f957620001f962000189565b816040528381526020925086838588010111156200021657600080fd5b600091505b838210156200023a57858201830151818301840152908201906200021b565b838211156200024c5760008385830101525b9695505050505050565b600080604083850312156200026a57600080fd5b82516001600160401b03808211156200028257600080fd5b62000290868387016200019f565b93506020850151915080821115620002a757600080fd5b50620002b6858286016200019f565b9150509250929050565b600181811c90821680620002d557607f821691505b60208210811415620002f757634e487b7160e01b600052602260045260246000fd5b50919050565b610eef806200030d6000396000f3fe608060405234801561001057600080fd5b50600436106100e65760003560e01c806306fdde03146100eb578063095ea7b31461010957806318160ddd1461012c57806323b872dd1461013e578063313ce56714610151578063395093511461016057806340c10f191461017357806342966c681461018857806370a082311461019b578063715018a6146101c457806379cc6790146101cc5780638119c065146101df5780638da5cb5b1461020f57806395d89b4114610217578063a457c2d71461021f578063a9059cbb14610232578063dd62ed3e14610245578063f2fde38b1461027e575b600080fd5b6100f3610291565b6040516101009190610c9f565b60405180910390f35b61011c610117366004610d10565b610323565b6040519015158152602001610100565b6003545b604051908152602001610100565b61011c61014c366004610d3a565b610339565b60405160128152602001610100565b61011c61016e366004610d10565b6103e8565b610186610181366004610d10565b610424565b005b610186610196366004610d76565b6104a2565b6101306101a9366004610d8f565b6001600160a01b031660009081526001602052604090205490565b6101866104af565b6101866101da366004610d10565b6104ea565b6006546101f79061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610100565b6101f7610570565b6100f361057f565b61011c61022d366004610d10565b61058e565b61011c610240366004610d10565b610627565b610130610253366004610db1565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b61018661028c366004610d8f565b610634565b6060600480546102a090610de4565b80601f01602080910402602001604051908101604052809291908181526020018280546102cc90610de4565b80156103195780601f106102ee57610100808354040283529160200191610319565b820191906000526020600020905b8154815290600101906020018083116102fc57829003601f168201915b5050505050905090565b60006103303384846106d1565b50600192915050565b60006103468484846107f5565b6001600160a01b0384166000908152600260209081526040808320338452909152902054828110156103d05760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103dd85338584036106d1565b506001949350505050565b3360008181526002602090815260408083206001600160a01b0387168452909152812054909161033091859061041f908690610e35565b6106d1565b3361042d610570565b6001600160a01b0316146104535760405162461bcd60e51b81526004016103c790610e4d565b600081116104945760405162461bcd60e51b815260206004820152600e60248201526d1e995c9bd35a5b9d105b5bdd5b9d60921b60448201526064016103c7565b61049e82826109bd565b5050565b6104ac3382610a96565b50565b336104b8610570565b6001600160a01b0316146104de5760405162461bcd60e51b81526004016103c790610e4d565b6104e86000610bde565b565b60006104f68333610253565b9050818110156105545760405162461bcd60e51b8152602060048201526024808201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604482015263616e636560e01b60648201526084016103c7565b61056183338484036106d1565b61056b8383610a96565b505050565b6000546001600160a01b031690565b6060600580546102a090610de4565b3360009081526002602090815260408083206001600160a01b0386168452909152812054828110156106105760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103c7565b61061d33858584036106d1565b5060019392505050565b60006103303384846107f5565b3361063d610570565b6001600160a01b0316146106635760405162461bcd60e51b81526004016103c790610e4d565b6001600160a01b0381166106c85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103c7565b6104ac81610bde565b6001600160a01b0383166107335760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103c7565b6001600160a01b0382166107945760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103c7565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166108595760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103c7565b6001600160a01b0382166108bb5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103c7565b6108c6838383610c2e565b6001600160a01b0383166000908152600160205260409020548181101561093e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103c7565b6001600160a01b03808516600090815260016020526040808220858503905591851681529081208054849290610975908490610e35565b92505081905550826001600160a01b0316846001600160a01b0316600080516020610e9a833981519152846040516109af91815260200190565b60405180910390a350505050565b6001600160a01b038216610a135760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103c7565b610a1f60008383610c2e565b8060036000828254610a319190610e35565b90915550506001600160a01b03821660009081526001602052604081208054839290610a5e908490610e35565b90915550506040518181526001600160a01b03831690600090600080516020610e9a8339815191529060200160405180910390a35050565b6001600160a01b038216610af65760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103c7565b610b0282600083610c2e565b6001600160a01b03821660009081526001602052604090205481811015610b765760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103c7565b6001600160a01b0383166000908152600160205260408120838303905560038054849290610ba5908490610e82565b90915550506040518281526000906001600160a01b03851690600080516020610e9a8339815191529060200160405180910390a3505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600654604051633003049760e21b81526001600160a01b038481166004830152602482018490526101009092049091169063c00c125c90604401600060405180830381600087803b158015610c8257600080fd5b505af1158015610c96573d6000803e3d6000fd5b50505050505050565b600060208083528351808285015260005b81811015610ccc57858101830151858201604001528201610cb0565b81811115610cde576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610d0b57600080fd5b919050565b60008060408385031215610d2357600080fd5b610d2c83610cf4565b946020939093013593505050565b600080600060608486031215610d4f57600080fd5b610d5884610cf4565b9250610d6660208501610cf4565b9150604084013590509250925092565b600060208284031215610d8857600080fd5b5035919050565b600060208284031215610da157600080fd5b610daa82610cf4565b9392505050565b60008060408385031215610dc457600080fd5b610dcd83610cf4565b9150610ddb60208401610cf4565b90509250929050565b600181811c90821680610df857607f821691505b60208210811415610e1957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610e4857610e48610e1f565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082821015610e9457610e94610e1f565b50039056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220effd6f81c034d4de3f9e39042ccc6043dfbe956fef1bcded3b6d2e9e274ba63364736f6c634300080b0033a264697066735822122089508fb0864eccfa502b398b6cbe71a2a66b3a4658a4760a893955c3ae8e7d1b64736f6c634300080b0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620002aa5760003560e01c806304bc3b1c14620002af57806306e9481c14620002ec5780630ba8195914620003065780630d43e8ad14620003105780630e6d8bce146200033357806318f52ce2146200034a57806319762b73146200036357806331cd52b0146200037c57806332fd549314620003935780633969841514620003aa5780633e3a156014620003b55780633ed4c67814620003cc5780633f4ba83a14620003e35780634a1b0d5714620003ed5780634ac00e0314620004045780634d49e87d146200041b578063593d132c14620004325780635c38449e14620004495780635c975abb14620004605780635fd65f0f146200047b57806366c0bd2414620004fe5780636999b3771462000515578063715018a614620005295780637c61e56114620005335780638214f5a4146200054a57806382b86600146200055c5780638456cb59146200057357806384cdd9bc146200057d5780638554a7d414620005945780638da5cb5b14620005ab57806391ceb3eb14620005b557806398899f4014620005cc578063a1dc903114620005e3578063a2a957bb14620005ed578063a95b089f1462000604578063aa6ca808146200061b578063ab3d85441462000634578063ab5ac0611462000640578063bfd3956b1462000649578063c00c125c1462000660578063c4db7fa01462000677578063cc56fd431462000681578063ccfc2e8d1462000698578063d41f656814620006af578063d46300fd14620006b9578063d4b0de2f1462000634578063e25aa5fa14620006c3578063e6ab280614620006cd578063e9255bae14620006e4578063efeecb5114620006fb578063f2fde38b1462000704578063f3de0362146200071b578063fe49abe31462000728578063ff68562c1462000634575b600080fd5b620002d5620002c036600462002c49565b60136020526000908152604090205460ff1681565b60405160ff90911681526020015b60405180910390f35b620002f76201518081565b604051908152602001620002e3565b620002f762000732565b60115462000324906001600160a01b031681565b604051620002e3919062002c69565b620002f76200034436600462002c7d565b620007b2565b62000354620008d0565b604051620002e3919062002ce3565b6200037a6200037436600462002f09565b620009e2565b005b620003546200038d36600462003069565b6200108a565b6200037a620003a436600462002c7d565b6200116e565b620002f7620f424081565b620002f7620003c6366004620030bc565b6200127f565b6200037a620003dd36600462002c49565b62001362565b6200037a62001417565b620002f7620003fe36600462002c49565b62001457565b620002f76200041536600462002c7d565b6200146c565b620002f76200042c366004620030fa565b6200152f565b6200037a620004433660046200314b565b6200162c565b6200037a6200045a3660046200316e565b6200189b565b6200046a6200196e565b6040519015158152602001620002e3565b600454600754600854600954600a54600b54600c54600d54600e54620004af986001600160a01b0316979695949392919089565b604080516001600160a01b03909a168a5260208a0198909852968801959095526060870193909352608086019190915260a085015260c084015260e083015261010082015261012001620002e3565b620002d56200050f36600462002c49565b6200197e565b60125462000324906001600160a01b031681565b6200037a62001a0e565b62000354620005443660046200327b565b62001a4e565b6004546001600160a01b031662000324565b620003246200056d366004620032aa565b62001ade565b6200037a62001b17565b620002f76200058e366004620030fa565b62001b55565b620002f7620005a5366004620032aa565b62001c0e565b6200032462001c91565b620002f7620005c6366004620032aa565b62001ca0565b620002f7620005dd366004620032c8565b62001ccf565b6200035462001d71565b6200037a620005fe3660046200330b565b62001dcd565b620002f7620006153660046200333e565b62001f15565b6200062562001f58565b604051620002e391906200337f565b620002f76305f5e10081565b620002f7600a81565b620002f76200065a366004620033c2565b62001fbe565b6200037a620006713660046200327b565b620020d1565b6200037a6200218c565b620002f7620006923660046200342c565b620022ce565b6200037a620006a936600462002c49565b62002339565b62000354620023e3565b620002f76200243e565b620002f76200247a565b620002f7620006de36600462003481565b620024b6565b620002f7620006f53660046200342c565b620024f9565b600354620002f7565b6200037a6200071536600462002c49565b62002564565b620002f76402540be40081565b6200037a6200260d565b60405163a303558560e01b81526003600482015260009073__$6aaf67e7827a013dd22ce71b2520632c86$__9063a3035585906024015b602060405180830381865af415801562000787573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007ad91906200350d565b905090565b6000620007be6200196e565b15620007e75760405162461bcd60e51b8152600401620007de9062003527565b60405180910390fd5b600260015414156200080d5760405162461bcd60e51b8152600401620007de9062003551565b60026001556001600160a01b0380871660009081526013602052604080822054928816825290819020549051634736d3db60e11b815273__$6aaf67e7827a013dd22ce71b2520632c86$__92638e6da7b6926200087e9260039260ff9081169216908a908a908a9060040162003588565b602060405180830381865af41580156200089c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008c291906200350d565b600180559695505050505050565b600354606090806001600160401b03811115620008f157620008f162002d29565b6040519080825280602002602001820160405280156200091b578160200160208202803683370190505b50915060005b81811015620009dd5760405163e2eba89b60e01b8152600360048201526024810182905273__$6aaf67e7827a013dd22ce71b2520632c86$__9063e2eba89b90604401602060405180830381865af415801562000982573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009a891906200350d565b838281518110620009bd57620009bd620035bf565b602090810291909101015280620009d481620035eb565b91505062000921565b505090565b33620009ed62001c91565b6001600160a01b03161462000a165760405162461bcd60e51b8152600401620007de9062003609565b600254610100900460ff168062000a30575060025460ff16155b62000a955760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620007de565b600254610100900460ff1615801562000ab8576002805461ffff19166101011790555b89518b511462000b015760405162461bcd60e51b815260206004820152601360248201527218dbda5b9cd308084f48191958da5b585b1cd3606a1b6044820152606401620007de565b6001600160a01b03821662000b525760405162461bcd60e51b81526020600482015260166024820152756665654469737472696275746f72203d20656d70747960501b6044820152606401620007de565b8a516000816001600160401b0381111562000b715762000b7162002d29565b60405190808252806020026020018201604052801562000b9b578160200160208202803683370190505b5090506000826001600160401b0381111562000bbb5762000bbb62002d29565b60405190808252806020026020018201604052801562000be5578160200160208202803683370190505b50905060005b8381101562000ded5760006001600160a01b03168f828151811062000c145762000c14620035bf565b60200260200101516001600160a01b0316141562000c6b5760405162461bcd60e51b8152602060048201526013602482015272696e76616c6964546f6b656e4164647265737360681b6044820152606401620007de565b60128e828151811062000c825762000c82620035bf565b602002602001015160ff16111562000ccf5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964446563696d616c7360881b6044820152606401620007de565b8d818151811062000ce45762000ce4620035bf565b602002602001015160ff16601262000cfd91906200363e565b62000d0a90600a62003755565b83828151811062000d1f5762000d1f620035bf565b6020026020010181815250508e818151811062000d405762000d40620035bf565b602002602001015182828151811062000d5d5762000d5d620035bf565b60200260200101906001600160a01b031690816001600160a01b031681525050806013600084848151811062000d975762000d97620035bf565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908360ff160217905550808062000de490620035eb565b91505062000beb565b50620f42408a1062000e2b5760405162461bcd60e51b81526020600482015260066024820152653e206d61784160d01b6044820152606401620007de565b6305f5e10089111562000e6d5760405162461bcd60e51b81526020600482015260096024820152683e206d61785346656560b81b6044820152606401620007de565b6305f5e10088111562000eaf5760405162461bcd60e51b81526020600482015260096024820152683e206d61784646656560b81b6044820152606401620007de565b6402540be40087111562000ef25760405162461bcd60e51b81526020600482015260096024820152683e206d61784146656560b81b6044820152606401620007de565b6305f5e10086111562000f345760405162461bcd60e51b81526020600482015260096024820152683e206d61785746656560b81b6044820152606401620007de565b8b8b60405162000f449062002b59565b62000f51929190620037c0565b604051809103906000f08015801562000f6e573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b0392909216919091179055826001600160401b0381111562000faa5762000faa62002d29565b60405190808252806020026020018201604052801562000fd4578160200160208202803683370190505b50805162000feb9160069160209091019062002b67565b5081516200100190600590602085019062002b67565b5080516200101790600390602084019062002bb7565b506200102560648b620037f2565b600a556200103560648b620037f2565b600b55505050600786905560088590556009849055600e839055601180546001600160a01b0319166001600160a01b03841617905580156200107d576002805461ff00191690555b5050505050505050505050565b606060026001541415620010b25760405162461bcd60e51b8152600401620007de9062003551565b60026001558142811015620010db5760405162461bcd60e51b8152600401620007de9062003814565b6040516331a15a5b60e21b815273__$6aaf67e7827a013dd22ce71b2520632c86$__9063c685696c9062001119906003908990899060040162003872565b600060405180830381865af415801562001137573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001161919081019062003893565b6001805595945050505050565b620011786200196e565b15620011985760405162461bcd60e51b8152600401620007de9062003527565b60026001541415620011be5760405162461bcd60e51b8152600401620007de9062003551565b60026001556001600160a01b038086166000908152601360205260408082205492871682529081902054905163ce055b8d60e01b815273__$6aaf67e7827a013dd22ce71b2520632c86$__9263ce055b8d926200122f9260039260ff90811692169089908990899060040162003588565b602060405180830381865af41580156200124d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200127391906200350d565b50506001805550505050565b600060026001541415620012a75760405162461bcd60e51b8152600401620007de9062003551565b6002600155620012b66200196e565b15620012d65760405162461bcd60e51b8152600401620007de9062003527565b8180421115620012fa5760405162461bcd60e51b8152600401620007de9062003814565b6040516302bfe30d60e41b8152600360048201526024810187905260ff861660448201526064810185905273__$6aaf67e7827a013dd22ce71b2520632c86$__90632bfe30d090608401602060405180830381865af41580156200089c573d6000803e3d6000fd5b336200136d62001c91565b6001600160a01b031614620013965760405162461bcd60e51b8152600401620007de9062003609565b6001600160a01b038116620013bf5760405162461bcd60e51b8152600401620007de906200392c565b601280546001600160a01b0319166001600160a01b0383161790556040517f4c3f3b9852ccceadd50f16518f348e2624c8f0240acdd5bc81911c0fba83ec67906200140c90839062002c69565b60405180910390a150565b336200142262001c91565b6001600160a01b0316146200144b5760405162461bcd60e51b8152600401620007de9062003609565b62001455620027db565b565b60006200146660038362002873565b92915050565b6000620014786200196e565b15620014985760405162461bcd60e51b8152600401620007de9062003527565b60026001541415620014be5760405162461bcd60e51b8152600401620007de9062003551565b60026001556001600160a01b03808716600090815260136020526040808220549288168252908190205490516306d1a87b60e11b815273__$6aaf67e7827a013dd22ce71b2520632c86$__92630da350f6926200087e9260039260ff9081169216908a908a908a9060040162003588565b60006200153b6200196e565b156200155b5760405162461bcd60e51b8152600401620007de9062003527565b60026001541415620015815760405162461bcd60e51b8152600401620007de9062003551565b60026001558142811015620015aa5760405162461bcd60e51b8152600401620007de9062003814565b604051631e9b2e8f60e21b815273__$6aaf67e7827a013dd22ce71b2520632c86$__90637a6cba3c90620015e890600390899089906004016200394a565b602060405180830381865af415801562001606573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200116191906200350d565b336200163762001c91565b6001600160a01b031614620016605760405162461bcd60e51b8152600401620007de9062003609565b600c5462001672906201518062003975565b421015620016ad5760405162461bcd60e51b81526020600482015260076024820152660f081c985b5c1160ca1b6044820152606401620007de565b620016bc620151804262003975565b811015620016fa5760405162461bcd60e51b815260206004820152600a6024820152690f081b5a5b94985b5c1560b21b6044820152606401620007de565b8160001080156200170d5750620f424082105b620017485760405162461bcd60e51b815260206004820152600a6024820152696f75744f6652616e676560b01b6044820152606401620007de565b60405163a303558560e01b81526003600482015260009073__$6aaf67e7827a013dd22ce71b2520632c86$__9063a303558590602401602060405180830381865af41580156200179c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017c291906200350d565b90506000620017d3606485620037f2565b905081811015620018135781620017ec600a83620037f2565b10156200180d5760405162461bcd60e51b8152600401620007de9062003990565b62001842565b62001820600a83620037f2565b811115620018425760405162461bcd60e51b8152600401620007de9062003990565b600a829055600b81905542600c819055600d8490556040517fa2b71ec6df949300b59aab36b55e189697b750119dd349fcfa8c0f779e83c254916200188d91859185918890620039b0565b60405180910390a150505050565b60026001541415620018c15760405162461bcd60e51b8152600401620007de9062003551565b6002600155620018d06200196e565b15620018f05760405162461bcd60e51b8152600401620007de9062003527565b60405163c823250160e01b815273__$6aaf67e7827a013dd22ce71b2520632c86$__9063c82325019062001932906003908890889088908890600401620039cb565b60006040518083038186803b1580156200194b57600080fd5b505af415801562001960573d6000803e3d6000fd5b505060018055505050505050565b600054600160a01b900460ff1690565b6001600160a01b0381166000818152601360205260409020546003805460ff909216929183908110620019b557620019b5620035bf565b6000918252602090912001546001600160a01b03161462001a095760405162461bcd60e51b815260206004820152600d60248201526c1d1bdad95b939bdd119bdd5b99609a1b6044820152606401620007de565b919050565b3362001a1962001c91565b6001600160a01b03161462001a425760405162461bcd60e51b8152600401620007de9062003609565b6200145560006200292d565b60405163fa56359760e01b815260609073__$6aaf67e7827a013dd22ce71b2520632c86$__9063fa5635979062001a8f906003908790879060040162003a5a565b600060405180830381865af415801562001aad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001ad7919081019062003893565b9392505050565b600060036000018260ff168154811062001afc5762001afc620035bf565b6000918252602090912001546001600160a01b031692915050565b3362001b2262001c91565b6001600160a01b03161462001b4b5760405162461bcd60e51b8152600401620007de9062003609565b620014556200297d565b60006002600154141562001b7d5760405162461bcd60e51b8152600401620007de9062003551565b600260015562001b8c6200196e565b1562001bac5760405162461bcd60e51b8152600401620007de9062003527565b818042111562001bd05760405162461bcd60e51b8152600401620007de9062003814565b60405163641a260360e11b815273__$6aaf67e7827a013dd22ce71b2520632c86$__9063c8344c0690620015e890600390899089906004016200394a565b60405163e2eba89b60e01b81526003600482015260ff8216602482015260009073__$6aaf67e7827a013dd22ce71b2520632c86$__9063e2eba89b90604401602060405180830381865af415801562001c6b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200146691906200350d565b6000546001600160a01b031690565b6000600380018260ff168154811062001cbd5762001cbd620035bf565b90600052602060002001549050919050565b60405163159763bb60e01b8152600360048201526001600160a01b03841660248201526044810183905260ff8216606482015260009073__$6aaf67e7827a013dd22ce71b2520632c86$__9063159763bb906084015b602060405180830381865af415801562001d43573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d6991906200350d565b949350505050565b60606003800180548060200260200160405190810160405280929190818152602001828054801562001dc357602002820191906000526020600020905b81548152602001906001019080831162001dae575b5050505050905090565b3362001dd862001c91565b6001600160a01b03161462001e015760405162461bcd60e51b8152600401620007de9062003609565b6305f5e10084111562001e285760405162461bcd60e51b8152600401620007de9062003a79565b6305f5e10083111562001e4f5760405162461bcd60e51b8152600401620007de9062003a79565b6402540be40082111562001e8f5760405162461bcd60e51b81526020600482015260066024820152653e204146656560d01b6044820152606401620007de565b6305f5e10081111562001ece5760405162461bcd60e51b81526020600482015260066024820152653e205746656560d01b6044820152606401620007de565b60098290556007849055600e8190556040517f0272af61e59abaa206f4d3d15474b045c5fdbad2379f620b67074e9b13bfaad1906200188d908690869086908690620039b0565b60405163ba2998d960e01b815260009073__$6aaf67e7827a013dd22ce71b2520632c86$__9063ba2998d99062001d259060039088908890889060040162003a99565b6060600360000180548060200260200160405190810160405280929190818152602001828054801562001dc357602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001f96575050505050905090565b600062001fca6200196e565b1562001fea5760405162461bcd60e51b8152600401620007de9062003527565b60026001541415620020105760405162461bcd60e51b8152600401620007de9062003551565b60026001558142811015620020395760405162461bcd60e51b8152600401620007de9062003814565b60405163ad30093f60e01b815273__$6aaf67e7827a013dd22ce71b2520632c86$__9063ad30093f906200207d906003908c908c908c908c908c9060040162003588565b602060405180830381865af41580156200209b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620020c191906200350d565b6001805598975050505050505050565b6004546001600160a01b03163314620021185760405162461bcd60e51b815260206004820152600860248201526710b6382a37b5b2b760c11b6044820152606401620007de565b6040516360c4725f60e11b815273__$6aaf67e7827a013dd22ce71b2520632c86$__9063c188e4be9062002156906003908690869060040162003a5a565b60006040518083038186803b1580156200216f57600080fd5b505af415801562002184573d6000803e3d6000fd5b505050505050565b336200219762001c91565b6001600160a01b031614620021c05760405162461bcd60e51b8152600401620007de9062003609565b600d544210620022045760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e54dd1bdc1c195960921b6044820152606401620007de565b60405163a303558560e01b81526003600482015260009073__$6aaf67e7827a013dd22ce71b2520632c86$__9063a303558590602401602060405180830381865af415801562002258573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200227e91906200350d565b600a819055600b81905542600c819055600d8190556040519192507f46e22fb3709ad289f62ce63d469248536dbc78d82b84a3d7e74ad606dc201938916200140c91848252602082015260400190565b6001600160a01b03808416600090815260136020526040808220549285168252808220549051635502a57760e11b8152919273__$6aaf67e7827a013dd22ce71b2520632c86$__9263aa054aee9262001d259260039260ff9182169290911690889060040162003a99565b336200234462001c91565b6001600160a01b0316146200236d5760405162461bcd60e51b8152600401620007de9062003609565b6001600160a01b038116620023965760405162461bcd60e51b8152600401620007de906200392c565b601180546001600160a01b0319166001600160a01b0383161790556040517fae5a12c29e496b092467a620746b9eaf4e0e231a631a4370c233b1fac38e8e26906200140c90839062002c69565b6060600360020180548060200260200160405190810160405280929190818152602001828054801562001dc3576020028201919060005260206000209081548152602001906001019080831162001dae575050505050905090565b60405163b52e146f60e01b81526003600482015260009073__$6aaf67e7827a013dd22ce71b2520632c86$__9063b52e146f9060240162000769565b6040516334d9812b60e21b81526003600482015260009073__$6aaf67e7827a013dd22ce71b2520632c86$__9063d36604ac9060240162000769565b604051631e7e95d360e01b815260009073__$6aaf67e7827a013dd22ce71b2520632c86$__90631e7e95d39062001d259060039088908890889060040162003ab8565b6001600160a01b0380841660009081526013602052604080822054928516825280822054905163ba2998d960e01b8152919273__$6aaf67e7827a013dd22ce71b2520632c86$",
  "libraries": {
    "RequiemStableSwapLib": "0xa82fF9aFd8f496c3d6ac40E2a0F282E47488CFc9"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "rampA(uint256,uint256)": {
        "params": {
          "futureA": "the new A to ramp towards",
          "futureATime": "timestamp when the new A should be reached"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFee(uint256,uint256,uint256,uint256)": {
        "details": "adminFee cannot be higher than 100% of the swap fee swap fee cannot be higher than 1% of each swap",
        "params": {
          "newAdminFee": "new admin fee to be applied on future transactions",
          "newSwapFee": "new swap fee to be applied on future transactions",
          "newWithdrawFee": "new initial withdraw fee to be applied on future withdrawal transactions"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateUserWithdrawFee(address,uint256)": {
        "params": {
          "recipient": "address of the recipient of pool token",
          "transferAmount": "amount of pool token to transfer"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AddLiquidity(address,uint256[],uint256[],uint256,uint256)": {
        "notice": "EVENTS"
      }
    },
    "kind": "user",
    "methods": {
      "MIN_RAMP_TIME()": {
        "notice": "constants"
      },
      "addLiquidity(uint256[],uint256,uint256)": {
        "notice": "PUBLIC FUNCTIONS"
      },
      "flashLoan(address,address[],uint256[],bytes)": {
        "notice": "Flash Loan"
      },
      "getVirtualPrice()": {
        "notice": "VIEW FUNCTIONS"
      },
      "rampA(uint256,uint256)": {
        "notice": "Start ramping up or down A parameter towards given futureA_ and futureTime_ Checks if the change is too rapid, and commits the new A value only when it falls under the limit range."
      },
      "setFee(uint256,uint256,uint256,uint256)": {
        "notice": "Sets the admin fee"
      },
      "swapStorage()": {
        "notice": "STATE VARS"
      },
      "updateUserWithdrawFee(address,uint256)": {
        "notice": "Updates the user withdraw fee. This function can only be called by the pool token. Should be used to update the withdraw fee on transfer of pool tokens. Transferring your pool token will reset the 4 weeks period. If the recipient is already holding some pool tokens, the withdraw fee will be discounted in respective amounts."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 38026,
        "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 38141,
        "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 38226,
        "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 37835,
        "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
        "label": "_initialized",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 37838,
        "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
        "label": "_initializing",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 15187,
        "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
        "label": "swapStorage",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(SwapStorage)16636_storage"
      },
      {
        "astId": 15189,
        "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
        "label": "feeDistributor",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 15191,
        "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
        "label": "feeController",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 15195,
        "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
        "label": "tokenIndexes",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint8)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)30553)dyn_storage": {
        "base": "t_contract(IERC20)30553",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)30553": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(LPToken)47804": {
        "encoding": "inplace",
        "label": "contract LPToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_struct(SwapStorage)16636_storage": {
        "encoding": "inplace",
        "label": "struct RequiemStableSwapLib.SwapStorage",
        "members": [
          {
            "astId": 16596,
            "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
            "label": "pooledTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_contract(IERC20)30553)dyn_storage"
          },
          {
            "astId": 16599,
            "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
            "label": "lpToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(LPToken)47804"
          },
          {
            "astId": 16603,
            "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
            "label": "tokenMultipliers",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 16607,
            "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
            "label": "balances",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 16610,
            "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
            "label": "fee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16613,
            "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
            "label": "flashFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 16616,
            "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
            "label": "adminFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 16619,
            "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
            "label": "initialA",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 16621,
            "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
            "label": "futureA",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 16623,
            "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
            "label": "initialATime",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 16625,
            "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
            "label": "futureATime",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 16627,
            "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
            "label": "defaultWithdrawFee",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 16631,
            "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
            "label": "depositTimestamp",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 16635,
            "contract": "contracts/RequiemStableSwap.sol:RequiemStableSwap",
            "label": "withdrawFeeMultiplier",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}