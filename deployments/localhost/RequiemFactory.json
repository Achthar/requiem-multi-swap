{
  "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_formula",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INIT_CODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa71dbb62fe17e682f80c6ec37f08ec4fd57bf2127fcb71d16a0f2c7ed8727c1b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "transactionIndex": 0,
    "gasUsed": "4762240",
    "logsBloom": "0x
    "blockHash": "0x9ffc7409bace5836a5f524b2b5ff186160917f9e5a949553477b8d6e5fcccb5b",
    "transactionHash": "0xa71dbb62fe17e682f80c6ec37f08ec4fd57bf2127fcb71d16a0f2c7ed8727c1b",
    "logs": [],
    "blockNumber": 11,
    "cumulativeGasUsed": "4762240",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318"
  ],
  "solcInputHash": "5cda6a8053749c2e75fe3116749689e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_formula\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INIT_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemFactory.sol\":\"RequiemFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":12500},\"remappings\":[]},\"sources\":{\"contracts/RequiemERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IRequiemERC20.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\n\\ncontract RequiemERC20 is IRequiemERC20 {\\n    using SafeMath for uint256;\\n\\n    string public constant name = \\\"Requiem Liquidity Provider\\\";\\n    string public constant symbol = \\\"RLP\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    bytes32 public override DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    constructor() {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"), keccak256(bytes(name)), keccak256(bytes(\\\"1\\\")), chainId, address(this))\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"RLP: EXPIRED\\\");\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"RLP: INVALID_SIGNATURE\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xaf3a69b70d6504cff82881ab3179100cac6ef560d3ba6662d2c9d3bc2eeaa548\",\"license\":\"MIT\"},\"contracts/RequiemFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IRequiemFactory.sol\\\";\\nimport \\\"./RequiemPair.sol\\\";\\n\\n// solhint-disable no-inline-assembly\\n\\ncontract RequiemFactory is IRequiemFactory {\\n    address public feeTo;\\n    address public formula;\\n    uint256 public protocolFee;\\n    address public feeToSetter;\\n    bytes32 public constant INIT_CODE_HASH = keccak256(abi.encodePacked(type(RequiemPair).creationCode));\\n\\n    mapping(bytes32 => address) private _pairSalts;\\n    address[] public allPairs;\\n    mapping(address => uint64) private _pairs;\\n\\n    constructor(address _feeToSetter, address _formula) {\\n        feeToSetter = _feeToSetter;\\n        formula = _formula;\\n    }\\n\\n    function isPair(address b) external view returns (bool) {\\n        return _pairs[b] > 0;\\n    }\\n\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external view returns (address pair) {\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0, swapFee));\\n        pair = _pairSalts[salt];\\n    }\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external returns (address pair) {\\n        require(tokenA != tokenB, \\\"RLP: IDENTICAL_ADDRESSES\\\");\\n        require(tokenWeightA >= 2 && tokenWeightA <= 98 && (tokenWeightA % 2) == 0, \\\"RLP: INVALID_TOKEN_WEIGHT\\\");\\n        // swap fee from [0.01% - 20%]\\n        require(swapFee >= 1 && swapFee <= 2000, \\\"RLP: INVALID_SWAP_FEE\\\");\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        require(token0 != address(0), \\\"RLP: ZERO_ADDRESS\\\");\\n        // single check is sufficient\\n        bytes memory bytecode = type(RequiemPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0, swapFee));\\n        require(_pairSalts[salt] == address(0), \\\"RLP: PAIR_EXISTS\\\");\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IRequiemPair(pair).initialize(token0, token1, tokenWeight0, swapFee);\\n        _pairSalts[salt] = address(pair);\\n        allPairs.push(pair);\\n        uint64 weightAndFee = uint64(swapFee);\\n        weightAndFee |= uint64(tokenWeight0) << 32;\\n        _pairs[address(pair)] = weightAndFee;\\n        emit PairCreated(token0, token1, pair, tokenWeight0, swapFee, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: FORBIDDEN\\\");\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: FORBIDDEN\\\");\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function setProtocolFee(uint256 _protocolFee) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: FORBIDDEN\\\");\\n        require(_protocolFee == 0 || (_protocolFee >= 10000 && _protocolFee <= 100000), \\\"RLP: Invalid Protocol fee\\\");\\n        protocolFee = _protocolFee;\\n    }\\n\\n    function getWeightsAndSwapFee(address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        )\\n    {\\n        uint64 weightAndFee = _pairs[pair];\\n        if (weightAndFee > 0) {\\n            swapFee = uint32(weightAndFee);\\n            tokenWeight0 = uint32(weightAndFee >> 32);\\n            tokenWeight1 = 100 - tokenWeight0;\\n        } else {\\n            // Default is 0.3%\\n            return (50, 50, 30);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xafdb1fea2e85ea96f900d053544e1c7dac3c664e3ad275571289cd8c61a90ec0\",\"license\":\"MIT\"},\"contracts/RequiemPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IRequiemPair.sol\\\";\\nimport \\\"./interfaces/IRequiemSwap.sol\\\";\\nimport \\\"./interfaces/IRequiemFormula.sol\\\";\\nimport \\\"./RequiemERC20.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IRequiemFactory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Callee.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string, avoid-low-level-calls\\n\\ncontract RequiemPair is IRequiemSwap, IRequiemPair, RequiemERC20 {\\n    using SafeMath for uint256;\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 private unlocked = 1;\\n    address public formula;\\n\\n    uint112 private collectedFee0; // uses single storage slot, accessible via getReserves\\n    uint112 private collectedFee1; // uses single storage slot, accessible via getReserves\\n\\n    uint32 private tokenWeight0;\\n    uint32 private tokenWeight1;\\n    uint32 private swapFee;\\n\\n    modifier lock() {\\n        require(unlocked == 1, \\\"REQLP: LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function getCollectedFees() public view returns (uint112 _collectedFee0, uint112 _collectedFee1) {\\n        _collectedFee0 = collectedFee0;\\n        _collectedFee1 = collectedFee1;\\n    }\\n\\n    function getTokenWeights() public view returns (uint32 _tokenWeight0, uint32 _tokenWeight1) {\\n        _tokenWeight0 = tokenWeight0;\\n        _tokenWeight1 = tokenWeight1;\\n    }\\n\\n    function getSwapFee() public view returns (uint32 _swapFee) {\\n        _swapFee = swapFee;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"REQLP: TRANSFER_FAILED\\\");\\n    }\\n\\n    constructor() {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(\\n        address _token0,\\n        address _token1,\\n        uint32 _tokenWeight0,\\n        uint32 _swapFee\\n    ) external {\\n        require(msg.sender == factory, \\\"REQLP: FORBIDDEN\\\");\\n        // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n        tokenWeight0 = _tokenWeight0;\\n        tokenWeight1 = 100 - tokenWeight0;\\n        swapFee = _swapFee;\\n        formula = IRequiemFactory(factory).formula();\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        uint32 _tokenWeight0 = tokenWeight0;\\n        require(balance0 * (100 - _tokenWeight0) <= type(uint112).max && balance1 * _tokenWeight0 <= type(uint112).max, \\\"REQLP: OVERFLOW\\\");\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n        // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            uint112 mReserve0 = _reserve0 * (100 - _tokenWeight0);\\n            uint112 mReserve1 = _reserve1 * _tokenWeight0;\\n            price0CumulativeLast += uint256(UQ112x112.encode(mReserve1).uqdiv(mReserve0)) * timeElapsed;\\n            price1CumulativeLast += uint256(UQ112x112.encode(mReserve0).uqdiv(mReserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IRequiemFactory(factory).feeTo();\\n        uint112 protocolFee = uint112(IRequiemFactory(factory).protocolFee());\\n        feeOn = feeTo != address(0);\\n        (uint112 _collectedFee0, uint112 _collectedFee1) = getCollectedFees();\\n        if (protocolFee > 0 && feeOn && (_collectedFee0 > 0 || _collectedFee1 > 0)) {\\n            uint32 _tokenWeight0 = tokenWeight0;\\n            uint256 liquidity = IRequiemFormula(formula).mintLiquidityFee(\\n                totalSupply,\\n                _reserve0,\\n                _reserve1,\\n                _tokenWeight0,\\n                100 - _tokenWeight0,\\n                _collectedFee0 / protocolFee,\\n                _collectedFee1 / protocolFee\\n            );\\n            if (liquidity > 0) _mint(feeTo, liquidity);\\n        }\\n        if (_collectedFee0 > 0) collectedFee0 = 0;\\n        if (_collectedFee1 > 0) collectedFee1 = 0;\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0.sub(_reserve0);\\n        uint256 amount1 = balance1.sub(_reserve1);\\n        _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply;\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, \\\"REQLP: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n        _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, \\\"REQLP: INSUFFICIENT_LIQUIDITY_BURNED\\\");\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, \\\"REQLP: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint112 _reserve0 = reserve0; // gas savings\\n        uint112 _reserve1 = reserve1; // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"REQLP: INSUFFICIENT_LIQUIDITY\\\");\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"REQLP: INVALID_TO\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n\\n        require(amount0In > 0 || amount1In > 0, \\\"REQLP: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0.mul(10000);\\n            uint256 balance1Adjusted = balance1.mul(10000);\\n            {\\n                // avoids stack too deep errors\\n                if (amount0In > 0) {\\n                    uint256 amount0InFee = amount0In.mul(swapFee);\\n                    balance0Adjusted = balance0Adjusted.sub(amount0InFee);\\n                    collectedFee0 = uint112(uint256(collectedFee0).add(amount0InFee));\\n                }\\n                if (amount1In > 0) {\\n                    uint256 amount1InFee = amount1In.mul(swapFee);\\n                    balance1Adjusted = balance1Adjusted.sub(amount1InFee);\\n                    collectedFee1 = uint112(uint256(collectedFee1).add(amount1InFee));\\n                }\\n                uint32 _tokenWeight0 = tokenWeight0; // gas savings\\n                if (_tokenWeight0 == 50) {\\n                    // gas savings for pair 50/50\\n                    require(balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(10000**2), \\\"REQLP: K\\\");\\n                } else {\\n                    require(IRequiemFormula(formula).ensureConstantValue(uint256(_reserve0).mul(10000), uint256(_reserve1).mul(10000), balance0Adjusted, balance1Adjusted, _tokenWeight0), \\\"REQLP: K\\\");\\n                }\\n            }\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    //\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address,\\n        uint256 amountIn\\n    ) external view returns (uint256) {\\n        (uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = tokenIn == token0\\n            ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n            : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        return IRequiemFormula(formula).getAmountOut(amountIn, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address,\\n        uint256 amountOut\\n    ) external view returns (uint256) {\\n        (uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = tokenIn == token0\\n            ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n            : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        return IRequiemFormula(formula).getAmountIn(amountOut, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n\\n    // calculates output amount for given input and executes the respective trade\\n    // viable for use in multi swaps as it returns the output value\\n    // requires the amount in to be sent to this address beforehand\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address,\\n        uint256 amountIn,\\n        uint256,\\n        address to\\n    ) external override lock returns (uint256) {\\n        bool inToken0 = tokenIn == token0;\\n        (uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = inToken0\\n            ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n            : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        uint256 amountOut = IRequiemFormula(formula).getAmountOut(amountIn, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n        (uint256 amount0Out, uint256 amount1Out) = inToken0 ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n        return _swap(amount0Out, amount1Out, to);\\n    }\\n\\n    // calculates input amount for given output and executes the respective trade\\n    // calling this one only makes sense if a single trade is supposd to be executed in the tx\\n    // requires the amount in to be sent to this address beforehand\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address,\\n        uint256 amountOut,\\n        uint256,\\n        address to\\n    ) external override lock returns (uint256) {\\n        bool inToken0 = tokenIn == token0;\\n        (uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = tokenIn == token0\\n            ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n            : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n        uint256 amountIn = IRequiemFormula(formula).getAmountIn(amountOut, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n        (uint256 amount0Out, uint256 amount1Out) = inToken0 ? (uint256(0), amountIn) : (amountIn, uint256(0));\\n        return _swap(amount0Out, amount1Out, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function _swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to\\n    ) internal returns (uint256) {\\n        require(amount0Out > 0 || amount1Out > 0, \\\"REQLP: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint112 _reserve0 = reserve0; // gas savings\\n        uint112 _reserve1 = reserve1; // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"REQLP: INSUFFICIENT_LIQUIDITY\\\");\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"REQLP: INVALID_TO\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n\\n        require(amount0In > 0 || amount1In > 0, \\\"REQLP: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0.mul(10000);\\n            uint256 balance1Adjusted = balance1.mul(10000);\\n            {\\n                // avoids stack too deep errors\\n                if (amount0In > 0) {\\n                    uint256 amount0InFee = amount0In.mul(swapFee);\\n                    balance0Adjusted = balance0Adjusted.sub(amount0InFee);\\n                    collectedFee0 = uint112(uint256(collectedFee0).add(amount0InFee));\\n                }\\n                if (amount1In > 0) {\\n                    uint256 amount1InFee = amount1In.mul(swapFee);\\n                    balance1Adjusted = balance1Adjusted.sub(amount1InFee);\\n                    collectedFee1 = uint112(uint256(collectedFee1).add(amount1InFee));\\n                }\\n                uint32 _tokenWeight0 = tokenWeight0; // gas savings\\n                if (_tokenWeight0 == 50) {\\n                    // gas savings for pair 50/50\\n                    require(balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(10000**2), \\\"REQLP: K\\\");\\n                } else {\\n                    require(IRequiemFormula(formula).ensureConstantValue(uint256(_reserve0).mul(10000), uint256(_reserve1).mul(10000), balance0Adjusted, balance1Adjusted, _tokenWeight0), \\\"REQLP: K\\\");\\n                }\\n            }\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n        return amount0Out > 0 ? amount0Out : amount1Out;\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function onSwap(\\n        address tokenIn,\\n        address,\\n        uint256,\\n        uint256 amountOut,\\n        address to\\n    ) external override lock {\\n        (uint256 amount0Out, uint256 amount1Out) = token0 == tokenIn ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n        require(amount0Out > 0 || amount1Out > 0, \\\"REQLP: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint112 _reserve0 = reserve0; // gas savings\\n        uint112 _reserve1 = reserve1; // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"REQLP: INSUFFICIENT_LIQUIDITY\\\");\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"REQLP: INVALID_TO\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n\\n        require(amount0In > 0 || amount1In > 0, \\\"REQLP: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0.mul(10000);\\n            uint256 balance1Adjusted = balance1.mul(10000);\\n            {\\n                // avoids stack too deep errors\\n                if (amount0In > 0) {\\n                    uint256 amount0InFee = amount0In.mul(swapFee);\\n                    balance0Adjusted = balance0Adjusted.sub(amount0InFee);\\n                    collectedFee0 = uint112(uint256(collectedFee0).add(amount0InFee));\\n                }\\n                if (amount1In > 0) {\\n                    uint256 amount1InFee = amount1In.mul(swapFee);\\n                    balance1Adjusted = balance1Adjusted.sub(amount1InFee);\\n                    collectedFee1 = uint112(uint256(collectedFee1).add(amount1InFee));\\n                }\\n                uint32 _tokenWeight0 = tokenWeight0; // gas savings\\n                if (_tokenWeight0 == 50) {\\n                    // gas savings for pair 50/50\\n                    require(balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(10000**2), \\\"REQLP: K\\\");\\n                } else {\\n                    require(IRequiemFormula(formula).ensureConstantValue(uint256(_reserve0).mul(10000), uint256(_reserve1).mul(10000), balance0Adjusted, balance1Adjusted, _tokenWeight0), \\\"REQLP: K\\\");\\n                }\\n            }\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n}\\n\",\"keccak256\":\"0xc4d38d2bc2d0352eb448068dddf32d2f0adc8ce86af7610c12141dfc49667ea6\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb7230835a4efbbbebcb5371d121977e859388b33f3ee5d9a7a44fc4de8d6b970\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x4c6cbede01f2adab66096cbfa9f82596da0b22f70a745e95a0af2cd9f87d1714\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\ninterface IRequiemFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint);\\n    function feeTo() external view returns (address);\\n    function formula() external view returns (address);\\n    function protocolFee() external view returns (uint);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function isPair(address) external view returns (bool);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external returns (address pair);\\n    function getWeightsAndSwapFee(address pair) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setProtocolFee(uint) external;\\n}\\n\",\"keccak256\":\"0x500ff0062150432105415e938dcaa0d64b666c224764c4cb901137ce45204b5d\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.5.16;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IRequiemFormula {\\n\\n    function getReserveAndWeights(address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getPairAmountIn(address pair, address tokenIn, uint amountOut) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getPairAmountOut(address pair, address tokenIn, uint amountIn) external view returns (uint amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x8a32e1c404f6a93f17cf6151173ff21fedb58abe50a6635cb10f47780f044c98\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IRequiemPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IRequiemERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IRequiemPair is IRequiemERC20 {\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n    function getSwapFee() external view returns (uint32);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address,\\n        address,\\n        uint32,\\n        uint32\\n    ) external;\\n}\\n\",\"keccak256\":\"0x81ff6bd4a679d53dec7084e8e98b0c3f611879700e3f47aaa74d5e4515cf2091\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemSwap {\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    struct QSwapStep {\\n        uint8 structure;\\n        address pool;\\n        address tokenIn;\\n        address tokenOut;\\n    }\\n\\n    struct SwapStep {\\n        address pool;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 swapAmount; // tokenInAmount / tokenOutAmount\\n        uint256 limitReturnAmount; // minAmountOut / maxAmountIn\\n        uint256 maxPrice;\\n    }\\n\\n    // this funtion requires the correctly calculated amounts as input\\n    // the others are supposed to implement that calculation\\n    // no return value required since the amounts are already known\\n    function onSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address to\\n    ) external;\\n\\n    //\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external returns (uint256);\\n\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to\\n    ) external returns (uint256);\\n\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (uint256);\\n\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf46932cefb9433068221aa48c232a45371dd48dfa0c80231d9b24414b39276d3\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x03a0e446df01556c28b09cd214d00cc4341c696d55c99b4a41164fe89911b750\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0a0a3dba77df0880faa55c0415e5b12d4c955d69543fb69887702ff1c8fb60a\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        RequiemErrors._require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        uint256 errorCode\\n    ) internal pure returns (uint256) {\\n        RequiemErrors._require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc82c3356797b0e56c4ac77d5554343f66b3b436a18537bdb146e10921605d729\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.10;\\n\\n// solhint-disable avoid-low-level-calls, reason-string\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xcb1337f49b7a886980209ccd42806883db2bfa17b8dac448587f31ddd1147a1b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0xff91bb395bc9766fd6b772069900c09ade711a8fc2e24b3389942128a23b2295\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x37ebaca1c58a9daf307229c45122f12d603a95d1d92c1a8e7648b1910755bfa0\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161557b38038061557b83398101604081905261002f9161007c565b600380546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b6154bd806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063787dce3d1161008c578063bfd63f4d11610066578063bfd63f4d146101ee578063ca22297914610201578063e5e31b131461023b578063f46901ed1461028d57600080fd5b8063787dce3d146101bd578063a2e74af6146101d2578063b0e21e8a146101e557600080fd5b80631e3dd18b116100c85780631e3dd18b1461016c578063257671f51461017f5780634b75f54f14610195578063574f2ba3146101b557600080fd5b8063017e7e58146100ef578063094b74151461013957806314572adb14610159575b600080fd5b60005461010f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b60035461010f9073ffffffffffffffffffffffffffffffffffffffff1681565b61010f610167366004610dc1565b6102a0565b61010f61017a366004610e15565b610897565b6101876108ce565b604051908152602001610130565b60015461010f9073ffffffffffffffffffffffffffffffffffffffff1681565b600554610187565b6101d06101cb366004610e15565b610936565b005b6101d06101e0366004610e2e565b610a3f565b61018760025481565b61010f6101fc366004610dc1565b610b07565b61021461020f366004610e2e565b610c39565b6040805163ffffffff94851681529284166020840152921691810191909152606001610130565b61027d610249366004610e2e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205467ffffffffffffffff16151590565b6040519015158152602001610130565b6101d061029b366004610e2e565b610caf565b60008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561033d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f524c503a204944454e544943414c5f414444524553534553000000000000000060448201526064015b60405180910390fd5b60028363ffffffff161015801561035b575060628363ffffffff1611155b8015610375575061036d600284610e50565b63ffffffff16155b6103db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f524c503a20494e56414c49445f544f4b454e5f574549474854000000000000006044820152606401610334565b60018263ffffffff16101580156103fa57506107d08263ffffffff1611155b610460576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f524c503a20494e56414c49445f535741505f46454500000000000000000000006044820152606401610334565b60008060008673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16106104aa5786886104a5886064610e9a565b6104ae565b8787875b9194509250905073ffffffffffffffffffffffffffffffffffffffff8316610532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f524c503a205a45524f5f414444524553530000000000000000000000000000006044820152606401610334565b60006040518060200161054490610d77565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f9091011660408190527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087811b8216602084015286901b1660348201527fffffffff0000000000000000000000000000000000000000000000000000000060e085811b8216604884015289901b16604c820152909150600090605001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600490935291205490915073ffffffffffffffffffffffffffffffffffffffff16156106af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f524c503a20504149525f455849535453000000000000000000000000000000006044820152606401610334565b808251602084016000f56040517fd0f6957900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152868116602483015263ffffffff80871660448401528a1660648301529197509087169063d0f6957990608401600060405180830381600087803b15801561074257600080fd5b505af1158015610756573d6000803e3d6000fd5b505050600082815260046020908152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff8d8116918217909355600580546001810182557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805490931682179092558086526006855294839020805463ffffffff8f81168c881b67ffffffff000000001681177fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909316831790935592548551978852928b169587019590955292850192909252606084019190915290925086811691908816907f41f8736f924f57e464ededb08bf71f868f9d142885bbc73a1516db2be21fc4289060800160405180910390a3505050505050949350505050565b600581815481106108a757600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6040516108dd60208201610d77565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604081905261091d9190602001610ee6565b6040516020818303038152906040528051906020012081565b60035473ffffffffffffffffffffffffffffffffffffffff1633146109b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f524c503a20464f5242494444454e0000000000000000000000000000000000006044820152606401610334565b8015806109d4575061271081101580156109d45750620186a08111155b610a3a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f524c503a20496e76616c69642050726f746f636f6c20666565000000000000006044820152606401610334565b600255565b60035473ffffffffffffffffffffffffffffffffffffffff163314610ac0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f524c503a20464f5242494444454e0000000000000000000000000000000000006044820152606401610334565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000806000808673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1610610b52578688610b4d886064610e9a565b610b56565b8787875b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085811b8216602084015284901b1660348201527fffffffff0000000000000000000000000000000000000000000000000000000060e083811b821660488401528a901b16604c8201529295509093509150600090605001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000908152600490925290205473ffffffffffffffffffffffffffffffffffffffff169998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660205260408120548190819067ffffffffffffffff168015610c955763ffffffff602082901c169350905080610c8e846064610e9a565b9250610ca6565b603280601e93509350935050610ca8565b505b9193909250565b60035473ffffffffffffffffffffffffffffffffffffffff163314610d30576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f524c503a20464f5242494444454e0000000000000000000000000000000000006044820152606401610334565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61456680610f2283390190565b803573ffffffffffffffffffffffffffffffffffffffff81168114610da857600080fd5b919050565b803563ffffffff81168114610da857600080fd5b60008060008060808587031215610dd757600080fd5b610de085610d84565b9350610dee60208601610d84565b9250610dfc60408601610dad565b9150610e0a60608601610dad565b905092959194509250565b600060208284031215610e2757600080fd5b5035919050565b600060208284031215610e4057600080fd5b610e4982610d84565b9392505050565b600063ffffffff80841680610e8e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b92169190910692915050565b600063ffffffff83811690831681811015610ede577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b039392505050565b6000825160005b81811015610f075760208186018101518583015201610eed565b81811115610f16576000828501525b50919091019291505056fe60806040526001600b5534801561001557600080fd5b50604080518082018252601a81527f5265717569656d204c69717569646974792050726f76696465720000000000006020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f2e1adfbb118fada029d9623aa0ed8dd2318a25545f57095be55dcbd209508e12818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b0319163317905561444b8061011b6000396000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c80636a62784211610145578063cc56fd43116100bd578063d505accf1161008c578063dd62ed3e11610071578063dd62ed3e146105eb578063e9255bae14610616578063fff6cae91461062957600080fd5b8063d505accf1461059c578063d54a8d18146105af57600080fd5b8063cc56fd431461053d578063d0f6957914610550578063d21220a714610563578063d4cadf681461057657600080fd5b806395d89b4111610114578063ba9a7a56116100f9578063ba9a7a561461050e578063bc25cf7714610517578063c45a01551461052a57600080fd5b806395d89b41146104bf578063a9059cbb146104fb57600080fd5b80636a6278421461044457806370a08231146104575780637ecebe001461047757806389afcb441461049757600080fd5b806330adf81f116101d85780633644e515116101a75780634b75f54f1161018c5780634b75f54f1461041f5780635909c0d5146104325780635a3d54931461043b57600080fd5b80633644e515146104035780634ac00e031461040c57600080fd5b806330adf81f14610385578063313ce567146103ac57806332bfe469146103c657806332fd5493146103f057600080fd5b80630dfe1681116102145780630dfe16811461031d5780630e6d8bce1461034857806318160ddd1461036957806323b872dd1461037257600080fd5b8063022c0d9f1461024657806306fdde031461025b5780630902f1ac146102ad578063095ea7b3146102fa575b600080fd5b610259610254366004613dfd565b610631565b005b6102976040518060400160405280601a81526020017f5265717569656d204c69717569646974792050726f766964657200000000000081525081565b6040516102a49190613ec3565b60405180910390f35b600854604080516dffffffffffffffffffffffffffff80841682526e0100000000000000000000000000008404166020820152600160e01b90920463ffffffff16908201526060016102a4565b61030d610308366004613f14565b610e3a565b60405190151581526020016102a4565b600654610330906001600160a01b031681565b6040516001600160a01b0390911681526020016102a4565b61035b610356366004613f40565b610e50565b6040519081526020016102a4565b61035b60005481565b61030d610380366004613f9f565b61107e565b61035b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6103b4601281565b60405160ff90911681526020016102a4565b600d54600e5460408051600160e01b90930463ffffffff90811684529091166020830152016102a4565b6102596103fe366004613f40565b611130565b61035b60035481565b61035b61041a366004613f40565b6118d4565b600c54610330906001600160a01b031681565b61035b60095481565b61035b600a5481565b61035b610452366004613fe0565b611a85565b61035b610465366004613fe0565b60016020526000908152604090205481565b61035b610485366004613fe0565b60046020526000908152604090205481565b6104aa6104a5366004613fe0565b611d9f565b604080519283526020830191909152016102a4565b6102976040518060400160405280600381526020017f524c50000000000000000000000000000000000000000000000000000000000081525081565b61030d610509366004613f14565b61213e565b61035b6103e881565b610259610525366004613fe0565b61214b565b600554610330906001600160a01b031681565b61035b61054b366004613f9f565b6122a8565b61025961055e366004614011565b612438565b600754610330906001600160a01b031681565b600e54640100000000900463ffffffff1660405163ffffffff90911681526020016102a4565b6102596105aa366004614069565b61262a565b600d54604080516dffffffffffffffffffffffffffff80841682526e0100000000000000000000000000009093049092166020830152016102a4565b61035b6105f93660046140e0565b600260209081526000928352604080842090915290825290205481565b61035b610624366004613f9f565b6128a0565b6102596129e7565b600b546001146106885760405162461bcd60e51b815260206004820152600d60248201527f5245514c503a204c4f434b45440000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000600b558415158061069b5750600084115b61070d5760405162461bcd60e51b815260206004820152602160248201527f5245514c503a20494e53554646494349454e545f4f55545055545f414d4f554e60448201527f5400000000000000000000000000000000000000000000000000000000000000606482015260840161067f565b6008546dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041681871080156107545750806dffffffffffffffffffffffffffff1686105b6107a05760405162461bcd60e51b815260206004820152601d60248201527f5245514c503a20494e53554646494349454e545f4c4951554944495459000000604482015260640161067f565b60065460075460009182916001600160a01b039182169190811690891682148015906107de5750806001600160a01b0316896001600160a01b031614155b61082a5760405162461bcd60e51b815260206004820152601160248201527f5245514c503a20494e56414c49445f544f000000000000000000000000000000604482015260640161067f565b8a1561083b5761083b828a8d612b4d565b891561084c5761084c818a8c612b4d565b86156108d2576040517f10d1e85c0000000000000000000000000000000000000000000000000000000081526001600160a01b038a16906310d1e85c9061089f9033908f908f908e908e90600401614119565b600060405180830381600087803b1580156108b957600080fd5b505af11580156108cd573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093a9190614184565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa158015610981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a59190614184565b92505050600089856dffffffffffffffffffffffffffff166109c791906141cc565b83116109d45760006109f8565b6109ee8a6dffffffffffffffffffffffffffff87166141cc565b6109f890846141cc565b90506000610a168a6dffffffffffffffffffffffffffff87166141cc565b8311610a23576000610a47565b610a3d8a6dffffffffffffffffffffffffffff87166141cc565b610a4790846141cc565b90506000821180610a585750600081115b610aa45760405162461bcd60e51b815260206004820181905260248201527f5245514c503a20494e53554646494349454e545f494e5055545f414d4f554e54604482015260640161067f565b6000610ab285612710612cc6565b90506000610ac285612710612cc6565b90508315610b5a57600e54600090610aed90869063ffffffff640100000000909104811690612cc616565b9050610af98382612cd9565b600d54909350610b19906dffffffffffffffffffffffffffff1682612ce7565b600d80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff92909216919091179055505b8215610bf757600e54600090610b8390859063ffffffff640100000000909104811690612cc616565b9050610b8f8282612cd9565b600d54909250610bc1906e01000000000000000000000000000090046dffffffffffffffffffffffffffff1682612ce7565b600d600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550505b600d54600160e01b900463ffffffff166032811415610c9857610c3b6305f5e100610c356dffffffffffffffffffffffffffff8c8116908c16612cc6565b90612cc6565b610c458484612cc6565b1015610c935760405162461bcd60e51b815260206004820152600860248201527f5245514c503a204b000000000000000000000000000000000000000000000000604482015260640161067f565b610dc4565b600c546001600160a01b03166379c91b37610cc56dffffffffffffffffffffffffffff8c16612710612cc6565b610ce16dffffffffffffffffffffffffffff8c16612710612cc6565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604481018690526064810185905263ffffffff8416608482015260a401602060405180830381865afa158015610d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7891906141e3565b610dc45760405162461bcd60e51b815260206004820152600860248201527f5245514c503a204b000000000000000000000000000000000000000000000000604482015260640161067f565b505050610dd384848888612d04565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600b55505050505050505050565b6000610e47338484613003565b50600192915050565b6000600b54600114610ea45760405162461bcd60e51b815260206004820152600d60248201527f5245514c503a204c4f434b454400000000000000000000000000000000000000604482015260640161067f565b6000600b8190556006546001600160a01b038881169116149080808084610f0a57600854600e54600d546dffffffffffffffffffffffffffff6e0100000000000000000000000000008404811693169163ffffffff90811691600160e01b900416610f4c565b600854600d54600e546dffffffffffffffffffffffffffff808416936e0100000000000000000000000000009004169163ffffffff600160e01b909104811691165b600c54600e546040517fb19210b00000000000000000000000000000000000000000000000000000000081526dffffffffffffffffffffffffffff9687169a5094909516975091955093506000926001600160a01b039091169163b19210b091611001918e918a918a918a918a9163ffffffff64010000000090910416906004019586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b602060405180830381865afa15801561101e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110429190614184565b90506000808761105457826000611058565b6000835b9150915061106782828c613065565b6001600b559e9d5050505050505050505050505050565b6001600160a01b03831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1461111b576001600160a01b03841660009081526002602090815260408083203384529091529020546110f69083612cd9565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b611126848484613794565b5060019392505050565b600b546001146111825760405162461bcd60e51b815260206004820152600d60248201527f5245514c503a204c4f434b454400000000000000000000000000000000000000604482015260640161067f565b6000600b81905560065481906001600160a01b038881169116146111a8578360006111ac565b6000845b9150915060008211806111bf5750600081115b6112315760405162461bcd60e51b815260206004820152602160248201527f5245514c503a20494e53554646494349454e545f4f55545055545f414d4f554e60448201527f5400000000000000000000000000000000000000000000000000000000000000606482015260840161067f565b6008546dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041681841080156112785750806dffffffffffffffffffffffffffff1683105b6112c45760405162461bcd60e51b815260206004820152601d60248201527f5245514c503a20494e53554646494349454e545f4c4951554944495459000000604482015260640161067f565b60065460075460009182916001600160a01b039182169190811690891682148015906113025750806001600160a01b0316896001600160a01b031614155b61134e5760405162461bcd60e51b815260206004820152601160248201527f5245514c503a20494e56414c49445f544f000000000000000000000000000000604482015260640161067f565b871561135f5761135f828a8a612b4d565b861561137057611370818a89612b4d565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156113b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d89190614184565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa15801561141f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114439190614184565b92505050600086856dffffffffffffffffffffffffffff1661146591906141cc565b8311611472576000611496565b61148c876dffffffffffffffffffffffffffff87166141cc565b61149690846141cc565b905060006114b4876dffffffffffffffffffffffffffff87166141cc565b83116114c15760006114e5565b6114db876dffffffffffffffffffffffffffff87166141cc565b6114e590846141cc565b905060008211806114f65750600081115b6115425760405162461bcd60e51b815260206004820181905260248201527f5245514c503a20494e53554646494349454e545f494e5055545f414d4f554e54604482015260640161067f565b600061155085612710612cc6565b9050600061156085612710612cc6565b905083156115f857600e5460009061158b90869063ffffffff640100000000909104811690612cc616565b90506115978382612cd9565b600d549093506115b7906dffffffffffffffffffffffffffff1682612ce7565b600d80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff92909216919091179055505b821561169557600e5460009061162190859063ffffffff640100000000909104811690612cc616565b905061162d8282612cd9565b600d5490925061165f906e01000000000000000000000000000090046dffffffffffffffffffffffffffff1682612ce7565b600d600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550505b600d54600160e01b900463ffffffff166032811415611730576116d36305f5e100610c356dffffffffffffffffffffffffffff8c8116908c16612cc6565b6116dd8484612cc6565b101561172b5760405162461bcd60e51b815260206004820152600860248201527f5245514c503a204b000000000000000000000000000000000000000000000000604482015260640161067f565b61185c565b600c546001600160a01b03166379c91b3761175d6dffffffffffffffffffffffffffff8c16612710612cc6565b6117796dffffffffffffffffffffffffffff8c16612710612cc6565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604481018690526064810185905263ffffffff8416608482015260a401602060405180830381865afa1580156117ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181091906141e3565b61185c5760405162461bcd60e51b815260206004820152600860248201527f5245514c503a204b000000000000000000000000000000000000000000000000604482015260640161067f565b50505061186b84848888612d04565b6040805183815260208101839052908101899052606081018890526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600b555050505050505050505050565b6000600b546001146119285760405162461bcd60e51b815260206004820152600d60248201527f5245514c503a204c4f434b454400000000000000000000000000000000000000604482015260640161067f565b6000600b8190556006546001600160a01b03888116911614908080808461198e57600854600e54600d546dffffffffffffffffffffffffffff6e0100000000000000000000000000008404811693169163ffffffff90811691600160e01b9004166119d0565b600854600d54600e546dffffffffffffffffffffffffffff808416936e0100000000000000000000000000009004169163ffffffff600160e01b909104811691165b600c54600e546040517f671a11b50000000000000000000000000000000000000000000000000000000081526dffffffffffffffffffffffffffff9687169a5094909516975091955093506000926001600160a01b039091169163671a11b591611001918e918a918a918a918a9163ffffffff64010000000090910416906004019586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b6000600b54600114611ad95760405162461bcd60e51b815260206004820152600d60248201527f5245514c503a204c4f434b454400000000000000000000000000000000000000604482015260640161067f565b6000600b819055600854600654604080516370a0823160e01b815230600482015290516dffffffffffffffffffffffffffff808516956e0100000000000000000000000000009095041693926001600160a01b0316916370a082319160248083019260209291908290030181865afa158015611b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7d9190614184565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bef9190614184565b90506000611c0d836dffffffffffffffffffffffffffff8716612cd9565b90506000611c2b836dffffffffffffffffffffffffffff8716612cd9565b9050611c37868661383a565b5060005480611c7257611c5e6103e8611c58611c538686612cc6565b613b70565b90612cd9565b9750611c6d60006103e8613be0565b611cc7565b611cc46dffffffffffffffffffffffffffff8816611c908584612cc6565b611c9a9190614234565b6dffffffffffffffffffffffffffff8816611cb58585612cc6565b611cbf9190614234565b613c6f565b97505b60008811611d3c5760405162461bcd60e51b8152602060048201526024808201527f5245514c503a20494e53554646494349454e545f4c49515549444954595f4d4960448201527f4e54454400000000000000000000000000000000000000000000000000000000606482015260840161067f565b611d468989613be0565b611d5285858989612d04565b604080518481526020810184905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600b55509395945050505050565b600080600b54600114611df45760405162461bcd60e51b815260206004820152600d60248201527f5245514c503a204c4f434b454400000000000000000000000000000000000000604482015260640161067f565b6000600b819055600854600654600754604080516370a0823160e01b815230600482015290516dffffffffffffffffffffffffffff808616966e01000000000000000000000000000090960416946001600160a01b0394851694909316929184916370a08231916024808201926020929091908290030181865afa158015611e80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea49190614184565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f129190614184565b30600090815260016020526040902054909150611f2f878761383a565b5060005480611f3e8386612cc6565b611f489190614234565b995080611f558385612cc6565b611f5f9190614234565b985060008a118015611f715750600089115b611fe25760405162461bcd60e51b8152602060048201526024808201527f5245514c503a20494e53554646494349454e545f4c49515549444954595f425560448201527f524e454400000000000000000000000000000000000000000000000000000000606482015260840161067f565b611fec3083613c85565b611ff7868c8c612b4d565b612002858c8b612b4d565b6040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa158015612046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206a9190614184565b6040516370a0823160e01b81523060048201529094506001600160a01b038616906370a0823190602401602060405180830381865afa1580156120b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d59190614184565b92506120e384848a8a612d04565b604080518b8152602081018b90526001600160a01b038d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a350505050505050506001600b81905550915091565b6000610e47338484613794565b600b5460011461219d5760405162461bcd60e51b815260206004820152600d60248201527f5245514c503a204c4f434b454400000000000000000000000000000000000000604482015260640161067f565b6000600b556006546007546008546040516370a0823160e01b81523060048201526001600160a01b03938416939092169161223f918491869161223a916dffffffffffffffffffffffffffff9091169084906370a08231906024015b602060405180830381865afa158015612216573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c589190614184565b612b4d565b6008546040516370a0823160e01b815230600482015261229e918391869161223a916e0100000000000000000000000000009091046dffffffffffffffffffffffffffff16906001600160a01b038516906370a08231906024016121f9565b50506001600b5550565b60065460009081908190819081906001600160a01b0389811691161461230d57600854600e54600d546dffffffffffffffffffffffffffff6e0100000000000000000000000000008404811693169163ffffffff90811691600160e01b90041661234f565b600854600d54600e546dffffffffffffffffffffffffffff808416936e0100000000000000000000000000009004169163ffffffff600160e01b909104811691165b600c54600e546040517fb19210b0000000000000000000000000000000000000000000000000000000008152600481018d90526dffffffffffffffffffffffffffff96871660248201819052959096166044870181905263ffffffff8086166064890152808516608489015264010000000090920490911660a487015293985092965090945092506001600160a01b03169063b19210b09060c4015b602060405180830381865afa158015612408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242c9190614184565b98975050505050505050565b6005546001600160a01b031633146124925760405162461bcd60e51b815260206004820152601060248201527f5245514c503a20464f5242494444454e00000000000000000000000000000000604482015260640161067f565b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b038781169190911790925560078054909116918516919091179055600d80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e01b63ffffffff858116820292909217928390556125229204166064614248565b600e805463ffffffff848116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909216931692909217919091179055600554604080517f4b75f54f00000000000000000000000000000000000000000000000000000000815290516001600160a01b0390921691634b75f54f916004818101926020929091908290030181865afa1580156125c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ec919061426d565b600c80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550505050565b4284101561267a5760405162461bcd60e51b815260206004820152600c60248201527f524c503a20455850495245440000000000000000000000000000000000000000604482015260640161067f565b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876126cd8361428a565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016127619291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156127ea573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b0381161580159061283e5750886001600160a01b0316816001600160a01b0316145b61288a5760405162461bcd60e51b815260206004820152601660248201527f524c503a20494e56414c49445f5349474e415455524500000000000000000000604482015260640161067f565b612895898989613003565b505050505050505050565b60065460009081908190819081906001600160a01b0389811691161461290557600854600e54600d546dffffffffffffffffffffffffffff6e0100000000000000000000000000008404811693169163ffffffff90811691600160e01b900416612947565b600854600d54600e546dffffffffffffffffffffffffffff808416936e0100000000000000000000000000009004169163ffffffff600160e01b909104811691165b600c54600e546040517f671a11b5000000000000000000000000000000000000000000000000000000008152600481018d90526dffffffffffffffffffffffffffff96871660248201819052959096166044870181905263ffffffff8086166064890152808516608489015264010000000090920490911660a487015293985092965090945092506001600160a01b03169063671a11b59060c4016123eb565b600b54600114612a395760405162461bcd60e51b815260206004820152600d60248201527f5245514c503a204c4f434b454400000000000000000000000000000000000000604482015260640161067f565b6000600b556006546040516370a0823160e01b8152306004820152612b46916001600160a01b0316906370a0823190602401602060405180830381865afa158015612a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aac9190614184565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b189190614184565b6008546dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612d04565b6001600b55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392871691612c0791906142c3565b6000604051808303816000865af19150503d8060008114612c44576040519150601f19603f3d011682016040523d82523d6000602084013e612c49565b606091505b5091509150818015612c73575080511580612c73575080806020019051810190612c7391906141e3565b612cbf5760405162461bcd60e51b815260206004820152601660248201527f5245514c503a205452414e534645525f4641494c454400000000000000000000604482015260640161067f565b5050505050565b6000612cd282846142df565b9392505050565b6000612cd283836001613d0f565b600080612cf4838561431c565b9050612cd2848210156000613d33565b600d54600160e01b900463ffffffff166dffffffffffffffffffffffffffff612d2e826064614248565b612d3e9063ffffffff16876142df565b11158015612d6957506dffffffffffffffffffffffffffff612d6663ffffffff8316866142df565b11155b612db55760405162461bcd60e51b815260206004820152600f60248201527f5245514c503a204f564552464c4f570000000000000000000000000000000000604482015260640161067f565b6000612dc664010000000042614334565b600854909150600090612de690600160e01b900463ffffffff1683614248565b905060008163ffffffff16118015612e0d57506dffffffffffffffffffffffffffff851615155b8015612e2857506dffffffffffffffffffffffffffff841615155b15612f2b576000612e3a846064614248565b612e4a9063ffffffff1687614348565b90506000612e5e63ffffffff861687614348565b90508263ffffffff16612e9883612e7484613d45565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690613d76565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16612ec091906142df565b60096000828254612ed1919061431c565b909155505063ffffffff8316612eea82612e7485613d45565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16612f1291906142df565b600a6000828254612f23919061431c565b909155505050505b6008805463ffffffff8416600160e01b027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff8a81166e0100000000000000000000000000009081027fffffffff000000000000000000000000000000000000000000000000000000009095168d83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a150505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000808411806130755750600083115b6130e75760405162461bcd60e51b815260206004820152602160248201527f5245514c503a20494e53554646494349454e545f4f55545055545f414d4f554e60448201527f5400000000000000000000000000000000000000000000000000000000000000606482015260840161067f565b6008546dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416818610801561312e5750806dffffffffffffffffffffffffffff1685105b61317a5760405162461bcd60e51b815260206004820152601d60248201527f5245514c503a20494e53554646494349454e545f4c4951554944495459000000604482015260640161067f565b60065460075460009182916001600160a01b039182169190811690881682148015906131b85750806001600160a01b0316886001600160a01b031614155b6132045760405162461bcd60e51b815260206004820152601160248201527f5245514c503a20494e56414c49445f544f000000000000000000000000000000604482015260640161067f565b89156132155761321582898c612b4d565b88156132265761322681898b612b4d565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa15801561326a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061328e9190614184565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa1580156132d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f99190614184565b92505050600088856dffffffffffffffffffffffffffff1661331b91906141cc565b831161332857600061334c565b613342896dffffffffffffffffffffffffffff87166141cc565b61334c90846141cc565b9050600061336a896dffffffffffffffffffffffffffff87166141cc565b831161337757600061339b565b613391896dffffffffffffffffffffffffffff87166141cc565b61339b90846141cc565b905060008211806133ac5750600081115b6133f85760405162461bcd60e51b815260206004820181905260248201527f5245514c503a20494e53554646494349454e545f494e5055545f414d4f554e54604482015260640161067f565b600061340685612710612cc6565b9050600061341685612710612cc6565b905083156134ae57600e5460009061344190869063ffffffff640100000000909104811690612cc616565b905061344d8382612cd9565b600d5490935061346d906dffffffffffffffffffffffffffff1682612ce7565b600d80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff92909216919091179055505b821561354b57600e546000906134d790859063ffffffff640100000000909104811690612cc616565b90506134e38282612cd9565b600d54909250613515906e01000000000000000000000000000090046dffffffffffffffffffffffffffff1682612ce7565b600d600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550505b600d54600160e01b900463ffffffff1660328114156135e6576135896305f5e100610c356dffffffffffffffffffffffffffff8c8116908c16612cc6565b6135938484612cc6565b10156135e15760405162461bcd60e51b815260206004820152600860248201527f5245514c503a204b000000000000000000000000000000000000000000000000604482015260640161067f565b613712565b600c546001600160a01b03166379c91b376136136dffffffffffffffffffffffffffff8c16612710612cc6565b61362f6dffffffffffffffffffffffffffff8c16612710612cc6565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604481018690526064810185905263ffffffff8416608482015260a401602060405180830381865afa1580156136a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c691906141e3565b6137125760405162461bcd60e51b815260206004820152600860248201527f5245514c503a204b000000000000000000000000000000000000000000000000604482015260640161067f565b50505061372184848888612d04565b60408051838152602081018390529081018b9052606081018a90526001600160a01b0389169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a360008a116137845788613786565b895b9a9950505050505050505050565b6001600160a01b0383166000908152600160205260409020546137b79082612cd9565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546137e69082612ce7565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906130589085815260200190565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015613890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138b4919061426d565b90506000600560009054906101000a90046001600160a01b03166001600160a01b031663b0e21e8a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561390b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061392f9190614184565b6001600160a01b038316151593509050600080613972600d546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000009092041690565b915091506000836dffffffffffffffffffffffffffff161180156139935750845b80156139c957506000826dffffffffffffffffffffffffffff1611806139c957506000816dffffffffffffffffffffffffffff16115b15613ae857600d54600c5460008054600160e01b90930463ffffffff169290916001600160a01b0316906392aec23c908b8b86613a07816064614248565b613a118c8c61437e565b613a1b8d8c61437e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b16815260048101979097526dffffffffffffffffffffffffffff9586166024880152938516604487015263ffffffff928316606487015291166084850152821660a48401521660c482015260e401602060405180830381865afa158015613aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ad39190614184565b90508015613ae557613ae58682613be0565b50505b6dffffffffffffffffffffffffffff821615613b2757600d80547fffffffffffffffffffffffffffffffffffff00000000000000000000000000001690555b6dffffffffffffffffffffffffffff811615613b6657600d80547fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff1690555b5050505092915050565b60006003821115613bd15750806000613b8a600283614234565b613b9590600161431c565b90505b81811015613bcb57905080600281613bb08186614234565b613bba919061431c565b613bc49190614234565b9050613b98565b50919050565b8115613bdb575060015b919050565b600054613bed9082612ce7565b60009081556001600160a01b038316815260016020526040902054613c129082612ce7565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90613c639085815260200190565b60405180910390a35050565b6000818310613c7e5781612cd2565b5090919050565b6001600160a01b038216600090815260016020526040902054613ca89082612cd9565b6001600160a01b03831660009081526001602052604081209190915554613ccf9082612cd9565b60009081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001613c63565b6000613d1e8484111583613d33565b6000613d2a84866141cc565b95945050505050565b81613d4157613d4181613d92565b5050565b6000613d706e0100000000000000000000000000006dffffffffffffffffffffffffffff84166143ab565b92915050565b6000612cd26dffffffffffffffffffffffffffff8316846143e6565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6001600160a01b0381168114613dfa57600080fd5b50565b600080600080600060808688031215613e1557600080fd5b85359450602086013593506040860135613e2e81613de5565b9250606086013567ffffffffffffffff80821115613e4b57600080fd5b818801915088601f830112613e5f57600080fd5b813581811115613e6e57600080fd5b896020828501011115613e8057600080fd5b9699959850939650602001949392505050565b60005b83811015613eae578181015183820152602001613e96565b83811115613ebd576000848401525b50505050565b6020815260008251806020840152613ee2816040850160208701613e93565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008060408385031215613f2757600080fd5b8235613f3281613de5565b946020939093013593505050565b600080600080600060a08688031215613f5857600080fd5b8535613f6381613de5565b94506020860135613f7381613de5565b935060408601359250606086013591506080860135613f9181613de5565b809150509295509295909350565b600080600060608486031215613fb457600080fd5b8335613fbf81613de5565b92506020840135613fcf81613de5565b929592945050506040919091013590565b600060208284031215613ff257600080fd5b8135612cd281613de5565b803563ffffffff81168114613bdb57600080fd5b6000806000806080858703121561402757600080fd5b843561403281613de5565b9350602085013561404281613de5565b925061405060408601613ffd565b915061405e60608601613ffd565b905092959194509250565b600080600080600080600060e0888a03121561408457600080fd5b873561408f81613de5565b9650602088013561409f81613de5565b95506040880135945060608801359350608088013560ff811681146140c357600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156140f357600080fd5b82356140fe81613de5565b9150602083013561410e81613de5565b809150509250929050565b6001600160a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101949350505050565b60006020828403121561419657600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156141de576141de61419d565b500390565b6000602082840312156141f557600080fd5b81518015158114612cd257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261424357614243614205565b500490565b600063ffffffff838116908316818110156142655761426561419d565b039392505050565b60006020828403121561427f57600080fd5b8151612cd281613de5565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156142bc576142bc61419d565b5060010190565b600082516142d5818460208701613e93565b9190910192915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156143175761431761419d565b500290565b6000821982111561432f5761432f61419d565b500190565b60008261434357614343614205565b500690565b60006dffffffffffffffffffffffffffff808316818516818304811182151516156143755761437561419d565b02949350505050565b60006dffffffffffffffffffffffffffff8084168061439f5761439f614205565b92169190910492915050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff808316818516818304811182151516156143755761437561419d565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8084168061439f5761439f61420556fea26469706673582212202ebf14ab533be976cd78f7b01c42a6db4c939e8efa29cd8a1d83b00399602f2764736f6c634300080a0033a264697066735822122060fb6de492f2ce3707613b3bfcffe5124edffc4dd826bd3c440c726a1d07a26864736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063787dce3d1161008c578063bfd63f4d11610066578063bfd63f4d146101ee578063ca22297914610201578063e5e31b131461023b578063f46901ed1461028d57600080fd5b8063787dce3d146101bd578063a2e74af6146101d2578063b0e21e8a146101e557600080fd5b80631e3dd18b116100c85780631e3dd18b1461016c578063257671f51461017f5780634b75f54f14610195578063574f2ba3146101b557600080fd5b8063017e7e58146100ef578063094b74151461013957806314572adb14610159575b600080fd5b60005461010f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b60035461010f9073ffffffffffffffffffffffffffffffffffffffff1681565b61010f610167366004610dc1565b6102a0565b61010f61017a366004610e15565b610897565b6101876108ce565b604051908152602001610130565b60015461010f9073ffffffffffffffffffffffffffffffffffffffff1681565b600554610187565b6101d06101cb366004610e15565b610936565b005b6101d06101e0366004610e2e565b610a3f565b61018760025481565b61010f6101fc366004610dc1565b610b07565b61021461020f366004610e2e565b610c39565b6040805163ffffffff94851681529284166020840152921691810191909152606001610130565b61027d610249366004610e2e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205467ffffffffffffffff16151590565b6040519015158152602001610130565b6101d061029b366004610e2e565b610caf565b60008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561033d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f524c503a204944454e544943414c5f414444524553534553000000000000000060448201526064015b60405180910390fd5b60028363ffffffff161015801561035b575060628363ffffffff1611155b8015610375575061036d600284610e50565b63ffffffff16155b6103db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f524c503a20494e56414c49445f544f4b454e5f574549474854000000000000006044820152606401610334565b60018263ffffffff16101580156103fa57506107d08263ffffffff1611155b610460576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f524c503a20494e56414c49445f535741505f46454500000000000000000000006044820152606401610334565b60008060008673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16106104aa5786886104a5886064610e9a565b6104ae565b8787875b9194509250905073ffffffffffffffffffffffffffffffffffffffff8316610532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f524c503a205a45524f5f414444524553530000000000000000000000000000006044820152606401610334565b60006040518060200161054490610d77565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f9091011660408190527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087811b8216602084015286901b1660348201527fffffffff0000000000000000000000000000000000000000000000000000000060e085811b8216604884015289901b16604c820152909150600090605001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600490935291205490915073ffffffffffffffffffffffffffffffffffffffff16156106af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f524c503a20504149525f455849535453000000000000000000000000000000006044820152606401610334565b808251602084016000f56040517fd0f6957900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152868116602483015263ffffffff80871660448401528a1660648301529197509087169063d0f6957990608401600060405180830381600087803b15801561074257600080fd5b505af1158015610756573d6000803e3d6000fd5b505050600082815260046020908152604080832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff8d8116918217909355600580546001810182557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805490931682179092558086526006855294839020805463ffffffff8f81168c881b67ffffffff000000001681177fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909316831790935592548551978852928b169587019590955292850192909252606084019190915290925086811691908816907f41f8736f924f57e464ededb08bf71f868f9d142885bbc73a1516db2be21fc4289060800160405180910390a3505050505050949350505050565b600581815481106108a757600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6040516108dd60208201610d77565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604081905261091d9190602001610ee6565b6040516020818303038152906040528051906020012081565b60035473ffffffffffffffffffffffffffffffffffffffff1633146109b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f524c503a20464f5242494444454e0000000000000000000000000000000000006044820152606401610334565b8015806109d4575061271081101580156109d45750620186a08111155b610a3a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f524c503a20496e76616c69642050726f746f636f6c20666565000000000000006044820152606401610334565b600255565b60035473ffffffffffffffffffffffffffffffffffffffff163314610ac0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f524c503a20464f5242494444454e0000000000000000000000000000000000006044820152606401610334565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000806000808673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1610610b52578688610b4d886064610e9a565b610b56565b8787875b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085811b8216602084015284901b1660348201527fffffffff0000000000000000000000000000000000000000000000000000000060e083811b821660488401528a901b16604c8201529295509093509150600090605001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000908152600490925290205473ffffffffffffffffffffffffffffffffffffffff169998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660205260408120548190819067ffffffffffffffff168015610c955763ffffffff602082901c169350905080610c8e846064610e9a565b9250610ca6565b603280601e93509350935050610ca8565b505b9193909250565b60035473ffffffffffffffffffffffffffffffffffffffff163314610d30576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f524c503a20464f5242494444454e0000000000000000000000000000000000006044820152606401610334565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61456680610f2283390190565b803573ffffffffffffffffffffffffffffffffffffffff81168114610da857600080fd5b919050565b803563ffffffff81168114610da857600080fd5b60008060008060808587031215610dd757600080fd5b610de085610d84565b9350610dee60208601610d84565b9250610dfc60408601610dad565b9150610e0a60608601610dad565b905092959194509250565b600060208284031215610e2757600080fd5b5035919050565b600060208284031215610e4057600080fd5b610e4982610d84565b9392505050565b600063ffffffff80841680610e8e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b92169190910692915050565b600063ffffffff83811690831681811015610ede577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b039392505050565b6000825160005b81811015610f075760208186018101518583015201610eed565b81811115610f16576000828501525b50919091019291505056fe60806040526001600b5534801561001557600080fd5b50604080518082018252601a81527f5265717569656d204c69717569646974792050726f76696465720000000000006020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f2e1adfbb118fada029d9623aa0ed8dd2318a25545f57095be55dcbd209508e12818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b0319163317905561444b8061011b6000396000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c80636a62784211610145578063cc56fd43116100bd578063d505accf1161008c578063dd62ed3e11610071578063dd62ed3e146105eb578063e9255bae14610616578063fff6cae91461062957600080fd5b8063d505accf1461059c578063d54a8d18146105af57600080fd5b8063cc56fd431461053d578063d0f6957914610550578063d21220a714610563578063d4cadf681461057657600080fd5b806395d89b4111610114578063ba9a7a56116100f9578063ba9a7a561461050e578063bc25cf7714610517578063c45a01551461052a57600080fd5b806395d89b41146104bf578063a9059cbb146104fb57600080fd5b80636a6278421461044457806370a08231146104575780637ecebe001461047757806389afcb441461049757600080fd5b806330adf81f116101d85780633644e515116101a75780634b75f54f1161018c5780634b75f54f1461041f5780635909c0d5146104325780635a3d54931461043b57600080fd5b80633644e515146104035780634ac00e031461040c57600080fd5b806330adf81f14610385578063313ce567146103ac57806332bfe469146103c657806332fd5493146103f057600080fd5b80630dfe1681116102145780630dfe16811461031d5780630e6d8bce1461034857806318160ddd1461036957806323b872dd1461037257600080fd5b8063022c0d9f1461024657806306fdde031461025b5780630902f1ac146102ad578063095ea7b3146102fa575b600080fd5b610259610254366004613dfd565b610631565b005b6102976040518060400160405280601a81526020017f5265717569656d204c69717569646974792050726f766964657200000000000081525081565b6040516102a49190613ec3565b60405180910390f35b600854604080516dffffffffffffffffffffffffffff80841682526e0100000000000000000000000000008404166020820152600160e01b90920463ffffffff16908201526060016102a4565b61030d610308366004613f14565b610e3a565b60405190151581526020016102a4565b600654610330906001600160a01b031681565b6040516001600160a01b0390911681526020016102a4565b61035b610356366004613f40565b610e50565b6040519081526020016102a4565b61035b60005481565b61030d610380366004613f9f565b61107e565b61035b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6103b4601281565b60405160ff90911681526020016102a4565b600d54600e5460408051600160e01b90930463ffffffff90811684529091166020830152016102a4565b6102596103fe366004613f40565b611130565b61035b60035481565b61035b61041a366004613f40565b6118d4565b600c54610330906001600160a01b031681565b61035b60095481565b61035b600a5481565b61035b610452366004613fe0565b611a85565b61035b610465366004613fe0565b60016020526000908152604090205481565b61035b610485366004613fe0565b60046020526000908152604090205481565b6104aa6104a5366004613fe0565b611d9f565b604080519283526020830191909152016102a4565b6102976040518060400160405280600381526020017f524c50000000000000000000000000000000000000000000000000000000000081525081565b61030d610509366004613f14565b61213e565b61035b6103e881565b610259610525366004613fe0565b61214b565b600554610330906001600160a01b031681565b61035b61054b366004613f9f565b6122a8565b61025961055e366004614011565b612438565b600754610330906001600160a01b031681565b600e54640100000000900463ffffffff1660405163ffffffff90911681526020016102a4565b6102596105aa366004614069565b61262a565b600d54604080516dffffffffffffffffffffffffffff80841682526e0100000000000000000000000000009093049092166020830152016102a4565b61035b6105f93660046140e0565b600260209081526000928352604080842090915290825290205481565b61035b610624366004613f9f565b6128a0565b6102596129e7565b600b546001146106885760405162461bcd60e51b815260206004820152600d60248201527f5245514c503a204c4f434b45440000000000000000000000000000000000000060448201526064015b60405180910390fd5b6000600b558415158061069b5750600084115b61070d5760405162461bcd60e51b815260206004820152602160248201527f5245514c503a20494e53554646494349454e545f4f55545055545f414d4f554e60448201527f5400000000000000000000000000000000000000000000000000000000000000606482015260840161067f565b6008546dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041681871080156107545750806dffffffffffffffffffffffffffff1686105b6107a05760405162461bcd60e51b815260206004820152601d60248201527f5245514c503a20494e53554646494349454e545f4c4951554944495459000000604482015260640161067f565b60065460075460009182916001600160a01b039182169190811690891682148015906107de5750806001600160a01b0316896001600160a01b031614155b61082a5760405162461bcd60e51b815260206004820152601160248201527f5245514c503a20494e56414c49445f544f000000000000000000000000000000604482015260640161067f565b8a1561083b5761083b828a8d612b4d565b891561084c5761084c818a8c612b4d565b86156108d2576040517f10d1e85c0000000000000000000000000000000000000000000000000000000081526001600160a01b038a16906310d1e85c9061089f9033908f908f908e908e90600401614119565b600060405180830381600087803b1580156108b957600080fd5b505af11580156108cd573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093a9190614184565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa158015610981573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a59190614184565b92505050600089856dffffffffffffffffffffffffffff166109c791906141cc565b83116109d45760006109f8565b6109ee8a6dffffffffffffffffffffffffffff87166141cc565b6109f890846141cc565b90506000610a168a6dffffffffffffffffffffffffffff87166141cc565b8311610a23576000610a47565b610a3d8a6dffffffffffffffffffffffffffff87166141cc565b610a4790846141cc565b90506000821180610a585750600081115b610aa45760405162461bcd60e51b815260206004820181905260248201527f5245514c503a20494e53554646494349454e545f494e5055545f414d4f554e54604482015260640161067f565b6000610ab285612710612cc6565b90506000610ac285612710612cc6565b90508315610b5a57600e54600090610aed90869063ffffffff640100000000909104811690612cc616565b9050610af98382612cd9565b600d54909350610b19906dffffffffffffffffffffffffffff1682612ce7565b600d80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff92909216919091179055505b8215610bf757600e54600090610b8390859063ffffffff640100000000909104811690612cc616565b9050610b8f8282612cd9565b600d54909250610bc1906e01000000000000000000000000000090046dffffffffffffffffffffffffffff1682612ce7565b600d600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550505b600d54600160e01b900463ffffffff166032811415610c9857610c3b6305f5e100610c356dffffffffffffffffffffffffffff8c8116908c16612cc6565b90612cc6565b610c458484612cc6565b1015610c935760405162461bcd60e51b815260206004820152600860248201527f5245514c503a204b000000000000000000000000000000000000000000000000604482015260640161067f565b610dc4565b600c546001600160a01b03166379c91b37610cc56dffffffffffffffffffffffffffff8c16612710612cc6565b610ce16dffffffffffffffffffffffffffff8c16612710612cc6565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604481018690526064810185905263ffffffff8416608482015260a401602060405180830381865afa158015610d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7891906141e3565b610dc45760405162461bcd60e51b815260206004820152600860248201527f5245514c503a204b000000000000000000000000000000000000000000000000604482015260640161067f565b505050610dd384848888612d04565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600b55505050505050505050565b6000610e47338484613003565b50600192915050565b6000600b54600114610ea45760405162461bcd60e51b815260206004820152600d60248201527f5245514c503a204c4f434b454400000000000000000000000000000000000000604482015260640161067f565b6000600b8190556006546001600160a01b038881169116149080808084610f0a57600854600e54600d546dffffffffffffffffffffffffffff6e0100000000000000000000000000008404811693169163ffffffff90811691600160e01b900416610f4c565b600854600d54600e546dffffffffffffffffffffffffffff808416936e0100000000000000000000000000009004169163ffffffff600160e01b909104811691165b600c54600e546040517fb19210b00000000000000000000000000000000000000000000000000000000081526dffffffffffffffffffffffffffff9687169a5094909516975091955093506000926001600160a01b039091169163b19210b091611001918e918a918a918a918a9163ffffffff64010000000090910416906004019586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b602060405180830381865afa15801561101e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110429190614184565b90506000808761105457826000611058565b6000835b9150915061106782828c613065565b6001600b559e9d5050505050505050505050505050565b6001600160a01b03831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1461111b576001600160a01b03841660009081526002602090815260408083203384529091529020546110f69083612cd9565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b611126848484613794565b5060019392505050565b600b546001146111825760405162461bcd60e51b815260206004820152600d60248201527f5245514c503a204c4f434b454400000000000000000000000000000000000000604482015260640161067f565b6000600b81905560065481906001600160a01b038881169116146111a8578360006111ac565b6000845b9150915060008211806111bf5750600081115b6112315760405162461bcd60e51b815260206004820152602160248201527f5245514c503a20494e53554646494349454e545f4f55545055545f414d4f554e60448201527f5400000000000000000000000000000000000000000000000000000000000000606482015260840161067f565b6008546dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041681841080156112785750806dffffffffffffffffffffffffffff1683105b6112c45760405162461bcd60e51b815260206004820152601d60248201527f5245514c503a20494e53554646494349454e545f4c4951554944495459000000604482015260640161067f565b60065460075460009182916001600160a01b039182169190811690891682148015906113025750806001600160a01b0316896001600160a01b031614155b61134e5760405162461bcd60e51b815260206004820152601160248201527f5245514c503a20494e56414c49445f544f000000000000000000000000000000604482015260640161067f565b871561135f5761135f828a8a612b4d565b861561137057611370818a89612b4d565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156113b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d89190614184565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa15801561141f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114439190614184565b92505050600086856dffffffffffffffffffffffffffff1661146591906141cc565b8311611472576000611496565b61148c876dffffffffffffffffffffffffffff87166141cc565b61149690846141cc565b905060006114b4876dffffffffffffffffffffffffffff87166141cc565b83116114c15760006114e5565b6114db876dffffffffffffffffffffffffffff87166141cc565b6114e590846141cc565b905060008211806114f65750600081115b6115425760405162461bcd60e51b815260206004820181905260248201527f5245514c503a20494e53554646494349454e545f494e5055545f414d4f554e54604482015260640161067f565b600061155085612710612cc6565b9050600061156085612710612cc6565b905083156115f857600e5460009061158b90869063ffffffff640100000000909104811690612cc616565b90506115978382612cd9565b600d549093506115b7906dffffffffffffffffffffffffffff1682612ce7565b600d80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff92909216919091179055505b821561169557600e5460009061162190859063ffffffff640100000000909104811690612cc616565b905061162d8282612cd9565b600d5490925061165f906e01000000000000000000000000000090046dffffffffffffffffffffffffffff1682612ce7565b600d600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550505b600d54600160e01b900463ffffffff166032811415611730576116d36305f5e100610c356dffffffffffffffffffffffffffff8c8116908c16612cc6565b6116dd8484612cc6565b101561172b5760405162461bcd60e51b815260206004820152600860248201527f5245514c503a204b000000000000000000000000000000000000000000000000604482015260640161067f565b61185c565b600c546001600160a01b03166379c91b3761175d6dffffffffffffffffffffffffffff8c16612710612cc6565b6117796dffffffffffffffffffffffffffff8c16612710612cc6565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604481018690526064810185905263ffffffff8416608482015260a401602060405180830381865afa1580156117ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181091906141e3565b61185c5760405162461bcd60e51b815260206004820152600860248201527f5245514c503a204b000000000000000000000000000000000000000000000000604482015260640161067f565b50505061186b84848888612d04565b6040805183815260208101839052908101899052606081018890526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001600b555050505050505050505050565b6000600b546001146119285760405162461bcd60e51b815260206004820152600d60248201527f5245514c503a204c4f434b454400000000000000000000000000000000000000604482015260640161067f565b6000600b8190556006546001600160a01b03888116911614908080808461198e57600854600e54600d546dffffffffffffffffffffffffffff6e0100000000000000000000000000008404811693169163ffffffff90811691600160e01b9004166119d0565b600854600d54600e546dffffffffffffffffffffffffffff808416936e0100000000000000000000000000009004169163ffffffff600160e01b909104811691165b600c54600e546040517f671a11b50000000000000000000000000000000000000000000000000000000081526dffffffffffffffffffffffffffff9687169a5094909516975091955093506000926001600160a01b039091169163671a11b591611001918e918a918a918a918a9163ffffffff64010000000090910416906004019586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b6000600b54600114611ad95760405162461bcd60e51b815260206004820152600d60248201527f5245514c503a204c4f434b454400000000000000000000000000000000000000604482015260640161067f565b6000600b819055600854600654604080516370a0823160e01b815230600482015290516dffffffffffffffffffffffffffff808516956e0100000000000000000000000000009095041693926001600160a01b0316916370a082319160248083019260209291908290030181865afa158015611b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7d9190614184565b6007546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bef9190614184565b90506000611c0d836dffffffffffffffffffffffffffff8716612cd9565b90506000611c2b836dffffffffffffffffffffffffffff8716612cd9565b9050611c37868661383a565b5060005480611c7257611c5e6103e8611c58611c538686612cc6565b613b70565b90612cd9565b9750611c6d60006103e8613be0565b611cc7565b611cc46dffffffffffffffffffffffffffff8816611c908584612cc6565b611c9a9190614234565b6dffffffffffffffffffffffffffff8816611cb58585612cc6565b611cbf9190614234565b613c6f565b97505b60008811611d3c5760405162461bcd60e51b8152602060048201526024808201527f5245514c503a20494e53554646494349454e545f4c49515549444954595f4d4960448201527f4e54454400000000000000000000000000000000000000000000000000000000606482015260840161067f565b611d468989613be0565b611d5285858989612d04565b604080518481526020810184905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600b55509395945050505050565b600080600b54600114611df45760405162461bcd60e51b815260206004820152600d60248201527f5245514c503a204c4f434b454400000000000000000000000000000000000000604482015260640161067f565b6000600b819055600854600654600754604080516370a0823160e01b815230600482015290516dffffffffffffffffffffffffffff808616966e01000000000000000000000000000090960416946001600160a01b0394851694909316929184916370a08231916024808201926020929091908290030181865afa158015611e80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea49190614184565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f129190614184565b30600090815260016020526040902054909150611f2f878761383a565b5060005480611f3e8386612cc6565b611f489190614234565b995080611f558385612cc6565b611f5f9190614234565b985060008a118015611f715750600089115b611fe25760405162461bcd60e51b8152602060048201526024808201527f5245514c503a20494e53554646494349454e545f4c49515549444954595f425560448201527f524e454400000000000000000000000000000000000000000000000000000000606482015260840161067f565b611fec3083613c85565b611ff7868c8c612b4d565b612002858c8b612b4d565b6040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa158015612046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206a9190614184565b6040516370a0823160e01b81523060048201529094506001600160a01b038616906370a0823190602401602060405180830381865afa1580156120b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d59190614184565b92506120e384848a8a612d04565b604080518b8152602081018b90526001600160a01b038d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a350505050505050506001600b81905550915091565b6000610e47338484613794565b600b5460011461219d5760405162461bcd60e51b815260206004820152600d60248201527f5245514c503a204c4f434b454400000000000000000000000000000000000000604482015260640161067f565b6000600b556006546007546008546040516370a0823160e01b81523060048201526001600160a01b03938416939092169161223f918491869161223a916dffffffffffffffffffffffffffff9091169084906370a08231906024015b602060405180830381865afa158015612216573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c589190614184565b612b4d565b6008546040516370a0823160e01b815230600482015261229e918391869161223a916e0100000000000000000000000000009091046dffffffffffffffffffffffffffff16906001600160a01b038516906370a08231906024016121f9565b50506001600b5550565b60065460009081908190819081906001600160a01b0389811691161461230d57600854600e54600d546dffffffffffffffffffffffffffff6e0100000000000000000000000000008404811693169163ffffffff90811691600160e01b90041661234f565b600854600d54600e546dffffffffffffffffffffffffffff808416936e0100000000000000000000000000009004169163ffffffff600160e01b909104811691165b600c54600e546040517fb19210b0000000000000000000000000000000000000000000000000000000008152600481018d90526dffffffffffffffffffffffffffff96871660248201819052959096166044870181905263ffffffff8086166064890152808516608489015264010000000090920490911660a487015293985092965090945092506001600160a01b03169063b19210b09060c4015b602060405180830381865afa158015612408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242c9190614184565b98975050505050505050565b6005546001600160a01b031633146124925760405162461bcd60e51b815260206004820152601060248201527f5245514c503a20464f5242494444454e00000000000000000000000000000000604482015260640161067f565b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b038781169190911790925560078054909116918516919091179055600d80547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16600160e01b63ffffffff858116820292909217928390556125229204166064614248565b600e805463ffffffff848116640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909216931692909217919091179055600554604080517f4b75f54f00000000000000000000000000000000000000000000000000000000815290516001600160a01b0390921691634b75f54f916004818101926020929091908290030181865afa1580156125c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ec919061426d565b600c80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550505050565b4284101561267a5760405162461bcd60e51b815260206004820152600c60248201527f524c503a20455850495245440000000000000000000000000000000000000000604482015260640161067f565b6003546001600160a01b038816600090815260046020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876126cd8361428a565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016127619291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156127ea573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b0381161580159061283e5750886001600160a01b0316816001600160a01b0316145b61288a5760405162461bcd60e51b815260206004820152601660248201527f524c503a20494e56414c49445f5349474e415455524500000000000000000000604482015260640161067f565b612895898989613003565b505050505050505050565b60065460009081908190819081906001600160a01b0389811691161461290557600854600e54600d546dffffffffffffffffffffffffffff6e0100000000000000000000000000008404811693169163ffffffff90811691600160e01b900416612947565b600854600d54600e546dffffffffffffffffffffffffffff808416936e0100000000000000000000000000009004169163ffffffff600160e01b909104811691165b600c54600e546040517f671a11b5000000000000000000000000000000000000000000000000000000008152600481018d90526dffffffffffffffffffffffffffff96871660248201819052959096166044870181905263ffffffff8086166064890152808516608489015264010000000090920490911660a487015293985092965090945092506001600160a01b03169063671a11b59060c4016123eb565b600b54600114612a395760405162461bcd60e51b815260206004820152600d60248201527f5245514c503a204c4f434b454400000000000000000000000000000000000000604482015260640161067f565b6000600b556006546040516370a0823160e01b8152306004820152612b46916001600160a01b0316906370a0823190602401602060405180830381865afa158015612a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aac9190614184565b6007546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b189190614184565b6008546dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416612d04565b6001600b55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905291516000928392871691612c0791906142c3565b6000604051808303816000865af19150503d8060008114612c44576040519150601f19603f3d011682016040523d82523d6000602084013e612c49565b606091505b5091509150818015612c73575080511580612c73575080806020019051810190612c7391906141e3565b612cbf5760405162461bcd60e51b815260206004820152601660248201527f5245514c503a205452414e534645525f4641494c454400000000000000000000604482015260640161067f565b5050505050565b6000612cd282846142df565b9392505050565b6000612cd283836001613d0f565b600080612cf4838561431c565b9050612cd2848210156000613d33565b600d54600160e01b900463ffffffff166dffffffffffffffffffffffffffff612d2e826064614248565b612d3e9063ffffffff16876142df565b11158015612d6957506dffffffffffffffffffffffffffff612d6663ffffffff8316866142df565b11155b612db55760405162461bcd60e51b815260206004820152600f60248201527f5245514c503a204f564552464c4f570000000000000000000000000000000000604482015260640161067f565b6000612dc664010000000042614334565b600854909150600090612de690600160e01b900463ffffffff1683614248565b905060008163ffffffff16118015612e0d57506dffffffffffffffffffffffffffff851615155b8015612e2857506dffffffffffffffffffffffffffff841615155b15612f2b576000612e3a846064614248565b612e4a9063ffffffff1687614348565b90506000612e5e63ffffffff861687614348565b90508263ffffffff16612e9883612e7484613d45565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690613d76565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16612ec091906142df565b60096000828254612ed1919061431c565b909155505063ffffffff8316612eea82612e7485613d45565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16612f1291906142df565b600a6000828254612f23919061431c565b909155505050505b6008805463ffffffff8416600160e01b027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff8a81166e0100000000000000000000000000009081027fffffffff000000000000000000000000000000000000000000000000000000009095168d83161794909417918216831794859055604080519382169282169290921783529290930490911660208201527f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1910160405180910390a150505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000808411806130755750600083115b6130e75760405162461bcd60e51b815260206004820152602160248201527f5245514c503a20494e53554646494349454e545f4f55545055545f414d4f554e60448201527f5400000000000000000000000000000000000000000000000000000000000000606482015260840161067f565b6008546dffffffffffffffffffffffffffff808216916e010000000000000000000000000000900416818610801561312e5750806dffffffffffffffffffffffffffff1685105b61317a5760405162461bcd60e51b815260206004820152601d60248201527f5245514c503a20494e53554646494349454e545f4c4951554944495459000000604482015260640161067f565b60065460075460009182916001600160a01b039182169190811690881682148015906131b85750806001600160a01b0316886001600160a01b031614155b6132045760405162461bcd60e51b815260206004820152601160248201527f5245514c503a20494e56414c49445f544f000000000000000000000000000000604482015260640161067f565b89156132155761321582898c612b4d565b88156132265761322681898b612b4d565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa15801561326a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061328e9190614184565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa1580156132d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f99190614184565b92505050600088856dffffffffffffffffffffffffffff1661331b91906141cc565b831161332857600061334c565b613342896dffffffffffffffffffffffffffff87166141cc565b61334c90846141cc565b9050600061336a896dffffffffffffffffffffffffffff87166141cc565b831161337757600061339b565b613391896dffffffffffffffffffffffffffff87166141cc565b61339b90846141cc565b905060008211806133ac5750600081115b6133f85760405162461bcd60e51b815260206004820181905260248201527f5245514c503a20494e53554646494349454e545f494e5055545f414d4f554e54604482015260640161067f565b600061340685612710612cc6565b9050600061341685612710612cc6565b905083156134ae57600e5460009061344190869063ffffffff640100000000909104811690612cc616565b905061344d8382612cd9565b600d5490935061346d906dffffffffffffffffffffffffffff1682612ce7565b600d80547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff92909216919091179055505b821561354b57600e546000906134d790859063ffffffff640100000000909104811690612cc616565b90506134e38282612cd9565b600d54909250613515906e01000000000000000000000000000090046dffffffffffffffffffffffffffff1682612ce7565b600d600e6101000a8154816dffffffffffffffffffffffffffff02191690836dffffffffffffffffffffffffffff160217905550505b600d54600160e01b900463ffffffff1660328114156135e6576135896305f5e100610c356dffffffffffffffffffffffffffff8c8116908c16612cc6565b6135938484612cc6565b10156135e15760405162461bcd60e51b815260206004820152600860248201527f5245514c503a204b000000000000000000000000000000000000000000000000604482015260640161067f565b613712565b600c546001600160a01b03166379c91b376136136dffffffffffffffffffffffffffff8c16612710612cc6565b61362f6dffffffffffffffffffffffffffff8c16612710612cc6565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604481018690526064810185905263ffffffff8416608482015260a401602060405180830381865afa1580156136a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c691906141e3565b6137125760405162461bcd60e51b815260206004820152600860248201527f5245514c503a204b000000000000000000000000000000000000000000000000604482015260640161067f565b50505061372184848888612d04565b60408051838152602081018390529081018b9052606081018a90526001600160a01b0389169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a360008a116137845788613786565b895b9a9950505050505050505050565b6001600160a01b0383166000908152600160205260409020546137b79082612cd9565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546137e69082612ce7565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906130589085815260200190565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015613890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138b4919061426d565b90506000600560009054906101000a90046001600160a01b03166001600160a01b031663b0e21e8a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561390b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061392f9190614184565b6001600160a01b038316151593509050600080613972600d546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000009092041690565b915091506000836dffffffffffffffffffffffffffff161180156139935750845b80156139c957506000826dffffffffffffffffffffffffffff1611806139c957506000816dffffffffffffffffffffffffffff16115b15613ae857600d54600c5460008054600160e01b90930463ffffffff169290916001600160a01b0316906392aec23c908b8b86613a07816064614248565b613a118c8c61437e565b613a1b8d8c61437e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e08a901b16815260048101979097526dffffffffffffffffffffffffffff9586166024880152938516604487015263ffffffff928316606487015291166084850152821660a48401521660c482015260e401602060405180830381865afa158015613aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ad39190614184565b90508015613ae557613ae58682613be0565b50505b6dffffffffffffffffffffffffffff821615613b2757600d80547fffffffffffffffffffffffffffffffffffff00000000000000000000000000001690555b6dffffffffffffffffffffffffffff811615613b6657600d80547fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff1690555b5050505092915050565b60006003821115613bd15750806000613b8a600283614234565b613b9590600161431c565b90505b81811015613bcb57905080600281613bb08186614234565b613bba919061431c565b613bc49190614234565b9050613b98565b50919050565b8115613bdb575060015b919050565b600054613bed9082612ce7565b60009081556001600160a01b038316815260016020526040902054613c129082612ce7565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90613c639085815260200190565b60405180910390a35050565b6000818310613c7e5781612cd2565b5090919050565b6001600160a01b038216600090815260016020526040902054613ca89082612cd9565b6001600160a01b03831660009081526001602052604081209190915554613ccf9082612cd9565b60009081556040518281526001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001613c63565b6000613d1e8484111583613d33565b6000613d2a84866141cc565b95945050505050565b81613d4157613d4181613d92565b5050565b6000613d706e0100000000000000000000000000006dffffffffffffffffffffffffffff84166143ab565b92915050565b6000612cd26dffffffffffffffffffffffffffff8316846143e6565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6001600160a01b0381168114613dfa57600080fd5b50565b600080600080600060808688031215613e1557600080fd5b85359450602086013593506040860135613e2e81613de5565b9250606086013567ffffffffffffffff80821115613e4b57600080fd5b818801915088601f830112613e5f57600080fd5b813581811115613e6e57600080fd5b896020828501011115613e8057600080fd5b9699959850939650602001949392505050565b60005b83811015613eae578181015183820152602001613e96565b83811115613ebd576000848401525b50505050565b6020815260008251806020840152613ee2816040850160208701613e93565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008060408385031215613f2757600080fd5b8235613f3281613de5565b946020939093013593505050565b600080600080600060a08688031215613f5857600080fd5b8535613f6381613de5565b94506020860135613f7381613de5565b935060408601359250606086013591506080860135613f9181613de5565b809150509295509295909350565b600080600060608486031215613fb457600080fd5b8335613fbf81613de5565b92506020840135613fcf81613de5565b929592945050506040919091013590565b600060208284031215613ff257600080fd5b8135612cd281613de5565b803563ffffffff81168114613bdb57600080fd5b6000806000806080858703121561402757600080fd5b843561403281613de5565b9350602085013561404281613de5565b925061405060408601613ffd565b915061405e60608601613ffd565b905092959194509250565b600080600080600080600060e0888a03121561408457600080fd5b873561408f81613de5565b9650602088013561409f81613de5565b95506040880135945060608801359350608088013560ff811681146140c357600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156140f357600080fd5b82356140fe81613de5565b9150602083013561410e81613de5565b809150509250929050565b6001600160a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101949350505050565b60006020828403121561419657600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156141de576141de61419d565b500390565b6000602082840312156141f557600080fd5b81518015158114612cd257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261424357614243614205565b500490565b600063ffffffff838116908316818110156142655761426561419d565b039392505050565b60006020828403121561427f57600080fd5b8151612cd281613de5565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156142bc576142bc61419d565b5060010190565b600082516142d5818460208701613e93565b9190910192915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156143175761431761419d565b500290565b6000821982111561432f5761432f61419d565b500190565b60008261434357614343614205565b500690565b60006dffffffffffffffffffffffffffff808316818516818304811182151516156143755761437561419d565b02949350505050565b60006dffffffffffffffffffffffffffff8084168061439f5761439f614205565b92169190910492915050565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff808316818516818304811182151516156143755761437561419d565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8084168061439f5761439f61420556fea26469706673582212202ebf14ab533be976cd78f7b01c42a6db4c939e8efa29cd8a1d83b00399602f2764736f6c634300080a0033a264697066735822122060fb6de492f2ce3707613b3bfcffe5124edffc4dd826bd3c440c726a1d07a26864736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1118,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1120,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "formula",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1122,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1124,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1139,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "_pairSalts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 1142,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1146,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "_pairs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint64)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}