{
  "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_formula",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "formula",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeightA",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getWeightsAndSwapFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tokenWeight0",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "tokenWeight1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "swapFee",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "b",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeToSetter",
          "type": "address"
        }
      ],
      "name": "setFeeToSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x14e18ac275b52542a48c9e45167d144ffa0d2bc48f7db01b6fd5892d46d9fdb3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "transactionIndex": 0,
    "gasUsed": "4169382",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xcf804dab477ab6ff734ad72397c0a0fbe86fb06a50e9c2b519ee35484aa7f93c",
    "transactionHash": "0x14e18ac275b52542a48c9e45167d144ffa0d2bc48f7db01b6fd5892d46d9fdb3",
    "logs": [],
    "blockNumber": 11,
    "cumulativeGasUsed": "4169382",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318"
  ],
  "solcInputHash": "d6a1208242f8eeb061cb4a070250613f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_formula\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formula\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeightA\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getWeightsAndSwapFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tokenWeight0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tokenWeight1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"swapFee\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToSetter\",\"type\":\"address\"}],\"name\":\"setFeeToSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemFactory.sol\":\"RequiemFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/RequiemERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IRequiemERC20.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\n\\ncontract RequiemERC20 is IRequiemERC20 {\\n    using SafeMath for uint256;\\n\\n    string public constant name = \\\"Requiem Liquidity Provider\\\";\\n    string public constant symbol = \\\"RLP\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    bytes32 public override DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    constructor() {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"), keccak256(bytes(name)), keccak256(bytes(\\\"1\\\")), chainId, address(this))\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != type(uint256).max) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"RLP: EXPIRED\\\");\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"RLP: INVALID_SIGNATURE\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xaf3a69b70d6504cff82881ab3179100cac6ef560d3ba6662d2c9d3bc2eeaa548\",\"license\":\"MIT\"},\"contracts/RequiemFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IRequiemFactory.sol\\\";\\nimport \\\"./RequiemPair.sol\\\";\\n\\ncontract RequiemFactory is IRequiemFactory {\\n    address public feeTo;\\n    address public formula;\\n    uint256 public protocolFee;\\n    address public feeToSetter;\\n\\n    mapping(bytes32 => address) private _pairSalts;\\n    address[] public allPairs;\\n    mapping(address => uint64) private _pairs;\\n\\n    constructor(address _feeToSetter, address _formula) {\\n        feeToSetter = _feeToSetter;\\n        formula = _formula;\\n    }\\n\\n    function isPair(address b) external view returns (bool) {\\n        return _pairs[b] > 0;\\n    }\\n\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external view returns (address pair) {\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0, swapFee));\\n        pair = _pairSalts[salt];\\n    }\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        uint32 tokenWeightA,\\n        uint32 swapFee\\n    ) external returns (address pair) {\\n        require(tokenA != tokenB, \\\"RLP: IDENTICAL_ADDRESSES\\\");\\n        require(tokenWeightA >= 2 && tokenWeightA <= 98 && (tokenWeightA % 2) == 0, \\\"RLP: INVALID_TOKEN_WEIGHT\\\");\\n        // swap fee from [0.01% - 20%]\\n        require(swapFee >= 1 && swapFee <= 2000, \\\"RLP: INVALID_SWAP_FEE\\\");\\n        (address token0, address token1, uint32 tokenWeight0) = tokenA < tokenB ? (tokenA, tokenB, tokenWeightA) : (tokenB, tokenA, 100 - tokenWeightA);\\n        require(token0 != address(0), \\\"RLP: ZERO_ADDRESS\\\");\\n        // single check is sufficient\\n        bytes memory bytecode = type(RequiemPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, tokenWeight0, swapFee));\\n        require(_pairSalts[salt] == address(0), \\\"RLP: PAIR_EXISTS\\\");\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IRequiemPair(pair).initialize(token0, token1, tokenWeight0, swapFee);\\n        _pairSalts[salt] = address(pair);\\n        allPairs.push(pair);\\n        uint64 weightAndFee = uint64(swapFee);\\n        weightAndFee |= uint64(tokenWeight0) << 32;\\n        _pairs[address(pair)] = weightAndFee;\\n        emit PairCreated(token0, token1, pair, tokenWeight0, swapFee, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: FORBIDDEN\\\");\\n        feeTo = _feeTo;\\n    }\\n\\n    function setFeeToSetter(address _feeToSetter) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: FORBIDDEN\\\");\\n        feeToSetter = _feeToSetter;\\n    }\\n\\n    function setProtocolFee(uint256 _protocolFee) external {\\n        require(msg.sender == feeToSetter, \\\"RLP: FORBIDDEN\\\");\\n        require(_protocolFee == 0 || (_protocolFee >= 10000 && _protocolFee <= 100000), \\\"RLP: Invalid Protocol fee\\\");\\n        protocolFee = _protocolFee;\\n    }\\n\\n    function getWeightsAndSwapFee(address pair)\\n        public\\n        view\\n        returns (\\n            uint32 tokenWeight0,\\n            uint32 tokenWeight1,\\n            uint32 swapFee\\n        )\\n    {\\n        uint64 weightAndFee = _pairs[pair];\\n        if (weightAndFee > 0) {\\n            swapFee = uint32(weightAndFee);\\n            tokenWeight0 = uint32(weightAndFee >> 32);\\n            tokenWeight1 = 100 - tokenWeight0;\\n        } else {\\n            // Default is 0.3%\\n            return (50, 50, 30);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f7313982263730d60bf510c3a1f143742b49964f50a309de3297045b6e38caa\",\"license\":\"MIT\"},\"contracts/RequiemPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IRequiemPair.sol\\\";\\nimport \\\"./interfaces/IRequiemSwap.sol\\\";\\nimport \\\"./interfaces/IRequiemFormula.sol\\\";\\nimport \\\"./RequiemERC20.sol\\\";\\nimport \\\"./libraries/Math.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/UQ112x112.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IRequiemFactory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Callee.sol\\\";\\n\\ncontract RequiemPair is IRequiemSwap, IRequiemPair, RequiemERC20 {\\n    using SafeMath for uint256;\\n    using UQ112x112 for uint224;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n\\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint256 private unlocked = 1;\\n    address public formula;\\n\\n    uint112 private collectedFee0; // uses single storage slot, accessible via getReserves\\n    uint112 private collectedFee1; // uses single storage slot, accessible via getReserves\\n\\n    uint32 private tokenWeight0;\\n    uint32 private tokenWeight1;\\n    uint32 private swapFee;\\n\\n    modifier lock() {\\n        require(unlocked == 1, \\\"REQLP: LOCKED\\\");\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        )\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function getCollectedFees() public view returns (uint112 _collectedFee0, uint112 _collectedFee1) {\\n        _collectedFee0 = collectedFee0;\\n        _collectedFee1 = collectedFee1;\\n    }\\n\\n    function getTokenWeights() public view returns (uint32 _tokenWeight0, uint32 _tokenWeight1) {\\n        _tokenWeight0 = tokenWeight0;\\n        _tokenWeight1 = 100 - tokenWeight0;\\n    }\\n\\n    function getSwapFee() public view returns (uint32 _swapFee) {\\n        _swapFee = swapFee;\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"REQLP: TRANSFER_FAILED\\\");\\n    }\\n\\n    constructor() {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(\\n        address _token0,\\n        address _token1,\\n        uint32 _tokenWeight0,\\n        uint32 _swapFee\\n    ) external {\\n        require(msg.sender == factory, \\\"REQLP: FORBIDDEN\\\");\\n        // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n        tokenWeight0 = _tokenWeight0;\\n        tokenWeight1 = 100 - tokenWeight0;\\n        swapFee = _swapFee;\\n        formula = IRequiemFactory(factory).formula();\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint112 _reserve0,\\n        uint112 _reserve1\\n    ) private {\\n        uint32 _tokenWeight0 = tokenWeight0;\\n        require(balance0 * (100 - _tokenWeight0) <= type(uint112).max && balance1 * _tokenWeight0 <= type(uint112).max, \\\"REQLP: OVERFLOW\\\");\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n        // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            uint112 mReserve0 = _reserve0 * (100 - _tokenWeight0);\\n            uint112 mReserve1 = _reserve1 * _tokenWeight0;\\n            price0CumulativeLast += uint256(UQ112x112.encode(mReserve1).uqdiv(mReserve0)) * timeElapsed;\\n            price1CumulativeLast += uint256(UQ112x112.encode(mReserve0).uqdiv(mReserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IRequiemFactory(factory).feeTo();\\n        uint112 protocolFee = uint112(IRequiemFactory(factory).protocolFee());\\n        feeOn = feeTo != address(0);\\n        (uint112 _collectedFee0, uint112 _collectedFee1) = getCollectedFees();\\n        if (protocolFee > 0 && feeOn && (_collectedFee0 > 0 || _collectedFee1 > 0)) {\\n            uint32 _tokenWeight0 = tokenWeight0;\\n            uint256 liquidity = IRequiemFormula(formula).mintLiquidityFee(\\n                totalSupply,\\n                _reserve0,\\n                _reserve1,\\n                _tokenWeight0,\\n                100 - _tokenWeight0,\\n                _collectedFee0 / protocolFee,\\n                _collectedFee1 / protocolFee\\n            );\\n            if (liquidity > 0) _mint(feeTo, liquidity);\\n        }\\n        if (_collectedFee0 > 0) collectedFee0 = 0;\\n        if (_collectedFee1 > 0) collectedFee1 = 0;\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external lock returns (uint256 liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n        uint256 amount0 = balance0.sub(_reserve0);\\n        uint256 amount1 = balance1.sub(_reserve1);\\n        _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply;\\n        // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n        require(liquidity > 0, \\\"REQLP: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint256 liquidity = balanceOf[address(this)];\\n        _mintFee(_reserve0, _reserve1);\\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, \\\"REQLP: INSUFFICIENT_LIQUIDITY_BURNED\\\");\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external lock {\\n        require(amount0Out > 0 || amount1Out > 0, \\\"REQLP: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint112 _reserve0 = reserve0; // gas savings\\n        uint112 _reserve1 = reserve1; // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"REQLP: INSUFFICIENT_LIQUIDITY\\\");\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"REQLP: INVALID_TO\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n\\n        require(amount0In > 0 || amount1In > 0, \\\"REQLP: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0.mul(10000);\\n            uint256 balance1Adjusted = balance1.mul(10000);\\n            {\\n                // avoids stack too deep errors\\n                if (amount0In > 0) {\\n                    uint256 amount0InFee = amount0In.mul(swapFee);\\n                    balance0Adjusted = balance0Adjusted.sub(amount0InFee);\\n                    collectedFee0 = uint112(uint256(collectedFee0).add(amount0InFee));\\n                }\\n                if (amount1In > 0) {\\n                    uint256 amount1InFee = amount1In.mul(swapFee);\\n                    balance1Adjusted = balance1Adjusted.sub(amount1InFee);\\n                    collectedFee1 = uint112(uint256(collectedFee1).add(amount1InFee));\\n                }\\n                uint32 _tokenWeight0 = tokenWeight0; // gas savings\\n                if (_tokenWeight0 == 50) {\\n                    // gas savings for pair 50/50\\n                    require(balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(10000**2), \\\"REQLP: K\\\");\\n                } else {\\n                    require(IRequiemFormula(formula).ensureConstantValue(uint256(_reserve0).mul(10000), uint256(_reserve1).mul(10000), balance0Adjusted, balance1Adjusted, _tokenWeight0), \\\"REQLP: K\\\");\\n                }\\n            }\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function onSwap(SwapStep memory params, address to) external override lock returns (uint256) {\\n        (uint256 amount0Out, uint256 amount1Out) = params.tokenIn == token0 ? (uint256(0), params.swapAmount) : (params.swapAmount, uint256(0));\\n        require(amount0Out > 0 || amount1Out > 0, \\\"REQLP: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint112 _reserve0 = reserve0; // gas savings\\n        uint112 _reserve1 = reserve1; // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"REQLP: INSUFFICIENT_LIQUIDITY\\\");\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"REQLP: INVALID_TO\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, \\\"REQLP: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0.mul(10000);\\n            uint256 balance1Adjusted = balance1.mul(10000);\\n            {\\n                // avoids stack too deep errors\\n                if (amount0In > 0) {\\n                    uint256 amount0InFee = amount0In.mul(swapFee);\\n                    balance0Adjusted = balance0Adjusted.sub(amount0InFee);\\n                    collectedFee0 = uint112(uint256(collectedFee0).add(amount0InFee));\\n                }\\n                if (amount1In > 0) {\\n                    uint256 amount1InFee = amount1In.mul(swapFee);\\n                    balance1Adjusted = balance1Adjusted.sub(amount1InFee);\\n                    collectedFee1 = uint112(uint256(collectedFee1).add(amount1InFee));\\n                }\\n                uint32 _tokenWeight0 = tokenWeight0; // gas savings\\n                if (_tokenWeight0 == 50) {\\n                    // gas savings for pair 50/50\\n                    require(balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(10000**2), \\\"REQLP: K\\\");\\n                } else {\\n                    require(IRequiemFormula(formula).ensureConstantValue(uint256(_reserve0).mul(10000), uint256(_reserve1).mul(10000), balance0Adjusted, balance1Adjusted, _tokenWeight0), \\\"REQLP: K\\\");\\n                }\\n            }\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n\\n        return amount0Out > 0 ? amount0Out : amount1Out;\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external lock returns (uint256) {\\n        (uint256 amount0Out, uint256 amount1Out) = tokenIn == token0 ? (uint256(0), amountOutMin) : (amountOutMin, uint256(0));\\n        require(amount0Out > 0 || amount1Out > 0, \\\"REQLP: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint112 _reserve0 = reserve0; // gas savings\\n        uint112 _reserve1 = reserve1; // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"REQLP: INSUFFICIENT_LIQUIDITY\\\");\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"REQLP: INVALID_TO\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, \\\"REQLP: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0.mul(10000);\\n            uint256 balance1Adjusted = balance1.mul(10000);\\n            {\\n                // avoids stack too deep errors\\n                if (amount0In > 0) {\\n                    uint256 amount0InFee = amount0In.mul(swapFee);\\n                    balance0Adjusted = balance0Adjusted.sub(amount0InFee);\\n                    collectedFee0 = uint112(uint256(collectedFee0).add(amount0InFee));\\n                }\\n                if (amount1In > 0) {\\n                    uint256 amount1InFee = amount1In.mul(swapFee);\\n                    balance1Adjusted = balance1Adjusted.sub(amount1InFee);\\n                    collectedFee1 = uint112(uint256(collectedFee1).add(amount1InFee));\\n                }\\n                uint32 _tokenWeight0 = tokenWeight0; // gas savings\\n                if (_tokenWeight0 == 50) {\\n                    // gas savings for pair 50/50\\n                    require(balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(10000**2), \\\"REQLP: K\\\");\\n                } else {\\n                    require(IRequiemFormula(formula).ensureConstantValue(uint256(_reserve0).mul(10000), uint256(_reserve1).mul(10000), balance0Adjusted, balance1Adjusted, _tokenWeight0), \\\"REQLP: K\\\");\\n                }\\n            }\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n\\n        return amount0Out > 0 ? amount0Out : amount1Out;\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to\\n    ) external lock returns (uint256) {\\n        (uint256 amount0Out, uint256 amount1Out) = tokenIn == token0 ? (uint256(0), amountOut) : (amountOut, uint256(0));\\n        require(amount0Out > 0 || amount1Out > 0, \\\"REQLP: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint112 _reserve0 = reserve0; // gas savings\\n        uint112 _reserve1 = reserve1; // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"REQLP: INSUFFICIENT_LIQUIDITY\\\");\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"REQLP: INVALID_TO\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, \\\"REQLP: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0.mul(10000);\\n            uint256 balance1Adjusted = balance1.mul(10000);\\n            {\\n                // avoids stack too deep errors\\n                if (amount0In > 0) {\\n                    uint256 amount0InFee = amount0In.mul(swapFee);\\n                    balance0Adjusted = balance0Adjusted.sub(amount0InFee);\\n                    collectedFee0 = uint112(uint256(collectedFee0).add(amount0InFee));\\n                }\\n                if (amount1In > 0) {\\n                    uint256 amount1InFee = amount1In.mul(swapFee);\\n                    balance1Adjusted = balance1Adjusted.sub(amount1InFee);\\n                    collectedFee1 = uint112(uint256(collectedFee1).add(amount1InFee));\\n                }\\n                uint32 _tokenWeight0 = tokenWeight0; // gas savings\\n                if (_tokenWeight0 == 50) {\\n                    // gas savings for pair 50/50\\n                    require(balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(10000**2), \\\"REQLP: K\\\");\\n                } else {\\n                    require(IRequiemFormula(formula).ensureConstantValue(uint256(_reserve0).mul(10000), uint256(_reserve1).mul(10000), balance0Adjusted, balance1Adjusted, _tokenWeight0), \\\"REQLP: K\\\");\\n                }\\n            }\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n\\n        return amount0Out > 0 ? amount0Out : amount1Out;\\n    }\\n\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (uint256) {\\n        (uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = tokenIn == token0\\n            ? (reserve0, reserve1, tokenWeight0, 100 - tokenWeight0)\\n            : (reserve1, reserve0, 100 - tokenWeight0, tokenWeight0);\\n\\n        return IRequiemFormula(formula).getAmountOut(amountIn, reserveOut, reserveIn, tokenWeightOut, tokenWeightIn, swapFee);\\n    }\\n\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) external view returns (uint256) {\\n        (uint256 reserveIn, uint256 reserveOut, uint32 tokenWeightIn, uint32 tokenWeightOut) = tokenIn == token0\\n            ? (reserve0, reserve1, tokenWeight0, tokenWeight1)\\n            : (reserve1, reserve0, tokenWeight1, tokenWeight0);\\n\\n        return IRequiemFormula(formula).getAmountIn(amountOut, reserveIn, reserveOut, tokenWeightIn, tokenWeightOut, swapFee);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external lock {\\n        TransferHelper.safeTransfer(tokenIn, address(this), amountIn);\\n        (uint256 amount0Out, uint256 amount1Out) = tokenIn == token0 ? (uint256(0), amountOutMin) : (amountOutMin, uint256(0));\\n        _swap(amount0Out, amount1Out, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function _swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to\\n    ) internal {\\n        require(amount0Out > 0 || amount1Out > 0, \\\"REQLP: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        uint112 _reserve0 = reserve0; // gas savings\\n        uint112 _reserve1 = reserve1; // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"REQLP: INSUFFICIENT_LIQUIDITY\\\");\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, \\\"REQLP: INVALID_TO\\\");\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n\\n        require(amount0In > 0 || amount1In > 0, \\\"REQLP: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint256 balance0Adjusted = balance0.mul(10000);\\n            uint256 balance1Adjusted = balance1.mul(10000);\\n            {\\n                // avoids stack too deep errors\\n                if (amount0In > 0) {\\n                    uint256 amount0InFee = amount0In.mul(swapFee);\\n                    balance0Adjusted = balance0Adjusted.sub(amount0InFee);\\n                    collectedFee0 = uint112(uint256(collectedFee0).add(amount0InFee));\\n                }\\n                if (amount1In > 0) {\\n                    uint256 amount1InFee = amount1In.mul(swapFee);\\n                    balance1Adjusted = balance1Adjusted.sub(amount1InFee);\\n                    collectedFee1 = uint112(uint256(collectedFee1).add(amount1InFee));\\n                }\\n                uint32 _tokenWeight0 = tokenWeight0; // gas savings\\n                if (_tokenWeight0 == 50) {\\n                    // gas savings for pair 50/50\\n                    require(balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(10000**2), \\\"REQLP: K\\\");\\n                } else {\\n                    require(IRequiemFormula(formula).ensureConstantValue(uint256(_reserve0).mul(10000), uint256(_reserve1).mul(10000), balance0Adjusted, balance1Adjusted, _tokenWeight0), \\\"REQLP: K\\\");\\n                }\\n            }\\n        }\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n}\\n\",\"keccak256\":\"0x26cdc90fc328ce0435b92e644027f5b097733003a8b18ed5545c822c60767970\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb7230835a4efbbbebcb5371d121977e859388b33f3ee5d9a7a44fc4de8d6b970\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x59ca041c7f003069ae1fc9ede79694b1fa0b11e6eebf4eb765a044a27030687c\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\ninterface IRequiemFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint);\\n    function feeTo() external view returns (address);\\n    function formula() external view returns (address);\\n    function protocolFee() external view returns (uint);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function isPair(address) external view returns (bool);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB, uint32 tokenWeightA, uint32 swapFee) external returns (address pair);\\n    function getWeightsAndSwapFee(address pair) external view returns (uint32 tokenWeight0, uint32 tokenWeight1, uint32 swapFee);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setProtocolFee(uint) external;\\n}\\n\",\"keccak256\":\"0x500ff0062150432105415e938dcaa0d64b666c224764c4cb901137ce45204b5d\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemFormula.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity >=0.5.16;\\n\\n/*\\n    Bancor Formula interface\\n*/\\ninterface IRequiemFormula {\\n\\n    function getReserveAndWeights(address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getFactoryReserveAndWeights(address factory, address pair, address tokenA) external view returns (\\n        address tokenB,\\n        uint reserveA,\\n        uint reserveB,\\n        uint32 tokenWeightA,\\n        uint32 tokenWeightB,\\n        uint32 swapFee\\n    );\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountIn);\\n\\n    function getPairAmountIn(address pair, address tokenIn, uint amountOut) external view returns (uint amountIn);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn, uint reserveOut,\\n        uint32 tokenWeightIn, uint32 tokenWeightOut,\\n        uint32 swapFee\\n    ) external view returns (uint amountOut);\\n\\n    function getPairAmountOut(address pair, address tokenIn, uint amountIn) external view returns (uint amountOut);\\n\\n    function getAmountsIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsIn(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getFactoryAmountsOut(\\n        address factory,\\n        address tokenIn,\\n        address tokenOut,\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function ensureConstantValue(uint reserve0, uint reserve1, uint balance0Adjusted, uint balance1Adjusted, uint32 tokenWeight0) external view returns (bool);\\n    function getReserves(address pair, address tokenA, address tokenB) external view returns (uint reserveA, uint reserveB);\\n    function getOtherToken(address pair, address tokenA) external view returns (address tokenB);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n    function mintLiquidityFee(\\n        uint totalLiquidity,\\n        uint112 reserve0,\\n        uint112  reserve1,\\n        uint32 tokenWeight0,\\n        uint32 tokenWeight1,\\n        uint112  collectedFee0,\\n        uint112 collectedFee1) external view returns (uint amount);\\n}\\n\",\"keccak256\":\"0x8a32e1c404f6a93f17cf6151173ff21fedb58abe50a6635cb10f47780f044c98\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/interfaces/IRequiemPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IRequiemERC20.sol\\\";\\n\\ninterface IRequiemPair is IRequiemERC20 {\\n\\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\\n\\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\\n\\n    function getSwapFee() external view returns (uint32);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address,\\n        address,\\n        uint32,\\n        uint32\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1924a077618cc54dd9f8755e2ad9f2f36f51372ea68c9b8d39b5927f7a1e1137\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IRequiemSwap {\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    struct QSwapStep {\\n        uint8 structure;\\n        address pool;\\n        address tokenIn;\\n        address tokenOut;\\n    }\\n\\n    struct SwapStep {\\n        address pool;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 swapAmount; // tokenInAmount / tokenOutAmount\\n        uint256 limitReturnAmount; // minAmountOut / maxAmountIn\\n        uint256 maxPrice;\\n    }\\n\\n    struct MultiSwapStep {\\n        uint8 swapStructureId;\\n        address[] pools;\\n        address[] path;\\n        // uint256[] amounts;\\n    }\\n\\n    function onSwap(SwapStep memory params, address to) external returns (uint256);\\n\\n    function onSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external returns (uint256);\\n\\n    function onSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address to\\n    ) external returns (uint256);\\n\\n    function calculateSwapGivenIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn\\n    ) external view returns (uint256);\\n\\n    function calculateSwapGivenOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x587c1de8425de906ff6cac9553096bb10c6388a0356fc16c99e7105948d5c6c7\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Callee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x03a0e446df01556c28b09cd214d00cc4341c696d55c99b4a41164fe89911b750\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0a0a3dba77df0880faa55c0415e5b12d4c955d69543fb69887702ff1c8fb60a\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        RequiemErrors._require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        uint256 errorCode\\n    ) internal pure returns (uint256) {\\n        RequiemErrors._require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc82c3356797b0e56c4ac77d5554343f66b3b436a18537bdb146e10921605d729\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.5.16;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x622a8d9485701159ac15735e9f4b83bf2b3a36b1c2f6c53e1535e166e7685491\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.16;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\",\"keccak256\":\"0xff91bb395bc9766fd6b772069900c09ade711a8fc2e24b3389942128a23b2295\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x37ebaca1c58a9daf307229c45122f12d603a95d1d92c1a8e7648b1910755bfa0\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051614a52380380614a5283398101604081905261002f9161007c565b600380546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b614994806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100af5760003560e01c8063017e7e58146100b4578063094b7415146100e457806314572adb146100f75780631e3dd18b1461010a5780634b75f54f1461011d578063574f2ba314610130578063787dce3d14610142578063a2e74af614610157578063b0e21e8a1461016a578063bfd63f4d14610173578063ca22297914610186578063e5e31b13146101c0578063f46901ed14610204575b600080fd5b6000546100c7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6003546100c7906001600160a01b031681565b6100c76101053660046108a3565b610217565b6100c76101183660046108f7565b610619565b6001546100c7906001600160a01b031681565b6005545b6040519081526020016100db565b6101556101503660046108f7565b610643565b005b610155610165366004610910565b6106d7565b61013460025481565b6100c76101813660046108a3565b610723565b610199610194366004610910565b6107b2565b6040805163ffffffff948516815292841660208401529216918101919091526060016100db565b6101f46101ce366004610910565b6001600160a01b03166000908152600660205260409020546001600160401b0316151590565b60405190151581526020016100db565b610155610212366004610910565b61081a565b6000836001600160a01b0316856001600160a01b0316141561027b5760405162461bcd60e51b8152602060048201526018602482015277524c503a204944454e544943414c5f41444452455353455360401b60448201526064015b60405180910390fd5b60028363ffffffff1610158015610299575060628363ffffffff1611155b80156102b357506102ab600284610932565b63ffffffff16155b6102fb5760405162461bcd60e51b81526020600482015260196024820152781493140e881253959053125117d513d2d15397d5d15251d215603a1b6044820152606401610272565b60018263ffffffff161015801561031a57506107d08263ffffffff1611155b61035e5760405162461bcd60e51b8152602060048201526015602482015274524c503a20494e56414c49445f535741505f46454560581b6044820152606401610272565b6000806000866001600160a01b0316886001600160a01b03161061038e578688610389886064610963565b610392565b8787875b919450925090506001600160a01b0383166103e35760405162461bcd60e51b8152602060048201526011602482015270524c503a205a45524f5f4144445245535360781b6044820152606401610272565b6000604051806020016103f590610866565b6020820181038252601f19601f8201166040525090506000848484896040516020016104249493929190610996565b60408051601f198184030181529181528151602092830120600081815260049093529120549091506001600160a01b0316156104955760405162461bcd60e51b815260206004820152601060248201526f524c503a20504149525f45584953545360801b6044820152606401610272565b808251602084016000f560405163d0f6957960e01b81526001600160a01b038781166004830152868116602483015263ffffffff80871660448401528a1660648301529197509087169063d0f6957990608401600060405180830381600087803b15801561050257600080fd5b505af1158015610516573d6000803e3d6000fd5b505050600082815260046020908152604080832080546001600160a01b03199081166001600160a01b038d8116918217909355600580546001810182557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805490931682179092558086526006855294839020805463ffffffff8f81168c881b63ffffffff60201b1681176001600160401b0319909316831790935592548551978852928b169587019590955292850192909252606084019190915290925086811691908816907f41f8736f924f57e464ededb08bf71f868f9d142885bbc73a1516db2be21fc4289060800160405180910390a3505050505050949350505050565b6005818154811061062957600080fd5b6000918252602090912001546001600160a01b0316905081565b6003546001600160a01b0316331461066d5760405162461bcd60e51b8152600401610272906109d8565b80158061068a5750612710811015801561068a5750620186a08111155b6106d25760405162461bcd60e51b8152602060048201526019602482015278524c503a20496e76616c69642050726f746f636f6c2066656560381b6044820152606401610272565b600255565b6003546001600160a01b031633146107015760405162461bcd60e51b8152600401610272906109d8565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b600080600080866001600160a01b0316886001600160a01b03161061075457868861074f886064610963565b610758565b8787875b9250925092506000838383886040516020016107779493929190610996565b60408051601f198184030181529181528151602092830120600090815260049092529020546001600160a01b03169998505050505050505050565b6001600160a01b038116600090815260066020526040812054819081906001600160401b031680156108005763ffffffff602082901c1693509050806107f9846064610963565b9250610811565b603280601e93509350935050610813565b505b9193909250565b6003546001600160a01b031633146108445760405162461bcd60e51b8152600401610272906109d8565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b613f5e80610a0183390190565b80356001600160a01b038116811461088a57600080fd5b919050565b803563ffffffff8116811461088a57600080fd5b600080600080608085870312156108b957600080fd5b6108c285610873565b93506108d060208601610873565b92506108de6040860161088f565b91506108ec6060860161088f565b905092959194509250565b60006020828403121561090957600080fd5b5035919050565b60006020828403121561092257600080fd5b61092b82610873565b9392505050565b600063ffffffff8084168061095757634e487b7160e01b600052601260045260246000fd5b92169190910692915050565b600063ffffffff8381169083168181101561098e57634e487b7160e01b600052601160045260246000fd5b039392505050565b6001600160601b0319606095861b811682529390941b90921660148401526001600160e01b031960e091821b8116602885015291901b16602c82015260300190565b6020808252600e908201526d2926281d102327a92124a22222a760911b60408201526060019056fe60806040526001600b5534801561001557600080fd5b50604080518082018252601a81527f5265717569656d204c69717569646974792050726f76696465720000000000006020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f2e1adfbb118fada029d9623aa0ed8dd2318a25545f57095be55dcbd209508e12818401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a0808301919091528351808303909101815260c09091019092528151910120600355600580546001600160a01b03191633179055613e438061011b6000396000f3fe608060405234801561001057600080fd5b50600436106101ac5760003560e01c8063022c0d9f146101b157806306fdde03146101c65780630902f1ac14610215578063095ea7b3146102495780630dfe16811461026c5780630e6d8bce1461028c57806318160ddd146102ad57806323b872dd146102b657806330adf81f146102c9578063313ce567146102de57806332bfe469146102f85780633644e5151461031d5780634ac00e03146103265780634b75f54f146103395780635909c0d51461034c5780635a3d549314610355578063659c971f1461035e5780636a6278421461037157806370a08231146103845780637ecebe00146103a457806389afcb44146103c457806395d89b41146103ec57806396a65a6c1461040e578063a9059cbb14610421578063ba9a7a5614610434578063bc25cf771461043d578063c45a015514610450578063cc56fd4314610463578063d0f6957914610476578063d21220a714610489578063d4cadf681461049c578063d505accf146104c1578063d54a8d18146104d4578063dd62ed3e146104ea578063e9255bae14610515578063fff6cae914610528575b600080fd5b6101c46101bf366004613595565b610530565b005b6101ff6040518060400160405280601a8152602001792932b8bab4b2b6902634b8bab4b234ba3c90283937bb34b232b960311b81525081565b60405161020c919061365a565b60405180910390f35b61021d610add565b604080516001600160701b03948516815293909216602084015263ffffffff169082015260600161020c565b61025c61025736600461368d565b610b07565b604051901515815260200161020c565b60065461027f906001600160a01b031681565b60405161020c91906136b9565b61029f61029a3660046136cd565b610b1d565b60405190815260200161020c565b61029f60005481565b61025c6102c436600461372c565b61108f565b61029f600080516020613dce83398151915281565b6102e6601281565b60405160ff909116815260200161020c565b610300611123565b6040805163ffffffff93841681529290911660208301520161020c565b61029f60035481565b61029f6103343660046136cd565b611146565b600c5461027f906001600160a01b031681565b61029f60095481565b61029f600a5481565b6101c461036c36600461376d565b6111b6565b61029f61037f3660046137b7565b61122a565b61029f6103923660046137b7565b60016020526000908152604090205481565b61029f6103b23660046137b7565b60046020526000908152604090205481565b6103d76103d23660046137b7565b6114cb565b6040805192835260208301919091520161020c565b6101ff604051806040016040528060038152602001620524c560ec1b81525081565b61029f61041c3660046137d4565b611811565b61025c61042f36600461368d565b611d8d565b61029f6103e881565b6101c461044b3660046137b7565b611d9a565b60055461027f906001600160a01b031681565b61029f61047136600461372c565b611eb8565b6101c46104843660046138a2565b611fe8565b60075461027f906001600160a01b031681565b600e54600160201b900463ffffffff1660405163ffffffff909116815260200161020c565b6101c46104cf3660046138fa565b612156565b6104dc61234b565b60405161020c929190613971565b61029f6104f836600461398b565b600260209081526000928352604080842090915290825290205481565b61029f61052336600461372c565b612366565b6101c4612461565b600b5460011461055b5760405162461bcd60e51b8152600401610552906139c4565b60405180910390fd5b6000600b558415158061056e5750600084115b61058a5760405162461bcd60e51b8152600401610552906139eb565b6008546001600160701b0380821691600160701b90041681871080156105b85750806001600160701b031686105b6105d45760405162461bcd60e51b815260040161055290613a2c565b60065460075460009182916001600160a01b039182169190811690891682148015906106125750806001600160a01b0316896001600160a01b031614155b61062e5760405162461bcd60e51b815260040161055290613a63565b8a1561063f5761063f828a8d61258f565b891561065057610650818a8c61258f565b86156106bd576040516304347a1760e21b81526001600160a01b038a16906310d1e85c9061068a9033908f908f908e908e90600401613a8e565b600060405180830381600087803b1580156106a457600080fd5b505af11580156106b8573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81526001600160a01b038316906370a08231906106e99030906004016136b9565b602060405180830381865afa158015610706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072a9190613ada565b6040516370a0823160e01b81529094506001600160a01b038216906370a08231906107599030906004016136b9565b602060405180830381865afa158015610776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079a9190613ada565b92505050600089856001600160701b03166107b59190613b09565b83116107c25760006107df565b6107d58a6001600160701b038716613b09565b6107df9084613b09565b905060006107f68a6001600160701b038716613b09565b8311610803576000610820565b6108168a6001600160701b038716613b09565b6108209084613b09565b905060008211806108315750600081115b61084d5760405162461bcd60e51b815260040161055290613b20565b600061085b856127106126f8565b9050600061086b856127106126f8565b905083156108dc57600e5460009061089590869063ffffffff600160201b9091048116906126f816565b90506108a1838261270b565b600d549093506108ba906001600160701b031682612719565b600d80546001600160701b0319166001600160701b0392909216919091179055505b821561095857600e5460009061090490859063ffffffff600160201b9091048116906126f816565b9050610910828261270b565b600d5490925061093090600160701b90046001600160701b031682612719565b600d600e6101000a8154816001600160701b0302191690836001600160701b03160217905550505b600d54600160e01b900463ffffffff1660328114156109c2576109956305f5e10061098f6001600160701b038c8116908c166126f8565b906126f8565b61099f84846126f8565b10156109bd5760405162461bcd60e51b815260040161055290613b55565b610a7d565b600c546001600160a01b03166379c91b376109e86001600160701b038c166127106126f8565b6109fd6001600160701b038c166127106126f8565b8686866040518663ffffffff1660e01b8152600401610a20959493929190613b77565b602060405180830381865afa158015610a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a619190613ba0565b610a7d5760405162461bcd60e51b815260040161055290613b55565b505050610a8c84848888612736565b886001600160a01b0316336001600160a01b0316600080516020613dee83398151915284848f8f604051610ac39493929190613bc2565b60405180910390a350506001600b55505050505050505050565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000610b1433848461298b565b50600192915050565b6000600b54600114610b415760405162461bcd60e51b8152600401610552906139c4565b6000600b81905560065481906001600160a01b03898116911614610b6757856000610b6b565b6000865b915091506000821180610b7e5750600081115b610b9a5760405162461bcd60e51b8152600401610552906139eb565b6008546001600160701b0380821691600160701b9004168184108015610bc85750806001600160701b031683105b610be45760405162461bcd60e51b815260040161055290613a2c565b60065460075460009182916001600160a01b0391821691908116908a168214801590610c225750806001600160a01b03168a6001600160a01b031614155b610c3e5760405162461bcd60e51b815260040161055290613a63565b8715610c4f57610c4f828b8a61258f565b8615610c6057610c60818b8961258f565b6040516370a0823160e01b81526001600160a01b038316906370a0823190610c8c9030906004016136b9565b602060405180830381865afa158015610ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccd9190613ada565b6040516370a0823160e01b81529094506001600160a01b038216906370a0823190610cfc9030906004016136b9565b602060405180830381865afa158015610d19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3d9190613ada565b92505050600086856001600160701b0316610d589190613b09565b8311610d65576000610d82565b610d78876001600160701b038716613b09565b610d829084613b09565b90506000610d99876001600160701b038716613b09565b8311610da6576000610dc3565b610db9876001600160701b038716613b09565b610dc39084613b09565b90506000821180610dd45750600081115b610df05760405162461bcd60e51b815260040161055290613b20565b6000610dfe856127106126f8565b90506000610e0e856127106126f8565b90508315610e7f57600e54600090610e3890869063ffffffff600160201b9091048116906126f816565b9050610e44838261270b565b600d54909350610e5d906001600160701b031682612719565b600d80546001600160701b0319166001600160701b0392909216919091179055505b8215610efb57600e54600090610ea790859063ffffffff600160201b9091048116906126f816565b9050610eb3828261270b565b600d54909250610ed390600160701b90046001600160701b031682612719565b600d600e6101000a8154816001600160701b0302191690836001600160701b03160217905550505b600d54600160e01b900463ffffffff166032811415610f5f57610f326305f5e10061098f6001600160701b038c8116908c166126f8565b610f3c84846126f8565b1015610f5a5760405162461bcd60e51b815260040161055290613b55565b61101a565b600c546001600160a01b03166379c91b37610f856001600160701b038c166127106126f8565b610f9a6001600160701b038c166127106126f8565b8686866040518663ffffffff1660e01b8152600401610fbd959493929190613b77565b602060405180830381865afa158015610fda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffe9190613ba0565b61101a5760405162461bcd60e51b815260040161055290613b55565b50505061102984848888612736565b896001600160a01b0316336001600160a01b0316600080516020613dee83398151915284848c8c6040516110609493929190613bc2565b60405180910390a3600088116110765786611078565b875b6001600b559e9d5050505050505050505050505050565b6001600160a01b03831660009081526002602090815260408083203384529091528120546000191461110e576001600160a01b03841660009081526002602090815260408083203384529091529020546110e9908361270b565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b6111198484846129ed565b5060019392505050565b600d54600160e01b900463ffffffff166000611140826064613bdd565b90509091565b6000600b5460011461116a5760405162461bcd60e51b8152600401610552906139c4565b6000600b81905560065481906001600160a01b0389811691161461119057846000610b6b565b50600090508360008111610b9a5760405162461bcd60e51b8152600401610552906139eb565b600b546001146111d85760405162461bcd60e51b8152600401610552906139c4565b6000600b556111e8843085612a81565b60065460009081906001600160a01b0387811691161461120a5783600061120e565b6000845b9150915061121d828285612b97565b50506001600b5550505050565b6000600b5460011461124e5760405162461bcd60e51b8152600401610552906139c4565b6000600b8190558061125e610add565b506006546040516370a0823160e01b81529294509092506000916001600160a01b03909116906370a08231906112989030906004016136b9565b602060405180830381865afa1580156112b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d99190613ada565b6007546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061130f9030906004016136b9565b602060405180830381865afa15801561132c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113509190613ada565b90506000611367836001600160701b03871661270b565b9050600061137e836001600160701b03871661270b565b905061138a868661309b565b50600054806113c5576113b16103e86113ab6113a686866126f8565b61333a565b9061270b565b97506113c060006103e86133aa565b61140c565b6114096001600160701b0388166113dc85846126f8565b6113e69190613c18565b6001600160701b0388166113fa85856126f8565b6114049190613c18565b613427565b97505b600088116114685760405162461bcd60e51b8152602060048201526024808201527f5245514c503a20494e53554646494349454e545f4c49515549444954595f4d496044820152631395115160e21b6064820152608401610552565b61147289896133aa565b61147e85858989612736565b604080518481526020810184905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001600b55509395945050505050565b600080600b546001146114f05760405162461bcd60e51b8152600401610552906139c4565b6000600b81905580611500610add565b506006546007546040516370a0823160e01b81529395509193506001600160a01b039081169291169060009083906370a08231906115429030906004016136b9565b602060405180830381865afa15801561155f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115839190613ada565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016115b391906136b9565b602060405180830381865afa1580156115d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f49190613ada565b30600090815260016020526040902054909150611611878761309b565b506000548061162083866126f8565b61162a9190613c18565b99508061163783856126f8565b6116419190613c18565b985060008a1180156116535750600089115b6116ab5760405162461bcd60e51b8152602060048201526024808201527f5245514c503a20494e53554646494349454e545f4c49515549444954595f42556044820152631493915160e21b6064820152608401610552565b6116b5308361343d565b6116c0868c8c61258f565b6116cb858c8b61258f565b6040516370a0823160e01b81526001600160a01b038716906370a08231906116f79030906004016136b9565b602060405180830381865afa158015611714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117389190613ada565b6040516370a0823160e01b81529094506001600160a01b038616906370a08231906117679030906004016136b9565b602060405180830381865afa158015611784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a89190613ada565b92506117b684848a8a612736565b604080518b8152602081018b90526001600160a01b038d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a350505050505050506001600b81905550915091565b6000600b546001146118355760405162461bcd60e51b8152600401610552906139c4565b6000600b819055600654602085015182916001600160a01b03918216911614611864578460600151600061186c565b600085606001515b91509150600082118061187f5750600081115b61189b5760405162461bcd60e51b8152600401610552906139eb565b6008546001600160701b0380821691600160701b90041681841080156118c95750806001600160701b031683105b6118e55760405162461bcd60e51b815260040161055290613a2c565b60065460075460009182916001600160a01b0391821691908116908a1682148015906119235750806001600160a01b03168a6001600160a01b031614155b61193f5760405162461bcd60e51b815260040161055290613a63565b871561195057611950828b8a61258f565b861561196157611961818b8961258f565b6040516370a0823160e01b81526001600160a01b038316906370a082319061198d9030906004016136b9565b602060405180830381865afa1580156119aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ce9190613ada565b6040516370a0823160e01b81529094506001600160a01b038216906370a08231906119fd9030906004016136b9565b602060405180830381865afa158015611a1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3e9190613ada565b92505050600086856001600160701b0316611a599190613b09565b8311611a66576000611a83565b611a79876001600160701b038716613b09565b611a839084613b09565b90506000611a9a876001600160701b038716613b09565b8311611aa7576000611ac4565b611aba876001600160701b038716613b09565b611ac49084613b09565b90506000821180611ad55750600081115b611af15760405162461bcd60e51b815260040161055290613b20565b6000611aff856127106126f8565b90506000611b0f856127106126f8565b90508315611b8057600e54600090611b3990869063ffffffff600160201b9091048116906126f816565b9050611b45838261270b565b600d54909350611b5e906001600160701b031682612719565b600d80546001600160701b0319166001600160701b0392909216919091179055505b8215611bfc57600e54600090611ba890859063ffffffff600160201b9091048116906126f816565b9050611bb4828261270b565b600d54909250611bd490600160701b90046001600160701b031682612719565b600d600e6101000a8154816001600160701b0302191690836001600160701b03160217905550505b600d54600160e01b900463ffffffff166032811415611c6057611c336305f5e10061098f6001600160701b038c8116908c166126f8565b611c3d84846126f8565b1015611c5b5760405162461bcd60e51b815260040161055290613b55565b611d1b565b600c546001600160a01b03166379c91b37611c866001600160701b038c166127106126f8565b611c9b6001600160701b038c166127106126f8565b8686866040518663ffffffff1660e01b8152600401611cbe959493929190613b77565b602060405180830381865afa158015611cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cff9190613ba0565b611d1b5760405162461bcd60e51b815260040161055290613b55565b505050611d2a84848888612736565b896001600160a01b0316336001600160a01b0316600080516020613dee83398151915284848c8c604051611d619493929190613bc2565b60405180910390a360008811611d775786611d79565b875b6001600b559b9a5050505050505050505050565b6000610b143384846129ed565b600b54600114611dbc5760405162461bcd60e51b8152600401610552906139c4565b6000600b556006546007546008546040516370a0823160e01b81526001600160a01b039384169390921691611e5b9184918691611e56916001600160701b039091169084906370a0823190611e159030906004016136b9565b602060405180830381865afa158015611e32573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ab9190613ada565b61258f565b611eae8184611e566008600e9054906101000a90046001600160701b03166001600160701b0316856001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611e1591906136b9565b50506001600b5550565b60065460009081908190819081906001600160a01b03898116911614611f0b57600854600e54600d546001600160701b03600160701b8404811693169163ffffffff90811691600160e01b900416611f3b565b600854600d54600e546001600160701b0380841693600160701b9004169163ffffffff600160e01b909104811691165b600c54600e54604051630b19210b60e41b81526001600160701b039687169a5094909516975091955093506001600160a01b03169163b19210b091611f9b918a918991899189918991600160201b90910463ffffffff1690600401613c2c565b602060405180830381865afa158015611fb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdc9190613ada565b98975050505050505050565b6005546001600160a01b031633146120355760405162461bcd60e51b815260206004820152601060248201526f2922a8a6281d102327a92124a22222a760811b6044820152606401610552565b600680546001600160a01b03199081166001600160a01b038781169190911790925560078054909116918516919091179055600d80546001600160e01b0316600160e01b63ffffffff858116820292909217928390556120989204166064613bdd565b600e805463ffffffff848116600160201b026001600160401b031990921693169290921791909117905560055460408051634b75f54f60e01b815290516001600160a01b0390921691634b75f54f916004818101926020929091908290030181865afa15801561210c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121309190613c60565b600c80546001600160a01b0319166001600160a01b039290921691909117905550505050565b428410156121955760405162461bcd60e51b815260206004820152600c60248201526b1493140e881156141254915160a21b6044820152606401610552565b6003546001600160a01b03881660009081526004602052604081208054919291600080516020613dce833981519152918b918b918b9190876121d683613c7d565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e0016040516020818303038152906040528051906020012060405160200161224f92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156122ba573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906122f05750886001600160a01b0316816001600160a01b0316145b6123355760405162461bcd60e51b8152602060048201526016602482015275524c503a20494e56414c49445f5349474e415455524560501b6044820152606401610552565b61234089898961298b565b505050505050505050565b600d546001600160701b0380821692600160701b9092041690565b60065460009081908190819081906001600160a01b038981169116146123ce57600854600d546001600160701b03600160701b830481169216906123b99063ffffffff600160e01b909104166064613bdd565b600d54600160e01b900463ffffffff16612401565b600854600d546001600160701b0380831692600160701b90041690600160e01b900463ffffffff16612401816064613bdd565b600c54600e5460405163671a11b560e01b81526001600160701b039687169a5094909516975091955093506001600160a01b03169163671a11b591611f9b918a9188918a9188918a91600160201b90910463ffffffff1690600401613c2c565b600b546001146124835760405162461bcd60e51b8152600401610552906139c4565b6000600b556006546040516370a0823160e01b8152612588916001600160a01b0316906370a08231906124ba9030906004016136b9565b602060405180830381865afa1580156124d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124fb9190613ada565b6007546040516370a0823160e01b81526001600160a01b03909116906370a082319061252b9030906004016136b9565b602060405180830381865afa158015612548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256c9190613ada565b6008546001600160701b0380821691600160701b900416612736565b6001600b55565b60408051808201825260198152787472616e7366657228616464726573732c75696e743235362960381b6020909101525160009081906001600160a01b038616907fa9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b906126029087908790602401613c98565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516126409190613cb1565b6000604051808303816000865af19150503d806000811461267d576040519150601f19603f3d011682016040523d82523d6000602084013e612682565b606091505b50915091508180156126ac5750805115806126ac5750808060200190518101906126ac9190613ba0565b6126f15760405162461bcd60e51b815260206004820152601660248201527514915453140e881514905394d1915497d1905253115160521b6044820152606401610552565b5050505050565b60006127048284613ccd565b9392505050565b6000612704838360016134b5565b6000806127268385613cec565b90506127048482101560006134d9565b600d54600160e01b900463ffffffff166001600160701b03612759826064613bdd565b6127699063ffffffff1687613ccd565b1115801561278d57506001600160701b0361278a63ffffffff831686613ccd565b11155b6127cb5760405162461bcd60e51b815260206004820152600f60248201526e5245514c503a204f564552464c4f5760881b6044820152606401610552565b60006127db600160201b42613d04565b6008549091506000906127fb90600160e01b900463ffffffff1683613bdd565b905060008163ffffffff1611801561281b57506001600160701b03851615155b801561282f57506001600160701b03841615155b156128f3576000612841846064613bdd565b6128519063ffffffff1687613d18565b9050600061286563ffffffff861687613d18565b90508263ffffffff1661288a8361287b846134eb565b6001600160e01b03169061350a565b6001600160e01b031661289d9190613ccd565b600960008282546128ae9190613cec565b909155505063ffffffff83166128c78261287b856134eb565b6001600160e01b03166128da9190613ccd565b600a60008282546128eb9190613cec565b909155505050505b6008805463ffffffff8416600160e01b026001600160e01b036001600160701b038a8116600160701b9081026001600160e01b0319909516828e1617949094179182168317948590556040517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad19561297a9594831693831693909317939092041690613971565b60405180910390a150505050505050565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316600090815260016020526040902054612a10908261270b565b6001600160a01b038085166000908152600160205260408082209390935590841681522054612a3f9082612719565b6001600160a01b038084166000818152600160205260409081902093909355915190851690600080516020613dae833981519152906129e09085815260200190565b600080846001600160a01b031663a9059cbb8585604051602401612aa6929190613c98565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051612adf9190613cb1565b6000604051808303816000865af19150503d8060008114612b1c576040519150601f19603f3d011682016040523d82523d6000602084013e612b21565b606091505b5091509150818015612b4b575080511580612b4b575080806020019051810190612b4b9190613ba0565b6126f15760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c4544006044820152606401610552565b6000831180612ba65750600082115b612bc25760405162461bcd60e51b8152600401610552906139eb565b6008546001600160701b0380821691600160701b9004168185108015612bf05750806001600160701b031684105b612c0c5760405162461bcd60e51b815260040161055290613a2c565b60065460075460009182916001600160a01b03918216919081169087168214801590612c4a5750806001600160a01b0316876001600160a01b031614155b612c665760405162461bcd60e51b815260040161055290613a63565b8815612c7757612c7782888b61258f565b8715612c8857612c8881888a61258f565b6040516370a0823160e01b81526001600160a01b038316906370a0823190612cb49030906004016136b9565b602060405180830381865afa158015612cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf59190613ada565b6040516370a0823160e01b81529094506001600160a01b038216906370a0823190612d249030906004016136b9565b602060405180830381865afa158015612d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d659190613ada565b92505050600087856001600160701b0316612d809190613b09565b8311612d8d576000612daa565b612da0886001600160701b038716613b09565b612daa9084613b09565b90506000612dc1886001600160701b038716613b09565b8311612dce576000612deb565b612de1886001600160701b038716613b09565b612deb9084613b09565b90506000821180612dfc5750600081115b612e185760405162461bcd60e51b815260040161055290613b20565b6000612e26856127106126f8565b90506000612e36856127106126f8565b90508315612ea757600e54600090612e6090869063ffffffff600160201b9091048116906126f816565b9050612e6c838261270b565b600d54909350612e85906001600160701b031682612719565b600d80546001600160701b0319166001600160701b0392909216919091179055505b8215612f2357600e54600090612ecf90859063ffffffff600160201b9091048116906126f816565b9050612edb828261270b565b600d54909250612efb90600160701b90046001600160701b031682612719565b600d600e6101000a8154816001600160701b0302191690836001600160701b03160217905550505b600d54600160e01b900463ffffffff166032811415612f8757612f5a6305f5e10061098f6001600160701b038c8116908c166126f8565b612f6484846126f8565b1015612f825760405162461bcd60e51b815260040161055290613b55565b613042565b600c546001600160a01b03166379c91b37612fad6001600160701b038c166127106126f8565b612fc26001600160701b038c166127106126f8565b8686866040518663ffffffff1660e01b8152600401612fe5959493929190613b77565b602060405180830381865afa158015613002573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130269190613ba0565b6130425760405162461bcd60e51b815260040161055290613b55565b50505061305184848888612736565b866001600160a01b0316336001600160a01b0316600080516020613dee83398151915284848d8d6040516130889493929190613bc2565b60405180910390a3505050505050505050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131159190613c60565b90506000600560009054906101000a90046001600160a01b03166001600160a01b031663b0e21e8a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561316c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131909190613ada565b6001600160a01b0383161515935090506000806131ab61234b565b915091506000836001600160701b03161180156131c55750845b80156131ed57506000826001600160701b031611806131ed57506000816001600160701b0316115b156132ed57600d54600c5460008054600160e01b90930463ffffffff169290916001600160a01b0316906392aec23c908b8b8661322b816064613bdd565b6132358c8c613d47565b61323f8d8c613d47565b6040516001600160e01b031960e08a901b16815260048101979097526001600160701b039586166024880152938516604487015263ffffffff928316606487015291166084850152821660a48401521660c482015260e401602060405180830381865afa1580156132b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d89190613ada565b905080156132ea576132ea86826133aa565b50505b6001600160701b0382161561330d57600d80546001600160701b03191690555b6001600160701b0381161561333057600d8054600160701b600160e01b03191690555b5050505092915050565b6000600382111561339b5750806000613354600283613c18565b61335f906001613cec565b90505b818110156133955790508060028161337a8186613c18565b6133849190613cec565b61338e9190613c18565b9050613362565b50919050565b81156133a5575060015b919050565b6000546133b79082612719565b60009081556001600160a01b0383168152600160205260409020546133dc9082612719565b6001600160a01b038316600081815260016020526040808220939093559151909190600080516020613dae8339815191529061341b9085815260200190565b60405180910390a35050565b60008183106134365781612704565b5090919050565b6001600160a01b038216600090815260016020526040902054613460908261270b565b6001600160a01b03831660009081526001602052604081209190915554613487908261270b565b60009081556040518281526001600160a01b03841690600080516020613dae8339815191529060200161341b565b60006134c484841115836134d9565b60006134d08486613b09565b95945050505050565b816134e7576134e78161351f565b5050565b6000613504600160701b6001600160701b038416613d6d565b92915050565b60006127046001600160701b03831684613d93565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6001600160a01b038116811461358757600080fd5b50565b80356133a581613572565b6000806000806000608086880312156135ad57600080fd5b853594506020860135935060408601356135c681613572565b925060608601356001600160401b03808211156135e257600080fd5b818801915088601f8301126135f657600080fd5b81358181111561360557600080fd5b89602082850101111561361757600080fd5b9699959850939650602001949392505050565b60005b8381101561364557818101518382015260200161362d565b83811115613654576000848401525b50505050565b602081526000825180602084015261367981604085016020870161362a565b601f01601f19169190910160400192915050565b600080604083850312156136a057600080fd5b82356136ab81613572565b946020939093013593505050565b6001600160a01b0391909116815260200190565b600080600080600060a086880312156136e557600080fd5b85356136f081613572565b9450602086013561370081613572565b93506040860135925060608601359150608086013561371e81613572565b809150509295509295909350565b60008060006060848603121561374157600080fd5b833561374c81613572565b9250602084013561375c81613572565b929592945050506040919091013590565b6000806000806080858703121561378357600080fd5b843561378e81613572565b9350602085013592506040850135915060608501356137ac81613572565b939692955090935050565b6000602082840312156137c957600080fd5b813561270481613572565b60008082840360e08112156137e857600080fd5b60c08112156137f657600080fd5b5060405160c081016001600160401b038111828210171561382757634e487b7160e01b600052604160045260246000fd5b6040526138338461358a565b81526138416020850161358a565b60208201526138526040850161358a565b6040820152606084013560608201526080840135608082015260a084013560a08201528092505061388560c0840161358a565b90509250929050565b803563ffffffff811681146133a557600080fd5b600080600080608085870312156138b857600080fd5b84356138c381613572565b935060208501356138d381613572565b92506138e16040860161388e565b91506138ef6060860161388e565b905092959194509250565b600080600080600080600060e0888a03121561391557600080fd5b873561392081613572565b9650602088013561393081613572565b95506040880135945060608801359350608088013560ff8116811461395457600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6001600160701b0392831681529116602082015260400190565b6000806040838503121561399e57600080fd5b82356139a981613572565b915060208301356139b981613572565b809150509250929050565b6020808252600d908201526c14915453140e881313d0d2d151609a1b604082015260600190565b60208082526021908201527f5245514c503a20494e53554646494349454e545f4f55545055545f414d4f554e6040820152601560fa1b606082015260800190565b6020808252601d908201527f5245514c503a20494e53554646494349454e545f4c4951554944495459000000604082015260600190565b6020808252601190820152705245514c503a20494e56414c49445f544f60781b604082015260600190565b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b600060208284031215613aec57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015613b1b57613b1b613af3565b500390565b6020808252818101527f5245514c503a20494e53554646494349454e545f494e5055545f414d4f554e54604082015260600190565b6020808252600890820152675245514c503a204b60c01b604082015260600190565b94855260208501939093526040840191909152606083015263ffffffff16608082015260a00190565b600060208284031215613bb257600080fd5b8151801515811461270457600080fd5b93845260208401929092526040830152606082015260800190565b600063ffffffff83811690831681811015613bfa57613bfa613af3565b039392505050565b634e487b7160e01b600052601260045260246000fd5b600082613c2757613c27613c02565b500490565b9586526020860194909452604085019290925263ffffffff908116606085015290811660808401521660a082015260c00190565b600060208284031215613c7257600080fd5b815161270481613572565b6000600019821415613c9157613c91613af3565b5060010190565b6001600160a01b03929092168252602082015260400190565b60008251613cc381846020870161362a565b9190910192915050565b6000816000190483118215151615613ce757613ce7613af3565b500290565b60008219821115613cff57613cff613af3565b500190565b600082613d1357613d13613c02565b500690565b60006001600160701b0382811684821681151582840482111615613d3e57613d3e613af3565b02949350505050565b60006001600160701b0383811680613d6157613d61613c02565b92169190910492915050565b60006001600160e01b0382811684821681151582840482111615613d3e57613d3e613af3565b60006001600160e01b0383811680613d6157613d61613c0256feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9d78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822a2646970667358221220ad0f8354734f9b2ff1c262bf1565565dca7820236f055722fa0dedf01217b8d864736f6c634300080a0033a2646970667358221220b31deb6835d5416df60e3d652a8944bac3fb74ec8c97fc6d51a450d9583ccf6964736f6c634300080a0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2959,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2961,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "formula",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2963,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2965,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "feeToSetter",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2969,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "_pairSalts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2972,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2976,
        "contract": "contracts/RequiemFactory.sol:RequiemFactory",
        "label": "_pairs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint64)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}