{
  "address": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "meta_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "fromPool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "toPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateConvert",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "meta_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapFromBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapToBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "meta_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "is_deposit",
          "type": "bool"
        }
      ],
      "name": "calculateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "fromPool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "toPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "convert",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "min_amounts_meta",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "min_amounts_base",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapFromBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapToBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5e3932d8d2f55f6eb2dd943676c25b3d73f7223379179dc2c4be61360668fb16",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
    "transactionIndex": 0,
    "gasUsed": "3317753",
    "logsBloom": "0x
    "blockHash": "0x3d0ad4f2d118c5cf8df0444de2f0362b14939049c366355dad5eb26164f04282",
    "transactionHash": "0x5e3932d8d2f55f6eb2dd943676c25b3d73f7223379179dc2c4be61360668fb16",
    "logs": [],
    "blockNumber": 31,
    "cumulativeGasUsed": "3317753",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5cda6a8053749c2e75fe3116749689e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"meta_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"fromPool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"toPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateConvert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"meta_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwapFromBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwapToBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"meta_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"is_deposit\",\"type\":\"bool\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"fromPool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"toPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"min_amounts_meta\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"min_amounts_base\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapFromBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapToBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemStableSwapRouter.sol\":\"RequiemStableSwapRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":12500},\"remappings\":[]},\"sources\":{\"contracts/RequiemStableSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IRequiemStableSwap.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\ncontract RequiemStableSwapRouter {\\n    using SafeERC20 for IERC20;\\n\\n    function calculateConvert(\\n        IRequiemStableSwap fromPool,\\n        IRequiemStableSwap toPool,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        uint256 fromPoolLength = fromPool.getNumberOfTokens();\\n        uint256[] memory amounts = fromPool.calculateRemoveLiquidity(address(this), amount);\\n        uint256[] memory meta_amounts = new uint256[](fromPoolLength);\\n        for (uint8 i = 0; i < fromPoolLength; i++) {\\n            IERC20 fromCoin = fromPool.getToken(i);\\n            uint256 toCoinIndex = toPool.getTokenIndex(address(fromCoin));\\n            meta_amounts[toCoinIndex] = amounts[i];\\n        }\\n        return toPool.calculateTokenAmount(meta_amounts, true);\\n    }\\n\\n    function convert(\\n        IRequiemStableSwap fromPool,\\n        IRequiemStableSwap toPool,\\n        uint256 amount,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        uint256 fromPoolLength = fromPool.getNumberOfTokens();\\n        uint256 toPoolLength = toPool.getNumberOfTokens();\\n        require(address(fromPool) != address(toPool), \\\"fromPool = toPool\\\");\\n        require(fromPoolLength == toPoolLength, \\\"poolTokensLengthMissmatch\\\");\\n        IERC20 fromToken = fromPool.getLpToken();\\n        IERC20 toToken = toPool.getLpToken();\\n        uint256[] memory min_amounts = new uint256[](fromPoolLength);\\n        // validate token\\n        for (uint8 i = 0; i < fromPoolLength; i++) {\\n            IERC20 coin = fromPool.getToken(i);\\n            toPool.getTokenIndex(address(coin));\\n        }\\n        fromToken.transferFrom(msg.sender, address(this), amount);\\n        fromToken.safeIncreaseAllowance(address(fromPool), amount);\\n        fromPool.removeLiquidity(amount, min_amounts, deadline);\\n\\n        uint256[] memory meta_amounts = new uint256[](toPoolLength);\\n\\n        for (uint8 i = 0; i < toPoolLength; i++) {\\n            IERC20 coin = toPool.getToken(i);\\n            uint256 addBalance = coin.balanceOf(address(this));\\n            coin.safeIncreaseAllowance(address(toPool), addBalance);\\n            meta_amounts[i] = addBalance;\\n        }\\n        toPool.addLiquidity(meta_amounts, minToMint, deadline);\\n\\n        uint256 lpAmount = toToken.balanceOf(address(this));\\n        toToken.transfer(msg.sender, lpAmount);\\n        return lpAmount;\\n    }\\n\\n    function addLiquidity(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 token = IERC20(pool.getLpToken());\\n        require(base_amounts.length == basePool.getNumberOfTokens(), \\\"invalidBaseAmountsLength\\\");\\n        require(meta_amounts.length == pool.getNumberOfTokens(), \\\"invalidMetaAmountsLength\\\");\\n        bool deposit_base = false;\\n        for (uint8 i = 0; i < base_amounts.length; i++) {\\n            uint256 amount = base_amounts[i];\\n            if (amount > 0) {\\n                deposit_base = true;\\n                IERC20 coin = basePool.getToken(i);\\n                coin.safeTransferFrom(msg.sender, address(this), amount);\\n                uint256 transferred = coin.balanceOf(address(this));\\n                coin.safeIncreaseAllowance(address(basePool), transferred);\\n                base_amounts[i] = transferred;\\n            }\\n        }\\n        if (deposit_base) {\\n            basePool.addLiquidity(base_amounts, 0, deadline);\\n        }\\n\\n        for (uint8 i = 0; i < meta_amounts.length; i++) {\\n            IERC20 coin = pool.getToken(i);\\n            if (meta_amounts[i] > 0) {\\n                coin.safeTransferFrom(msg.sender, address(this), meta_amounts[i]);\\n            }\\n            uint256 transferred = coin.balanceOf(address(this));\\n            coin.safeIncreaseAllowance(address(pool), transferred);\\n            meta_amounts[i] = transferred;\\n        }\\n        pool.addLiquidity(meta_amounts, minToMint, deadline);\\n        uint256 lpAmount = token.balanceOf(address(this));\\n        token.transfer(msg.sender, lpAmount);\\n        return lpAmount;\\n    }\\n\\n    function removeLiquidity(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256 _amount,\\n        uint256[] calldata min_amounts_meta,\\n        uint256[] calldata min_amounts_base,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts, uint256[] memory base_amounts) {\\n        IERC20 token = pool.getLpToken();\\n        IERC20 baseToken = basePool.getLpToken();\\n        token.transferFrom(msg.sender, address(this), _amount);\\n        token.safeIncreaseAllowance(address(pool), _amount);\\n        pool.removeLiquidity(_amount, min_amounts_meta, deadline);\\n        uint256 _base_amount = baseToken.balanceOf(address(this));\\n        baseToken.safeIncreaseAllowance(address(basePool), _base_amount);\\n\\n        basePool.removeLiquidity(_base_amount, min_amounts_base, deadline);\\n        // Transfer all coins out\\n        amounts = new uint256[](pool.getNumberOfTokens());\\n        for (uint8 i = 0; i < pool.getNumberOfTokens(); i++) {\\n            IERC20 coin = pool.getToken(i);\\n            amounts[i] = coin.balanceOf(address(this));\\n            if (amounts[i] > 0) {\\n                coin.safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        for (uint8 i = 0; i < basePool.getNumberOfTokens(); i++) {\\n            IERC20 coin = basePool.getToken(i);\\n            base_amounts[i] = coin.balanceOf(address(this));\\n            if (base_amounts[i] > 0) {\\n                coin.safeTransfer(msg.sender, base_amounts[i]);\\n            }\\n        }\\n    }\\n\\n    function calculateTokenAmount(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts,\\n        bool is_deposit\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 _base_tokens = basePool.calculateTokenAmount(base_amounts, is_deposit);\\n        meta_amounts[baseTokenIndex] = meta_amounts[baseTokenIndex] + _base_tokens;\\n        return pool.calculateTokenAmount(meta_amounts, is_deposit);\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256 amount\\n    ) external view returns (uint256[] memory meta_amounts, uint256[] memory base_amounts) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        meta_amounts = pool.calculateRemoveLiquidity(address(this), amount);\\n        uint256 lpAmount = meta_amounts[baseTokenIndex];\\n        meta_amounts[baseTokenIndex] = 0;\\n        base_amounts = basePool.calculateRemoveLiquidity(address(this), lpAmount);\\n    }\\n\\n    function swapFromBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        base_amounts[tokenIndexFrom] = dx;\\n        IERC20 coin = basePool.getToken(tokenIndexFrom);\\n        coin.safeTransferFrom(msg.sender, address(this), dx);\\n        coin.safeIncreaseAllowance(address(basePool), dx);\\n        uint256 baseLpAmount = basePool.addLiquidity(base_amounts, 0, deadline);\\n        if (baseTokenIndex != tokenIndexTo) {\\n            baseToken.safeIncreaseAllowance(address(pool), baseLpAmount);\\n            pool.swap(baseTokenIndex, tokenIndexTo, baseLpAmount, minDy, address(this),deadline);\\n        }\\n        IERC20 coinTo = pool.getToken(tokenIndexTo);\\n        uint256 amountOut = coinTo.balanceOf(address(this));\\n        coinTo.safeTransfer(msg.sender, amountOut);\\n        return amountOut;\\n    }\\n\\n    function calculateSwapFromBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        base_amounts[tokenIndexFrom] = dx;\\n        uint256 baseLpAmount = basePool.calculateTokenAmount(base_amounts, true);\\n        if (baseTokenIndex == tokenIndexTo) {\\n            return baseLpAmount;\\n        }\\n        return pool.calculateSwap(baseTokenIndex, tokenIndexTo, baseLpAmount);\\n    }\\n\\n    function swapToBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        IERC20 coin = pool.getToken(tokenIndexFrom);\\n        coin.safeTransferFrom(msg.sender, address(this), dx);\\n        uint256 tokenLPAmount = dx;\\n        if (baseTokenIndex != tokenIndexFrom) {\\n            coin.safeIncreaseAllowance(address(pool), dx);\\n            tokenLPAmount = pool.swap(tokenIndexFrom, baseTokenIndex, dx, 0,address(this), deadline);\\n        }\\n        baseToken.safeIncreaseAllowance(address(basePool), tokenLPAmount);\\n        basePool.removeLiquidityOneToken(tokenLPAmount, tokenIndexTo, minDy, deadline);\\n        IERC20 coinTo = basePool.getToken(tokenIndexTo);\\n        uint256 amountOut = coinTo.balanceOf(address(this));\\n        coinTo.safeTransfer(msg.sender, amountOut);\\n        return amountOut;\\n    }\\n\\n    function calculateSwapToBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 tokenLPAmount = dx;\\n        if (baseTokenIndex != tokenIndexFrom) {\\n            tokenLPAmount = pool.calculateSwap(tokenIndexFrom, baseTokenIndex, dx);\\n        }\\n        return basePool.calculateRemoveLiquidityOneToken(address(this), tokenLPAmount, tokenIndexTo);\\n    }\\n}\\n\",\"keccak256\":\"0xead97497ee3641b7bfbc154c53621d7b2027074be1bb5c5e16316118ea447568\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb7230835a4efbbbebcb5371d121977e859388b33f3ee5d9a7a44fc4de8d6b970\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event TokenExchange(address indexed buyer, uint256 soldId, uint256 tokensSold, uint256 boughtId, uint256 tokensBought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0xb685b7aaf446335d700bbef1f6411e49c897d8f1d509cfdac256f2cf37b5f29b\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        RequiemErrors._require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\n    }\\n}\\n\",\"keccak256\":\"0xa39a2c090cd9727eeca0658c5a3c382f9dcfe581f4d323bb388776c3237c72fd\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.10;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x37ebaca1c58a9daf307229c45122f12d603a95d1d92c1a8e7648b1910755bfa0\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c8063643abb8611610076578063797018211161005b578063797018211461016d5780638a311c5714610180578063ff9693221461019357600080fd5b8063643abb861461014757806377269e291461015a57600080fd5b806324a5bf21116100a757806324a5bf211461010e5780633214b8c91461012157806338c789731461013457600080fd5b80630c8b2216146100c35780630d6307eb146100ed575b600080fd5b6100d66100d1366004613394565b6101a6565b6040516100e4929190613410565b60405180910390f35b6101006100fb366004613524565b610403565b6040519081526020016100e4565b6100d661011c36600461360b565b610bc0565b61010061012f3660046136c0565b61143d565b610100610142366004613724565b611672565b610100610155366004613394565b611b70565b6101006101683660046137a9565b611eb8565b61010061017b366004613847565b6120aa565b61010061018e3660046136c0565b612937565b6101006101a1366004613724565b612c38565b6060806000846001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020d9190613898565b6040517f66c0bd240000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192506000918816906366c0bd2490602401602060405180830381865afa158015610272573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029691906138bc565b6040517f7c61e561000000000000000000000000000000000000000000000000000000008152306004820152602481018790529091506001600160a01b03881690637c61e56190604401600060405180830381865afa1580156102fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261032591908101906138d9565b93506000848260ff168151811061033e5761033e61395f565b602002602001015190506000858360ff168151811061035f5761035f61395f565b60209081029190910101526040517f7c61e561000000000000000000000000000000000000000000000000000000008152306004820152602481018290526001600160a01b03881690637c61e56190604401600060405180830381865afa1580156103ce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103f691908101906138d9565b9350505050935093915050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104689190613898565b9050866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cc919061398e565b85511461053a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c696442617365416d6f756e74734c656e677468000000000000000060448201526064015b60405180910390fd5b876001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059c919061398e565b865114610605576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e76616c69644d657461416d6f756e74734c656e67746800000000000000006044820152606401610531565b6000805b86518160ff1610156107b3576000878260ff168151811061062c5761062c61395f565b6020026020010151905060008111156107a0576040517f82b8660000000000000000000000000000000000000000000000000000000000815260ff83166004820152600193506000906001600160a01b038c16906382b8660090602401602060405180830381865afa1580156106a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ca9190613898565b90506106e16001600160a01b03821633308561307a565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610741573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610765919061398e565b905061077b6001600160a01b0383168d83613131565b808a8560ff16815181106107915761079161395f565b60200260200101818152505050505b50806107ab816139d6565b915050610609565b508015610849576040517f4d49e87d0000000000000000000000000000000000000000000000000000000081526001600160a01b03891690634d49e87d9061080490899060009089906004016139f6565b6020604051808303816000875af1158015610823573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610847919061398e565b505b60005b87518160ff161015610a13576040517f82b8660000000000000000000000000000000000000000000000000000000000815260ff821660048201526000906001600160a01b038c16906382b8660090602401602060405180830381865afa1580156108bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108df9190613898565b90506000898360ff16815181106108f8576108f861395f565b602002602001015111156109425761094233308b8560ff16815181106109205761092061395f565b6020026020010151846001600160a01b031661307a909392919063ffffffff16565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156109a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c6919061398e565b90506109dc6001600160a01b0383168d83613131565b808a8460ff16815181106109f2576109f261395f565b60200260200101818152505050508080610a0b906139d6565b91505061084c565b506040517f4d49e87d0000000000000000000000000000000000000000000000000000000081526001600160a01b038a1690634d49e87d90610a5d908a90899089906004016139f6565b6020604051808303816000875af1158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa0919061398e565b506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b25919061398e565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290529091506001600160a01b0384169063a9059cbb906044016020604051808303816000875af1158015610b8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb29190613a1b565b509998505050505050505050565b60608060008a6001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c279190613898565b905060008a6001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8d9190613898565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018c90529091506001600160a01b038316906323b872dd906064016020604051808303816000875af1158015610cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d209190613a1b565b50610d356001600160a01b0383168d8c613131565b6040517f31cd52b00000000000000000000000000000000000000000000000000000000081526001600160a01b038d16906331cd52b090610d80908d908d908d908b90600401613a38565b6000604051808303816000875af1158015610d9f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dc791908101906138d9565b506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610e28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4c919061398e565b9050610e626001600160a01b0383168d83613131565b6040517f31cd52b00000000000000000000000000000000000000000000000000000000081526001600160a01b038d16906331cd52b090610ead9084908c908c908c90600401613a38565b6000604051808303816000875af1158015610ecc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ef491908101906138d9565b508c6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f57919061398e565b67ffffffffffffffff811115610f6f57610f6f613435565b604051908082528060200260200182016040528015610f98578160200160208202803683370190505b50945060005b8d6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611000919061398e565b8160ff1610156111995760008e6001600160a01b03166382b86600836040518263ffffffff1660e01b8152600401611041919060ff91909116815260200190565b602060405180830381865afa15801561105e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110829190613898565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa1580156110e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611106919061398e565b878360ff168151811061111b5761111b61395f565b6020026020010181815250506000878360ff168151811061113e5761113e61395f565b602002602001015111156111865761118633888460ff16815181106111655761116561395f565b6020026020010151836001600160a01b03166132159092919063ffffffff16565b5080611191816139d6565b915050610f9e565b508b6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fc919061398e565b67ffffffffffffffff81111561121457611214613435565b60405190808252806020026020018201604052801561123d578160200160208202803683370190505b50935060005b8c6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a5919061398e565b8160ff16101561142c576040517f82b8660000000000000000000000000000000000000000000000000000000000815260ff821660048201526000906001600160a01b038f16906382b8660090602401602060405180830381865afa158015611312573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113369190613898565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa158015611396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ba919061398e565b868360ff16815181106113cf576113cf61395f565b6020026020010181815250506000868360ff16815181106113f2576113f261395f565b602002602001015111156114195761141933878460ff16815181106111655761116561395f565b5080611424816139d6565b915050611243565b505050509850989650505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561147e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a29190613898565b6040517f66c0bd240000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192506000918916906366c0bd2490602401602060405180830381865afa158015611507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152b91906138bc565b90508360ff808316908816146115d1576040517fa95b089f00000000000000000000000000000000000000000000000000000000815260ff808916600483015283166024820152604481018690526001600160a01b038a169063a95b089f90606401602060405180830381865afa1580156115aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ce919061398e565b90505b6040517f98899f400000000000000000000000000000000000000000000000000000000081523060048201526024810182905260ff871660448201526001600160a01b038916906398899f40906064015b602060405180830381865afa15801561163f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611663919061398e565b93505050505b95945050505050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d79190613898565b6040517f66c0bd240000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192506000918b16906366c0bd2490602401602060405180830381865afa15801561173c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176091906138bc565b90506000896001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c6919061398e565b67ffffffffffffffff8111156117de576117de613435565b604051908082528060200260200182016040528015611807578160200160208202803683370190505b50905086818a60ff16815181106118205761182061395f565b60209081029190910101526040517f82b8660000000000000000000000000000000000000000000000000000000000815260ff8a1660048201526000906001600160a01b038c16906382b8660090602401602060405180830381865afa15801561188e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b29190613898565b90506118c96001600160a01b03821633308b61307a565b6118dd6001600160a01b0382168c8a613131565b6040517f4d49e87d0000000000000000000000000000000000000000000000000000000081526000906001600160a01b038d1690634d49e87d9061192990869085908c906004016139f6565b6020604051808303816000875af1158015611948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196c919061398e565b90508960ff168460ff1614611a3a5761198f6001600160a01b0386168e83613131565b6040517fbfd3956b00000000000000000000000000000000000000000000000000000000815260ff80861660048301528b166024820152604481018290526064810189905230608482015260a481018890526001600160a01b038e169063bfd3956b9060c4016020604051808303816000875af1158015611a14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a38919061398e565b505b6040517f82b8660000000000000000000000000000000000000000000000000000000000815260ff8b1660048201526000906001600160a01b038f16906382b8660090602401602060405180830381865afa158015611a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac19190613898565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b48919061398e565b9050611b5e6001600160a01b0383163383613215565b9e9d5050505050505050505050505050565b600080846001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd5919061398e565b6040517f7c61e561000000000000000000000000000000000000000000000000000000008152306004820152602481018590529091506000906001600160a01b03871690637c61e56190604401600060405180830381865afa158015611c3f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c6791908101906138d9565b905060008267ffffffffffffffff811115611c8457611c84613435565b604051908082528060200260200182016040528015611cad578160200160208202803683370190505b50905060005b838160ff161015611e23576040517f82b8660000000000000000000000000000000000000000000000000000000000815260ff821660048201526000906001600160a01b038a16906382b8660090602401602060405180830381865afa158015611d21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d459190613898565b6040517f66c0bd240000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192506000918a16906366c0bd2490602401602060405180830381865afa158015611daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dce91906138bc565b60ff169050848360ff1681518110611de857611de861395f565b6020026020010151848281518110611e0257611e0261395f565b60200260200101818152505050508080611e1b906139d6565b915050611cb3565b506040517fe6ab28060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063e6ab280690611e6c908490600190600401613a9e565b602060405180830381865afa158015611e89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ead919061398e565b979650505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ef9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f1d9190613898565b6040517f66c0bd240000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192506000918916906366c0bd2490602401602060405180830381865afa158015611f82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa691906138bc565b90506000876001600160a01b031663e6ab280687876040518363ffffffff1660e01b8152600401611fd8929190613a9e565b602060405180830381865afa158015611ff5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612019919061398e565b905080878360ff16815181106120315761203161395f565b60200260200101516120439190613ac2565b878360ff16815181106120585761205861395f565b60209081029190910101526040517fe6ab28060000000000000000000000000000000000000000000000000000000081526001600160a01b038a169063e6ab280690611622908a908990600401613a9e565b600080866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210f919061398e565b90506000866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612151573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612175919061398e565b9050866001600160a01b0316886001600160a01b031614156121f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f66726f6d506f6f6c203d20746f506f6f6c0000000000000000000000000000006044820152606401610531565b80821461225c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f706f6f6c546f6b656e734c656e6774684d6973736d61746368000000000000006044820152606401610531565b6000886001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561229c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c09190613898565b90506000886001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123269190613898565b905060008467ffffffffffffffff81111561234357612343613435565b60405190808252806020026020018201604052801561236c578160200160208202803683370190505b50905060005b858160ff1610156124a0576040517f82b8660000000000000000000000000000000000000000000000000000000000815260ff821660048201526000906001600160a01b038e16906382b8660090602401602060405180830381865afa1580156123e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124049190613898565b6040517f66c0bd240000000000000000000000000000000000000000000000000000000081526001600160a01b038083166004830152919250908d16906366c0bd2490602401602060405180830381865afa158015612467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248b91906138bc565b50508080612498906139d6565b915050612372565b506040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018a90526001600160a01b038416906323b872dd906064016020604051808303816000875af115801561250d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125319190613a1b565b506125466001600160a01b0384168c8b613131565b6040517f31cd52b00000000000000000000000000000000000000000000000000000000081526001600160a01b038c16906331cd52b09061258f908c9085908c90600401613ada565b6000604051808303816000875af11580156125ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125d691908101906138d9565b5060008467ffffffffffffffff8111156125f2576125f2613435565b60405190808252806020026020018201604052801561261b578160200160208202803683370190505b50905060005b858160ff161015612787576040517f82b8660000000000000000000000000000000000000000000000000000000000815260ff821660048201526000906001600160a01b038e16906382b8660090602401602060405180830381865afa15801561268f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b39190613898565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273a919061398e565b90506127506001600160a01b0383168f83613131565b80848460ff16815181106127665761276661395f565b6020026020010181815250505050808061277f906139d6565b915050612621565b506040517f4d49e87d0000000000000000000000000000000000000000000000000000000081526001600160a01b038c1690634d49e87d906127d19084908d908d906004016139f6565b6020604051808303816000875af11580156127f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612814919061398e565b506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015612875573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612899919061398e565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018290529091506001600160a01b0385169063a9059cbb906044016020604051808303816000875af1158015612902573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129269190613a1b565b509c9b505050505050505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299c9190613898565b6040517f66c0bd240000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192506000918916906366c0bd2490602401602060405180830381865afa158015612a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2591906138bc565b90506000876001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8b919061398e565b67ffffffffffffffff811115612aa357612aa3613435565b604051908082528060200260200182016040528015612acc578160200160208202803683370190505b50905084818860ff1681518110612ae557612ae561395f565b60209081029190910101526040517fe6ab28060000000000000000000000000000000000000000000000000000000081526000906001600160a01b038a169063e6ab280690612b3b908590600190600401613a9e565b602060405180830381865afa158015612b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7c919061398e565b90508660ff168360ff161415612b9757935061166992505050565b6040517fa95b089f00000000000000000000000000000000000000000000000000000000815260ff808516600483015288166024820152604481018290526001600160a01b038b169063a95b089f90606401602060405180830381865afa158015612c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2a919061398e565b9a9950505050505050505050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c9d9190613898565b6040517f66c0bd240000000000000000000000000000000000000000000000000000000081526001600160a01b0380831660048301529192506000918b16906366c0bd2490602401602060405180830381865afa158015612d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2691906138bc565b6040517f82b8660000000000000000000000000000000000000000000000000000000000815260ff8a1660048201529091506000906001600160a01b038c16906382b8660090602401602060405180830381865afa158015612d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612db09190613898565b9050612dc76001600160a01b03821633308a61307a565b8660ff838116908b1614612e9557612de96001600160a01b0383168d8a613131565b6040517fbfd3956b00000000000000000000000000000000000000000000000000000000815260ff808c16600483015284166024820152604481018990526000606482015230608482015260a481018790526001600160a01b038d169063bfd3956b9060c4016020604051808303816000875af1158015612e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e92919061398e565b90505b612ea96001600160a01b0385168c83613131565b6040517f3e3a15600000000000000000000000000000000000000000000000000000000081526004810182905260ff8a16602482015260448101889052606481018790526001600160a01b038c1690633e3a1560906084016020604051808303816000875af1158015612f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f44919061398e565b506040517f82b8660000000000000000000000000000000000000000000000000000000000815260ff8a1660048201526000906001600160a01b038d16906382b8660090602401602060405180830381865afa158015612fa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fcc9190613898565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561302f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613053919061398e565b90506130696001600160a01b0383163383613215565b9d9c50505050505050505050505050565b6040516001600160a01b038085166024830152831660448201526064810182905261312b9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613263565b50505050565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa15801561319b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131bf919061398e565b6131c99190613ac2565b6040516001600160a01b03851660248201526044810182905290915061312b9085907f095ea7b300000000000000000000000000000000000000000000000000000000906064016130c7565b6040516001600160a01b03831660248201526044810182905261325e9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016130c7565b505050565b600080836001600160a01b03168360405161327e9190613b03565b6000604051808303816000865af19150503d80600081146132bb576040519150601f19603f3d011682016040523d82523d6000602084013e6132c0565b606091505b509150915060008214156132d8573d6000803e3d6000fd5b61312b8151600014806132fa5750818060200190518101906132fa9190613a1b565b6101a28161330b5761330b8161330f565b5050565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6001600160a01b038116811461339157600080fd5b50565b6000806000606084860312156133a957600080fd5b83356133b48161337c565b925060208401356133c48161337c565b929592945050506040919091013590565b600081518084526020808501945080840160005b83811015613405578151875295820195908201906001016133e9565b509495945050505050565b60408152600061342360408301856133d5565b828103602084015261166981856133d5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561348d5761348d613435565b604052919050565b600067ffffffffffffffff8211156134af576134af613435565b5060051b60200190565b600082601f8301126134ca57600080fd5b813560206134df6134da83613495565b613464565b82815260059290921b840181019181810190868411156134fe57600080fd5b8286015b848110156135195780358352918301918301613502565b509695505050505050565b60008060008060008060c0878903121561353d57600080fd5b86356135488161337c565b955060208701356135588161337c565b9450604087013567ffffffffffffffff8082111561357557600080fd5b6135818a838b016134b9565b9550606089013591508082111561359757600080fd5b506135a489828a016134b9565b9350506080870135915060a087013590509295509295509295565b60008083601f8401126135d157600080fd5b50813567ffffffffffffffff8111156135e957600080fd5b6020830191508360208260051b850101111561360457600080fd5b9250929050565b60008060008060008060008060c0898b03121561362757600080fd5b88356136328161337c565b975060208901356136428161337c565b965060408901359550606089013567ffffffffffffffff8082111561366657600080fd5b6136728c838d016135bf565b909750955060808b013591508082111561368b57600080fd5b506136988b828c016135bf565b999c989b50969995989497949560a00135949350505050565b60ff8116811461339157600080fd5b600080600080600060a086880312156136d857600080fd5b85356136e38161337c565b945060208601356136f38161337c565b93506040860135613703816136b1565b92506060860135613713816136b1565b949793965091946080013592915050565b600080600080600080600060e0888a03121561373f57600080fd5b873561374a8161337c565b9650602088013561375a8161337c565b9550604088013561376a816136b1565b9450606088013561377a816136b1565b9699959850939660808101359560a0820135955060c0909101359350915050565b801515811461339157600080fd5b600080600080600060a086880312156137c157600080fd5b85356137cc8161337c565b945060208601356137dc8161337c565b9350604086013567ffffffffffffffff808211156137f957600080fd5b61380589838a016134b9565b9450606088013591508082111561381b57600080fd5b50613828888289016134b9565b92505060808601356138398161379b565b809150509295509295909350565b600080600080600060a0868803121561385f57600080fd5b853561386a8161337c565b9450602086013561387a8161337c565b94979496505050506040830135926060810135926080909101359150565b6000602082840312156138aa57600080fd5b81516138b58161337c565b9392505050565b6000602082840312156138ce57600080fd5b81516138b5816136b1565b600060208083850312156138ec57600080fd5b825167ffffffffffffffff81111561390357600080fd5b8301601f8101851361391457600080fd5b80516139226134da82613495565b81815260059190911b8201830190838101908783111561394157600080fd5b928401925b82841015611ead57835182529284019290840190613946565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156139a057600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff821660ff8114156139ed576139ed6139a7565b60010192915050565b606081526000613a0960608301866133d5565b60208301949094525060400152919050565b600060208284031215613a2d57600080fd5b81516138b58161379b565b8481526060602082015282606082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff841115613a7757600080fd5b8360051b808660808501376000908301608001908152604090920192909252949350505050565b604081526000613ab160408301856133d5565b905082151560208301529392505050565b60008219821115613ad557613ad56139a7565b500190565b838152606060208201526000613af360608301856133d5565b9050826040830152949350505050565b6000825160005b81811015613b245760208186018101518583015201613b0a565b81811115613b33576000828501525b50919091019291505056fea2646970667358221220ce78ec953c76ad0f7de7ac4eb31137ddd4fe41a6b9ac11dc66f5051ca4c99e3364736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}