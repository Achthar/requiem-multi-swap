{
  "address": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "meta_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "fromPool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "toPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateConvert",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "meta_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapFromBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapToBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "meta_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "is_deposit",
          "type": "bool"
        }
      ],
      "name": "calculateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "fromPool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "toPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "convert",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "min_amounts_meta",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "min_amounts_base",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapFromBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapToBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x85b6e3f1d6481166e3ed3d88c0bb99120e84c31b5b123268dec2274f630e7aa4",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
    "transactionIndex": 0,
    "gasUsed": "2987549",
    "logsBloom": "0x
    "blockHash": "0xce2876eaeef57bf7e288d8ff94c1c2eb09503705641b541251ceec20beb7981c",
    "transactionHash": "0x85b6e3f1d6481166e3ed3d88c0bb99120e84c31b5b123268dec2274f630e7aa4",
    "logs": [],
    "blockNumber": 31,
    "cumulativeGasUsed": "2987549",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b68fc32492a33c9dfb64dfd079d60aab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"meta_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"fromPool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"toPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateConvert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"meta_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwapFromBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwapToBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"meta_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"is_deposit\",\"type\":\"bool\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"fromPool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"toPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"min_amounts_meta\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"min_amounts_base\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapFromBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapToBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemStableSwapRouter.sol\":\"RequiemStableSwapRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/RequiemStableSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./interfaces/IRequiemStableSwap.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\ncontract RequiemStableSwapRouter {\\n    using SafeERC20 for IERC20;\\n\\n    function calculateConvert(\\n        IRequiemStableSwap fromPool,\\n        IRequiemStableSwap toPool,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        uint256 fromPoolLength = fromPool.getNumberOfTokens();\\n        uint256[] memory amounts = fromPool.calculateRemoveLiquidity(address(this), amount);\\n        uint256[] memory meta_amounts = new uint256[](fromPoolLength);\\n        for (uint8 i = 0; i < fromPoolLength; i++) {\\n            IERC20 fromCoin = fromPool.getToken(i);\\n            uint256 toCoinIndex = toPool.getTokenIndex(address(fromCoin));\\n            meta_amounts[toCoinIndex] = amounts[i];\\n        }\\n        return toPool.calculateTokenAmount(meta_amounts, true);\\n    }\\n\\n    function convert(\\n        IRequiemStableSwap fromPool,\\n        IRequiemStableSwap toPool,\\n        uint256 amount,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        uint256 fromPoolLength = fromPool.getNumberOfTokens();\\n        uint256 toPoolLength = toPool.getNumberOfTokens();\\n        require(address(fromPool) != address(toPool), \\\"fromPool = toPool\\\");\\n        require(fromPoolLength == toPoolLength, \\\"poolTokensLengthMissmatch\\\");\\n        IERC20 fromToken = fromPool.getLpToken();\\n        IERC20 toToken = toPool.getLpToken();\\n        uint256[] memory min_amounts = new uint256[](fromPoolLength);\\n        // validate token\\n        for (uint8 i = 0; i < fromPoolLength; i++) {\\n            IERC20 coin = fromPool.getToken(i);\\n            toPool.getTokenIndex(address(coin));\\n        }\\n        fromToken.transferFrom(msg.sender, address(this), amount);\\n        fromToken.safeIncreaseAllowance(address(fromPool), amount);\\n        fromPool.removeLiquidity(amount, min_amounts, deadline);\\n\\n        uint256[] memory meta_amounts = new uint256[](toPoolLength);\\n\\n        for (uint8 i = 0; i < toPoolLength; i++) {\\n            IERC20 coin = toPool.getToken(i);\\n            uint256 addBalance = coin.balanceOf(address(this));\\n            coin.safeIncreaseAllowance(address(toPool), addBalance);\\n            meta_amounts[i] = addBalance;\\n        }\\n        toPool.addLiquidity(meta_amounts, minToMint, deadline);\\n\\n        uint256 lpAmount = toToken.balanceOf(address(this));\\n        toToken.transfer(msg.sender, lpAmount);\\n        return lpAmount;\\n    }\\n\\n    function addLiquidity(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 token = IERC20(pool.getLpToken());\\n        require(base_amounts.length == basePool.getNumberOfTokens(), \\\"invalidBaseAmountsLength\\\");\\n        require(meta_amounts.length == pool.getNumberOfTokens(), \\\"invalidMetaAmountsLength\\\");\\n        bool deposit_base = false;\\n        for (uint8 i = 0; i < base_amounts.length; i++) {\\n            uint256 amount = base_amounts[i];\\n            if (amount > 0) {\\n                deposit_base = true;\\n                IERC20 coin = basePool.getToken(i);\\n                coin.safeTransferFrom(msg.sender, address(this), amount);\\n                uint256 transferred = coin.balanceOf(address(this));\\n                coin.safeIncreaseAllowance(address(basePool), transferred);\\n                base_amounts[i] = transferred;\\n            }\\n        }\\n        if (deposit_base) {\\n            basePool.addLiquidity(base_amounts, 0, deadline);\\n        }\\n\\n        for (uint8 i = 0; i < meta_amounts.length; i++) {\\n            IERC20 coin = pool.getToken(i);\\n            if (meta_amounts[i] > 0) {\\n                coin.safeTransferFrom(msg.sender, address(this), meta_amounts[i]);\\n            }\\n            uint256 transferred = coin.balanceOf(address(this));\\n            coin.safeIncreaseAllowance(address(pool), transferred);\\n            meta_amounts[i] = transferred;\\n        }\\n        pool.addLiquidity(meta_amounts, minToMint, deadline);\\n        uint256 lpAmount = token.balanceOf(address(this));\\n        token.transfer(msg.sender, lpAmount);\\n        return lpAmount;\\n    }\\n\\n    function removeLiquidity(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256 _amount,\\n        uint256[] calldata min_amounts_meta,\\n        uint256[] calldata min_amounts_base,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts, uint256[] memory base_amounts) {\\n        IERC20 token = pool.getLpToken();\\n        IERC20 baseToken = basePool.getLpToken();\\n        token.transferFrom(msg.sender, address(this), _amount);\\n        token.safeIncreaseAllowance(address(pool), _amount);\\n        pool.removeLiquidity(_amount, min_amounts_meta, deadline);\\n        uint256 _base_amount = baseToken.balanceOf(address(this));\\n        baseToken.safeIncreaseAllowance(address(basePool), _base_amount);\\n\\n        basePool.removeLiquidity(_base_amount, min_amounts_base, deadline);\\n        // Transfer all coins out\\n        amounts = new uint256[](pool.getNumberOfTokens());\\n        for (uint8 i = 0; i < pool.getNumberOfTokens(); i++) {\\n            IERC20 coin = pool.getToken(i);\\n            amounts[i] = coin.balanceOf(address(this));\\n            if (amounts[i] > 0) {\\n                coin.safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        for (uint8 i = 0; i < basePool.getNumberOfTokens(); i++) {\\n            IERC20 coin = basePool.getToken(i);\\n            base_amounts[i] = coin.balanceOf(address(this));\\n            if (base_amounts[i] > 0) {\\n                coin.safeTransfer(msg.sender, base_amounts[i]);\\n            }\\n        }\\n    }\\n\\n    function calculateTokenAmount(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts,\\n        bool is_deposit\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 _base_tokens = basePool.calculateTokenAmount(base_amounts, is_deposit);\\n        meta_amounts[baseTokenIndex] = meta_amounts[baseTokenIndex] + _base_tokens;\\n        return pool.calculateTokenAmount(meta_amounts, is_deposit);\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256 amount\\n    ) external view returns (uint256[] memory meta_amounts, uint256[] memory base_amounts) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        meta_amounts = pool.calculateRemoveLiquidity(address(this), amount);\\n        uint256 lpAmount = meta_amounts[baseTokenIndex];\\n        meta_amounts[baseTokenIndex] = 0;\\n        base_amounts = basePool.calculateRemoveLiquidity(address(this), lpAmount);\\n    }\\n\\n    function swapFromBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        base_amounts[tokenIndexFrom] = dx;\\n        IERC20 coin = basePool.getToken(tokenIndexFrom);\\n        coin.safeTransferFrom(msg.sender, address(this), dx);\\n        coin.safeIncreaseAllowance(address(basePool), dx);\\n        uint256 baseLpAmount = basePool.addLiquidity(base_amounts, 0, deadline);\\n        if (baseTokenIndex != tokenIndexTo) {\\n            baseToken.safeIncreaseAllowance(address(pool), baseLpAmount);\\n            pool.swap(baseTokenIndex, tokenIndexTo, baseLpAmount, minDy, address(this),deadline);\\n        }\\n        IERC20 coinTo = pool.getToken(tokenIndexTo);\\n        uint256 amountOut = coinTo.balanceOf(address(this));\\n        coinTo.safeTransfer(msg.sender, amountOut);\\n        return amountOut;\\n    }\\n\\n    function calculateSwapFromBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        base_amounts[tokenIndexFrom] = dx;\\n        uint256 baseLpAmount = basePool.calculateTokenAmount(base_amounts, true);\\n        if (baseTokenIndex == tokenIndexTo) {\\n            return baseLpAmount;\\n        }\\n        return pool.calculateSwap(baseTokenIndex, tokenIndexTo, baseLpAmount);\\n    }\\n\\n    function swapToBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        IERC20 coin = pool.getToken(tokenIndexFrom);\\n        coin.safeTransferFrom(msg.sender, address(this), dx);\\n        uint256 tokenLPAmount = dx;\\n        if (baseTokenIndex != tokenIndexFrom) {\\n            coin.safeIncreaseAllowance(address(pool), dx);\\n            tokenLPAmount = pool.swap(tokenIndexFrom, baseTokenIndex, dx, 0,address(this), deadline);\\n        }\\n        baseToken.safeIncreaseAllowance(address(basePool), tokenLPAmount);\\n        basePool.removeLiquidityOneToken(tokenLPAmount, tokenIndexTo, minDy, deadline);\\n        IERC20 coinTo = basePool.getToken(tokenIndexTo);\\n        uint256 amountOut = coinTo.balanceOf(address(this));\\n        coinTo.safeTransfer(msg.sender, amountOut);\\n        return amountOut;\\n    }\\n\\n    function calculateSwapToBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 tokenLPAmount = dx;\\n        if (baseTokenIndex != tokenIndexFrom) {\\n            tokenLPAmount = pool.calculateSwap(tokenIndexFrom, baseTokenIndex, dx);\\n        }\\n        return basePool.calculateRemoveLiquidityOneToken(address(this), tokenLPAmount, tokenIndexTo);\\n    }\\n}\\n\",\"keccak256\":\"0x3c8c0d1fb77d4ac414a6efb7ff94bc6e9b7ee7a5832383179fa261feff4760e1\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x53949e9a0715f73387ca0d7df5e6f858708953f8dd671225ca5a8bbf8198fd60\",\"license\":\"MIT\"},\"contracts/interfaces/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.11;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x22f039855f27fa60f41ff2a5590b87a610cefdd0cf3f9b061e8c3b5f6c38c45b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event TokenExchange(address indexed buyer, uint256 soldId, uint256 tokensSold, uint256 boughtId, uint256 tokensBought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 flashFee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0xb36852aa7fd09252306bde9af5ad98c5ca6b32c3b04115b410b0767d804ffcab\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./helpers/RequiemErrors.sol\\\";\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        RequiemErrors._require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\n    }\\n}\\n\",\"keccak256\":\"0x8a2e602e863eb9790e1b47c0c658db60cae5e216de70dc5fd9cf682c7f6868cc\",\"license\":\"MIT\"},\"contracts/libraries/helpers/RequiemErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.11;\\n\\n// solhint-disable\\nlibrary RequiemErrors {\\n    /**\\n     * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n     * supported.\\n     */\\n    function _require(bool condition, uint256 errorCode) internal pure {\\n        if (!condition) RequiemErrors._revert(errorCode);\\n    }\\n\\n    /**\\n     * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n     */\\n    function _revert(uint256 errorCode) internal pure {\\n        // We're going to dynamically create a revert string based on the error code, with the following format:\\n        // 'REQ#{errorCode}'\\n        // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n        //\\n        // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n        // number (8 to 16 bits) than the individual string characters.\\n        //\\n        // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n        // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n        // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n        assembly {\\n            // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n            // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n            // the '0' character.\\n\\n            let units := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let tenths := add(mod(errorCode, 10), 0x30)\\n\\n            errorCode := div(errorCode, 10)\\n            let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n            // With the individual characters, we can now construct the full string. The \\\"REQ#\\\" part is a known constant\\n            // (0x52455123): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n            // characters to it, each shifted by a multiple of 8.\\n            // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n            // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n            // array).\\n\\n            let revertReason := shl(200, add(0x52455123000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n            // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n            // message will have the following layout:\\n            // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n            // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n            // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n            mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n            // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n            mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n            // The string length is fixed: 7 characters.\\n            mstore(0x24, 7)\\n            // Finally, the string itself is stored.\\n            mstore(0x44, revertReason)\\n\\n            // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n            // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n            revert(0, 100)\\n        }\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x06e0c46c8b401ecc77c5da33f1c35e81f723df817ecbc3529ecb2cceb60f1612\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613517806100206000396000f3fe608060405234801561001057600080fd5b506004361061008e5760003560e01c80630c8b2216146100935780630d6307eb146100bd57806324a5bf21146100de5780633214b8c9146100f157806338c7897314610104578063643abb861461011757806377269e291461012a578063797018211461013d5780638a311c5714610150578063ff96932214610163575b600080fd5b6100a66100a1366004612ceb565b610176565b6040516100b4929190612d67565b60405180910390f35b6100d06100cb366004612e60565b610389565b6040519081526020016100b4565b6100a66100ec366004612f45565b610a51565b6100d06100ff366004612ff9565b611220565b6100d061011236600461305d565b611402565b6100d0610125366004612ceb565b611858565b6100d06101383660046130e2565b611b3b565b6100d061014b36600461317f565b611cfc565b6100d061015e366004612ff9565b61246a565b6100d061017136600461305d565b612717565b6060806000846001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dd91906131d0565b90506000866001600160a01b03166366c0bd24836040518263ffffffff1660e01b815260040161020d91906131f4565b602060405180830381865afa15801561022a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024e9190613208565b604051637c61e56160e01b81529091506001600160a01b03881690637c61e5619061027f9030908990600401613225565b600060405180830381865afa15801561029c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102c4919081019061323e565b93506000848260ff16815181106102dd576102dd6132c3565b602002602001015190506000858360ff16815181106102fe576102fe6132c3565b6020908102919091010152604051637c61e56160e01b81526001600160a01b03881690637c61e561906103379030908590600401613225565b600060405180830381865afa158015610354573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261037c919081019061323e565b9350505050935093915050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ee91906131d0565b9050866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561042e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045291906132d9565b8551146104a15760405162461bcd60e51b81526020600482015260186024820152770d2dcecc2d8d2c884c2e6ca82dadeeadce8e698cadccee8d60431b60448201526064015b60405180910390fd5b876001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050391906132d9565b86511461054d5760405162461bcd60e51b81526020600482015260186024820152770d2dcecc2d8d2c89acae8c282dadeeadce8e698cadccee8d60431b6044820152606401610498565b6000805b86518160ff1610156106cf576000878260ff1681518110610574576105746132c3565b6020026020010151905060008111156106bc5760405162415c3360e91b8152600193506000906001600160a01b038c16906382b86600906105b99086906004016132f2565b602060405180830381865afa1580156105d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fa91906131d0565b90506106116001600160a01b038216333085612ab2565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906106409030906004016131f4565b602060405180830381865afa15801561065d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068191906132d9565b90506106976001600160a01b0383168d83612b10565b808a8560ff16815181106106ad576106ad6132c3565b60200260200101818152505050505b50806106c781613316565b915050610551565b50801561074c57604051634d49e87d60e01b81526001600160a01b03891690634d49e87d906107079089906000908990600401613336565b6020604051808303816000875af1158015610726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074a91906132d9565b505b60005b87518160ff1610156108ea5760405162415c3360e91b81526000906001600160a01b038c16906382b86600906107899085906004016132f2565b602060405180830381865afa1580156107a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ca91906131d0565b90506000898360ff16815181106107e3576107e36132c3565b6020026020010151111561082d5761082d33308b8560ff168151811061080b5761080b6132c3565b6020026020010151846001600160a01b0316612ab2909392919063ffffffff16565b6040516370a0823160e01b81526000906001600160a01b038316906370a082319061085c9030906004016131f4565b602060405180830381865afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d91906132d9565b90506108b36001600160a01b0383168d83612b10565b808a8460ff16815181106108c9576108c96132c3565b602002602001018181525050505080806108e290613316565b91505061074f565b50604051634d49e87d60e01b81526001600160a01b038a1690634d49e87d9061091b908a9089908990600401613336565b6020604051808303816000875af115801561093a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095e91906132d9565b506040516370a0823160e01b81526000906001600160a01b038416906370a082319061098e9030906004016131f4565b602060405180830381865afa1580156109ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cf91906132d9565b60405163a9059cbb60e01b81529091506001600160a01b0384169063a9059cbb90610a009033908590600401613225565b6020604051808303816000875af1158015610a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a43919061335b565b509998505050505050505050565b60608060008a6001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab891906131d0565b905060008a6001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610afa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1e91906131d0565b6040516323b872dd60e01b81529091506001600160a01b038316906323b872dd90610b5190339030908f90600401613378565b6020604051808303816000875af1158015610b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b94919061335b565b50610ba96001600160a01b0383168d8c612b10565b60405163031cd52b60e41b81526001600160a01b038d16906331cd52b090610bdb908d908d908d908b9060040161339c565b6000604051808303816000875af1158015610bfa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c22919081019061323e565b506040516370a0823160e01b81526000906001600160a01b038316906370a0823190610c529030906004016131f4565b602060405180830381865afa158015610c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9391906132d9565b9050610ca96001600160a01b0383168d83612b10565b60405163031cd52b60e41b81526001600160a01b038d16906331cd52b090610cdb9084908c908c908c9060040161339c565b6000604051808303816000875af1158015610cfa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d22919081019061323e565b508c6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8591906132d9565b6001600160401b03811115610d9c57610d9c612d8c565b604051908082528060200260200182016040528015610dc5578160200160208202803683370190505b50945060005b8d6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2d91906132d9565b8160ff161015610fa95760008e6001600160a01b03166382b86600836040518263ffffffff1660e01b8152600401610e6591906132f2565b602060405180830381865afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea691906131d0565b6040516370a0823160e01b81529091506001600160a01b038216906370a0823190610ed59030906004016131f4565b602060405180830381865afa158015610ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1691906132d9565b878360ff1681518110610f2b57610f2b6132c3565b6020026020010181815250506000878360ff1681518110610f4e57610f4e6132c3565b60200260200101511115610f9657610f9633888460ff1681518110610f7557610f756132c3565b6020026020010151836001600160a01b0316612bb09092919063ffffffff16565b5080610fa181613316565b915050610dcb565b508b6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100c91906132d9565b6001600160401b0381111561102357611023612d8c565b60405190808252806020026020018201604052801561104c578160200160208202803683370190505b50935060005b8c6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b491906132d9565b8160ff16101561120f5760405162415c3360e91b81526000906001600160a01b038f16906382b86600906110ec9085906004016132f2565b602060405180830381865afa158015611109573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112d91906131d0565b6040516370a0823160e01b81529091506001600160a01b038216906370a082319061115c9030906004016131f4565b602060405180830381865afa158015611179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119d91906132d9565b868360ff16815181106111b2576111b26132c3565b6020026020010181815250506000868360ff16815181106111d5576111d56132c3565b602002602001015111156111fc576111fc33878460ff1681518110610f7557610f756132c3565b508061120781613316565b915050611052565b505050509850989650505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611261573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128591906131d0565b90506000876001600160a01b03166366c0bd24836040518263ffffffff1660e01b81526004016112b591906131f4565b602060405180830381865afa1580156112d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f69190613208565b90508360ff8083169088161461137a5760405163a95b089f60e01b81526001600160a01b038a169063a95b089f90611336908a9086908a906004016133ea565b602060405180830381865afa158015611353573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137791906132d9565b90505b604051630262267d60e61b81523060048201526024810182905260ff871660448201526001600160a01b038916906398899f40906064015b602060405180830381865afa1580156113cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f391906132d9565b93505050505b95945050505050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611443573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146791906131d0565b90506000896001600160a01b03166366c0bd24836040518263ffffffff1660e01b815260040161149791906131f4565b602060405180830381865afa1580156114b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d89190613208565b90506000896001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561151a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153e91906132d9565b6001600160401b0381111561155557611555612d8c565b60405190808252806020026020018201604052801561157e578160200160208202803683370190505b50905086818a60ff1681518110611597576115976132c3565b602090810291909101015260405162415c3360e91b81526000906001600160a01b038c16906382b86600906115d0908d906004016132f2565b602060405180830381865afa1580156115ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161191906131d0565b90506116286001600160a01b03821633308b612ab2565b61163c6001600160a01b0382168c8a612b10565b604051634d49e87d60e01b81526000906001600160a01b038d1690634d49e87d9061166f90869085908c90600401613336565b6020604051808303816000875af115801561168e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b291906132d9565b90508960ff168460ff1614611750576116d56001600160a01b0386168e83612b10565b60405163bfd3956b60e01b81526001600160a01b038e169063bfd3956b9061170b9087908e9086908e9030908f90600401613408565b6020604051808303816000875af115801561172a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174e91906132d9565b505b60405162415c3360e91b81526000906001600160a01b038f16906382b866009061177e908e906004016132f2565b602060405180830381865afa15801561179b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bf91906131d0565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016117ef91906131f4565b602060405180830381865afa15801561180c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183091906132d9565b90506118466001600160a01b0383163383612bb0565b9e9d5050505050505050505050505050565b600080846001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bd91906132d9565b90506000856001600160a01b0316637c61e56130866040518363ffffffff1660e01b81526004016118ef929190613225565b600060405180830381865afa15801561190c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611934919081019061323e565b90506000826001600160401b0381111561195057611950612d8c565b604051908082528060200260200182016040528015611979578160200160208202803683370190505b50905060005b838160ff161015611abf5760405162415c3360e91b81526000906001600160a01b038a16906382b86600906119b89085906004016132f2565b602060405180830381865afa1580156119d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f991906131d0565b90506000886001600160a01b03166366c0bd24836040518263ffffffff1660e01b8152600401611a2991906131f4565b602060405180830381865afa158015611a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6a9190613208565b60ff169050848360ff1681518110611a8457611a846132c3565b6020026020010151848281518110611a9e57611a9e6132c3565b60200260200101818152505050508080611ab790613316565b91505061197f565b50604051637355940360e11b81526001600160a01b0387169063e6ab280690611aef908490600190600401613441565b602060405180830381865afa158015611b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3091906132d9565b979650505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba091906131d0565b90506000876001600160a01b03166366c0bd24836040518263ffffffff1660e01b8152600401611bd091906131f4565b602060405180830381865afa158015611bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c119190613208565b90506000876001600160a01b031663e6ab280687876040518363ffffffff1660e01b8152600401611c43929190613441565b602060405180830381865afa158015611c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8491906132d9565b905080878360ff1681518110611c9c57611c9c6132c3565b6020026020010151611cae9190613465565b878360ff1681518110611cc357611cc36132c3565b6020908102919091010152604051637355940360e11b81526001600160a01b038a169063e6ab2806906113b2908a908990600401613441565b600080866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6191906132d9565b90506000866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc791906132d9565b9050866001600160a01b0316886001600160a01b03161415611e1f5760405162461bcd60e51b8152602060048201526011602482015270199c9bdb541bdbdb080f481d1bd41bdbdb607a1b6044820152606401610498565b808214611e6a5760405162461bcd60e51b81526020600482015260196024820152780e0deded8a8ded6cadce698cadccee8d09ad2e6e6dac2e8c6d603b1b6044820152606401610498565b6000886001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ece91906131d0565b90506000886001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3491906131d0565b90506000846001600160401b03811115611f5057611f50612d8c565b604051908082528060200260200182016040528015611f79578160200160208202803683370190505b50905060005b858160ff16101561207e5760405162415c3360e91b81526000906001600160a01b038e16906382b8660090611fb89085906004016132f2565b602060405180830381865afa158015611fd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff991906131d0565b6040516319b02f4960e21b81529091506001600160a01b038d16906366c0bd24906120289084906004016131f4565b602060405180830381865afa158015612045573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120699190613208565b5050808061207690613316565b915050611f7f565b506040516323b872dd60e01b81526001600160a01b038416906323b872dd906120af90339030908e90600401613378565b6020604051808303816000875af11580156120ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f2919061335b565b506121076001600160a01b0384168c8b612b10565b60405163031cd52b60e41b81526001600160a01b038c16906331cd52b090612137908c9085908c9060040161347d565b6000604051808303816000875af1158015612156573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261217e919081019061323e565b506000846001600160401b0381111561219957612199612d8c565b6040519080825280602002602001820160405280156121c2578160200160208202803683370190505b50905060005b858160ff1610156123005760405162415c3360e91b81526000906001600160a01b038e16906382b86600906122019085906004016132f2565b602060405180830381865afa15801561221e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224291906131d0565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161227291906131f4565b602060405180830381865afa15801561228f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b391906132d9565b90506122c96001600160a01b0383168f83612b10565b80848460ff16815181106122df576122df6132c3565b602002602001018181525050505080806122f890613316565b9150506121c8565b50604051634d49e87d60e01b81526001600160a01b038c1690634d49e87d906123319084908d908d90600401613336565b6020604051808303816000875af1158015612350573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237491906132d9565b506040516370a0823160e01b81526000906001600160a01b038516906370a08231906123a49030906004016131f4565b602060405180830381865afa1580156123c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e591906132d9565b60405163a9059cbb60e01b81529091506001600160a01b0385169063a9059cbb906124169033908590600401613225565b6020604051808303816000875af1158015612435573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612459919061335b565b509c9b505050505050505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124cf91906131d0565b90506000876001600160a01b03166366c0bd24836040518263ffffffff1660e01b81526004016124ff91906131f4565b602060405180830381865afa15801561251c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125409190613208565b90506000876001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a691906132d9565b6001600160401b038111156125bd576125bd612d8c565b6040519080825280602002602001820160405280156125e6578160200160208202803683370190505b50905084818860ff16815181106125ff576125ff6132c3565b6020908102919091010152604051637355940360e11b81526000906001600160a01b038a169063e6ab28069061263c908590600190600401613441565b602060405180830381865afa158015612659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267d91906132d9565b90508660ff168360ff1614156126985793506113f992505050565b60405163a95b089f60e01b81526001600160a01b038b169063a95b089f906126c89086908b9086906004016133ea565b602060405180830381865afa1580156126e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270991906132d9565b9a9950505050505050505050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277c91906131d0565b90506000896001600160a01b03166366c0bd24836040518263ffffffff1660e01b81526004016127ac91906131f4565b602060405180830381865afa1580156127c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ed9190613208565b905060008a6001600160a01b03166382b866008a6040518263ffffffff1660e01b815260040161281d91906132f2565b602060405180830381865afa15801561283a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285e91906131d0565b90506128756001600160a01b03821633308a612ab2565b8660ff838116908b1614612914576128976001600160a01b0383168d8a612b10565b60405163bfd3956b60e01b81526001600160a01b038d169063bfd3956b906128ce908d9087908d9060009030908e90600401613408565b6020604051808303816000875af11580156128ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291191906132d9565b90505b6129286001600160a01b0385168c83612b10565b6040516301f1d0ab60e51b81526004810182905260ff8a16602482015260448101889052606481018790526001600160a01b038c1690633e3a1560906084016020604051808303816000875af1158015612986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129aa91906132d9565b5060405162415c3360e91b81526000906001600160a01b038d16906382b86600906129d9908d906004016132f2565b602060405180830381865afa1580156129f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1a91906131d0565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612a4a91906131f4565b602060405180830381865afa158015612a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8b91906132d9565b9050612aa16001600160a01b0383163383612bb0565b9d9c50505050505050505050505050565b612b0a846323b872dd60e01b858585604051602401612ad393929190613378565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612bd4565b50505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8591906132d9565b612b8f9190613465565b9050612b0a8463095ea7b360e01b8584604051602401612ad3929190613225565b612bcf8363a9059cbb60e01b8484604051602401612ad3929190613225565b505050565b600080836001600160a01b031683604051612bef91906134a6565b6000604051808303816000865af19150503d8060008114612c2c576040519150601f19603f3d011682016040523d82523d6000602084013e612c31565b606091505b50915091506000821415612c49573d6000803e3d6000fd5b612b0a815160001480612c6b575081806020019051810190612c6b919061335b565b6101a281612c7c57612c7c81612c80565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6001600160a01b0381168114612ce857600080fd5b50565b600080600060608486031215612d0057600080fd5b8335612d0b81612cd3565b92506020840135612d1b81612cd3565b929592945050506040919091013590565b600081518084526020808501945080840160005b83811015612d5c57815187529582019590820190600101612d40565b509495945050505050565b604081526000612d7a6040830185612d2c565b82810360208401526113f98185612d2c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612dca57612dca612d8c565b604052919050565b60006001600160401b03821115612deb57612deb612d8c565b5060051b60200190565b600082601f830112612e0657600080fd5b81356020612e1b612e1683612dd2565b612da2565b82815260059290921b84018101918181019086841115612e3a57600080fd5b8286015b84811015612e555780358352918301918301612e3e565b509695505050505050565b60008060008060008060c08789031215612e7957600080fd5b8635612e8481612cd3565b95506020870135612e9481612cd3565b945060408701356001600160401b0380821115612eb057600080fd5b612ebc8a838b01612df5565b95506060890135915080821115612ed257600080fd5b50612edf89828a01612df5565b9350506080870135915060a087013590509295509295509295565b60008083601f840112612f0c57600080fd5b5081356001600160401b03811115612f2357600080fd5b6020830191508360208260051b8501011115612f3e57600080fd5b9250929050565b60008060008060008060008060c0898b031215612f6157600080fd5b8835612f6c81612cd3565b97506020890135612f7c81612cd3565b96506040890135955060608901356001600160401b0380821115612f9f57600080fd5b612fab8c838d01612efa565b909750955060808b0135915080821115612fc457600080fd5b50612fd18b828c01612efa565b999c989b50969995989497949560a00135949350505050565b60ff81168114612ce857600080fd5b600080600080600060a0868803121561301157600080fd5b853561301c81612cd3565b9450602086013561302c81612cd3565b9350604086013561303c81612fea565b9250606086013561304c81612fea565b949793965091946080013592915050565b600080600080600080600060e0888a03121561307857600080fd5b873561308381612cd3565b9650602088013561309381612cd3565b955060408801356130a381612fea565b945060608801356130b381612fea565b9699959850939660808101359560a0820135955060c0909101359350915050565b8015158114612ce857600080fd5b600080600080600060a086880312156130fa57600080fd5b853561310581612cd3565b9450602086013561311581612cd3565b935060408601356001600160401b038082111561313157600080fd5b61313d89838a01612df5565b9450606088013591508082111561315357600080fd5b5061316088828901612df5565b9250506080860135613171816130d4565b809150509295509295909350565b600080600080600060a0868803121561319757600080fd5b85356131a281612cd3565b945060208601356131b281612cd3565b94979496505050506040830135926060810135926080909101359150565b6000602082840312156131e257600080fd5b81516131ed81612cd3565b9392505050565b6001600160a01b0391909116815260200190565b60006020828403121561321a57600080fd5b81516131ed81612fea565b6001600160a01b03929092168252602082015260400190565b6000602080838503121561325157600080fd5b82516001600160401b0381111561326757600080fd5b8301601f8101851361327857600080fd5b8051613286612e1682612dd2565b81815260059190911b820183019083810190878311156132a557600080fd5b928401925b82841015611b30578351825292840192908401906132aa565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156132eb57600080fd5b5051919050565b60ff91909116815260200190565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff81141561332d5761332d613300565b60010192915050565b6060815260006133496060830186612d2c565b60208301949094525060400152919050565b60006020828403121561336d57600080fd5b81516131ed816130d4565b6001600160a01b039384168152919092166020820152604081019190915260600190565b848152606060208201819052810183905260006001600160fb1b038411156133c357600080fd5b8360051b808660808501376000908301608001908152604090920192909252949350505050565b60ff9384168152919092166020820152604081019190915260600190565b60ff9687168152949095166020850152604084019290925260608301526001600160a01b0316608082015260a081019190915260c00190565b6040815260006134546040830185612d2c565b905082151560208301529392505050565b6000821982111561347857613478613300565b500190565b8381526060602082015260006134966060830185612d2c565b9050826040830152949350505050565b6000825160005b818110156134c757602081860181015185830152016134ad565b818111156134d6576000828501525b50919091019291505056fea264697066735822122026a6618984401338e7e393c4a53cb85f2bdbd0ddbb6dfcf022a627debe66448664736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061008e5760003560e01c80630c8b2216146100935780630d6307eb146100bd57806324a5bf21146100de5780633214b8c9146100f157806338c7897314610104578063643abb861461011757806377269e291461012a578063797018211461013d5780638a311c5714610150578063ff96932214610163575b600080fd5b6100a66100a1366004612ceb565b610176565b6040516100b4929190612d67565b60405180910390f35b6100d06100cb366004612e60565b610389565b6040519081526020016100b4565b6100a66100ec366004612f45565b610a51565b6100d06100ff366004612ff9565b611220565b6100d061011236600461305d565b611402565b6100d0610125366004612ceb565b611858565b6100d06101383660046130e2565b611b3b565b6100d061014b36600461317f565b611cfc565b6100d061015e366004612ff9565b61246a565b6100d061017136600461305d565b612717565b6060806000846001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dd91906131d0565b90506000866001600160a01b03166366c0bd24836040518263ffffffff1660e01b815260040161020d91906131f4565b602060405180830381865afa15801561022a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024e9190613208565b604051637c61e56160e01b81529091506001600160a01b03881690637c61e5619061027f9030908990600401613225565b600060405180830381865afa15801561029c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102c4919081019061323e565b93506000848260ff16815181106102dd576102dd6132c3565b602002602001015190506000858360ff16815181106102fe576102fe6132c3565b6020908102919091010152604051637c61e56160e01b81526001600160a01b03881690637c61e561906103379030908590600401613225565b600060405180830381865afa158015610354573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261037c919081019061323e565b9350505050935093915050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ee91906131d0565b9050866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561042e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045291906132d9565b8551146104a15760405162461bcd60e51b81526020600482015260186024820152770d2dcecc2d8d2c884c2e6ca82dadeeadce8e698cadccee8d60431b60448201526064015b60405180910390fd5b876001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050391906132d9565b86511461054d5760405162461bcd60e51b81526020600482015260186024820152770d2dcecc2d8d2c89acae8c282dadeeadce8e698cadccee8d60431b6044820152606401610498565b6000805b86518160ff1610156106cf576000878260ff1681518110610574576105746132c3565b6020026020010151905060008111156106bc5760405162415c3360e91b8152600193506000906001600160a01b038c16906382b86600906105b99086906004016132f2565b602060405180830381865afa1580156105d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fa91906131d0565b90506106116001600160a01b038216333085612ab2565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906106409030906004016131f4565b602060405180830381865afa15801561065d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068191906132d9565b90506106976001600160a01b0383168d83612b10565b808a8560ff16815181106106ad576106ad6132c3565b60200260200101818152505050505b50806106c781613316565b915050610551565b50801561074c57604051634d49e87d60e01b81526001600160a01b03891690634d49e87d906107079089906000908990600401613336565b6020604051808303816000875af1158015610726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074a91906132d9565b505b60005b87518160ff1610156108ea5760405162415c3360e91b81526000906001600160a01b038c16906382b86600906107899085906004016132f2565b602060405180830381865afa1580156107a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ca91906131d0565b90506000898360ff16815181106107e3576107e36132c3565b6020026020010151111561082d5761082d33308b8560ff168151811061080b5761080b6132c3565b6020026020010151846001600160a01b0316612ab2909392919063ffffffff16565b6040516370a0823160e01b81526000906001600160a01b038316906370a082319061085c9030906004016131f4565b602060405180830381865afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d91906132d9565b90506108b36001600160a01b0383168d83612b10565b808a8460ff16815181106108c9576108c96132c3565b602002602001018181525050505080806108e290613316565b91505061074f565b50604051634d49e87d60e01b81526001600160a01b038a1690634d49e87d9061091b908a9089908990600401613336565b6020604051808303816000875af115801561093a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095e91906132d9565b506040516370a0823160e01b81526000906001600160a01b038416906370a082319061098e9030906004016131f4565b602060405180830381865afa1580156109ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cf91906132d9565b60405163a9059cbb60e01b81529091506001600160a01b0384169063a9059cbb90610a009033908590600401613225565b6020604051808303816000875af1158015610a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a43919061335b565b509998505050505050505050565b60608060008a6001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab891906131d0565b905060008a6001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610afa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1e91906131d0565b6040516323b872dd60e01b81529091506001600160a01b038316906323b872dd90610b5190339030908f90600401613378565b6020604051808303816000875af1158015610b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b94919061335b565b50610ba96001600160a01b0383168d8c612b10565b60405163031cd52b60e41b81526001600160a01b038d16906331cd52b090610bdb908d908d908d908b9060040161339c565b6000604051808303816000875af1158015610bfa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c22919081019061323e565b506040516370a0823160e01b81526000906001600160a01b038316906370a0823190610c529030906004016131f4565b602060405180830381865afa158015610c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9391906132d9565b9050610ca96001600160a01b0383168d83612b10565b60405163031cd52b60e41b81526001600160a01b038d16906331cd52b090610cdb9084908c908c908c9060040161339c565b6000604051808303816000875af1158015610cfa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d22919081019061323e565b508c6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8591906132d9565b6001600160401b03811115610d9c57610d9c612d8c565b604051908082528060200260200182016040528015610dc5578160200160208202803683370190505b50945060005b8d6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2d91906132d9565b8160ff161015610fa95760008e6001600160a01b03166382b86600836040518263ffffffff1660e01b8152600401610e6591906132f2565b602060405180830381865afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea691906131d0565b6040516370a0823160e01b81529091506001600160a01b038216906370a0823190610ed59030906004016131f4565b602060405180830381865afa158015610ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1691906132d9565b878360ff1681518110610f2b57610f2b6132c3565b6020026020010181815250506000878360ff1681518110610f4e57610f4e6132c3565b60200260200101511115610f9657610f9633888460ff1681518110610f7557610f756132c3565b6020026020010151836001600160a01b0316612bb09092919063ffffffff16565b5080610fa181613316565b915050610dcb565b508b6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100c91906132d9565b6001600160401b0381111561102357611023612d8c565b60405190808252806020026020018201604052801561104c578160200160208202803683370190505b50935060005b8c6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b491906132d9565b8160ff16101561120f5760405162415c3360e91b81526000906001600160a01b038f16906382b86600906110ec9085906004016132f2565b602060405180830381865afa158015611109573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112d91906131d0565b6040516370a0823160e01b81529091506001600160a01b038216906370a082319061115c9030906004016131f4565b602060405180830381865afa158015611179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119d91906132d9565b868360ff16815181106111b2576111b26132c3565b6020026020010181815250506000868360ff16815181106111d5576111d56132c3565b602002602001015111156111fc576111fc33878460ff1681518110610f7557610f756132c3565b508061120781613316565b915050611052565b505050509850989650505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611261573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128591906131d0565b90506000876001600160a01b03166366c0bd24836040518263ffffffff1660e01b81526004016112b591906131f4565b602060405180830381865afa1580156112d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f69190613208565b90508360ff8083169088161461137a5760405163a95b089f60e01b81526001600160a01b038a169063a95b089f90611336908a9086908a906004016133ea565b602060405180830381865afa158015611353573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137791906132d9565b90505b604051630262267d60e61b81523060048201526024810182905260ff871660448201526001600160a01b038916906398899f40906064015b602060405180830381865afa1580156113cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f391906132d9565b93505050505b95945050505050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611443573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146791906131d0565b90506000896001600160a01b03166366c0bd24836040518263ffffffff1660e01b815260040161149791906131f4565b602060405180830381865afa1580156114b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d89190613208565b90506000896001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561151a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153e91906132d9565b6001600160401b0381111561155557611555612d8c565b60405190808252806020026020018201604052801561157e578160200160208202803683370190505b50905086818a60ff1681518110611597576115976132c3565b602090810291909101015260405162415c3360e91b81526000906001600160a01b038c16906382b86600906115d0908d906004016132f2565b602060405180830381865afa1580156115ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161191906131d0565b90506116286001600160a01b03821633308b612ab2565b61163c6001600160a01b0382168c8a612b10565b604051634d49e87d60e01b81526000906001600160a01b038d1690634d49e87d9061166f90869085908c90600401613336565b6020604051808303816000875af115801561168e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b291906132d9565b90508960ff168460ff1614611750576116d56001600160a01b0386168e83612b10565b60405163bfd3956b60e01b81526001600160a01b038e169063bfd3956b9061170b9087908e9086908e9030908f90600401613408565b6020604051808303816000875af115801561172a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174e91906132d9565b505b60405162415c3360e91b81526000906001600160a01b038f16906382b866009061177e908e906004016132f2565b602060405180830381865afa15801561179b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bf91906131d0565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016117ef91906131f4565b602060405180830381865afa15801561180c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183091906132d9565b90506118466001600160a01b0383163383612bb0565b9e9d5050505050505050505050505050565b600080846001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bd91906132d9565b90506000856001600160a01b0316637c61e56130866040518363ffffffff1660e01b81526004016118ef929190613225565b600060405180830381865afa15801561190c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611934919081019061323e565b90506000826001600160401b0381111561195057611950612d8c565b604051908082528060200260200182016040528015611979578160200160208202803683370190505b50905060005b838160ff161015611abf5760405162415c3360e91b81526000906001600160a01b038a16906382b86600906119b89085906004016132f2565b602060405180830381865afa1580156119d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f991906131d0565b90506000886001600160a01b03166366c0bd24836040518263ffffffff1660e01b8152600401611a2991906131f4565b602060405180830381865afa158015611a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6a9190613208565b60ff169050848360ff1681518110611a8457611a846132c3565b6020026020010151848281518110611a9e57611a9e6132c3565b60200260200101818152505050508080611ab790613316565b91505061197f565b50604051637355940360e11b81526001600160a01b0387169063e6ab280690611aef908490600190600401613441565b602060405180830381865afa158015611b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3091906132d9565b979650505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba091906131d0565b90506000876001600160a01b03166366c0bd24836040518263ffffffff1660e01b8152600401611bd091906131f4565b602060405180830381865afa158015611bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c119190613208565b90506000876001600160a01b031663e6ab280687876040518363ffffffff1660e01b8152600401611c43929190613441565b602060405180830381865afa158015611c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8491906132d9565b905080878360ff1681518110611c9c57611c9c6132c3565b6020026020010151611cae9190613465565b878360ff1681518110611cc357611cc36132c3565b6020908102919091010152604051637355940360e11b81526001600160a01b038a169063e6ab2806906113b2908a908990600401613441565b600080866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6191906132d9565b90506000866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc791906132d9565b9050866001600160a01b0316886001600160a01b03161415611e1f5760405162461bcd60e51b8152602060048201526011602482015270199c9bdb541bdbdb080f481d1bd41bdbdb607a1b6044820152606401610498565b808214611e6a5760405162461bcd60e51b81526020600482015260196024820152780e0deded8a8ded6cadce698cadccee8d09ad2e6e6dac2e8c6d603b1b6044820152606401610498565b6000886001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ece91906131d0565b90506000886001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3491906131d0565b90506000846001600160401b03811115611f5057611f50612d8c565b604051908082528060200260200182016040528015611f79578160200160208202803683370190505b50905060005b858160ff16101561207e5760405162415c3360e91b81526000906001600160a01b038e16906382b8660090611fb89085906004016132f2565b602060405180830381865afa158015611fd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff991906131d0565b6040516319b02f4960e21b81529091506001600160a01b038d16906366c0bd24906120289084906004016131f4565b602060405180830381865afa158015612045573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120699190613208565b5050808061207690613316565b915050611f7f565b506040516323b872dd60e01b81526001600160a01b038416906323b872dd906120af90339030908e90600401613378565b6020604051808303816000875af11580156120ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f2919061335b565b506121076001600160a01b0384168c8b612b10565b60405163031cd52b60e41b81526001600160a01b038c16906331cd52b090612137908c9085908c9060040161347d565b6000604051808303816000875af1158015612156573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261217e919081019061323e565b506000846001600160401b0381111561219957612199612d8c565b6040519080825280602002602001820160405280156121c2578160200160208202803683370190505b50905060005b858160ff1610156123005760405162415c3360e91b81526000906001600160a01b038e16906382b86600906122019085906004016132f2565b602060405180830381865afa15801561221e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224291906131d0565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161227291906131f4565b602060405180830381865afa15801561228f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b391906132d9565b90506122c96001600160a01b0383168f83612b10565b80848460ff16815181106122df576122df6132c3565b602002602001018181525050505080806122f890613316565b9150506121c8565b50604051634d49e87d60e01b81526001600160a01b038c1690634d49e87d906123319084908d908d90600401613336565b6020604051808303816000875af1158015612350573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237491906132d9565b506040516370a0823160e01b81526000906001600160a01b038516906370a08231906123a49030906004016131f4565b602060405180830381865afa1580156123c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e591906132d9565b60405163a9059cbb60e01b81529091506001600160a01b0385169063a9059cbb906124169033908590600401613225565b6020604051808303816000875af1158015612435573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612459919061335b565b509c9b505050505050505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124cf91906131d0565b90506000876001600160a01b03166366c0bd24836040518263ffffffff1660e01b81526004016124ff91906131f4565b602060405180830381865afa15801561251c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125409190613208565b90506000876001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a691906132d9565b6001600160401b038111156125bd576125bd612d8c565b6040519080825280602002602001820160405280156125e6578160200160208202803683370190505b50905084818860ff16815181106125ff576125ff6132c3565b6020908102919091010152604051637355940360e11b81526000906001600160a01b038a169063e6ab28069061263c908590600190600401613441565b602060405180830381865afa158015612659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267d91906132d9565b90508660ff168360ff1614156126985793506113f992505050565b60405163a95b089f60e01b81526001600160a01b038b169063a95b089f906126c89086908b9086906004016133ea565b602060405180830381865afa1580156126e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270991906132d9565b9a9950505050505050505050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277c91906131d0565b90506000896001600160a01b03166366c0bd24836040518263ffffffff1660e01b81526004016127ac91906131f4565b602060405180830381865afa1580156127c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ed9190613208565b905060008a6001600160a01b03166382b866008a6040518263ffffffff1660e01b815260040161281d91906132f2565b602060405180830381865afa15801561283a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285e91906131d0565b90506128756001600160a01b03821633308a612ab2565b8660ff838116908b1614612914576128976001600160a01b0383168d8a612b10565b60405163bfd3956b60e01b81526001600160a01b038d169063bfd3956b906128ce908d9087908d9060009030908e90600401613408565b6020604051808303816000875af11580156128ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291191906132d9565b90505b6129286001600160a01b0385168c83612b10565b6040516301f1d0ab60e51b81526004810182905260ff8a16602482015260448101889052606481018790526001600160a01b038c1690633e3a1560906084016020604051808303816000875af1158015612986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129aa91906132d9565b5060405162415c3360e91b81526000906001600160a01b038d16906382b86600906129d9908d906004016132f2565b602060405180830381865afa1580156129f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1a91906131d0565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612a4a91906131f4565b602060405180830381865afa158015612a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8b91906132d9565b9050612aa16001600160a01b0383163383612bb0565b9d9c50505050505050505050505050565b612b0a846323b872dd60e01b858585604051602401612ad393929190613378565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612bd4565b50505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8591906132d9565b612b8f9190613465565b9050612b0a8463095ea7b360e01b8584604051602401612ad3929190613225565b612bcf8363a9059cbb60e01b8484604051602401612ad3929190613225565b505050565b600080836001600160a01b031683604051612bef91906134a6565b6000604051808303816000865af19150503d8060008114612c2c576040519150601f19603f3d011682016040523d82523d6000602084013e612c31565b606091505b50915091506000821415612c49573d6000803e3d6000fd5b612b0a815160001480612c6b575081806020019051810190612c6b919061335b565b6101a281612c7c57612c7c81612c80565b5050565b62461bcd60e51b6000908152602060045260076024526652455123000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6001600160a01b0381168114612ce857600080fd5b50565b600080600060608486031215612d0057600080fd5b8335612d0b81612cd3565b92506020840135612d1b81612cd3565b929592945050506040919091013590565b600081518084526020808501945080840160005b83811015612d5c57815187529582019590820190600101612d40565b509495945050505050565b604081526000612d7a6040830185612d2c565b82810360208401526113f98185612d2c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612dca57612dca612d8c565b604052919050565b60006001600160401b03821115612deb57612deb612d8c565b5060051b60200190565b600082601f830112612e0657600080fd5b81356020612e1b612e1683612dd2565b612da2565b82815260059290921b84018101918181019086841115612e3a57600080fd5b8286015b84811015612e555780358352918301918301612e3e565b509695505050505050565b60008060008060008060c08789031215612e7957600080fd5b8635612e8481612cd3565b95506020870135612e9481612cd3565b945060408701356001600160401b0380821115612eb057600080fd5b612ebc8a838b01612df5565b95506060890135915080821115612ed257600080fd5b50612edf89828a01612df5565b9350506080870135915060a087013590509295509295509295565b60008083601f840112612f0c57600080fd5b5081356001600160401b03811115612f2357600080fd5b6020830191508360208260051b8501011115612f3e57600080fd5b9250929050565b60008060008060008060008060c0898b031215612f6157600080fd5b8835612f6c81612cd3565b97506020890135612f7c81612cd3565b96506040890135955060608901356001600160401b0380821115612f9f57600080fd5b612fab8c838d01612efa565b909750955060808b0135915080821115612fc457600080fd5b50612fd18b828c01612efa565b999c989b50969995989497949560a00135949350505050565b60ff81168114612ce857600080fd5b600080600080600060a0868803121561301157600080fd5b853561301c81612cd3565b9450602086013561302c81612cd3565b9350604086013561303c81612fea565b9250606086013561304c81612fea565b949793965091946080013592915050565b600080600080600080600060e0888a03121561307857600080fd5b873561308381612cd3565b9650602088013561309381612cd3565b955060408801356130a381612fea565b945060608801356130b381612fea565b9699959850939660808101359560a0820135955060c0909101359350915050565b8015158114612ce857600080fd5b600080600080600060a086880312156130fa57600080fd5b853561310581612cd3565b9450602086013561311581612cd3565b935060408601356001600160401b038082111561313157600080fd5b61313d89838a01612df5565b9450606088013591508082111561315357600080fd5b5061316088828901612df5565b9250506080860135613171816130d4565b809150509295509295909350565b600080600080600060a0868803121561319757600080fd5b85356131a281612cd3565b945060208601356131b281612cd3565b94979496505050506040830135926060810135926080909101359150565b6000602082840312156131e257600080fd5b81516131ed81612cd3565b9392505050565b6001600160a01b0391909116815260200190565b60006020828403121561321a57600080fd5b81516131ed81612fea565b6001600160a01b03929092168252602082015260400190565b6000602080838503121561325157600080fd5b82516001600160401b0381111561326757600080fd5b8301601f8101851361327857600080fd5b8051613286612e1682612dd2565b81815260059190911b820183019083810190878311156132a557600080fd5b928401925b82841015611b30578351825292840192908401906132aa565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156132eb57600080fd5b5051919050565b60ff91909116815260200190565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff81141561332d5761332d613300565b60010192915050565b6060815260006133496060830186612d2c565b60208301949094525060400152919050565b60006020828403121561336d57600080fd5b81516131ed816130d4565b6001600160a01b039384168152919092166020820152604081019190915260600190565b848152606060208201819052810183905260006001600160fb1b038411156133c357600080fd5b8360051b808660808501376000908301608001908152604090920192909252949350505050565b60ff9384168152919092166020820152604081019190915260600190565b60ff9687168152949095166020850152604084019290925260608301526001600160a01b0316608082015260a081019190915260c00190565b6040815260006134546040830185612d2c565b905082151560208301529392505050565b6000821982111561347857613478613300565b500190565b8381526060602082015260006134966060830185612d2c565b9050826040830152949350505050565b6000825160005b818110156134c757602081860181015185830152016134ad565b818111156134d6576000828501525b50919091019291505056fea264697066735822122026a6618984401338e7e393c4a53cb85f2bdbd0ddbb6dfcf022a627debe66448664736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}