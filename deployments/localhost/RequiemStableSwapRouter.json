{
  "address": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "meta_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "fromPool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "toPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateConvert",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "meta_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapFromBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapToBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "meta_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "is_deposit",
          "type": "bool"
        }
      ],
      "name": "calculateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "fromPool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "toPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "convert",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "min_amounts_meta",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "min_amounts_base",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapFromBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapToBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x30324f7cf8a8aa270adaf850a06837507d5496fdbe1bb1b64a7a078b198d7217",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
    "transactionIndex": 0,
    "gasUsed": "2962278",
    "logsBloom": "0x
    "blockHash": "0x1c0136e67d8cd62502daf1a5e144b0f0d9cd4a355f1f6b5b33bc22712564ac23",
    "transactionHash": "0x30324f7cf8a8aa270adaf850a06837507d5496fdbe1bb1b64a7a078b198d7217",
    "logs": [],
    "blockNumber": 31,
    "cumulativeGasUsed": "2962278",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4e81be7ca6d5fa17ee70d6a1b612e989",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"meta_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"fromPool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"toPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateConvert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"meta_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwapFromBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwapToBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"meta_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"is_deposit\",\"type\":\"bool\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"fromPool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"toPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"min_amounts_meta\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"min_amounts_base\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapFromBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapToBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemStableSwapRouter.sol\":\"RequiemStableSwapRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RequiemStableSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./interfaces/IRequiemStableSwap.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\ncontract RequiemStableSwapRouter {\\n    using SafeERC20 for IERC20;\\n\\n    function calculateConvert(\\n        IRequiemStableSwap fromPool,\\n        IRequiemStableSwap toPool,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        uint256 fromPoolLength = fromPool.getNumberOfTokens();\\n        uint256[] memory amounts = fromPool.calculateRemoveLiquidity(address(this), amount);\\n        uint256[] memory meta_amounts = new uint256[](fromPoolLength);\\n        for (uint8 i = 0; i < fromPoolLength; i++) {\\n            IERC20 fromCoin = fromPool.getToken(i);\\n            uint256 toCoinIndex = toPool.getTokenIndex(address(fromCoin));\\n            meta_amounts[toCoinIndex] = amounts[i];\\n        }\\n        return toPool.calculateTokenAmount(meta_amounts, true);\\n    }\\n\\n    function convert(\\n        IRequiemStableSwap fromPool,\\n        IRequiemStableSwap toPool,\\n        uint256 amount,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        uint256 fromPoolLength = fromPool.getNumberOfTokens();\\n        uint256 toPoolLength = toPool.getNumberOfTokens();\\n        require(address(fromPool) != address(toPool), \\\"fromPool = toPool\\\");\\n        require(fromPoolLength == toPoolLength, \\\"poolTokensLengthMissmatch\\\");\\n        IERC20 fromToken = fromPool.getLpToken();\\n        IERC20 toToken = toPool.getLpToken();\\n        uint256[] memory min_amounts = new uint256[](fromPoolLength);\\n        // validate token\\n        for (uint8 i = 0; i < fromPoolLength; i++) {\\n            IERC20 coin = fromPool.getToken(i);\\n            toPool.getTokenIndex(address(coin));\\n        }\\n        fromToken.transferFrom(msg.sender, address(this), amount);\\n        fromToken.safeIncreaseAllowance(address(fromPool), amount);\\n        fromPool.removeLiquidity(amount, min_amounts, deadline);\\n\\n        uint256[] memory meta_amounts = new uint256[](toPoolLength);\\n\\n        for (uint8 i = 0; i < toPoolLength; i++) {\\n            IERC20 coin = toPool.getToken(i);\\n            uint256 addBalance = coin.balanceOf(address(this));\\n            coin.safeIncreaseAllowance(address(toPool), addBalance);\\n            meta_amounts[i] = addBalance;\\n        }\\n        toPool.addLiquidity(meta_amounts, minToMint, deadline);\\n\\n        uint256 lpAmount = toToken.balanceOf(address(this));\\n        toToken.transfer(msg.sender, lpAmount);\\n        return lpAmount;\\n    }\\n\\n    function addLiquidity(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 token = IERC20(pool.getLpToken());\\n        require(base_amounts.length == basePool.getNumberOfTokens(), \\\"invalidBaseAmountsLength\\\");\\n        require(meta_amounts.length == pool.getNumberOfTokens(), \\\"invalidMetaAmountsLength\\\");\\n        bool deposit_base = false;\\n        for (uint8 i = 0; i < base_amounts.length; i++) {\\n            uint256 amount = base_amounts[i];\\n            if (amount > 0) {\\n                deposit_base = true;\\n                IERC20 coin = basePool.getToken(i);\\n                coin.safeTransferFrom(msg.sender, address(this), amount);\\n                uint256 transferred = coin.balanceOf(address(this));\\n                coin.safeIncreaseAllowance(address(basePool), transferred);\\n                base_amounts[i] = transferred;\\n            }\\n        }\\n        if (deposit_base) {\\n            basePool.addLiquidity(base_amounts, 0, deadline);\\n        }\\n\\n        for (uint8 i = 0; i < meta_amounts.length; i++) {\\n            IERC20 coin = pool.getToken(i);\\n            if (meta_amounts[i] > 0) {\\n                coin.safeTransferFrom(msg.sender, address(this), meta_amounts[i]);\\n            }\\n            uint256 transferred = coin.balanceOf(address(this));\\n            coin.safeIncreaseAllowance(address(pool), transferred);\\n            meta_amounts[i] = transferred;\\n        }\\n        pool.addLiquidity(meta_amounts, minToMint, deadline);\\n        uint256 lpAmount = token.balanceOf(address(this));\\n        token.transfer(msg.sender, lpAmount);\\n        return lpAmount;\\n    }\\n\\n    function removeLiquidity(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256 _amount,\\n        uint256[] calldata min_amounts_meta,\\n        uint256[] calldata min_amounts_base,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts, uint256[] memory base_amounts) {\\n        IERC20 token = pool.getLpToken();\\n        IERC20 baseToken = basePool.getLpToken();\\n        token.transferFrom(msg.sender, address(this), _amount);\\n        token.safeIncreaseAllowance(address(pool), _amount);\\n        pool.removeLiquidity(_amount, min_amounts_meta, deadline);\\n        uint256 _base_amount = baseToken.balanceOf(address(this));\\n        baseToken.safeIncreaseAllowance(address(basePool), _base_amount);\\n\\n        basePool.removeLiquidity(_base_amount, min_amounts_base, deadline);\\n        // Transfer all coins out\\n        amounts = new uint256[](pool.getNumberOfTokens());\\n        for (uint8 i = 0; i < pool.getNumberOfTokens(); i++) {\\n            IERC20 coin = pool.getToken(i);\\n            amounts[i] = coin.balanceOf(address(this));\\n            if (amounts[i] > 0) {\\n                coin.safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        for (uint8 i = 0; i < basePool.getNumberOfTokens(); i++) {\\n            IERC20 coin = basePool.getToken(i);\\n            base_amounts[i] = coin.balanceOf(address(this));\\n            if (base_amounts[i] > 0) {\\n                coin.safeTransfer(msg.sender, base_amounts[i]);\\n            }\\n        }\\n    }\\n\\n    function calculateTokenAmount(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts,\\n        bool is_deposit\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 _base_tokens = basePool.calculateTokenAmount(base_amounts, is_deposit);\\n        meta_amounts[baseTokenIndex] = meta_amounts[baseTokenIndex] + _base_tokens;\\n        return pool.calculateTokenAmount(meta_amounts, is_deposit);\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256 amount\\n    ) external view returns (uint256[] memory meta_amounts, uint256[] memory base_amounts) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        meta_amounts = pool.calculateRemoveLiquidity(address(this), amount);\\n        uint256 lpAmount = meta_amounts[baseTokenIndex];\\n        meta_amounts[baseTokenIndex] = 0;\\n        base_amounts = basePool.calculateRemoveLiquidity(address(this), lpAmount);\\n    }\\n\\n    function swapFromBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        base_amounts[tokenIndexFrom] = dx;\\n        IERC20 coin = basePool.getToken(tokenIndexFrom);\\n        coin.safeTransferFrom(msg.sender, address(this), dx);\\n        coin.safeIncreaseAllowance(address(basePool), dx);\\n        uint256 baseLpAmount = basePool.addLiquidity(base_amounts, 0, deadline);\\n        if (baseTokenIndex != tokenIndexTo) {\\n            baseToken.safeIncreaseAllowance(address(pool), baseLpAmount);\\n            pool.swap(baseTokenIndex, tokenIndexTo, baseLpAmount, minDy, address(this),deadline);\\n        }\\n        IERC20 coinTo = pool.getToken(tokenIndexTo);\\n        uint256 amountOut = coinTo.balanceOf(address(this));\\n        coinTo.safeTransfer(msg.sender, amountOut);\\n        return amountOut;\\n    }\\n\\n    function calculateSwapFromBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        base_amounts[tokenIndexFrom] = dx;\\n        uint256 baseLpAmount = basePool.calculateTokenAmount(base_amounts, true);\\n        if (baseTokenIndex == tokenIndexTo) {\\n            return baseLpAmount;\\n        }\\n        return pool.calculateSwap(baseTokenIndex, tokenIndexTo, baseLpAmount);\\n    }\\n\\n    function swapToBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        IERC20 coin = pool.getToken(tokenIndexFrom);\\n        coin.safeTransferFrom(msg.sender, address(this), dx);\\n        uint256 tokenLPAmount = dx;\\n        if (baseTokenIndex != tokenIndexFrom) {\\n            coin.safeIncreaseAllowance(address(pool), dx);\\n            tokenLPAmount = pool.swap(tokenIndexFrom, baseTokenIndex, dx, 0,address(this), deadline);\\n        }\\n        baseToken.safeIncreaseAllowance(address(basePool), tokenLPAmount);\\n        basePool.removeLiquidityOneToken(tokenLPAmount, tokenIndexTo, minDy, deadline);\\n        IERC20 coinTo = basePool.getToken(tokenIndexTo);\\n        uint256 amountOut = coinTo.balanceOf(address(this));\\n        coinTo.safeTransfer(msg.sender, amountOut);\\n        return amountOut;\\n    }\\n\\n    function calculateSwapToBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 tokenLPAmount = dx;\\n        if (baseTokenIndex != tokenIndexFrom) {\\n            tokenLPAmount = pool.calculateSwap(tokenIndexFrom, baseTokenIndex, dx);\\n        }\\n        return basePool.calculateRemoveLiquidityOneToken(address(this), tokenLPAmount, tokenIndexTo);\\n    }\\n}\\n\",\"keccak256\":\"0x3c8c0d1fb77d4ac414a6efb7ff94bc6e9b7ee7a5832383179fa261feff4760e1\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x53949e9a0715f73387ca0d7df5e6f858708953f8dd671225ca5a8bbf8198fd60\",\"license\":\"MIT\"},\"contracts/interfaces/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.11;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x22f039855f27fa60f41ff2a5590b87a610cefdd0cf3f9b061e8c3b5f6c38c45b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event TokenExchange(address indexed buyer, uint256 soldId, uint256 tokensSold, uint256 boughtId, uint256 tokensBought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 flashFee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0xb36852aa7fd09252306bde9af5ad98c5ca6b32c3b04115b410b0767d804ffcab\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SAFE_ERC20_CALL_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xaaebe2c24e51412b65b06cf4df77b6cb64c16f7c5adfc247e5cd8dc11350949f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506134a3806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063643abb8611610066578063643abb861461012757806377269e291461013a578063797018211461014d5780638a311c5714610160578063ff9693221461017357600080fd5b80630c8b2216146100a35780630d6307eb146100cd57806324a5bf21146100ee5780633214b8c91461010157806338c7897314610114575b600080fd5b6100b66100b1366004612cf4565b610186565b6040516100c4929190612d70565b60405180910390f35b6100e06100db366004612e69565b610398565b6040519081526020016100c4565b6100b66100fc366004612f4e565b610a57565b6100e061010f366004613002565b611222565b6100e0610122366004613066565b61140c565b6100e0610135366004612cf4565b61185a565b6100e06101483660046130eb565b611b3c565b6100e061015b366004613188565b611cfc565b6100e061016e366004613002565b612464565b6100e0610181366004613066565b612719565b6060806000846001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ed91906131d9565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918816906366c0bd2490602401602060405180830381865afa158015610239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025d91906131fd565b604051637c61e56160e01b8152306004820152602481018790529091506001600160a01b03881690637c61e56190604401600060405180830381865afa1580156102ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102d3919081019061321a565b93506000848260ff16815181106102ec576102ec61329f565b602002602001015190506000858360ff168151811061030d5761030d61329f565b6020908102919091010152604051637c61e56160e01b8152306004820152602481018290526001600160a01b03881690637c61e56190604401600060405180830381865afa158015610363573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261038b919081019061321a565b9350505050935093915050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fd91906131d9565b9050866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561043d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046191906132b5565b8551146104b55760405162461bcd60e51b815260206004820152601860248201527f696e76616c696442617365416d6f756e74734c656e677468000000000000000060448201526064015b60405180910390fd5b876001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051791906132b5565b8651146105665760405162461bcd60e51b815260206004820152601860248201527f696e76616c69644d657461416d6f756e74734c656e677468000000000000000060448201526064016104ac565b6000805b86518160ff1610156106e1576000878260ff168151811061058d5761058d61329f565b6020026020010151905060008111156106ce5760405162415c3360e91b815260ff83166004820152600193506000906001600160a01b038c16906382b8660090602401602060405180830381865afa1580156105ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061191906131d9565b90506106286001600160a01b038216333085612aad565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561066f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069391906132b5565b90506106a96001600160a01b0383168d83612b1e565b808a8560ff16815181106106bf576106bf61329f565b60200260200101818152505050505b50806106d9816132e4565b91505061056a565b50801561075e57604051634d49e87d60e01b81526001600160a01b03891690634d49e87d906107199089906000908990600401613304565b6020604051808303816000875af1158015610738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075c91906132b5565b505b60005b87518160ff1610156108f55760405162415c3360e91b815260ff821660048201526000906001600160a01b038c16906382b8660090602401602060405180830381865afa1580156107b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107da91906131d9565b90506000898360ff16815181106107f3576107f361329f565b6020026020010151111561083d5761083d33308b8560ff168151811061081b5761081b61329f565b6020026020010151846001600160a01b0316612aad909392919063ffffffff16565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a891906132b5565b90506108be6001600160a01b0383168d83612b1e565b808a8460ff16815181106108d4576108d461329f565b602002602001018181525050505080806108ed906132e4565b915050610761565b50604051634d49e87d60e01b81526001600160a01b038a1690634d49e87d90610926908a9089908990600401613304565b6020604051808303816000875af1158015610945573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096991906132b5565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156109b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d591906132b5565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0384169063a9059cbb906044016020604051808303816000875af1158015610a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a499190613329565b509998505050505050505050565b60608060008a6001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abe91906131d9565b905060008a6001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2491906131d9565b6040516323b872dd60e01b8152336004820152306024820152604481018c90529091506001600160a01b038316906323b872dd906064016020604051808303816000875af1158015610b7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9e9190613329565b50610bb36001600160a01b0383168d8c612b1e565b60405163031cd52b60e41b81526001600160a01b038d16906331cd52b090610be5908d908d908d908b90600401613346565b6000604051808303816000875af1158015610c04573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c2c919081019061321a565b506040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9891906132b5565b9050610cae6001600160a01b0383168d83612b1e565b60405163031cd52b60e41b81526001600160a01b038d16906331cd52b090610ce09084908c908c908c90600401613346565b6000604051808303816000875af1158015610cff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d27919081019061321a565b508c6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8a91906132b5565b6001600160401b03811115610da157610da1612d95565b604051908082528060200260200182016040528015610dca578160200160208202803683370190505b50945060005b8d6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3291906132b5565b8160ff161015610fb25760008e6001600160a01b03166382b86600836040518263ffffffff1660e01b8152600401610e73919060ff91909116815260200190565b602060405180830381865afa158015610e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb491906131d9565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa158015610efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1f91906132b5565b878360ff1681518110610f3457610f3461329f565b6020026020010181815250506000878360ff1681518110610f5757610f5761329f565b60200260200101511115610f9f57610f9f33888460ff1681518110610f7e57610f7e61329f565b6020026020010151836001600160a01b0316612bd09092919063ffffffff16565b5080610faa816132e4565b915050610dd0565b508b6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ff1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101591906132b5565b6001600160401b0381111561102c5761102c612d95565b604051908082528060200260200182016040528015611055578160200160208202803683370190505b50935060005b8c6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd91906132b5565b8160ff1610156112115760405162415c3360e91b815260ff821660048201526000906001600160a01b038f16906382b8660090602401602060405180830381865afa158015611110573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113491906131d9565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa15801561117b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119f91906132b5565b868360ff16815181106111b4576111b461329f565b6020026020010181815250506000868360ff16815181106111d7576111d761329f565b602002602001015111156111fe576111fe33878460ff1681518110610f7e57610f7e61329f565b5080611209816132e4565b91505061105b565b505050509850989650505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611263573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128791906131d9565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd2490602401602060405180830381865afa1580156112d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f791906131fd565b90508360ff808316908816146113845760405163a95b089f60e01b815260ff808916600483015283166024820152604481018690526001600160a01b038a169063a95b089f90606401602060405180830381865afa15801561135d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138191906132b5565b90505b604051630262267d60e61b81523060048201526024810182905260ff871660448201526001600160a01b038916906398899f40906064015b602060405180830381865afa1580156113d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fd91906132b5565b93505050505b95945050505050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561144d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147191906131d9565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918b16906366c0bd2490602401602060405180830381865afa1580156114bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e191906131fd565b90506000896001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611523573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154791906132b5565b6001600160401b0381111561155e5761155e612d95565b604051908082528060200260200182016040528015611587578160200160208202803683370190505b50905086818a60ff16815181106115a0576115a061329f565b602090810291909101015260405162415c3360e91b815260ff8a1660048201526000906001600160a01b038c16906382b8660090602401602060405180830381865afa1580156115f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161891906131d9565b905061162f6001600160a01b03821633308b612aad565b6116436001600160a01b0382168c8a612b1e565b604051634d49e87d60e01b81526000906001600160a01b038d1690634d49e87d9061167690869085908c90600401613304565b6020604051808303816000875af1158015611695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b991906132b5565b90508960ff168460ff1614611757576116dc6001600160a01b0386168e83612b1e565b60405163bfd3956b60e01b81526001600160a01b038e169063bfd3956b906117129087908e9086908e9030908f90600401613394565b6020604051808303816000875af1158015611731573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175591906132b5565b505b60405162415c3360e91b815260ff8b1660048201526000906001600160a01b038f16906382b8660090602401602060405180830381865afa1580156117a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c491906131d9565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561180e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183291906132b5565b90506118486001600160a01b0383163383612bd0565b9e9d5050505050505050505050505050565b600080846001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561189b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bf91906132b5565b604051637c61e56160e01b8152306004820152602481018590529091506000906001600160a01b03871690637c61e56190604401600060405180830381865afa158015611910573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611938919081019061321a565b90506000826001600160401b0381111561195457611954612d95565b60405190808252806020026020018201604052801561197d578160200160208202803683370190505b50905060005b838160ff161015611ac05760405162415c3360e91b815260ff821660048201526000906001600160a01b038a16906382b8660090602401602060405180830381865afa1580156119d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fb91906131d9565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918a16906366c0bd2490602401602060405180830381865afa158015611a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6b91906131fd565b60ff169050848360ff1681518110611a8557611a8561329f565b6020026020010151848281518110611a9f57611a9f61329f565b60200260200101818152505050508080611ab8906132e4565b915050611983565b50604051637355940360e11b81526001600160a01b0387169063e6ab280690611af09084906001906004016133cd565b602060405180830381865afa158015611b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3191906132b5565b979650505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba191906131d9565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd2490602401602060405180830381865afa158015611bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1191906131fd565b90506000876001600160a01b031663e6ab280687876040518363ffffffff1660e01b8152600401611c439291906133cd565b602060405180830381865afa158015611c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8491906132b5565b905080878360ff1681518110611c9c57611c9c61329f565b6020026020010151611cae91906133f1565b878360ff1681518110611cc357611cc361329f565b6020908102919091010152604051637355940360e11b81526001600160a01b038a169063e6ab2806906113bc908a9089906004016133cd565b600080866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6191906132b5565b90506000866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc791906132b5565b9050866001600160a01b0316886001600160a01b03161415611e1f5760405162461bcd60e51b8152602060048201526011602482015270199c9bdb541bdbdb080f481d1bd41bdbdb607a1b60448201526064016104ac565b808214611e6e5760405162461bcd60e51b815260206004820152601960248201527f706f6f6c546f6b656e734c656e6774684d6973736d617463680000000000000060448201526064016104ac565b6000886001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed291906131d9565b90506000886001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3891906131d9565b90506000846001600160401b03811115611f5457611f54612d95565b604051908082528060200260200182016040528015611f7d578160200160208202803683370190505b50905060005b858160ff16101561207e5760405162415c3360e91b815260ff821660048201526000906001600160a01b038e16906382b8660090602401602060405180830381865afa158015611fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffb91906131d9565b6040516319b02f4960e21b81526001600160a01b038083166004830152919250908d16906366c0bd2490602401602060405180830381865afa158015612045573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206991906131fd565b50508080612076906132e4565b915050611f83565b506040516323b872dd60e01b8152336004820152306024820152604481018a90526001600160a01b038416906323b872dd906064016020604051808303816000875af11580156120d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f69190613329565b5061210b6001600160a01b0384168c8b612b1e565b60405163031cd52b60e41b81526001600160a01b038c16906331cd52b09061213b908c9085908c90600401613409565b6000604051808303816000875af115801561215a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612182919081019061321a565b506000846001600160401b0381111561219d5761219d612d95565b6040519080825280602002602001820160405280156121c6578160200160208202803683370190505b50905060005b858160ff1610156122ff5760405162415c3360e91b815260ff821660048201526000906001600160a01b038e16906382b8660090602401602060405180830381865afa158015612220573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224491906131d9565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561228e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b291906132b5565b90506122c86001600160a01b0383168f83612b1e565b80848460ff16815181106122de576122de61329f565b602002602001018181525050505080806122f7906132e4565b9150506121cc565b50604051634d49e87d60e01b81526001600160a01b038c1690634d49e87d906123309084908d908d90600401613304565b6020604051808303816000875af115801561234f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237391906132b5565b506040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa1580156123bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123df91906132b5565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0385169063a9059cbb906044016020604051808303816000875af115801561242f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124539190613329565b509c9b505050505050505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c991906131d9565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd2490602401602060405180830381865afa158015612515573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253991906131fd565b90506000876001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561257b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259f91906132b5565b6001600160401b038111156125b6576125b6612d95565b6040519080825280602002602001820160405280156125df578160200160208202803683370190505b50905084818860ff16815181106125f8576125f861329f565b6020908102919091010152604051637355940360e11b81526000906001600160a01b038a169063e6ab2806906126359085906001906004016133cd565b602060405180830381865afa158015612652573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267691906132b5565b90508660ff168360ff16141561269157935061140392505050565b60405163a95b089f60e01b815260ff808516600483015288166024820152604481018290526001600160a01b038b169063a95b089f90606401602060405180830381865afa1580156126e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270b91906132b5565b9a9950505050505050505050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561275a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277e91906131d9565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918b16906366c0bd2490602401602060405180830381865afa1580156127ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ee91906131fd565b60405162415c3360e91b815260ff8a1660048201529091506000906001600160a01b038c16906382b8660090602401602060405180830381865afa15801561283a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285e91906131d9565b90506128756001600160a01b03821633308a612aad565b8660ff838116908b1614612914576128976001600160a01b0383168d8a612b1e565b60405163bfd3956b60e01b81526001600160a01b038d169063bfd3956b906128ce908d9087908d9060009030908e90600401613394565b6020604051808303816000875af11580156128ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291191906132b5565b90505b6129286001600160a01b0385168c83612b1e565b6040516301f1d0ab60e51b81526004810182905260ff8a16602482015260448101889052606481018790526001600160a01b038c1690633e3a1560906084016020604051808303816000875af1158015612986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129aa91906132b5565b5060405162415c3360e91b815260ff8a1660048201526000906001600160a01b038d16906382b8660090602401602060405180830381865afa1580156129f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1891906131d9565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8691906132b5565b9050612a9c6001600160a01b0383163383612bd0565b9d9c50505050505050505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052612b189085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612c05565b50505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9391906132b5565b612b9d91906133f1565b6040516001600160a01b038516602482015260448101829052909150612b1890859063095ea7b360e01b90606401612ae1565b6040516001600160a01b038316602482015260448101829052612c0090849063a9059cbb60e01b90606401612ae1565b505050565b600080836001600160a01b031683604051612c209190613432565b6000604051808303816000865af19150503d8060008114612c5d576040519150601f19603f3d011682016040523d82523d6000602084013e612c62565b606091505b50915091506000821415612c7a573d6000803e3d6000fd5b80511580612c97575080806020019051810190612c979190613329565b612b185760405162461bcd60e51b815260206004820152601660248201527514d0519157d15490cc8c17d0d0531317d1905253115160521b60448201526064016104ac565b6001600160a01b0381168114612cf157600080fd5b50565b600080600060608486031215612d0957600080fd5b8335612d1481612cdc565b92506020840135612d2481612cdc565b929592945050506040919091013590565b600081518084526020808501945080840160005b83811015612d6557815187529582019590820190600101612d49565b509495945050505050565b604081526000612d836040830185612d35565b82810360208401526114038185612d35565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612dd357612dd3612d95565b604052919050565b60006001600160401b03821115612df457612df4612d95565b5060051b60200190565b600082601f830112612e0f57600080fd5b81356020612e24612e1f83612ddb565b612dab565b82815260059290921b84018101918181019086841115612e4357600080fd5b8286015b84811015612e5e5780358352918301918301612e47565b509695505050505050565b60008060008060008060c08789031215612e8257600080fd5b8635612e8d81612cdc565b95506020870135612e9d81612cdc565b945060408701356001600160401b0380821115612eb957600080fd5b612ec58a838b01612dfe565b95506060890135915080821115612edb57600080fd5b50612ee889828a01612dfe565b9350506080870135915060a087013590509295509295509295565b60008083601f840112612f1557600080fd5b5081356001600160401b03811115612f2c57600080fd5b6020830191508360208260051b8501011115612f4757600080fd5b9250929050565b60008060008060008060008060c0898b031215612f6a57600080fd5b8835612f7581612cdc565b97506020890135612f8581612cdc565b96506040890135955060608901356001600160401b0380821115612fa857600080fd5b612fb48c838d01612f03565b909750955060808b0135915080821115612fcd57600080fd5b50612fda8b828c01612f03565b999c989b50969995989497949560a00135949350505050565b60ff81168114612cf157600080fd5b600080600080600060a0868803121561301a57600080fd5b853561302581612cdc565b9450602086013561303581612cdc565b9350604086013561304581612ff3565b9250606086013561305581612ff3565b949793965091946080013592915050565b600080600080600080600060e0888a03121561308157600080fd5b873561308c81612cdc565b9650602088013561309c81612cdc565b955060408801356130ac81612ff3565b945060608801356130bc81612ff3565b9699959850939660808101359560a0820135955060c0909101359350915050565b8015158114612cf157600080fd5b600080600080600060a0868803121561310357600080fd5b853561310e81612cdc565b9450602086013561311e81612cdc565b935060408601356001600160401b038082111561313a57600080fd5b61314689838a01612dfe565b9450606088013591508082111561315c57600080fd5b5061316988828901612dfe565b925050608086013561317a816130dd565b809150509295509295909350565b600080600080600060a086880312156131a057600080fd5b85356131ab81612cdc565b945060208601356131bb81612cdc565b94979496505050506040830135926060810135926080909101359150565b6000602082840312156131eb57600080fd5b81516131f681612cdc565b9392505050565b60006020828403121561320f57600080fd5b81516131f681612ff3565b6000602080838503121561322d57600080fd5b82516001600160401b0381111561324357600080fd5b8301601f8101851361325457600080fd5b8051613262612e1f82612ddb565b81815260059190911b8201830190838101908783111561328157600080fd5b928401925b82841015611b3157835182529284019290840190613286565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156132c757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8114156132fb576132fb6132ce565b60010192915050565b6060815260006133176060830186612d35565b60208301949094525060400152919050565b60006020828403121561333b57600080fd5b81516131f6816130dd565b848152606060208201819052810183905260006001600160fb1b0384111561336d57600080fd5b8360051b808660808501376000908301608001908152604090920192909252949350505050565b60ff9687168152949095166020850152604084019290925260608301526001600160a01b0316608082015260a081019190915260c00190565b6040815260006133e06040830185612d35565b905082151560208301529392505050565b60008219821115613404576134046132ce565b500190565b8381526060602082015260006134226060830185612d35565b9050826040830152949350505050565b6000825160005b818110156134535760208186018101518583015201613439565b81811115613462576000828501525b50919091019291505056fea26469706673582212208be9081f769864eff197f7de440deb495d88c738a0ad5c563df7c825671281bd64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063643abb8611610066578063643abb861461012757806377269e291461013a578063797018211461014d5780638a311c5714610160578063ff9693221461017357600080fd5b80630c8b2216146100a35780630d6307eb146100cd57806324a5bf21146100ee5780633214b8c91461010157806338c7897314610114575b600080fd5b6100b66100b1366004612cf4565b610186565b6040516100c4929190612d70565b60405180910390f35b6100e06100db366004612e69565b610398565b6040519081526020016100c4565b6100b66100fc366004612f4e565b610a57565b6100e061010f366004613002565b611222565b6100e0610122366004613066565b61140c565b6100e0610135366004612cf4565b61185a565b6100e06101483660046130eb565b611b3c565b6100e061015b366004613188565b611cfc565b6100e061016e366004613002565b612464565b6100e0610181366004613066565b612719565b6060806000846001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ed91906131d9565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918816906366c0bd2490602401602060405180830381865afa158015610239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025d91906131fd565b604051637c61e56160e01b8152306004820152602481018790529091506001600160a01b03881690637c61e56190604401600060405180830381865afa1580156102ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102d3919081019061321a565b93506000848260ff16815181106102ec576102ec61329f565b602002602001015190506000858360ff168151811061030d5761030d61329f565b6020908102919091010152604051637c61e56160e01b8152306004820152602481018290526001600160a01b03881690637c61e56190604401600060405180830381865afa158015610363573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261038b919081019061321a565b9350505050935093915050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fd91906131d9565b9050866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561043d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046191906132b5565b8551146104b55760405162461bcd60e51b815260206004820152601860248201527f696e76616c696442617365416d6f756e74734c656e677468000000000000000060448201526064015b60405180910390fd5b876001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051791906132b5565b8651146105665760405162461bcd60e51b815260206004820152601860248201527f696e76616c69644d657461416d6f756e74734c656e677468000000000000000060448201526064016104ac565b6000805b86518160ff1610156106e1576000878260ff168151811061058d5761058d61329f565b6020026020010151905060008111156106ce5760405162415c3360e91b815260ff83166004820152600193506000906001600160a01b038c16906382b8660090602401602060405180830381865afa1580156105ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061191906131d9565b90506106286001600160a01b038216333085612aad565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561066f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069391906132b5565b90506106a96001600160a01b0383168d83612b1e565b808a8560ff16815181106106bf576106bf61329f565b60200260200101818152505050505b50806106d9816132e4565b91505061056a565b50801561075e57604051634d49e87d60e01b81526001600160a01b03891690634d49e87d906107199089906000908990600401613304565b6020604051808303816000875af1158015610738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075c91906132b5565b505b60005b87518160ff1610156108f55760405162415c3360e91b815260ff821660048201526000906001600160a01b038c16906382b8660090602401602060405180830381865afa1580156107b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107da91906131d9565b90506000898360ff16815181106107f3576107f361329f565b6020026020010151111561083d5761083d33308b8560ff168151811061081b5761081b61329f565b6020026020010151846001600160a01b0316612aad909392919063ffffffff16565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a891906132b5565b90506108be6001600160a01b0383168d83612b1e565b808a8460ff16815181106108d4576108d461329f565b602002602001018181525050505080806108ed906132e4565b915050610761565b50604051634d49e87d60e01b81526001600160a01b038a1690634d49e87d90610926908a9089908990600401613304565b6020604051808303816000875af1158015610945573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096991906132b5565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156109b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d591906132b5565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0384169063a9059cbb906044016020604051808303816000875af1158015610a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a499190613329565b509998505050505050505050565b60608060008a6001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abe91906131d9565b905060008a6001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2491906131d9565b6040516323b872dd60e01b8152336004820152306024820152604481018c90529091506001600160a01b038316906323b872dd906064016020604051808303816000875af1158015610b7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9e9190613329565b50610bb36001600160a01b0383168d8c612b1e565b60405163031cd52b60e41b81526001600160a01b038d16906331cd52b090610be5908d908d908d908b90600401613346565b6000604051808303816000875af1158015610c04573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c2c919081019061321a565b506040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9891906132b5565b9050610cae6001600160a01b0383168d83612b1e565b60405163031cd52b60e41b81526001600160a01b038d16906331cd52b090610ce09084908c908c908c90600401613346565b6000604051808303816000875af1158015610cff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d27919081019061321a565b508c6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8a91906132b5565b6001600160401b03811115610da157610da1612d95565b604051908082528060200260200182016040528015610dca578160200160208202803683370190505b50945060005b8d6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3291906132b5565b8160ff161015610fb25760008e6001600160a01b03166382b86600836040518263ffffffff1660e01b8152600401610e73919060ff91909116815260200190565b602060405180830381865afa158015610e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb491906131d9565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa158015610efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1f91906132b5565b878360ff1681518110610f3457610f3461329f565b6020026020010181815250506000878360ff1681518110610f5757610f5761329f565b60200260200101511115610f9f57610f9f33888460ff1681518110610f7e57610f7e61329f565b6020026020010151836001600160a01b0316612bd09092919063ffffffff16565b5080610faa816132e4565b915050610dd0565b508b6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ff1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101591906132b5565b6001600160401b0381111561102c5761102c612d95565b604051908082528060200260200182016040528015611055578160200160208202803683370190505b50935060005b8c6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd91906132b5565b8160ff1610156112115760405162415c3360e91b815260ff821660048201526000906001600160a01b038f16906382b8660090602401602060405180830381865afa158015611110573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113491906131d9565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa15801561117b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119f91906132b5565b868360ff16815181106111b4576111b461329f565b6020026020010181815250506000868360ff16815181106111d7576111d761329f565b602002602001015111156111fe576111fe33878460ff1681518110610f7e57610f7e61329f565b5080611209816132e4565b91505061105b565b505050509850989650505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611263573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128791906131d9565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd2490602401602060405180830381865afa1580156112d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f791906131fd565b90508360ff808316908816146113845760405163a95b089f60e01b815260ff808916600483015283166024820152604481018690526001600160a01b038a169063a95b089f90606401602060405180830381865afa15801561135d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138191906132b5565b90505b604051630262267d60e61b81523060048201526024810182905260ff871660448201526001600160a01b038916906398899f40906064015b602060405180830381865afa1580156113d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fd91906132b5565b93505050505b95945050505050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561144d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147191906131d9565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918b16906366c0bd2490602401602060405180830381865afa1580156114bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e191906131fd565b90506000896001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611523573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154791906132b5565b6001600160401b0381111561155e5761155e612d95565b604051908082528060200260200182016040528015611587578160200160208202803683370190505b50905086818a60ff16815181106115a0576115a061329f565b602090810291909101015260405162415c3360e91b815260ff8a1660048201526000906001600160a01b038c16906382b8660090602401602060405180830381865afa1580156115f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161891906131d9565b905061162f6001600160a01b03821633308b612aad565b6116436001600160a01b0382168c8a612b1e565b604051634d49e87d60e01b81526000906001600160a01b038d1690634d49e87d9061167690869085908c90600401613304565b6020604051808303816000875af1158015611695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b991906132b5565b90508960ff168460ff1614611757576116dc6001600160a01b0386168e83612b1e565b60405163bfd3956b60e01b81526001600160a01b038e169063bfd3956b906117129087908e9086908e9030908f90600401613394565b6020604051808303816000875af1158015611731573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175591906132b5565b505b60405162415c3360e91b815260ff8b1660048201526000906001600160a01b038f16906382b8660090602401602060405180830381865afa1580156117a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c491906131d9565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561180e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183291906132b5565b90506118486001600160a01b0383163383612bd0565b9e9d5050505050505050505050505050565b600080846001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561189b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bf91906132b5565b604051637c61e56160e01b8152306004820152602481018590529091506000906001600160a01b03871690637c61e56190604401600060405180830381865afa158015611910573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611938919081019061321a565b90506000826001600160401b0381111561195457611954612d95565b60405190808252806020026020018201604052801561197d578160200160208202803683370190505b50905060005b838160ff161015611ac05760405162415c3360e91b815260ff821660048201526000906001600160a01b038a16906382b8660090602401602060405180830381865afa1580156119d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fb91906131d9565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918a16906366c0bd2490602401602060405180830381865afa158015611a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6b91906131fd565b60ff169050848360ff1681518110611a8557611a8561329f565b6020026020010151848281518110611a9f57611a9f61329f565b60200260200101818152505050508080611ab8906132e4565b915050611983565b50604051637355940360e11b81526001600160a01b0387169063e6ab280690611af09084906001906004016133cd565b602060405180830381865afa158015611b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3191906132b5565b979650505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba191906131d9565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd2490602401602060405180830381865afa158015611bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1191906131fd565b90506000876001600160a01b031663e6ab280687876040518363ffffffff1660e01b8152600401611c439291906133cd565b602060405180830381865afa158015611c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8491906132b5565b905080878360ff1681518110611c9c57611c9c61329f565b6020026020010151611cae91906133f1565b878360ff1681518110611cc357611cc361329f565b6020908102919091010152604051637355940360e11b81526001600160a01b038a169063e6ab2806906113bc908a9089906004016133cd565b600080866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6191906132b5565b90506000866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc791906132b5565b9050866001600160a01b0316886001600160a01b03161415611e1f5760405162461bcd60e51b8152602060048201526011602482015270199c9bdb541bdbdb080f481d1bd41bdbdb607a1b60448201526064016104ac565b808214611e6e5760405162461bcd60e51b815260206004820152601960248201527f706f6f6c546f6b656e734c656e6774684d6973736d617463680000000000000060448201526064016104ac565b6000886001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed291906131d9565b90506000886001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3891906131d9565b90506000846001600160401b03811115611f5457611f54612d95565b604051908082528060200260200182016040528015611f7d578160200160208202803683370190505b50905060005b858160ff16101561207e5760405162415c3360e91b815260ff821660048201526000906001600160a01b038e16906382b8660090602401602060405180830381865afa158015611fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffb91906131d9565b6040516319b02f4960e21b81526001600160a01b038083166004830152919250908d16906366c0bd2490602401602060405180830381865afa158015612045573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206991906131fd565b50508080612076906132e4565b915050611f83565b506040516323b872dd60e01b8152336004820152306024820152604481018a90526001600160a01b038416906323b872dd906064016020604051808303816000875af11580156120d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f69190613329565b5061210b6001600160a01b0384168c8b612b1e565b60405163031cd52b60e41b81526001600160a01b038c16906331cd52b09061213b908c9085908c90600401613409565b6000604051808303816000875af115801561215a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612182919081019061321a565b506000846001600160401b0381111561219d5761219d612d95565b6040519080825280602002602001820160405280156121c6578160200160208202803683370190505b50905060005b858160ff1610156122ff5760405162415c3360e91b815260ff821660048201526000906001600160a01b038e16906382b8660090602401602060405180830381865afa158015612220573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224491906131d9565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561228e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b291906132b5565b90506122c86001600160a01b0383168f83612b1e565b80848460ff16815181106122de576122de61329f565b602002602001018181525050505080806122f7906132e4565b9150506121cc565b50604051634d49e87d60e01b81526001600160a01b038c1690634d49e87d906123309084908d908d90600401613304565b6020604051808303816000875af115801561234f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237391906132b5565b506040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa1580156123bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123df91906132b5565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0385169063a9059cbb906044016020604051808303816000875af115801561242f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124539190613329565b509c9b505050505050505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c991906131d9565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd2490602401602060405180830381865afa158015612515573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253991906131fd565b90506000876001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561257b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259f91906132b5565b6001600160401b038111156125b6576125b6612d95565b6040519080825280602002602001820160405280156125df578160200160208202803683370190505b50905084818860ff16815181106125f8576125f861329f565b6020908102919091010152604051637355940360e11b81526000906001600160a01b038a169063e6ab2806906126359085906001906004016133cd565b602060405180830381865afa158015612652573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267691906132b5565b90508660ff168360ff16141561269157935061140392505050565b60405163a95b089f60e01b815260ff808516600483015288166024820152604481018290526001600160a01b038b169063a95b089f90606401602060405180830381865afa1580156126e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270b91906132b5565b9a9950505050505050505050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561275a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277e91906131d9565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918b16906366c0bd2490602401602060405180830381865afa1580156127ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ee91906131fd565b60405162415c3360e91b815260ff8a1660048201529091506000906001600160a01b038c16906382b8660090602401602060405180830381865afa15801561283a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285e91906131d9565b90506128756001600160a01b03821633308a612aad565b8660ff838116908b1614612914576128976001600160a01b0383168d8a612b1e565b60405163bfd3956b60e01b81526001600160a01b038d169063bfd3956b906128ce908d9087908d9060009030908e90600401613394565b6020604051808303816000875af11580156128ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291191906132b5565b90505b6129286001600160a01b0385168c83612b1e565b6040516301f1d0ab60e51b81526004810182905260ff8a16602482015260448101889052606481018790526001600160a01b038c1690633e3a1560906084016020604051808303816000875af1158015612986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129aa91906132b5565b5060405162415c3360e91b815260ff8a1660048201526000906001600160a01b038d16906382b8660090602401602060405180830381865afa1580156129f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1891906131d9565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8691906132b5565b9050612a9c6001600160a01b0383163383612bd0565b9d9c50505050505050505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052612b189085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612c05565b50505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9391906132b5565b612b9d91906133f1565b6040516001600160a01b038516602482015260448101829052909150612b1890859063095ea7b360e01b90606401612ae1565b6040516001600160a01b038316602482015260448101829052612c0090849063a9059cbb60e01b90606401612ae1565b505050565b600080836001600160a01b031683604051612c209190613432565b6000604051808303816000865af19150503d8060008114612c5d576040519150601f19603f3d011682016040523d82523d6000602084013e612c62565b606091505b50915091506000821415612c7a573d6000803e3d6000fd5b80511580612c97575080806020019051810190612c979190613329565b612b185760405162461bcd60e51b815260206004820152601660248201527514d0519157d15490cc8c17d0d0531317d1905253115160521b60448201526064016104ac565b6001600160a01b0381168114612cf157600080fd5b50565b600080600060608486031215612d0957600080fd5b8335612d1481612cdc565b92506020840135612d2481612cdc565b929592945050506040919091013590565b600081518084526020808501945080840160005b83811015612d6557815187529582019590820190600101612d49565b509495945050505050565b604081526000612d836040830185612d35565b82810360208401526114038185612d35565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612dd357612dd3612d95565b604052919050565b60006001600160401b03821115612df457612df4612d95565b5060051b60200190565b600082601f830112612e0f57600080fd5b81356020612e24612e1f83612ddb565b612dab565b82815260059290921b84018101918181019086841115612e4357600080fd5b8286015b84811015612e5e5780358352918301918301612e47565b509695505050505050565b60008060008060008060c08789031215612e8257600080fd5b8635612e8d81612cdc565b95506020870135612e9d81612cdc565b945060408701356001600160401b0380821115612eb957600080fd5b612ec58a838b01612dfe565b95506060890135915080821115612edb57600080fd5b50612ee889828a01612dfe565b9350506080870135915060a087013590509295509295509295565b60008083601f840112612f1557600080fd5b5081356001600160401b03811115612f2c57600080fd5b6020830191508360208260051b8501011115612f4757600080fd5b9250929050565b60008060008060008060008060c0898b031215612f6a57600080fd5b8835612f7581612cdc565b97506020890135612f8581612cdc565b96506040890135955060608901356001600160401b0380821115612fa857600080fd5b612fb48c838d01612f03565b909750955060808b0135915080821115612fcd57600080fd5b50612fda8b828c01612f03565b999c989b50969995989497949560a00135949350505050565b60ff81168114612cf157600080fd5b600080600080600060a0868803121561301a57600080fd5b853561302581612cdc565b9450602086013561303581612cdc565b9350604086013561304581612ff3565b9250606086013561305581612ff3565b949793965091946080013592915050565b600080600080600080600060e0888a03121561308157600080fd5b873561308c81612cdc565b9650602088013561309c81612cdc565b955060408801356130ac81612ff3565b945060608801356130bc81612ff3565b9699959850939660808101359560a0820135955060c0909101359350915050565b8015158114612cf157600080fd5b600080600080600060a0868803121561310357600080fd5b853561310e81612cdc565b9450602086013561311e81612cdc565b935060408601356001600160401b038082111561313a57600080fd5b61314689838a01612dfe565b9450606088013591508082111561315c57600080fd5b5061316988828901612dfe565b925050608086013561317a816130dd565b809150509295509295909350565b600080600080600060a086880312156131a057600080fd5b85356131ab81612cdc565b945060208601356131bb81612cdc565b94979496505050506040830135926060810135926080909101359150565b6000602082840312156131eb57600080fd5b81516131f681612cdc565b9392505050565b60006020828403121561320f57600080fd5b81516131f681612ff3565b6000602080838503121561322d57600080fd5b82516001600160401b0381111561324357600080fd5b8301601f8101851361325457600080fd5b8051613262612e1f82612ddb565b81815260059190911b8201830190838101908783111561328157600080fd5b928401925b82841015611b3157835182529284019290840190613286565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156132c757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8114156132fb576132fb6132ce565b60010192915050565b6060815260006133176060830186612d35565b60208301949094525060400152919050565b60006020828403121561333b57600080fd5b81516131f6816130dd565b848152606060208201819052810183905260006001600160fb1b0384111561336d57600080fd5b8360051b808660808501376000908301608001908152604090920192909252949350505050565b60ff9687168152949095166020850152604084019290925260608301526001600160a01b0316608082015260a081019190915260c00190565b6040815260006133e06040830185612d35565b905082151560208301529392505050565b60008219821115613404576134046132ce565b500190565b8381526060602082015260006134226060830185612d35565b9050826040830152949350505050565b6000825160005b818110156134535760208186018101518583015201613439565b81811115613462576000828501525b50919091019291505056fea26469706673582212208be9081f769864eff197f7de440deb495d88c738a0ad5c563df7c825671281bd64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}