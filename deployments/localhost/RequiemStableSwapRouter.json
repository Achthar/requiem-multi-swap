{
  "address": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "meta_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "fromPool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "toPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateConvert",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "meta_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapFromBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapToBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "meta_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "is_deposit",
          "type": "bool"
        }
      ],
      "name": "calculateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "fromPool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "toPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "convert",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "min_amounts_meta",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "min_amounts_base",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "base_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapFromBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract IRequiemStableSwap",
          "name": "basePool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapToBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2005a02c9c6a927efd262c74badae66daba4ab9d636902e8f3d422b36de2485a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
    "transactionIndex": 0,
    "gasUsed": "3008268",
    "logsBloom": "0x
    "blockHash": "0x4293e1c75c21992c2e6b078da6d9fb4d7b68d9d01864697426163ce807fa2706",
    "transactionHash": "0x2005a02c9c6a927efd262c74badae66daba4ab9d636902e8f3d422b36de2485a",
    "logs": [],
    "blockNumber": 31,
    "cumulativeGasUsed": "3008268",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "238606047f22772c3f8250a1182ecfba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"meta_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"fromPool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"toPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateConvert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"meta_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwapFromBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwapToBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"meta_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"is_deposit\",\"type\":\"bool\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"fromPool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"toPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"min_amounts_meta\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"min_amounts_base\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"base_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapFromBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IRequiemStableSwap\",\"name\":\"basePool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapToBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemStableSwapRouter.sol\":\"RequiemStableSwapRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/RequiemStableSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/IRequiemStableSwap.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\ncontract RequiemStableSwapRouter {\\n    using SafeERC20 for IERC20;\\n\\n    function calculateConvert(\\n        IRequiemStableSwap fromPool,\\n        IRequiemStableSwap toPool,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        uint256 fromPoolLength = fromPool.getNumberOfTokens();\\n        uint256[] memory amounts = fromPool.calculateRemoveLiquidity(address(this), amount);\\n        uint256[] memory meta_amounts = new uint256[](fromPoolLength);\\n        for (uint8 i = 0; i < fromPoolLength; i++) {\\n            IERC20 fromCoin = fromPool.getToken(i);\\n            uint256 toCoinIndex = toPool.getTokenIndex(address(fromCoin));\\n            meta_amounts[toCoinIndex] = amounts[i];\\n        }\\n        return toPool.calculateTokenAmount(meta_amounts, true);\\n    }\\n\\n    function convert(\\n        IRequiemStableSwap fromPool,\\n        IRequiemStableSwap toPool,\\n        uint256 amount,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        uint256 fromPoolLength = fromPool.getNumberOfTokens();\\n        uint256 toPoolLength = toPool.getNumberOfTokens();\\n        require(address(fromPool) != address(toPool), \\\"fromPool = toPool\\\");\\n        require(fromPoolLength == toPoolLength, \\\"poolTokensLengthMissmatch\\\");\\n        IERC20 fromToken = fromPool.getLpToken();\\n        IERC20 toToken = toPool.getLpToken();\\n        uint256[] memory min_amounts = new uint256[](fromPoolLength);\\n        // validate token\\n        for (uint8 i = 0; i < fromPoolLength; i++) {\\n            IERC20 coin = fromPool.getToken(i);\\n            toPool.getTokenIndex(address(coin));\\n        }\\n        fromToken.transferFrom(msg.sender, address(this), amount);\\n        fromToken.safeIncreaseAllowance(address(fromPool), amount);\\n        fromPool.removeLiquidity(amount, min_amounts, deadline);\\n\\n        uint256[] memory meta_amounts = new uint256[](toPoolLength);\\n\\n        for (uint8 i = 0; i < toPoolLength; i++) {\\n            IERC20 coin = toPool.getToken(i);\\n            uint256 addBalance = coin.balanceOf(address(this));\\n            coin.safeIncreaseAllowance(address(toPool), addBalance);\\n            meta_amounts[i] = addBalance;\\n        }\\n        toPool.addLiquidity(meta_amounts, minToMint, deadline);\\n\\n        uint256 lpAmount = toToken.balanceOf(address(this));\\n        toToken.transfer(msg.sender, lpAmount);\\n        return lpAmount;\\n    }\\n\\n    function addLiquidity(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 token = IERC20(pool.getLpToken());\\n        require(base_amounts.length == basePool.getNumberOfTokens(), \\\"invalidBaseAmountsLength\\\");\\n        require(meta_amounts.length == pool.getNumberOfTokens(), \\\"invalidMetaAmountsLength\\\");\\n        bool deposit_base = false;\\n        for (uint8 i = 0; i < base_amounts.length; i++) {\\n            uint256 amount = base_amounts[i];\\n            if (amount > 0) {\\n                deposit_base = true;\\n                IERC20 coin = basePool.getToken(i);\\n                coin.safeTransferFrom(msg.sender, address(this), amount);\\n                uint256 transferred = coin.balanceOf(address(this));\\n                coin.safeIncreaseAllowance(address(basePool), transferred);\\n                base_amounts[i] = transferred;\\n            }\\n        }\\n        if (deposit_base) {\\n            basePool.addLiquidity(base_amounts, 0, deadline);\\n        }\\n\\n        for (uint8 i = 0; i < meta_amounts.length; i++) {\\n            IERC20 coin = pool.getToken(i);\\n            if (meta_amounts[i] > 0) {\\n                coin.safeTransferFrom(msg.sender, address(this), meta_amounts[i]);\\n            }\\n            uint256 transferred = coin.balanceOf(address(this));\\n            coin.safeIncreaseAllowance(address(pool), transferred);\\n            meta_amounts[i] = transferred;\\n        }\\n        pool.addLiquidity(meta_amounts, minToMint, deadline);\\n        uint256 lpAmount = token.balanceOf(address(this));\\n        token.transfer(msg.sender, lpAmount);\\n        return lpAmount;\\n    }\\n\\n    function removeLiquidity(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256 _amount,\\n        uint256[] calldata min_amounts_meta,\\n        uint256[] calldata min_amounts_base,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts, uint256[] memory base_amounts) {\\n        IERC20 token = pool.getLpToken();\\n        IERC20 baseToken = basePool.getLpToken();\\n        token.transferFrom(msg.sender, address(this), _amount);\\n        token.safeIncreaseAllowance(address(pool), _amount);\\n        pool.removeLiquidity(_amount, min_amounts_meta, deadline);\\n        uint256 _base_amount = baseToken.balanceOf(address(this));\\n        baseToken.safeIncreaseAllowance(address(basePool), _base_amount);\\n\\n        basePool.removeLiquidity(_base_amount, min_amounts_base, deadline);\\n        // Transfer all coins out\\n        amounts = new uint256[](pool.getNumberOfTokens());\\n        for (uint8 i = 0; i < pool.getNumberOfTokens(); i++) {\\n            IERC20 coin = pool.getToken(i);\\n            amounts[i] = coin.balanceOf(address(this));\\n            if (amounts[i] > 0) {\\n                coin.safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        for (uint8 i = 0; i < basePool.getNumberOfTokens(); i++) {\\n            IERC20 coin = basePool.getToken(i);\\n            base_amounts[i] = coin.balanceOf(address(this));\\n            if (base_amounts[i] > 0) {\\n                coin.safeTransfer(msg.sender, base_amounts[i]);\\n            }\\n        }\\n    }\\n\\n    function calculateTokenAmount(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256[] memory meta_amounts,\\n        uint256[] memory base_amounts,\\n        bool is_deposit\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 _base_tokens = basePool.calculateTokenAmount(base_amounts, is_deposit);\\n        meta_amounts[baseTokenIndex] = meta_amounts[baseTokenIndex] + _base_tokens;\\n        return pool.calculateTokenAmount(meta_amounts, is_deposit);\\n    }\\n\\n    function calculateRemoveLiquidity(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint256 amount\\n    ) external view returns (uint256[] memory meta_amounts, uint256[] memory base_amounts) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        meta_amounts = pool.calculateRemoveLiquidity(address(this), amount);\\n        uint256 lpAmount = meta_amounts[baseTokenIndex];\\n        meta_amounts[baseTokenIndex] = 0;\\n        base_amounts = basePool.calculateRemoveLiquidity(address(this), lpAmount);\\n    }\\n\\n    function swapFromBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        base_amounts[tokenIndexFrom] = dx;\\n        IERC20 coin = basePool.getToken(tokenIndexFrom);\\n        coin.safeTransferFrom(msg.sender, address(this), dx);\\n        coin.safeIncreaseAllowance(address(basePool), dx);\\n        uint256 baseLpAmount = basePool.addLiquidity(base_amounts, 0, deadline);\\n        if (baseTokenIndex != tokenIndexTo) {\\n            baseToken.safeIncreaseAllowance(address(pool), baseLpAmount);\\n            pool.swap(baseTokenIndex, tokenIndexTo, baseLpAmount, minDy, address(this),deadline);\\n        }\\n        IERC20 coinTo = pool.getToken(tokenIndexTo);\\n        uint256 amountOut = coinTo.balanceOf(address(this));\\n        coinTo.safeTransfer(msg.sender, amountOut);\\n        return amountOut;\\n    }\\n\\n    function calculateSwapFromBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n        base_amounts[tokenIndexFrom] = dx;\\n        uint256 baseLpAmount = basePool.calculateTokenAmount(base_amounts, true);\\n        if (baseTokenIndex == tokenIndexTo) {\\n            return baseLpAmount;\\n        }\\n        return pool.calculateSwap(baseTokenIndex, tokenIndexTo, baseLpAmount);\\n    }\\n\\n    function swapToBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        IERC20 coin = pool.getToken(tokenIndexFrom);\\n        coin.safeTransferFrom(msg.sender, address(this), dx);\\n        uint256 tokenLPAmount = dx;\\n        if (baseTokenIndex != tokenIndexFrom) {\\n            coin.safeIncreaseAllowance(address(pool), dx);\\n            tokenLPAmount = pool.swap(tokenIndexFrom, baseTokenIndex, dx, 0,address(this), deadline);\\n        }\\n        baseToken.safeIncreaseAllowance(address(basePool), tokenLPAmount);\\n        basePool.removeLiquidityOneToken(tokenLPAmount, tokenIndexTo, minDy, deadline);\\n        IERC20 coinTo = basePool.getToken(tokenIndexTo);\\n        uint256 amountOut = coinTo.balanceOf(address(this));\\n        coinTo.safeTransfer(msg.sender, amountOut);\\n        return amountOut;\\n    }\\n\\n    function calculateSwapToBase(\\n        IRequiemStableSwap pool,\\n        IRequiemStableSwap basePool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        IERC20 baseToken = basePool.getLpToken();\\n        uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n        uint256 tokenLPAmount = dx;\\n        if (baseTokenIndex != tokenIndexFrom) {\\n            tokenLPAmount = pool.calculateSwap(tokenIndexFrom, baseTokenIndex, dx);\\n        }\\n        return basePool.calculateRemoveLiquidityOneToken(address(this), tokenLPAmount, tokenIndexTo);\\n    }\\n}\\n\",\"keccak256\":\"0x8ff067d1f1f9c71628a0dca56f118fb81c1b9e2f80ef957a2028a8b9f4a15bf6\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xa67a41e5fda599c131836b335224ff7a7b9ca413fd4e50eebf094010a92f2ed6\",\"license\":\"MIT\"},\"contracts/interfaces/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.13;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0b4b58556ab45ed60f0c1a71afcd654eb68d95abf3e8428b90db1ae9da2ed9e2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event TokenExchange(address indexed buyer, uint256 soldId, uint256 tokensSold, uint256 boughtId, uint256 tokensBought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 flashFee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getLpToken() external view returns (IERC20 lpToken);\\n\\n    function getA() external view returns (uint256);\\n\\n    function getAPrecise() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokens() external view returns (IERC20[] memory);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getTokenBalances() external view returns (uint256[] memory);\\n\\n    function getNumberOfTokens() external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function getAdminBalances() external view returns (uint256[] memory adminBalances);\\n\\n    function getAdminBalance(uint8 index) external view returns (uint256);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    // state modifying functions\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0x95d4a839cdc7330d7dde45912fbe94fae2e099b37dbab297f27512e934064986\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SAFE_ERC20_CALL_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf19e5c0648254052a70c105d5255f753e10b371308458b8001c264ae8b175d1e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613581806100206000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063643abb8611610076578063797018211161005b578063797018211461016d5780638a311c5714610180578063ff9693221461019357600080fd5b8063643abb861461014757806377269e291461015a57600080fd5b806324a5bf21116100a757806324a5bf211461010e5780633214b8c91461012157806338c789731461013457600080fd5b80630c8b2216146100c35780630d6307eb146100ed575b600080fd5b6100d66100d1366004612dec565b6101a6565b6040516100e4929190612e68565b60405180910390f35b6101006100fb366004612f63565b6103b8565b6040519081526020016100e4565b6100d661011c36600461304a565b610a77565b61010061012f3660046130ff565b611244565b610100610142366004613163565b611447565b610100610155366004612dec565b6118ad565b6101006101683660046131e8565b611b90565b61010061017b366004613286565b611d50565b61010061018e3660046130ff565b6124c6565b6101006101a1366004613163565b61277c565b6060806000846001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020d91906132d7565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918816906366c0bd2490602401602060405180830381865afa158015610259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027d91906132fb565b604051637c61e56160e01b8152306004820152602481018790529091506001600160a01b03881690637c61e56190604401600060405180830381865afa1580156102cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102f39190810190613318565b93506000848260ff168151811061030c5761030c61339e565b602002602001015190506000858360ff168151811061032d5761032d61339e565b6020908102919091010152604051637c61e56160e01b8152306004820152602481018290526001600160a01b03881690637c61e56190604401600060405180830381865afa158015610383573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103ab9190810190613318565b9350505050935093915050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041d91906132d7565b9050866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048191906133b4565b8551146104d55760405162461bcd60e51b815260206004820152601860248201527f696e76616c696442617365416d6f756e74734c656e677468000000000000000060448201526064015b60405180910390fd5b876001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610513573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053791906133b4565b8651146105865760405162461bcd60e51b815260206004820152601860248201527f696e76616c69644d657461416d6f756e74734c656e677468000000000000000060448201526064016104cc565b6000805b86518160ff161015610701576000878260ff16815181106105ad576105ad61339e565b6020026020010151905060008111156106ee5760405162415c3360e91b815260ff83166004820152600193506000906001600160a01b038c16906382b8660090602401602060405180830381865afa15801561060d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063191906132d7565b90506106486001600160a01b038216333085612b3f565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561068f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b391906133b4565b90506106c96001600160a01b0383168d83612bdd565b808a8560ff16815181106106df576106df61339e565b60200260200101818152505050505b50806106f9816133e3565b91505061058a565b50801561077e57604051634d49e87d60e01b81526001600160a01b03891690634d49e87d906107399089906000908990600401613403565b6020604051808303816000875af1158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c91906133b4565b505b60005b87518160ff1610156109155760405162415c3360e91b815260ff821660048201526000906001600160a01b038c16906382b8660090602401602060405180830381865afa1580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa91906132d7565b90506000898360ff16815181106108135761081361339e565b6020026020010151111561085d5761085d33308b8560ff168151811061083b5761083b61339e565b6020026020010151846001600160a01b0316612b3f909392919063ffffffff16565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156108a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c891906133b4565b90506108de6001600160a01b0383168d83612bdd565b808a8460ff16815181106108f4576108f461339e565b6020026020010181815250505050808061090d906133e3565b915050610781565b50604051634d49e87d60e01b81526001600160a01b038a1690634d49e87d90610946908a9089908990600401613403565b6020604051808303816000875af1158015610965573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098991906133b4565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156109d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f591906133b4565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0384169063a9059cbb906044016020604051808303816000875af1158015610a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a699190613428565b509998505050505050505050565b60608060008a6001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ade91906132d7565b905060008a6001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4491906132d7565b6040516323b872dd60e01b8152336004820152306024820152604481018c90529091506001600160a01b038316906323b872dd906064016020604051808303816000875af1158015610b9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbe9190613428565b50610bd36001600160a01b0383168d8c612bdd565b60405163031cd52b60e41b81526001600160a01b038d16906331cd52b090610c05908d908d908d908b90600401613445565b6000604051808303816000875af1158015610c24573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c4c9190810190613318565b506040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610c94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb891906133b4565b9050610cce6001600160a01b0383168d83612bdd565b60405163031cd52b60e41b81526001600160a01b038d16906331cd52b090610d009084908c908c908c90600401613445565b6000604051808303816000875af1158015610d1f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d479190810190613318565b508c6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daa91906133b4565b67ffffffffffffffff811115610dc257610dc2612e8d565b604051908082528060200260200182016040528015610deb578160200160208202803683370190505b50945060005b8d6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5391906133b4565b8160ff161015610fd35760008e6001600160a01b03166382b86600836040518263ffffffff1660e01b8152600401610e94919060ff91909116815260200190565b602060405180830381865afa158015610eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed591906132d7565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa158015610f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4091906133b4565b878360ff1681518110610f5557610f5561339e565b6020026020010181815250506000878360ff1681518110610f7857610f7861339e565b60200260200101511115610fc057610fc033888460ff1681518110610f9f57610f9f61339e565b6020026020010151836001600160a01b0316612cc19092919063ffffffff16565b5080610fcb816133e3565b915050610df1565b508b6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611012573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103691906133b4565b67ffffffffffffffff81111561104e5761104e612e8d565b604051908082528060200260200182016040528015611077578160200160208202803683370190505b50935060005b8c6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110df91906133b4565b8160ff1610156112335760405162415c3360e91b815260ff821660048201526000906001600160a01b038f16906382b8660090602401602060405180830381865afa158015611132573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115691906132d7565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa15801561119d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c191906133b4565b868360ff16815181106111d6576111d661339e565b6020026020010181815250506000868360ff16815181106111f9576111f961339e565b602002602001015111156112205761122033878460ff1681518110610f9f57610f9f61339e565b508061122b816133e3565b91505061107d565b505050509850989650505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a991906132d7565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd2490602401602060405180830381865afa1580156112f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131991906132fb565b90508360ff808316908816146113a65760405163a95b089f60e01b815260ff808916600483015283166024820152604481018690526001600160a01b038a169063a95b089f90606401602060405180830381865afa15801561137f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a391906133b4565b90505b6040517f98899f400000000000000000000000000000000000000000000000000000000081523060048201526024810182905260ff871660448201526001600160a01b038916906398899f40906064015b602060405180830381865afa158015611414573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143891906133b4565b93505050505b95945050505050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ac91906132d7565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918b16906366c0bd2490602401602060405180830381865afa1580156114f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151c91906132fb565b90506000896001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561155e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158291906133b4565b67ffffffffffffffff81111561159a5761159a612e8d565b6040519080825280602002602001820160405280156115c3578160200160208202803683370190505b50905086818a60ff16815181106115dc576115dc61339e565b602090810291909101015260405162415c3360e91b815260ff8a1660048201526000906001600160a01b038c16906382b8660090602401602060405180830381865afa158015611630573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165491906132d7565b905061166b6001600160a01b03821633308b612b3f565b61167f6001600160a01b0382168c8a612bdd565b604051634d49e87d60e01b81526000906001600160a01b038d1690634d49e87d906116b290869085908c90600401613403565b6020604051808303816000875af11580156116d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f591906133b4565b90508960ff168460ff16146117aa576117186001600160a01b0386168e83612bdd565b60405163bfd3956b60e01b815260ff80861660048301528b166024820152604481018290526064810189905230608482015260a481018890526001600160a01b038e169063bfd3956b9060c4016020604051808303816000875af1158015611784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a891906133b4565b505b60405162415c3360e91b815260ff8b1660048201526000906001600160a01b038f16906382b8660090602401602060405180830381865afa1580156117f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181791906132d7565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611861573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188591906133b4565b905061189b6001600160a01b0383163383612cc1565b9e9d5050505050505050505050505050565b600080846001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191291906133b4565b604051637c61e56160e01b8152306004820152602481018590529091506000906001600160a01b03871690637c61e56190604401600060405180830381865afa158015611963573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261198b9190810190613318565b905060008267ffffffffffffffff8111156119a8576119a8612e8d565b6040519080825280602002602001820160405280156119d1578160200160208202803683370190505b50905060005b838160ff161015611b145760405162415c3360e91b815260ff821660048201526000906001600160a01b038a16906382b8660090602401602060405180830381865afa158015611a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4f91906132d7565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918a16906366c0bd2490602401602060405180830381865afa158015611a9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abf91906132fb565b60ff169050848360ff1681518110611ad957611ad961339e565b6020026020010151848281518110611af357611af361339e565b60200260200101818152505050508080611b0c906133e3565b9150506119d7565b50604051637355940360e11b81526001600160a01b0387169063e6ab280690611b449084906001906004016134ab565b602060405180830381865afa158015611b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8591906133b4565b979650505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf591906132d7565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd2490602401602060405180830381865afa158015611c41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6591906132fb565b90506000876001600160a01b031663e6ab280687876040518363ffffffff1660e01b8152600401611c979291906134ab565b602060405180830381865afa158015611cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd891906133b4565b905080878360ff1681518110611cf057611cf061339e565b6020026020010151611d0291906134cf565b878360ff1681518110611d1757611d1761339e565b6020908102919091010152604051637355940360e11b81526001600160a01b038a169063e6ab2806906113f7908a9089906004016134ab565b600080866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db591906133b4565b90506000866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1b91906133b4565b9050866001600160a01b0316886001600160a01b03161415611e7f5760405162461bcd60e51b815260206004820152601160248201527f66726f6d506f6f6c203d20746f506f6f6c00000000000000000000000000000060448201526064016104cc565b808214611ece5760405162461bcd60e51b815260206004820152601960248201527f706f6f6c546f6b656e734c656e6774684d6973736d617463680000000000000060448201526064016104cc565b6000886001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3291906132d7565b90506000886001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9891906132d7565b905060008467ffffffffffffffff811115611fb557611fb5612e8d565b604051908082528060200260200182016040528015611fde578160200160208202803683370190505b50905060005b858160ff1610156120df5760405162415c3360e91b815260ff821660048201526000906001600160a01b038e16906382b8660090602401602060405180830381865afa158015612038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205c91906132d7565b6040516319b02f4960e21b81526001600160a01b038083166004830152919250908d16906366c0bd2490602401602060405180830381865afa1580156120a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ca91906132fb565b505080806120d7906133e3565b915050611fe4565b506040516323b872dd60e01b8152336004820152306024820152604481018a90526001600160a01b038416906323b872dd906064016020604051808303816000875af1158015612133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121579190613428565b5061216c6001600160a01b0384168c8b612bdd565b60405163031cd52b60e41b81526001600160a01b038c16906331cd52b09061219c908c9085908c906004016134e7565b6000604051808303816000875af11580156121bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121e39190810190613318565b5060008467ffffffffffffffff8111156121ff576121ff612e8d565b604051908082528060200260200182016040528015612228578160200160208202803683370190505b50905060005b858160ff1610156123615760405162415c3360e91b815260ff821660048201526000906001600160a01b038e16906382b8660090602401602060405180830381865afa158015612282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a691906132d7565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156122f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231491906133b4565b905061232a6001600160a01b0383168f83612bdd565b80848460ff16815181106123405761234061339e565b60200260200101818152505050508080612359906133e3565b91505061222e565b50604051634d49e87d60e01b81526001600160a01b038c1690634d49e87d906123929084908d908d90600401613403565b6020604051808303816000875af11580156123b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d591906133b4565b506040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561241d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244191906133b4565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0385169063a9059cbb906044016020604051808303816000875af1158015612491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b59190613428565b509c9b505050505050505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252b91906132d7565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd2490602401602060405180830381865afa158015612577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259b91906132fb565b90506000876001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260191906133b4565b67ffffffffffffffff81111561261957612619612e8d565b604051908082528060200260200182016040528015612642578160200160208202803683370190505b50905084818860ff168151811061265b5761265b61339e565b6020908102919091010152604051637355940360e11b81526000906001600160a01b038a169063e6ab2806906126989085906001906004016134ab565b602060405180830381865afa1580156126b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d991906133b4565b90508660ff168360ff1614156126f457935061143e92505050565b60405163a95b089f60e01b815260ff808516600483015288166024820152604481018290526001600160a01b038b169063a95b089f90606401602060405180830381865afa15801561274a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276e91906133b4565b9a9950505050505050505050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e191906132d7565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918b16906366c0bd2490602401602060405180830381865afa15801561282d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285191906132fb565b60405162415c3360e91b815260ff8a1660048201529091506000906001600160a01b038c16906382b8660090602401602060405180830381865afa15801561289d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c191906132d7565b90506128d86001600160a01b03821633308a612b3f565b8660ff838116908b161461298d576128fa6001600160a01b0383168d8a612bdd565b60405163bfd3956b60e01b815260ff808c16600483015284166024820152604481018990526000606482015230608482015260a481018790526001600160a01b038d169063bfd3956b9060c4016020604051808303816000875af1158015612966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298a91906133b4565b90505b6129a16001600160a01b0385168c83612bdd565b6040517f3e3a15600000000000000000000000000000000000000000000000000000000081526004810182905260ff8a16602482015260448101889052606481018790526001600160a01b038c1690633e3a1560906084016020604051808303816000875af1158015612a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3c91906133b4565b5060405162415c3360e91b815260ff8a1660048201526000906001600160a01b038d16906382b8660090602401602060405180830381865afa158015612a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aaa91906132d7565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1891906133b4565b9050612b2e6001600160a01b0383163383612cc1565b9d9c50505050505050505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052612bd79085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612cf6565b50505050565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6b91906133b4565b612c7591906134cf565b6040516001600160a01b038516602482015260448101829052909150612bd79085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401612b73565b6040516001600160a01b038316602482015260448101829052612cf190849063a9059cbb60e01b90606401612b73565b505050565b600080836001600160a01b031683604051612d119190613510565b6000604051808303816000865af19150503d8060008114612d4e576040519150601f19603f3d011682016040523d82523d6000602084013e612d53565b606091505b50915091506000821415612d6b573d6000803e3d6000fd5b80511580612d88575080806020019051810190612d889190613428565b612bd75760405162461bcd60e51b815260206004820152601660248201527f534146455f45524332305f43414c4c5f4641494c45440000000000000000000060448201526064016104cc565b6001600160a01b0381168114612de957600080fd5b50565b600080600060608486031215612e0157600080fd5b8335612e0c81612dd4565b92506020840135612e1c81612dd4565b929592945050506040919091013590565b600081518084526020808501945080840160005b83811015612e5d57815187529582019590820190600101612e41565b509495945050505050565b604081526000612e7b6040830185612e2d565b828103602084015261143e8185612e2d565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612ecc57612ecc612e8d565b604052919050565b600067ffffffffffffffff821115612eee57612eee612e8d565b5060051b60200190565b600082601f830112612f0957600080fd5b81356020612f1e612f1983612ed4565b612ea3565b82815260059290921b84018101918181019086841115612f3d57600080fd5b8286015b84811015612f585780358352918301918301612f41565b509695505050505050565b60008060008060008060c08789031215612f7c57600080fd5b8635612f8781612dd4565b95506020870135612f9781612dd4565b9450604087013567ffffffffffffffff80821115612fb457600080fd5b612fc08a838b01612ef8565b95506060890135915080821115612fd657600080fd5b50612fe389828a01612ef8565b9350506080870135915060a087013590509295509295509295565b60008083601f84011261301057600080fd5b50813567ffffffffffffffff81111561302857600080fd5b6020830191508360208260051b850101111561304357600080fd5b9250929050565b60008060008060008060008060c0898b03121561306657600080fd5b883561307181612dd4565b9750602089013561308181612dd4565b965060408901359550606089013567ffffffffffffffff808211156130a557600080fd5b6130b18c838d01612ffe565b909750955060808b01359150808211156130ca57600080fd5b506130d78b828c01612ffe565b999c989b50969995989497949560a00135949350505050565b60ff81168114612de957600080fd5b600080600080600060a0868803121561311757600080fd5b853561312281612dd4565b9450602086013561313281612dd4565b93506040860135613142816130f0565b92506060860135613152816130f0565b949793965091946080013592915050565b600080600080600080600060e0888a03121561317e57600080fd5b873561318981612dd4565b9650602088013561319981612dd4565b955060408801356131a9816130f0565b945060608801356131b9816130f0565b9699959850939660808101359560a0820135955060c0909101359350915050565b8015158114612de957600080fd5b600080600080600060a0868803121561320057600080fd5b853561320b81612dd4565b9450602086013561321b81612dd4565b9350604086013567ffffffffffffffff8082111561323857600080fd5b61324489838a01612ef8565b9450606088013591508082111561325a57600080fd5b5061326788828901612ef8565b9250506080860135613278816131da565b809150509295509295909350565b600080600080600060a0868803121561329e57600080fd5b85356132a981612dd4565b945060208601356132b981612dd4565b94979496505050506040830135926060810135926080909101359150565b6000602082840312156132e957600080fd5b81516132f481612dd4565b9392505050565b60006020828403121561330d57600080fd5b81516132f4816130f0565b6000602080838503121561332b57600080fd5b825167ffffffffffffffff81111561334257600080fd5b8301601f8101851361335357600080fd5b8051613361612f1982612ed4565b81815260059190911b8201830190838101908783111561338057600080fd5b928401925b82841015611b8557835182529284019290840190613385565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156133c657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8114156133fa576133fa6133cd565b60010192915050565b6060815260006134166060830186612e2d565b60208301949094525060400152919050565b60006020828403121561343a57600080fd5b81516132f4816131da565b8481526060602082015282606082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84111561348457600080fd5b8360051b808660808501376000908301608001908152604090920192909252949350505050565b6040815260006134be6040830185612e2d565b905082151560208301529392505050565b600082198211156134e2576134e26133cd565b500190565b8381526060602082015260006135006060830185612e2d565b9050826040830152949350505050565b6000825160005b818110156135315760208186018101518583015201613517565b81811115613540576000828501525b50919091019291505056fea2646970667358221220f49b534b68e505993894db472f2189a53f506e186f721027c22f2d53ad84852064736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c8063643abb8611610076578063797018211161005b578063797018211461016d5780638a311c5714610180578063ff9693221461019357600080fd5b8063643abb861461014757806377269e291461015a57600080fd5b806324a5bf21116100a757806324a5bf211461010e5780633214b8c91461012157806338c789731461013457600080fd5b80630c8b2216146100c35780630d6307eb146100ed575b600080fd5b6100d66100d1366004612dec565b6101a6565b6040516100e4929190612e68565b60405180910390f35b6101006100fb366004612f63565b6103b8565b6040519081526020016100e4565b6100d661011c36600461304a565b610a77565b61010061012f3660046130ff565b611244565b610100610142366004613163565b611447565b610100610155366004612dec565b6118ad565b6101006101683660046131e8565b611b90565b61010061017b366004613286565b611d50565b61010061018e3660046130ff565b6124c6565b6101006101a1366004613163565b61277c565b6060806000846001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020d91906132d7565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918816906366c0bd2490602401602060405180830381865afa158015610259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027d91906132fb565b604051637c61e56160e01b8152306004820152602481018790529091506001600160a01b03881690637c61e56190604401600060405180830381865afa1580156102cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102f39190810190613318565b93506000848260ff168151811061030c5761030c61339e565b602002602001015190506000858360ff168151811061032d5761032d61339e565b6020908102919091010152604051637c61e56160e01b8152306004820152602481018290526001600160a01b03881690637c61e56190604401600060405180830381865afa158015610383573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103ab9190810190613318565b9350505050935093915050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041d91906132d7565b9050866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048191906133b4565b8551146104d55760405162461bcd60e51b815260206004820152601860248201527f696e76616c696442617365416d6f756e74734c656e677468000000000000000060448201526064015b60405180910390fd5b876001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610513573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053791906133b4565b8651146105865760405162461bcd60e51b815260206004820152601860248201527f696e76616c69644d657461416d6f756e74734c656e677468000000000000000060448201526064016104cc565b6000805b86518160ff161015610701576000878260ff16815181106105ad576105ad61339e565b6020026020010151905060008111156106ee5760405162415c3360e91b815260ff83166004820152600193506000906001600160a01b038c16906382b8660090602401602060405180830381865afa15801561060d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063191906132d7565b90506106486001600160a01b038216333085612b3f565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561068f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b391906133b4565b90506106c96001600160a01b0383168d83612bdd565b808a8560ff16815181106106df576106df61339e565b60200260200101818152505050505b50806106f9816133e3565b91505061058a565b50801561077e57604051634d49e87d60e01b81526001600160a01b03891690634d49e87d906107399089906000908990600401613403565b6020604051808303816000875af1158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c91906133b4565b505b60005b87518160ff1610156109155760405162415c3360e91b815260ff821660048201526000906001600160a01b038c16906382b8660090602401602060405180830381865afa1580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa91906132d7565b90506000898360ff16815181106108135761081361339e565b6020026020010151111561085d5761085d33308b8560ff168151811061083b5761083b61339e565b6020026020010151846001600160a01b0316612b3f909392919063ffffffff16565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156108a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c891906133b4565b90506108de6001600160a01b0383168d83612bdd565b808a8460ff16815181106108f4576108f461339e565b6020026020010181815250505050808061090d906133e3565b915050610781565b50604051634d49e87d60e01b81526001600160a01b038a1690634d49e87d90610946908a9089908990600401613403565b6020604051808303816000875af1158015610965573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098991906133b4565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156109d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f591906133b4565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0384169063a9059cbb906044016020604051808303816000875af1158015610a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a699190613428565b509998505050505050505050565b60608060008a6001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ade91906132d7565b905060008a6001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4491906132d7565b6040516323b872dd60e01b8152336004820152306024820152604481018c90529091506001600160a01b038316906323b872dd906064016020604051808303816000875af1158015610b9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbe9190613428565b50610bd36001600160a01b0383168d8c612bdd565b60405163031cd52b60e41b81526001600160a01b038d16906331cd52b090610c05908d908d908d908b90600401613445565b6000604051808303816000875af1158015610c24573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c4c9190810190613318565b506040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610c94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb891906133b4565b9050610cce6001600160a01b0383168d83612bdd565b60405163031cd52b60e41b81526001600160a01b038d16906331cd52b090610d009084908c908c908c90600401613445565b6000604051808303816000875af1158015610d1f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d479190810190613318565b508c6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daa91906133b4565b67ffffffffffffffff811115610dc257610dc2612e8d565b604051908082528060200260200182016040528015610deb578160200160208202803683370190505b50945060005b8d6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5391906133b4565b8160ff161015610fd35760008e6001600160a01b03166382b86600836040518263ffffffff1660e01b8152600401610e94919060ff91909116815260200190565b602060405180830381865afa158015610eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed591906132d7565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa158015610f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4091906133b4565b878360ff1681518110610f5557610f5561339e565b6020026020010181815250506000878360ff1681518110610f7857610f7861339e565b60200260200101511115610fc057610fc033888460ff1681518110610f9f57610f9f61339e565b6020026020010151836001600160a01b0316612cc19092919063ffffffff16565b5080610fcb816133e3565b915050610df1565b508b6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611012573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103691906133b4565b67ffffffffffffffff81111561104e5761104e612e8d565b604051908082528060200260200182016040528015611077578160200160208202803683370190505b50935060005b8c6001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110df91906133b4565b8160ff1610156112335760405162415c3360e91b815260ff821660048201526000906001600160a01b038f16906382b8660090602401602060405180830381865afa158015611132573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115691906132d7565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa15801561119d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c191906133b4565b868360ff16815181106111d6576111d661339e565b6020026020010181815250506000868360ff16815181106111f9576111f961339e565b602002602001015111156112205761122033878460ff1681518110610f9f57610f9f61339e565b508061122b816133e3565b91505061107d565b505050509850989650505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a991906132d7565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd2490602401602060405180830381865afa1580156112f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131991906132fb565b90508360ff808316908816146113a65760405163a95b089f60e01b815260ff808916600483015283166024820152604481018690526001600160a01b038a169063a95b089f90606401602060405180830381865afa15801561137f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a391906133b4565b90505b6040517f98899f400000000000000000000000000000000000000000000000000000000081523060048201526024810182905260ff871660448201526001600160a01b038916906398899f40906064015b602060405180830381865afa158015611414573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143891906133b4565b93505050505b95945050505050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ac91906132d7565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918b16906366c0bd2490602401602060405180830381865afa1580156114f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151c91906132fb565b90506000896001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561155e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158291906133b4565b67ffffffffffffffff81111561159a5761159a612e8d565b6040519080825280602002602001820160405280156115c3578160200160208202803683370190505b50905086818a60ff16815181106115dc576115dc61339e565b602090810291909101015260405162415c3360e91b815260ff8a1660048201526000906001600160a01b038c16906382b8660090602401602060405180830381865afa158015611630573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165491906132d7565b905061166b6001600160a01b03821633308b612b3f565b61167f6001600160a01b0382168c8a612bdd565b604051634d49e87d60e01b81526000906001600160a01b038d1690634d49e87d906116b290869085908c90600401613403565b6020604051808303816000875af11580156116d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f591906133b4565b90508960ff168460ff16146117aa576117186001600160a01b0386168e83612bdd565b60405163bfd3956b60e01b815260ff80861660048301528b166024820152604481018290526064810189905230608482015260a481018890526001600160a01b038e169063bfd3956b9060c4016020604051808303816000875af1158015611784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a891906133b4565b505b60405162415c3360e91b815260ff8b1660048201526000906001600160a01b038f16906382b8660090602401602060405180830381865afa1580156117f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181791906132d7565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611861573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188591906133b4565b905061189b6001600160a01b0383163383612cc1565b9e9d5050505050505050505050505050565b600080846001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191291906133b4565b604051637c61e56160e01b8152306004820152602481018590529091506000906001600160a01b03871690637c61e56190604401600060405180830381865afa158015611963573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261198b9190810190613318565b905060008267ffffffffffffffff8111156119a8576119a8612e8d565b6040519080825280602002602001820160405280156119d1578160200160208202803683370190505b50905060005b838160ff161015611b145760405162415c3360e91b815260ff821660048201526000906001600160a01b038a16906382b8660090602401602060405180830381865afa158015611a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4f91906132d7565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918a16906366c0bd2490602401602060405180830381865afa158015611a9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611abf91906132fb565b60ff169050848360ff1681518110611ad957611ad961339e565b6020026020010151848281518110611af357611af361339e565b60200260200101818152505050508080611b0c906133e3565b9150506119d7565b50604051637355940360e11b81526001600160a01b0387169063e6ab280690611b449084906001906004016134ab565b602060405180830381865afa158015611b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8591906133b4565b979650505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf591906132d7565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd2490602401602060405180830381865afa158015611c41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6591906132fb565b90506000876001600160a01b031663e6ab280687876040518363ffffffff1660e01b8152600401611c979291906134ab565b602060405180830381865afa158015611cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd891906133b4565b905080878360ff1681518110611cf057611cf061339e565b6020026020010151611d0291906134cf565b878360ff1681518110611d1757611d1761339e565b6020908102919091010152604051637355940360e11b81526001600160a01b038a169063e6ab2806906113f7908a9089906004016134ab565b600080866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db591906133b4565b90506000866001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1b91906133b4565b9050866001600160a01b0316886001600160a01b03161415611e7f5760405162461bcd60e51b815260206004820152601160248201527f66726f6d506f6f6c203d20746f506f6f6c00000000000000000000000000000060448201526064016104cc565b808214611ece5760405162461bcd60e51b815260206004820152601960248201527f706f6f6c546f6b656e734c656e6774684d6973736d617463680000000000000060448201526064016104cc565b6000886001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3291906132d7565b90506000886001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f9891906132d7565b905060008467ffffffffffffffff811115611fb557611fb5612e8d565b604051908082528060200260200182016040528015611fde578160200160208202803683370190505b50905060005b858160ff1610156120df5760405162415c3360e91b815260ff821660048201526000906001600160a01b038e16906382b8660090602401602060405180830381865afa158015612038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205c91906132d7565b6040516319b02f4960e21b81526001600160a01b038083166004830152919250908d16906366c0bd2490602401602060405180830381865afa1580156120a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ca91906132fb565b505080806120d7906133e3565b915050611fe4565b506040516323b872dd60e01b8152336004820152306024820152604481018a90526001600160a01b038416906323b872dd906064016020604051808303816000875af1158015612133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121579190613428565b5061216c6001600160a01b0384168c8b612bdd565b60405163031cd52b60e41b81526001600160a01b038c16906331cd52b09061219c908c9085908c906004016134e7565b6000604051808303816000875af11580156121bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121e39190810190613318565b5060008467ffffffffffffffff8111156121ff576121ff612e8d565b604051908082528060200260200182016040528015612228578160200160208202803683370190505b50905060005b858160ff1610156123615760405162415c3360e91b815260ff821660048201526000906001600160a01b038e16906382b8660090602401602060405180830381865afa158015612282573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a691906132d7565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156122f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231491906133b4565b905061232a6001600160a01b0383168f83612bdd565b80848460ff16815181106123405761234061339e565b60200260200101818152505050508080612359906133e3565b91505061222e565b50604051634d49e87d60e01b81526001600160a01b038c1690634d49e87d906123929084908d908d90600401613403565b6020604051808303816000875af11580156123b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d591906133b4565b506040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561241d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244191906133b4565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0385169063a9059cbb906044016020604051808303816000875af1158015612491573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b59190613428565b509c9b505050505050505050505050565b600080856001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612507573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252b91906132d7565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918916906366c0bd2490602401602060405180830381865afa158015612577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259b91906132fb565b90506000876001600160a01b031663efeecb516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260191906133b4565b67ffffffffffffffff81111561261957612619612e8d565b604051908082528060200260200182016040528015612642578160200160208202803683370190505b50905084818860ff168151811061265b5761265b61339e565b6020908102919091010152604051637355940360e11b81526000906001600160a01b038a169063e6ab2806906126989085906001906004016134ab565b602060405180830381865afa1580156126b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d991906133b4565b90508660ff168360ff1614156126f457935061143e92505050565b60405163a95b089f60e01b815260ff808516600483015288166024820152604481018290526001600160a01b038b169063a95b089f90606401602060405180830381865afa15801561274a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276e91906133b4565b9a9950505050505050505050565b600080876001600160a01b0316638214f5a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e191906132d7565b6040516319b02f4960e21b81526001600160a01b0380831660048301529192506000918b16906366c0bd2490602401602060405180830381865afa15801561282d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285191906132fb565b60405162415c3360e91b815260ff8a1660048201529091506000906001600160a01b038c16906382b8660090602401602060405180830381865afa15801561289d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c191906132d7565b90506128d86001600160a01b03821633308a612b3f565b8660ff838116908b161461298d576128fa6001600160a01b0383168d8a612bdd565b60405163bfd3956b60e01b815260ff808c16600483015284166024820152604481018990526000606482015230608482015260a481018790526001600160a01b038d169063bfd3956b9060c4016020604051808303816000875af1158015612966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298a91906133b4565b90505b6129a16001600160a01b0385168c83612bdd565b6040517f3e3a15600000000000000000000000000000000000000000000000000000000081526004810182905260ff8a16602482015260448101889052606481018790526001600160a01b038c1690633e3a1560906084016020604051808303816000875af1158015612a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3c91906133b4565b5060405162415c3360e91b815260ff8a1660048201526000906001600160a01b038d16906382b8660090602401602060405180830381865afa158015612a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aaa91906132d7565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1891906133b4565b9050612b2e6001600160a01b0383163383612cc1565b9d9c50505050505050505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052612bd79085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612cf6565b50505050565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6b91906133b4565b612c7591906134cf565b6040516001600160a01b038516602482015260448101829052909150612bd79085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401612b73565b6040516001600160a01b038316602482015260448101829052612cf190849063a9059cbb60e01b90606401612b73565b505050565b600080836001600160a01b031683604051612d119190613510565b6000604051808303816000865af19150503d8060008114612d4e576040519150601f19603f3d011682016040523d82523d6000602084013e612d53565b606091505b50915091506000821415612d6b573d6000803e3d6000fd5b80511580612d88575080806020019051810190612d889190613428565b612bd75760405162461bcd60e51b815260206004820152601660248201527f534146455f45524332305f43414c4c5f4641494c45440000000000000000000060448201526064016104cc565b6001600160a01b0381168114612de957600080fd5b50565b600080600060608486031215612e0157600080fd5b8335612e0c81612dd4565b92506020840135612e1c81612dd4565b929592945050506040919091013590565b600081518084526020808501945080840160005b83811015612e5d57815187529582019590820190600101612e41565b509495945050505050565b604081526000612e7b6040830185612e2d565b828103602084015261143e8185612e2d565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612ecc57612ecc612e8d565b604052919050565b600067ffffffffffffffff821115612eee57612eee612e8d565b5060051b60200190565b600082601f830112612f0957600080fd5b81356020612f1e612f1983612ed4565b612ea3565b82815260059290921b84018101918181019086841115612f3d57600080fd5b8286015b84811015612f585780358352918301918301612f41565b509695505050505050565b60008060008060008060c08789031215612f7c57600080fd5b8635612f8781612dd4565b95506020870135612f9781612dd4565b9450604087013567ffffffffffffffff80821115612fb457600080fd5b612fc08a838b01612ef8565b95506060890135915080821115612fd657600080fd5b50612fe389828a01612ef8565b9350506080870135915060a087013590509295509295509295565b60008083601f84011261301057600080fd5b50813567ffffffffffffffff81111561302857600080fd5b6020830191508360208260051b850101111561304357600080fd5b9250929050565b60008060008060008060008060c0898b03121561306657600080fd5b883561307181612dd4565b9750602089013561308181612dd4565b965060408901359550606089013567ffffffffffffffff808211156130a557600080fd5b6130b18c838d01612ffe565b909750955060808b01359150808211156130ca57600080fd5b506130d78b828c01612ffe565b999c989b50969995989497949560a00135949350505050565b60ff81168114612de957600080fd5b600080600080600060a0868803121561311757600080fd5b853561312281612dd4565b9450602086013561313281612dd4565b93506040860135613142816130f0565b92506060860135613152816130f0565b949793965091946080013592915050565b600080600080600080600060e0888a03121561317e57600080fd5b873561318981612dd4565b9650602088013561319981612dd4565b955060408801356131a9816130f0565b945060608801356131b9816130f0565b9699959850939660808101359560a0820135955060c0909101359350915050565b8015158114612de957600080fd5b600080600080600060a0868803121561320057600080fd5b853561320b81612dd4565b9450602086013561321b81612dd4565b9350604086013567ffffffffffffffff8082111561323857600080fd5b61324489838a01612ef8565b9450606088013591508082111561325a57600080fd5b5061326788828901612ef8565b9250506080860135613278816131da565b809150509295509295909350565b600080600080600060a0868803121561329e57600080fd5b85356132a981612dd4565b945060208601356132b981612dd4565b94979496505050506040830135926060810135926080909101359150565b6000602082840312156132e957600080fd5b81516132f481612dd4565b9392505050565b60006020828403121561330d57600080fd5b81516132f4816130f0565b6000602080838503121561332b57600080fd5b825167ffffffffffffffff81111561334257600080fd5b8301601f8101851361335357600080fd5b8051613361612f1982612ed4565b81815260059190911b8201830190838101908783111561338057600080fd5b928401925b82841015611b8557835182529284019290840190613385565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156133c657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8114156133fa576133fa6133cd565b60010192915050565b6060815260006134166060830186612e2d565b60208301949094525060400152919050565b60006020828403121561343a57600080fd5b81516132f4816131da565b8481526060602082015282606082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84111561348457600080fd5b8360051b808660808501376000908301608001908152604090920192909252949350505050565b6040815260006134be6040830185612e2d565b905082151560208301529392505050565b600082198211156134e2576134e26133cd565b500190565b8381526060602082015260006135006060830185612e2d565b9050826040830152949350505050565b6000825160005b818110156135315760208186018101518583015201613517565b81811115613540576000828501525b50919091019291505056fea2646970667358221220f49b534b68e505993894db472f2189a53f506e186f721027c22f2d53ad84852064736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}