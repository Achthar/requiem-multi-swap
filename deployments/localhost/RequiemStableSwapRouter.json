{
  "address": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
  "abi": [],
  "transactionHash": "0x5bbe1ca5eb051b2bd896e88ed529ad43bd39329cd1bca5e8673f9b244a40e322",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
    "transactionIndex": 0,
    "gasUsed": "67066",
    "logsBloom": "0x
    "blockHash": "0xaf340a19cf19005be1967c3c7d2644262decfbc1d623b748a0363627d0d67246",
    "transactionHash": "0x5bbe1ca5eb051b2bd896e88ed529ad43bd39329cd1bca5e8673f9b244a40e322",
    "logs": [],
    "blockNumber": 31,
    "cumulativeGasUsed": "67066",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e31106bf6767ae2c62bdc2a46f33a8e8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemStableSwapRouter.sol\":\"RequiemStableSwapRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999999},\"remappings\":[]},\"sources\":{\"contracts/RequiemStableSwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/IRequiemStableSwap.sol\\\";\\nimport \\\"./interfaces/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\nusing SafeERC20 for IERC20 global;\\n\\n// solhint-disable not-rely-on-time, var-name-mixedcase, max-line-length, reason-string\\n\\ncontract RequiemStableSwapRouter {\\n\\n    // function calculateConvert(\\n    //     IRequiemStableSwap fromPool,\\n    //     IRequiemStableSwap toPool,\\n    //     uint256 amount\\n    // ) external view returns (uint256) {\\n    //     uint256 fromPoolLength = fromPool.getNumberOfTokens();\\n    //     uint256[] memory amounts = fromPool.calculateRemoveLiquidity(address(this), amount);\\n    //     uint256[] memory meta_amounts = new uint256[](fromPoolLength);\\n    //     for (uint8 i = 0; i < fromPoolLength; i++) {\\n    //         IERC20 fromCoin = fromPool.getToken(i);\\n    //         uint256 toCoinIndex = toPool.getTokenIndex(address(fromCoin));\\n    //         meta_amounts[toCoinIndex] = amounts[i];\\n    //     }\\n    //     return toPool.calculateTokenAmount(meta_amounts, true);\\n    // }\\n\\n    // function convert(\\n    //     IRequiemStableSwap fromPool,\\n    //     IRequiemStableSwap toPool,\\n    //     uint256 amount,\\n    //     uint256 minToMint,\\n    //     uint256 deadline\\n    // ) external returns (uint256) {\\n    //     uint256 fromPoolLength = fromPool.getNumberOfTokens();\\n    //     uint256 toPoolLength = toPool.getNumberOfTokens();\\n    //     require(address(fromPool) != address(toPool), \\\"fromPool = toPool\\\");\\n    //     require(fromPoolLength == toPoolLength, \\\"poolTokensLengthMissmatch\\\");\\n    //     IERC20 fromToken = fromPool.getLpToken();\\n    //     IERC20 toToken = toPool.getLpToken();\\n    //     uint256[] memory min_amounts = new uint256[](fromPoolLength);\\n    //     // validate token\\n    //     for (uint8 i = 0; i < fromPoolLength; i++) {\\n    //         IERC20 coin = fromPool.getToken(i);\\n    //         toPool.getTokenIndex(address(coin));\\n    //     }\\n    //     fromToken.transferFrom(msg.sender, address(this), amount);\\n    //     fromToken.safeIncreaseAllowance(address(fromPool), amount);\\n    //     fromPool.removeLiquidity(amount, min_amounts, deadline);\\n\\n    //     uint256[] memory meta_amounts = new uint256[](toPoolLength);\\n\\n    //     for (uint8 i = 0; i < toPoolLength; i++) {\\n    //         IERC20 coin = toPool.getToken(i);\\n    //         uint256 addBalance = coin.balanceOf(address(this));\\n    //         coin.safeIncreaseAllowance(address(toPool), addBalance);\\n    //         meta_amounts[i] = addBalance;\\n    //     }\\n    //     toPool.addLiquidity(meta_amounts, minToMint, deadline);\\n\\n    //     uint256 lpAmount = toToken.balanceOf(address(this));\\n    //     toToken.transfer(msg.sender, lpAmount);\\n    //     return lpAmount;\\n    // }\\n\\n    // function addLiquidity(\\n    //     IRequiemStableSwap pool,\\n    //     IRequiemStableSwap basePool,\\n    //     uint256[] memory meta_amounts,\\n    //     uint256[] memory base_amounts,\\n    //     uint256 minToMint,\\n    //     uint256 deadline\\n    // ) external returns (uint256) {\\n    //     IERC20 token = IERC20(pool.getLpToken());\\n    //     require(base_amounts.length == basePool.getNumberOfTokens(), \\\"invalidBaseAmountsLength\\\");\\n    //     require(meta_amounts.length == pool.getNumberOfTokens(), \\\"invalidMetaAmountsLength\\\");\\n    //     bool deposit_base = false;\\n    //     for (uint8 i = 0; i < base_amounts.length; i++) {\\n    //         uint256 amount = base_amounts[i];\\n    //         if (amount > 0) {\\n    //             deposit_base = true;\\n    //             IERC20 coin = basePool.getToken(i);\\n    //             coin.safeTransferFrom(msg.sender, address(this), amount);\\n    //             uint256 transferred = coin.balanceOf(address(this));\\n    //             coin.safeIncreaseAllowance(address(basePool), transferred);\\n    //             base_amounts[i] = transferred;\\n    //         }\\n    //     }\\n    //     if (deposit_base) {\\n    //         basePool.addLiquidity(base_amounts, 0, deadline);\\n    //     }\\n\\n    //     for (uint8 i = 0; i < meta_amounts.length; i++) {\\n    //         IERC20 coin = pool.getToken(i);\\n    //         if (meta_amounts[i] > 0) {\\n    //             coin.safeTransferFrom(msg.sender, address(this), meta_amounts[i]);\\n    //         }\\n    //         uint256 transferred = coin.balanceOf(address(this));\\n    //         coin.safeIncreaseAllowance(address(pool), transferred);\\n    //         meta_amounts[i] = transferred;\\n    //     }\\n    //     pool.addLiquidity(meta_amounts, minToMint, deadline);\\n    //     uint256 lpAmount = token.balanceOf(address(this));\\n    //     token.transfer(msg.sender, lpAmount);\\n    //     return lpAmount;\\n    // }\\n\\n    // function removeLiquidity(\\n    //     IRequiemStableSwap pool,\\n    //     IRequiemStableSwap basePool,\\n    //     uint256 _amount,\\n    //     uint256[] calldata min_amounts_meta,\\n    //     uint256[] calldata min_amounts_base,\\n    //     uint256 deadline\\n    // ) external returns (uint256[] memory amounts, uint256[] memory base_amounts) {\\n    //     IERC20 token = pool.getLpToken();\\n    //     IERC20 baseToken = basePool.getLpToken();\\n    //     token.transferFrom(msg.sender, address(this), _amount);\\n    //     token.safeIncreaseAllowance(address(pool), _amount);\\n    //     pool.removeLiquidity(_amount, min_amounts_meta, deadline);\\n    //     uint256 _base_amount = baseToken.balanceOf(address(this));\\n    //     baseToken.safeIncreaseAllowance(address(basePool), _base_amount);\\n\\n    //     basePool.removeLiquidity(_base_amount, min_amounts_base, deadline);\\n    //     // Transfer all coins out\\n    //     amounts = new uint256[](pool.getNumberOfTokens());\\n    //     for (uint8 i = 0; i < pool.getNumberOfTokens(); i++) {\\n    //         IERC20 coin = pool.getToken(i);\\n    //         amounts[i] = coin.balanceOf(address(this));\\n    //         if (amounts[i] > 0) {\\n    //             coin.safeTransfer(msg.sender, amounts[i]);\\n    //         }\\n    //     }\\n\\n    //     base_amounts = new uint256[](basePool.getNumberOfTokens());\\n    //     for (uint8 i = 0; i < basePool.getNumberOfTokens(); i++) {\\n    //         IERC20 coin = basePool.getToken(i);\\n    //         base_amounts[i] = coin.balanceOf(address(this));\\n    //         if (base_amounts[i] > 0) {\\n    //             coin.safeTransfer(msg.sender, base_amounts[i]);\\n    //         }\\n    //     }\\n    // }\\n\\n    // function calculateTokenAmount(\\n    //     IRequiemStableSwap pool,\\n    //     IRequiemStableSwap basePool,\\n    //     uint256[] memory meta_amounts,\\n    //     uint256[] memory base_amounts,\\n    //     bool is_deposit\\n    // ) external view returns (uint256) {\\n    //     IERC20 baseToken = basePool.getLpToken();\\n    //     uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n    //     uint256 _base_tokens = basePool.calculateTokenAmount(base_amounts, is_deposit);\\n    //     meta_amounts[baseTokenIndex] = meta_amounts[baseTokenIndex] + _base_tokens;\\n    //     return pool.calculateTokenAmount(meta_amounts, is_deposit);\\n    // }\\n\\n    // function calculateRemoveLiquidity(\\n    //     IRequiemStableSwap pool,\\n    //     IRequiemStableSwap basePool,\\n    //     uint256 amount\\n    // ) external view returns (uint256[] memory meta_amounts, uint256[] memory base_amounts) {\\n    //     IERC20 baseToken = basePool.getLpToken();\\n    //     uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n    //     meta_amounts = pool.calculateRemoveLiquidity(address(this), amount);\\n    //     uint256 lpAmount = meta_amounts[baseTokenIndex];\\n    //     meta_amounts[baseTokenIndex] = 0;\\n    //     base_amounts = basePool.calculateRemoveLiquidity(address(this), lpAmount);\\n    // }\\n\\n    // function swapFromBase(\\n    //     IRequiemStableSwap pool,\\n    //     IRequiemStableSwap basePool,\\n    //     uint8 tokenIndexFrom,\\n    //     uint8 tokenIndexTo,\\n    //     uint256 dx,\\n    //     uint256 minDy,\\n    //     uint256 deadline\\n    // ) external returns (uint256) {\\n    //     IERC20 baseToken = basePool.getLpToken();\\n    //     uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n    //     uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n    //     base_amounts[tokenIndexFrom] = dx;\\n    //     IERC20 coin = basePool.getToken(tokenIndexFrom);\\n    //     coin.safeTransferFrom(msg.sender, address(this), dx);\\n    //     coin.safeIncreaseAllowance(address(basePool), dx);\\n    //     uint256 baseLpAmount = basePool.addLiquidity(base_amounts, 0, deadline);\\n    //     if (baseTokenIndex != tokenIndexTo) {\\n    //         baseToken.safeIncreaseAllowance(address(pool), baseLpAmount);\\n    //         pool.swap(baseTokenIndex, tokenIndexTo, baseLpAmount, minDy, address(this),deadline);\\n    //     }\\n    //     IERC20 coinTo = pool.getToken(tokenIndexTo);\\n    //     uint256 amountOut = coinTo.balanceOf(address(this));\\n    //     coinTo.safeTransfer(msg.sender, amountOut);\\n    //     return amountOut;\\n    // }\\n\\n    // function calculateSwapFromBase(\\n    //     IRequiemStableSwap pool,\\n    //     IRequiemStableSwap basePool,\\n    //     uint8 tokenIndexFrom,\\n    //     uint8 tokenIndexTo,\\n    //     uint256 dx\\n    // ) external view returns (uint256) {\\n    //     IERC20 baseToken = basePool.getLpToken();\\n    //     uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n    //     uint256[] memory base_amounts = new uint256[](basePool.getNumberOfTokens());\\n    //     base_amounts[tokenIndexFrom] = dx;\\n    //     uint256 baseLpAmount = basePool.calculateTokenAmount(base_amounts, true);\\n    //     if (baseTokenIndex == tokenIndexTo) {\\n    //         return baseLpAmount;\\n    //     }\\n    //     return pool.calculateSwap(baseTokenIndex, tokenIndexTo, baseLpAmount);\\n    // }\\n\\n    // function swapToBase(\\n    //     IRequiemStableSwap pool,\\n    //     IRequiemStableSwap basePool,\\n    //     uint8 tokenIndexFrom,\\n    //     uint8 tokenIndexTo,\\n    //     uint256 dx,\\n    //     uint256 minDy,\\n    //     uint256 deadline\\n    // ) external returns (uint256) {\\n    //     IERC20 baseToken = basePool.getLpToken();\\n    //     uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n    //     IERC20 coin = pool.getToken(tokenIndexFrom);\\n    //     coin.safeTransferFrom(msg.sender, address(this), dx);\\n    //     uint256 tokenLPAmount = dx;\\n    //     if (baseTokenIndex != tokenIndexFrom) {\\n    //         coin.safeIncreaseAllowance(address(pool), dx);\\n    //         tokenLPAmount = pool.swap(tokenIndexFrom, baseTokenIndex, dx, 0,address(this), deadline);\\n    //     }\\n    //     baseToken.safeIncreaseAllowance(address(basePool), tokenLPAmount);\\n    //     basePool.removeLiquidityOneToken(tokenLPAmount, tokenIndexTo, minDy, deadline);\\n    //     IERC20 coinTo = basePool.getToken(tokenIndexTo);\\n    //     uint256 amountOut = coinTo.balanceOf(address(this));\\n    //     coinTo.safeTransfer(msg.sender, amountOut);\\n    //     return amountOut;\\n    // }\\n\\n    // function calculateSwapToBase(\\n    //     IRequiemStableSwap pool,\\n    //     IRequiemStableSwap basePool,\\n    //     uint8 tokenIndexFrom,\\n    //     uint8 tokenIndexTo,\\n    //     uint256 dx\\n    // ) external view returns (uint256) {\\n    //     IERC20 baseToken = basePool.getLpToken();\\n    //     uint8 baseTokenIndex = pool.getTokenIndex(address(baseToken));\\n    //     uint256 tokenLPAmount = dx;\\n    //     if (baseTokenIndex != tokenIndexFrom) {\\n    //         tokenLPAmount = pool.calculateSwap(tokenIndexFrom, baseTokenIndex, dx);\\n    //     }\\n    //     return basePool.calculateRemoveLiquidityOneToken(address(this), tokenLPAmount, tokenIndexTo);\\n    // }\\n}\\n\",\"keccak256\":\"0xd08ccf9c5f4ef1e4d410a496f28c5c741520cf65579f90cbd50bd0407b558407\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xab442747ba7fbbe95ce3e26fac7ff53c7ed1f2ddb11ee665905bcd85593ac42e\",\"license\":\"MIT\"},\"contracts/interfaces/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.13;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdc804530ff03ec48ca5792c4c18a0ed0950c18f6f3cf31d8b6be25d5de492b66\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IRequiemStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"./ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n\\ninterface IRequiemStableSwap {\\n    /// EVENTS\\n    event AddLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event TokenExchange(address indexed buyer, uint256 soldId, uint256 tokensSold, uint256 boughtId, uint256 tokensBought);\\n\\n    event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 tokenSupply);\\n\\n    event RemoveLiquidityOne(address indexed provider, uint256 tokenIndex, uint256 tokenAmount, uint256 coinAmount);\\n\\n    event RemoveLiquidityImbalance(address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 tokenSupply);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    event StopRampA(uint256 A, uint256 timestamp);\\n\\n    event NewFee(uint256 fee, uint256 flashFee, uint256 adminFee, uint256 withdrawFee);\\n\\n    event CollectProtocolFee(address token, uint256 amount);\\n\\n    event FeeControllerChanged(address newController);\\n\\n    event FeeDistributorChanged(address newController);\\n\\n    // pool data view functions\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    function calculateCurrentWithdrawFee(address account) external view returns (uint256);\\n\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount) external;\\n}\\n\",\"keccak256\":\"0xbae15b6941fabfc280c110c65d6bbca64e29eb5144d79d1c0ffb9d539d577249\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interfaces/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SAFE_ERC20_CALL_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe6c94e57fa5a447d7a1a5063122a99751b7072ce6de3ae1a14594d525daaa401\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212200a3e62754bf0c8750d36e265f3231015389b0e2e2e4126e15ba8595ca24b389e64736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600080fdfea26469706673582212200a3e62754bf0c8750d36e265f3231015389b0e2e2e4126e15ba8595ca24b389e64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}